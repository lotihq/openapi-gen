import type * as HttpClient from "@effect/platform/HttpClient"
import * as HttpClientError from "@effect/platform/HttpClientError"
import * as HttpClientRequest from "@effect/platform/HttpClientRequest"
import * as HttpClientResponse from "@effect/platform/HttpClientResponse"
import * as Data from "effect/Data"
import * as Effect from "effect/Effect"
import type { ParseError } from "effect/ParseResult"
import * as S from "effect/Schema"


const eraseSchemaReq = <I, A, R>(schema: S.Schema<A, I, R>): S.Schema<A, I, never> => schema as any

export class AccountControllerGetCurrentAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AccountDataType extends S.Literal("Account") {}

export class RedactedData extends S.Class<RedactedData>("RedactedData")({
  /**
* Fields removed from result
*/
"fields": S.Array(S.String),
  /**
* Reason for redaction
*/
"message": S.String
}) {}

export class LinkObject extends S.Class<LinkObject>("LinkObject")({
  /**
* Link to the current entity.
*/
"self": S.optionalWith(S.String, { nullable: true })
}) {}

export class AccountAttributes extends S.Class<AccountAttributes>("AccountAttributes")({
  /**
* The name for the account
*/
"name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UserRefType extends S.Literal("User") {}

export class ReferencedLinkObject extends S.Class<ReferencedLinkObject>("ReferencedLinkObject")({
  /**
* Link to the current entity ref(s).
*/
"self": S.optionalWith(S.String, { nullable: true }),
  /**
* Link to full object(s).
*/
"related": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class IncidentRefType extends S.Literal("Incident") {}

/**
* The type of the referenced entity.
*/
export class DwellingRefType extends S.Literal("Dwelling") {}

/**
* The type of the referenced entity.
*/
export class UserAccountRoleRefType extends S.Literal("UserAccountRole") {}

/**
* The type of the referenced entity.
*/
export class CurrencyRefType extends S.Literal("Currency") {}

/**
* The type of the referenced entity.
*/
export class UserDataType extends S.Literal("User") {}

export class UserAttributes extends S.Class<UserAttributes>("UserAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether or not the user is an admin
*/
"isAdmin": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class EmailAddressRefType extends S.Literal("EmailAddress") {}

/**
* The type of the referenced entity.
*/
export class PhoneNumberRefType extends S.Literal("PhoneNumber") {}

/**
* The type of the referenced entity.
*/
export class AccountRefType extends S.Literal("Account") {}

/**
* The type of the referenced entity.
*/
export class EmailAddressDataType extends S.Literal("EmailAddress") {}

export class EmailAddressAttributes extends S.Class<EmailAddressAttributes>("EmailAddressAttributes")({
  "address": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether email address is verified.
*/
"isVerified": S.optionalWith(S.Boolean, { nullable: true }),
  "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AccountProviderContactRefType extends S.Literal("AccountProviderContact") {}

/**
* The type of the referenced entity.
*/
export class IdentityDataType extends S.Literal("Identity") {}

export class IdentityAttributes extends S.Class<IdentityAttributes>("IdentityAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AccountProviderContactDataType extends S.Literal("AccountProviderContact") {}

export class AccountProviderContactAttributes extends S.Class<AccountProviderContactAttributes>("AccountProviderContactAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AccountProviderRefType extends S.Literal("AccountProvider") {}

/**
* The type of the referenced entity.
*/
export class PhoneNumberDataType extends S.Literal("PhoneNumber") {}

export class PhoneNumberAttributes extends S.Class<PhoneNumberAttributes>("PhoneNumberAttributes")({
  "number": S.optionalWith(S.String, { nullable: true }),
  "isVerified": S.optionalWith(S.Boolean, { nullable: true }),
  "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AccountProviderDataType extends S.Literal("AccountProvider") {}

export class AccountProviderAttributes extends S.Class<AccountProviderAttributes>("AccountProviderAttributes")({
  /**
* Required if provider not set.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  "offerings": S.optionalWith(S.Array(S.Literal("ITEM", "SERVICE", "COVERAGE", "AID")), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ProviderRefType extends S.Literal("Provider") {}

/**
* The type of the referenced entity.
*/
export class ProjectDataType extends S.Literal("Project") {}

export class ProjectAttributes extends S.Class<ProjectAttributes>("ProjectAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ProjectMediaRefType extends S.Literal("ProjectMedia") {}

/**
* The type of the referenced entity.
*/
export class IncidentDataType extends S.Literal("Incident") {}

export class IncidentAttributes extends S.Class<IncidentAttributes>("IncidentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "occurredDate": S.optionalWith(S.String, { nullable: true }),
  "isFemaDisaster": S.optionalWith(S.Boolean, { nullable: true }),
  "wasSomeoneInjured": S.optionalWith(S.Boolean, { nullable: true }),
  "isThereLiability": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class IncidentTypeRefType extends S.Literal("IncidentType") {}

/**
* The type of the referenced entity.
*/
export class DisasterRefType extends S.Literal("Disaster") {}

/**
* The type of the referenced entity.
*/
export class ProjectMediaDataType extends S.Literal("ProjectMedia") {}

export class ProjectMediaAttributesStage extends S.Literal("BEFORE", "DURING", "AFTER") {}

/**
* The type of the referenced entity.
*/
export class MediaRefType extends S.Literal("Media") {}

/**
* The type of the referenced entity.
*/
export class MediaDataType extends S.Literal("Media") {}

export class MediaAttributesSubjectState extends S.Literal("INTACT", "DAMAGED", "IN_PROGRESS", "MISSING") {}

/**
* The type of the referenced entity.
*/
export class FileRefType extends S.Literal("File") {}

/**
* The type of the referenced entity.
*/
export class SpaceRefType extends S.Literal("Space") {}

/**
* The type of the referenced entity.
*/
export class EntrySourceMediaRefType extends S.Literal("EntrySourceMedia") {}

/**
* The type of the referenced entity.
*/
export class FileDataType extends S.Literal("File") {}

/**
* The storage provider for this file.
*/
export class FileAttributesStorageProvider extends S.Literal("LOTI_S3") {}

export class FileAttributesType extends S.Literal("IMAGE", "VIDEO", "AUDIO", "DOCUMENT") {}

/**
* The type of the referenced entity.
*/
export class FileProcessRefType extends S.Literal("FileProcess") {}

/**
* The type of the referenced entity.
*/
export class ChangeOrderRefType extends S.Literal("ChangeOrder") {}

/**
* The type of the referenced entity.
*/
export class EstimateRefType extends S.Literal("Estimate") {}

/**
* The type of the referenced entity.
*/
export class InvoiceRefType extends S.Literal("Invoice") {}

/**
* The type of the referenced entity.
*/
export class PaymentRefType extends S.Literal("Payment") {}

/**
* The type of the referenced entity.
*/
export class AssetAppraisalRefType extends S.Literal("AssetAppraisal") {}

/**
* The type of the referenced entity.
*/
export class AppraisalRefType extends S.Literal("Appraisal") {}

/**
* The type of the referenced entity.
*/
export class FundingRefType extends S.Literal("Funding") {}

/**
* The type of the referenced entity.
*/
export class IncidentReportRefType extends S.Literal("IncidentReport") {}

/**
* The type of the referenced entity.
*/
export class PoliceReportRefType extends S.Literal("PoliceReport") {}

/**
* The type of the referenced entity.
*/
export class ParamedicReportRefType extends S.Literal("ParamedicReport") {}

/**
* The type of the referenced entity.
*/
export class ContractRefType extends S.Literal("Contract") {}

/**
* The type of the referenced entity.
*/
export class RentRollRefType extends S.Literal("RentRoll") {}

/**
* The type of the referenced entity.
*/
export class PermitRefType extends S.Literal("Permit") {}

/**
* The type of the referenced entity.
*/
export class BlueprintRefType extends S.Literal("Blueprint") {}

/**
* The type of the referenced entity.
*/
export class DeclarationsPageRefType extends S.Literal("DeclarationsPage") {}

/**
* The type of the referenced entity.
*/
export class PolicyJacketRefType extends S.Literal("PolicyJacket") {}

/**
* The type of the referenced entity.
*/
export class ScopeOfLossRefType extends S.Literal("ScopeOfLoss") {}

/**
* The type of the referenced entity.
*/
export class DeliveryPaperworkRefType extends S.Literal("DeliveryPaperwork") {}

/**
* The type of the referenced entity.
*/
export class ProductSpecRefType extends S.Literal("ProductSpec") {}

/**
* The type of the referenced entity.
*/
export class UserManualRefType extends S.Literal("UserManual") {}

/**
* The type of the referenced entity.
*/
export class WarrantyRefType extends S.Literal("Warranty") {}

/**
* The type of the referenced entity.
*/
export class DeedRefType extends S.Literal("Deed") {}

/**
* The type of the referenced entity.
*/
export class AssetDataType extends S.Literal("Asset") {}

export class AssetAttributes extends S.Class<AssetAttributes>("AssetAttributes")({
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AssetTypeRefType extends S.Literal("AssetType") {}

/**
* The type of the referenced entity.
*/
export class DwellingDataType extends S.Literal("Dwelling") {}

export class DwellingAttributes extends S.Class<DwellingAttributes>("DwellingAttributes")({
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AddressRefType extends S.Literal("Address") {}

/**
* The type of the referenced entity.
*/
export class AssetTypeDataType extends S.Literal("AssetType") {}

export class AssetTypeAttributes extends S.Class<AssetTypeAttributes>("AssetTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AssetAppraisalDataType extends S.Literal("AssetAppraisal") {}

export class AssetAppraisalAttributes extends S.Class<AssetAppraisalAttributes>("AssetAppraisalAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class DocumentTypeRefType extends S.Literal("DocumentType") {}

/**
* The type of the referenced entity.
*/
export class DocumentTypeDataType extends S.Literal("DocumentType") {}

export class DocumentTypeAttributes extends S.Class<DocumentTypeAttributes>("DocumentTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class DocumentClassRefType extends S.Literal("DocumentClass") {}

/**
* The type of the referenced entity.
*/
export class DocumentClassDataType extends S.Literal("DocumentClass") {}

export class DocumentClassAttributes extends S.Class<DocumentClassAttributes>("DocumentClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class SpaceDataType extends S.Literal("Space") {}

export class SpaceAttributesUse extends S.Literal("PERSONAL", "SHORT_TERM_RENTAL", "LEASED", "BUSINESS", "AGRICULTURAL", "UNUSED") {}

/**
* The type of the referenced entity.
*/
export class SpaceTypeRefType extends S.Literal("SpaceType") {}

/**
* The type of the referenced entity.
*/
export class SpaceGroupRefType extends S.Literal("SpaceGroup") {}

/**
* The type of the referenced entity.
*/
export class SpaceTypeDataType extends S.Literal("SpaceType") {}

export class SpaceTypeAttributes extends S.Class<SpaceTypeAttributes>("SpaceTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class SpaceClassRefType extends S.Literal("SpaceClass") {}

/**
* The type of the referenced entity.
*/
export class SpaceGroupTypeRefType extends S.Literal("SpaceGroupType") {}

/**
* The type of the referenced entity.
*/
export class SpaceClassDataType extends S.Literal("SpaceClass") {}

export class SpaceClassAttributes extends S.Class<SpaceClassAttributes>("SpaceClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class SpaceCategoryRefType extends S.Literal("SpaceCategory") {}

/**
* The type of the referenced entity.
*/
export class SpaceCategoryDataType extends S.Literal("SpaceCategory") {}

export class SpaceCategoryAttributes extends S.Class<SpaceCategoryAttributes>("SpaceCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class SpaceGroupTypeDataType extends S.Literal("SpaceGroupType") {}

export class SpaceGroupTypeAttributes extends S.Class<SpaceGroupTypeAttributes>("SpaceGroupTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class BucketTypeRefType extends S.Literal("BucketType") {}

/**
* The type of the referenced entity.
*/
export class BucketTypeDataType extends S.Literal("BucketType") {}

export class BucketTypeAttributes extends S.Class<BucketTypeAttributes>("BucketTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class BucketClassRefType extends S.Literal("BucketClass") {}

/**
* The type of the referenced entity.
*/
export class BucketClassDataType extends S.Literal("BucketClass") {}

export class BucketClassAttributes extends S.Class<BucketClassAttributes>("BucketClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class SpaceGroupDataType extends S.Literal("SpaceGroup") {}

export class SpaceGroupAttributes extends S.Class<SpaceGroupAttributes>("SpaceGroupAttributes")({
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CurrencyDataType extends S.Literal("Currency") {}

export class CurrencyAttributes extends S.Class<CurrencyAttributes>("CurrencyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "iso": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AddressDataType extends S.Literal("Address") {}

export class AddressAttributes extends S.Class<AddressAttributes>("AddressAttributes")({
  "streetAddress": S.optionalWith(S.String, { nullable: true }),
  "streetAddress2": S.optionalWith(S.String, { nullable: true }),
  "city": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(S.String, { nullable: true }),
  "postal": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CountryRefType extends S.Literal("Country") {}

/**
* The type of the referenced entity.
*/
export class CountryDataType extends S.Literal("Country") {}

export class CountryAttributes extends S.Class<CountryAttributes>("CountryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "callingCode": S.optionalWith(S.String, { nullable: true }),
  "iso2": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class FileProcessDataType extends S.Literal("FileProcess") {}

export class FileProcessAttributesProvider extends S.Literal("TRANSLOADIT") {}

export class FileProcessAttributesType extends S.Literal("CONVERSION", "DATA_EXTRACTION") {}

export class FileProcessAttributesStatus extends S.Literal("QUEUED", "PROCESSING", "PAUSED", "COMPLETED", "FAILED") {}

/**
* The type of the referenced entity.
*/
export class DocumentDataType extends S.Literal("Document") {}

export class DocumentAttributes extends S.Class<DocumentAttributes>("DocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class ChangeOrderDataType extends S.Literal("ChangeOrder") {}

export class ChangeOrderAttributes extends S.Class<ChangeOrderAttributes>("ChangeOrderAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemizableFinancialDocumentStatsRefType extends S.Literal("ItemizableFinancialDocumentStats") {}

/**
* The type of the referenced entity.
*/
export class ServiceRefType extends S.Literal("Service") {}

/**
* The type of the referenced entity.
*/
export class ItemChangeOrderRefType extends S.Literal("ItemChangeOrder") {}

/**
* The type of the referenced entity.
*/
export class ItemImpactChangeOrderRefType extends S.Literal("ItemImpactChangeOrder") {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskChangeOrderRefType extends S.Literal("ServiceTaskChangeOrder") {}

/**
* The type of the referenced entity.
*/
export class ItemImpactRefType extends S.Literal("ItemImpact") {}

/**
* The type of the referenced entity.
*/
export class ItemRefType extends S.Literal("Item") {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskRefType extends S.Literal("ServiceTask") {}

/**
* The type of the referenced entity.
*/
export class ThirdPartyImpactRefType extends S.Literal("ThirdPartyImpact") {}

/**
* The type of the referenced entity.
*/
export class ItemizableFinancialDocumentStatsDataType extends S.Literal("ItemizableFinancialDocumentStats") {}

export class ItemizableFinancialDocumentStatsAttributes extends S.Class<ItemizableFinancialDocumentStatsAttributes>("ItemizableFinancialDocumentStatsAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedCount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "isFullyItemized": S.optionalWith(S.Boolean, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "isItemizationComplete": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemizableFinancialDocumentDataType extends S.Literal("ItemizableFinancialDocument") {}

export class ItemizableFinancialDocumentAttributes extends S.Class<ItemizableFinancialDocumentAttributes>("ItemizableFinancialDocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class EstimateDataType extends S.Literal("Estimate") {}

export class EstimateAttributes extends S.Class<EstimateAttributes>("EstimateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemEstimateRefType extends S.Literal("ItemEstimate") {}

/**
* The type of the referenced entity.
*/
export class ItemImpactEstimateRefType extends S.Literal("ItemImpactEstimate") {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskEstimateRefType extends S.Literal("ServiceTaskEstimate") {}

/**
* The type of the referenced entity.
*/
export class ServiceDataType extends S.Literal("Service") {}

export class ServiceAttributes extends S.Class<ServiceAttributes>("ServiceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "paidLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimatedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class EntrySourceMetadataRefType extends S.Literal("EntrySourceMetadata") {}

/**
* The type of the referenced entity.
*/
export class EntryRefType extends S.Literal("Entry") {}

/**
* The type of the referenced entity.
*/
export class ItemAppraisalRefType extends S.Literal("ItemAppraisal") {}

/**
* The type of the referenced entity.
*/
export class ServiceTypeRefType extends S.Literal("ServiceType") {}

/**
* The type of the referenced entity.
*/
export class ItemPaymentRefType extends S.Literal("ItemPayment") {}

/**
* The type of the referenced entity.
*/
export class ItemImpactPaymentRefType extends S.Literal("ItemImpactPayment") {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskPaymentRefType extends S.Literal("ServiceTaskPayment") {}

/**
* The type of the referenced entity.
*/
export class ItemInvoiceRefType extends S.Literal("ItemInvoice") {}

/**
* The type of the referenced entity.
*/
export class ItemImpactInvoiceRefType extends S.Literal("ItemImpactInvoice") {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskInvoiceRefType extends S.Literal("ServiceTaskInvoice") {}

/**
* The type of the referenced entity.
*/
export class EntrySourceMetadataDataType extends S.Literal("EntrySourceMetadata") {}

export class EntrySourceMetadataAttributesEntrySourceType extends S.Literal("ITEM", "ITEM_IMPACT", "SERVICE", "SERVICE_TASK", "THIRD_PARTY_IMPACT") {}

/**
* The type of the referenced entity.
*/
export class EntrySourceDataType extends S.Literal("EntrySource") {}

export class EntrySourceAttributes extends S.Class<EntrySourceAttributes>("EntrySourceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemImpactDataType extends S.Literal("ItemImpact") {}

export class ItemImpactAttributesConditionAtImpact extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

export class ItemImpactAttributesItemQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

/**
* The type of the referenced entity.
*/
export class ItemTypeRefType extends S.Literal("ItemType") {}

/**
* The type of the referenced entity.
*/
export class EntryDataType extends S.Literal("Entry") {}

export class EntryAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

export class EntryAttributesSubmissionStatus extends S.Literal("NOT_SUBMITTED", "SUBMITTED", "REVISED") {}

/**
* The type of the referenced entity.
*/
export class BucketRefType extends S.Literal("Bucket") {}

/**
* The type of the referenced entity.
*/
export class SubBucketRefType extends S.Literal("SubBucket") {}

/**
* The type of the referenced entity.
*/
export class ClaimRefType extends S.Literal("Claim") {}

/**
* The type of the referenced entity.
*/
export class BaseBucketDataType extends S.Literal("BaseBucket") {}

export class BaseBucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class BaseBucketMetadataRefType extends S.Literal("BaseBucketMetadata") {}

/**
* The type of the referenced entity.
*/
export class BucketFundingRefType extends S.Literal("BucketFunding") {}

/**
* The type of the referenced entity.
*/
export class BucketDataType extends S.Literal("Bucket") {}

export class BucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CoverageRefType extends S.Literal("Coverage") {}

/**
* The type of the referenced entity.
*/
export class DeductibleRefType extends S.Literal("Deductible") {}

/**
* The type of the referenced entity.
*/
export class ClaimDeductibleRefType extends S.Literal("ClaimDeductible") {}

/**
* The type of the referenced entity.
*/
export class FundingSourceDataType extends S.Literal("FundingSource") {}

export class FundingSourceAttributes extends S.Class<FundingSourceAttributes>("FundingSourceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ClaimDataType extends S.Literal("Claim") {}

export class ClaimAttributesStatus extends S.Literal("OPEN", "CLOSED") {}

/**
* The type of the referenced entity.
*/
export class PolicyTermRefType extends S.Literal("PolicyTerm") {}

/**
* The type of the referenced entity.
*/
export class FundingDataType extends S.Literal("Funding") {}

export class FundingAttributes extends S.Class<FundingAttributes>("FundingAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "isAllocated": S.optionalWith(S.Boolean, { nullable: true }),
  "allocatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "allocatedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAllocated": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class BucketFundingDataType extends S.Literal("BucketFunding") {}

export class BucketFundingAttributes extends S.Class<BucketFundingAttributes>("BucketFundingAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ClaimTargetDataType extends S.Literal("ClaimTarget") {}

export class ClaimTargetAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class PolicyTermDataType extends S.Literal("PolicyTerm") {}

export class PolicyTermAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class PolicyRefType extends S.Literal("Policy") {}

/**
* The type of the referenced entity.
*/
export class PolicyTemplateRefType extends S.Literal("PolicyTemplate") {}

/**
* The type of the referenced entity.
*/
export class ProviderDataType extends S.Literal("Provider") {}

export class ProviderAttributes extends S.Class<ProviderAttributes>("ProviderAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "offerings": S.optionalWith(S.Array(S.Literal("ITEM", "SERVICE", "COVERAGE", "AID")), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class DeductibleDataType extends S.Literal("Deductible") {}

export class DeductibleAttributes extends S.Class<DeductibleAttributes>("DeductibleAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class BucketDefinitionDataType extends S.Literal("BucketDefinition") {}

/**
* Is required if not set in .basis
*/
export class BucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class SubCoverageRefType extends S.Literal("SubCoverage") {}

/**
* The type of the referenced entity.
*/
export class CoverageDataType extends S.Literal("Coverage") {}

/**
* Is required if not set in .basis
*/
export class CoverageAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CoverageTemplateRefType extends S.Literal("CoverageTemplate") {}

/**
* The type of the referenced entity.
*/
export class CoverageGroupRefType extends S.Literal("CoverageGroup") {}

/**
* The type of the referenced entity.
*/
export class PerilRefType extends S.Literal("Peril") {}

/**
* The type of the referenced entity.
*/
export class EndorsementRefType extends S.Literal("Endorsement") {}

/**
* The type of the referenced entity.
*/
export class SubBucketDefinitionDataType extends S.Literal("SubBucketDefinition") {}

export class SubBucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class SubCoverageDataType extends S.Literal("SubCoverage") {}

export class SubCoverageAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class SubCoverageTemplateRefType extends S.Literal("SubCoverageTemplate") {}

/**
* The type of the referenced entity.
*/
export class SubBucketDataType extends S.Literal("SubBucket") {}

export class SubBucketAttributes extends S.Class<SubBucketAttributes>("SubBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class BaseSubBucketMetadataRefType extends S.Literal("BaseSubBucketMetadata") {}

/**
* The type of the referenced entity.
*/
export class BaseSubBucketMetadataDataType extends S.Literal("BaseSubBucketMetadata") {}

export class BaseSubBucketMetadataAttributes extends S.Class<BaseSubBucketMetadataAttributes>("BaseSubBucketMetadataAttributes")({
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class SubCoverageTemplateDataType extends S.Literal("SubCoverageTemplate") {}

export class SubCoverageTemplateAttributes extends S.Class<SubCoverageTemplateAttributes>("SubCoverageTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class EndorsementTemplateRefType extends S.Literal("EndorsementTemplate") {}

/**
* The type of the referenced entity.
*/
export class CoverageTemplateDataType extends S.Literal("CoverageTemplate") {}

export class CoverageTemplateAttributes extends S.Class<CoverageTemplateAttributes>("CoverageTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CoverageGroupTemplateRefType extends S.Literal("CoverageGroupTemplate") {}

/**
* The type of the referenced entity.
*/
export class CoverageGroupTemplateDataType extends S.Literal("CoverageGroupTemplate") {}

export class CoverageGroupTemplateAttributes extends S.Class<CoverageGroupTemplateAttributes>("CoverageGroupTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class PerilDataType extends S.Literal("Peril") {}

export class PerilAttributes extends S.Class<PerilAttributes>("PerilAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class EndorsementTemplateDataType extends S.Literal("EndorsementTemplate") {}

export class EndorsementTemplateAttributesEffect extends S.Literal("COVERAGE", "ADJUSTMENT", "PERIL", "LOSS_SETTLEMENT_TYPE", "OTHER") {}

export class EndorsementTemplateAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class EndorsementDataType extends S.Literal("Endorsement") {}

export class EndorsementAttributesEffect extends S.Literal("COVERAGE", "ADJUSTMENT", "PERIL", "LOSS_SETTLEMENT_TYPE", "OTHER") {}

export class EndorsementAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CoverageGroupDataType extends S.Literal("CoverageGroup") {}

/**
* The type of the referenced entity.
*/
export class ClaimDeductibleDataType extends S.Literal("ClaimDeductible") {}

export class ClaimDeductibleAttributes extends S.Class<ClaimDeductibleAttributes>("ClaimDeductibleAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class PolicyDataType extends S.Literal("Policy") {}

export class PolicyAttributesStatus extends S.Literal("ACTIVE", "CANCELED", "EXPIRED", "UNVERIFIED", "PENDING_ACTIVATION", "PENDING_CANCELLATION", "RESCINDED") {}

/**
* The type of the referenced entity.
*/
export class PolicyTemplateDataType extends S.Literal("PolicyTemplate") {}

export class PolicyTemplateAttributes extends S.Class<PolicyTemplateAttributes>("PolicyTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class BaseBucketMetadataDataType extends S.Literal("BaseBucketMetadata") {}

export class BaseBucketMetadataAttributes extends S.Class<BaseBucketMetadataAttributes>("BaseBucketMetadataAttributes")({
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class BaseSubBucketDataType extends S.Literal("BaseSubBucket") {}

export class BaseSubBucketAttributes extends S.Class<BaseSubBucketAttributes>("BaseSubBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemAppraisalDataType extends S.Literal("ItemAppraisal") {}

export class ItemAppraisalAttributes extends S.Class<ItemAppraisalAttributes>("ItemAppraisalAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AppraisalDataType extends S.Literal("Appraisal") {}

export class AppraisalAttributes extends S.Class<AppraisalAttributes>("AppraisalAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.String, { nullable: true }),
  "lineCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class DepreciationModifierRefType extends S.Literal("DepreciationModifier") {}

/**
* The type of the referenced entity.
*/
export class DepreciationOverrideRefType extends S.Literal("DepreciationOverride") {}

/**
* The type of the referenced entity.
*/
export class AssetAttributeTypeItemTemplateRefType extends S.Literal("AssetAttributeTypeItemTemplate") {}

/**
* The type of the referenced entity.
*/
export class ItemTemplateRefType extends S.Literal("ItemTemplate") {}

/**
* The type of the referenced entity.
*/
export class SpaceTypeItemTemplateRefType extends S.Literal("SpaceTypeItemTemplate") {}

/**
* The type of the referenced entity.
*/
export class SubmissionTrackTemplateRefType extends S.Literal("SubmissionTrackTemplate") {}

/**
* The type of the referenced entity.
*/
export class AssetAttributeClassRefType extends S.Literal("AssetAttributeClass") {}

/**
* The type of the referenced entity.
*/
export class AssetAttributeTypeRefType extends S.Literal("AssetAttributeType") {}

/**
* The type of the referenced entity.
*/
export class IncidentClassRefType extends S.Literal("IncidentClass") {}

/**
* The type of the referenced entity.
*/
export class ItemCategoryRefType extends S.Literal("ItemCategory") {}

/**
* The type of the referenced entity.
*/
export class ItemClassRefType extends S.Literal("ItemClass") {}

/**
* The type of the referenced entity.
*/
export class ServiceCategoryRefType extends S.Literal("ServiceCategory") {}

/**
* The type of the referenced entity.
*/
export class ServiceClassRefType extends S.Literal("ServiceClass") {}

/**
* The type of the referenced entity.
*/
export class AccountInviteRefType extends S.Literal("AccountInvite") {}

/**
* The type of the referenced entity.
*/
export class AuthProfileRefType extends S.Literal("AuthProfile") {}

/**
* The type of the referenced entity.
*/
export class ProjectImpactRefType extends S.Literal("ProjectImpact") {}

/**
* The type of the referenced entity.
*/
export class IncidentImpactRefType extends S.Literal("IncidentImpact") {}

/**
* The type of the referenced entity.
*/
export class ItemMediaSuggestionRefType extends S.Literal("ItemMediaSuggestion") {}

/**
* The type of the referenced entity.
*/
export class ItemProductSuggestionRefType extends S.Literal("ItemProductSuggestion") {}

/**
* The type of the referenced entity.
*/
export class ThirdPartyDwellingRefType extends S.Literal("ThirdPartyDwelling") {}

/**
* The type of the referenced entity.
*/
export class ThirdPartyIndividualRefType extends S.Literal("ThirdPartyIndividual") {}

/**
* The type of the referenced entity.
*/
export class AppraisalLineDataType extends S.Literal("AppraisalLine") {}

export class AppraisalLineAttributes extends S.Class<AppraisalLineAttributes>("AppraisalLineAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class BaseEntityDataType extends S.Literal("BaseEntity") {}

/**
* The type of the referenced entity.
*/
export class InvoiceDataType extends S.Literal("Invoice") {}

export class InvoiceAttributes extends S.Class<InvoiceAttributes>("InvoiceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class InvoiceLineDataType extends S.Literal("InvoiceLine") {}

export class InvoiceLineAttributes extends S.Class<InvoiceLineAttributes>("InvoiceLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemInvoiceDataType extends S.Literal("ItemInvoice") {}

export class ItemInvoiceAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class ItemDataType extends S.Literal("Item") {}

export class ItemAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

export class ItemAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

/**
* The type of the referenced entity.
*/
export class ItemTypeDataType extends S.Literal("ItemType") {}

export class ItemTypeAttributes extends S.Class<ItemTypeAttributes>("ItemTypeAttributes")({
  "lifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationPercentage": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class DepreciationModifierDataType extends S.Literal("DepreciationModifier") {}

export class DepreciationModifierAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

export class DepreciationModifierAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

/**
* The type of the referenced entity.
*/
export class DepreciationScheduleDataType extends S.Literal("DepreciationSchedule") {}

export class DepreciationScheduleAttributes extends S.Class<DepreciationScheduleAttributes>("DepreciationScheduleAttributes")({
  "lifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationPercentage": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class DepreciationOverrideDataType extends S.Literal("DepreciationOverride") {}

export class DepreciationOverrideAttributes extends S.Class<DepreciationOverrideAttributes>("DepreciationOverrideAttributes")({
  "ageInMonths": S.optionalWith(S.Number, { nullable: true }),
  "valuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemClassDataType extends S.Literal("ItemClass") {}

export class ItemClassAttributes extends S.Class<ItemClassAttributes>("ItemClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemCategoryDataType extends S.Literal("ItemCategory") {}

export class ItemCategoryAttributes extends S.Class<ItemCategoryAttributes>("ItemCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class PaymentDataType extends S.Literal("Payment") {}

export class PaymentAttributes extends S.Class<PaymentAttributes>("PaymentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class PaymentLineDataType extends S.Literal("PaymentLine") {}

export class PaymentLineAttributes extends S.Class<PaymentLineAttributes>("PaymentLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemPaymentDataType extends S.Literal("ItemPayment") {}

export class ItemPaymentAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class ItemImpactPaymentDataType extends S.Literal("ItemImpactPayment") {}

export class ItemImpactPaymentAttributes extends S.Class<ItemImpactPaymentAttributes>("ItemImpactPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskPaymentDataType extends S.Literal("ServiceTaskPayment") {}

export class ServiceTaskPaymentAttributes extends S.Class<ServiceTaskPaymentAttributes>("ServiceTaskPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskDataType extends S.Literal("ServiceTask") {}

export class ServiceTaskAttributes extends S.Class<ServiceTaskAttributes>("ServiceTaskAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemImpactInvoiceDataType extends S.Literal("ItemImpactInvoice") {}

export class ItemImpactInvoiceAttributes extends S.Class<ItemImpactInvoiceAttributes>("ItemImpactInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskInvoiceDataType extends S.Literal("ServiceTaskInvoice") {}

export class ServiceTaskInvoiceAttributes extends S.Class<ServiceTaskInvoiceAttributes>("ServiceTaskInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class IncidentReportDataType extends S.Literal("IncidentReport") {}

export class IncidentReportAttributes extends S.Class<IncidentReportAttributes>("IncidentReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class PoliceReportDataType extends S.Literal("PoliceReport") {}

export class PoliceReportAttributes extends S.Class<PoliceReportAttributes>("PoliceReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class ParamedicReportDataType extends S.Literal("ParamedicReport") {}

export class ParamedicReportAttributes extends S.Class<ParamedicReportAttributes>("ParamedicReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class ContractDataType extends S.Literal("Contract") {}

export class ContractAttributes extends S.Class<ContractAttributes>("ContractAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class RentRollDataType extends S.Literal("RentRoll") {}

export class RentRollAttributes extends S.Class<RentRollAttributes>("RentRollAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class PermitDataType extends S.Literal("Permit") {}

export class PermitAttributes extends S.Class<PermitAttributes>("PermitAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class BlueprintDataType extends S.Literal("Blueprint") {}

export class BlueprintAttributes extends S.Class<BlueprintAttributes>("BlueprintAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class DeclarationsPageDataType extends S.Literal("DeclarationsPage") {}

export class DeclarationsPageAttributes extends S.Class<DeclarationsPageAttributes>("DeclarationsPageAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class PolicyJacketDataType extends S.Literal("PolicyJacket") {}

export class PolicyJacketAttributes extends S.Class<PolicyJacketAttributes>("PolicyJacketAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class ScopeOfLossDataType extends S.Literal("ScopeOfLoss") {}

export class ScopeOfLossAttributes extends S.Class<ScopeOfLossAttributes>("ScopeOfLossAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class DeliveryPaperworkDataType extends S.Literal("DeliveryPaperwork") {}

export class DeliveryPaperworkAttributes extends S.Class<DeliveryPaperworkAttributes>("DeliveryPaperworkAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class ProductSpecDataType extends S.Literal("ProductSpec") {}

export class ProductSpecAttributes extends S.Class<ProductSpecAttributes>("ProductSpecAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UserManualDataType extends S.Literal("UserManual") {}

export class UserManualAttributes extends S.Class<UserManualAttributes>("UserManualAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class WarrantyDataType extends S.Literal("Warranty") {}

export class WarrantyAttributes extends S.Class<WarrantyAttributes>("WarrantyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class DeedDataType extends S.Literal("Deed") {}

export class DeedAttributes extends S.Class<DeedAttributes>("DeedAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemChangeOrderDataType extends S.Literal("ItemChangeOrder") {}

export class ItemChangeOrderAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class ItemEstimateDataType extends S.Literal("ItemEstimate") {}

export class ItemEstimateAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class ChangeOrderLineDataType extends S.Literal("ChangeOrderLine") {}

export class ChangeOrderLineAttributes extends S.Class<ChangeOrderLineAttributes>("ChangeOrderLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemImpactChangeOrderDataType extends S.Literal("ItemImpactChangeOrder") {}

export class ItemImpactChangeOrderAttributes extends S.Class<ItemImpactChangeOrderAttributes>("ItemImpactChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemImpactEstimateDataType extends S.Literal("ItemImpactEstimate") {}

export class ItemImpactEstimateAttributes extends S.Class<ItemImpactEstimateAttributes>("ItemImpactEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskChangeOrderDataType extends S.Literal("ServiceTaskChangeOrder") {}

export class ServiceTaskChangeOrderAttributes extends S.Class<ServiceTaskChangeOrderAttributes>("ServiceTaskChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ServiceTaskEstimateDataType extends S.Literal("ServiceTaskEstimate") {}

export class ServiceTaskEstimateAttributes extends S.Class<ServiceTaskEstimateAttributes>("ServiceTaskEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class EstimateLineDataType extends S.Literal("EstimateLine") {}

export class EstimateLineAttributes extends S.Class<EstimateLineAttributes>("EstimateLineAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class DisasterDataType extends S.Literal("Disaster") {}

export class DisasterAttributes extends S.Class<DisasterAttributes>("DisasterAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class IncidentTypeDataType extends S.Literal("IncidentType") {}

export class IncidentTypeAttributes extends S.Class<IncidentTypeAttributes>("IncidentTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class IncidentClassDataType extends S.Literal("IncidentClass") {}

export class IncidentClassAttributes extends S.Class<IncidentClassAttributes>("IncidentClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AssetAttributeTypeItemTemplateDataType extends S.Literal("AssetAttributeTypeItemTemplate") {}

export class AssetAttributeTypeItemTemplateAttributes extends S.Class<AssetAttributeTypeItemTemplateAttributes>("AssetAttributeTypeItemTemplateAttributes")({
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "likelihood": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AssetAttributeTypeDataType extends S.Literal("AssetAttributeType") {}

export class AssetAttributeTypeAttributes extends S.Class<AssetAttributeTypeAttributes>("AssetAttributeTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "question": S.optionalWith(S.String, { nullable: true }),
  "maxMagnitude": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AssetAttributeClassDataType extends S.Literal("AssetAttributeClass") {}

export class AssetAttributeClassAttributes extends S.Class<AssetAttributeClassAttributes>("AssetAttributeClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "question": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ItemTemplateDataType extends S.Literal("ItemTemplate") {}

export class ItemTemplateAttributes extends S.Class<ItemTemplateAttributes>("ItemTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class SpaceTypeItemTemplateDataType extends S.Literal("SpaceTypeItemTemplate") {}

export class SpaceTypeItemTemplateAttributes extends S.Class<SpaceTypeItemTemplateAttributes>("SpaceTypeItemTemplateAttributes")({
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "likelihood": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class SubmissionTrackTemplateDataType extends S.Literal("SubmissionTrackTemplate") {}

export class SubmissionTrackTemplateAttributes extends S.Class<SubmissionTrackTemplateAttributes>("SubmissionTrackTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ServiceCategoryDataType extends S.Literal("ServiceCategory") {}

export class ServiceCategoryAttributes extends S.Class<ServiceCategoryAttributes>("ServiceCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ServiceClassDataType extends S.Literal("ServiceClass") {}

export class ServiceClassAttributes extends S.Class<ServiceClassAttributes>("ServiceClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ServiceTypeDataType extends S.Literal("ServiceType") {}

export class ServiceTypeAttributes extends S.Class<ServiceTypeAttributes>("ServiceTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class AccountInviteDataType extends S.Literal("AccountInvite") {}

/**
* What level of permissions the user has for this account.
*/
export class AccountInviteAttributesRole extends S.Literal("OWNER", "MANAGER", "COLLABORATOR") {}

/**
* The type of the referenced entity.
*/
export class AuthProfileDataType extends S.Literal("AuthProfile") {}

export class AuthProfileAttributesProvider extends S.Literal("CLERK", "LOGTO", "TEST") {}

/**
* The type of the referenced entity.
*/
export class EntrySourceMediaDataType extends S.Literal("EntrySourceMedia") {}

export class EntrySourceMediaAttributes extends S.Class<EntrySourceMediaAttributes>("EntrySourceMediaAttributes")({
  "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
  "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ThirdPartyImpactDataType extends S.Literal("ThirdPartyImpact") {}

export class ThirdPartyImpactAttributes extends S.Class<ThirdPartyImpactAttributes>("ThirdPartyImpactAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ThirdPartyDataType extends S.Literal("ThirdParty") {}

/**
* The type of the referenced entity.
*/
export class ThirdPartyDwellingDataType extends S.Literal("ThirdPartyDwelling") {}

export class ThirdPartyDwellingAttributes extends S.Class<ThirdPartyDwellingAttributes>("ThirdPartyDwellingAttributes")({
  "streetAddress": S.optionalWith(S.String, { nullable: true }),
  "streetAddress2": S.optionalWith(S.String, { nullable: true }),
  "city": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(S.String, { nullable: true }),
  "postal": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ThirdPartyIndividualDataType extends S.Literal("ThirdPartyIndividual") {}

export class ThirdPartyIndividualAttributes extends S.Class<ThirdPartyIndividualAttributes>("ThirdPartyIndividualAttributes")({
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class ProjectImpactDataType extends S.Literal("ProjectImpact") {}

export class ProjectImpactAttributesExtent extends S.Literal("PARTIAL", "TOTAL") {}

/**
* The type of the referenced entity.
*/
export class IncidentImpactDataType extends S.Literal("IncidentImpact") {}

export class IncidentImpactAttributesExtent extends S.Literal("PARTIAL", "TOTAL") {}

/**
* The type of the referenced entity.
*/
export class ItemMediaSuggestionDataType extends S.Literal("ItemMediaSuggestion") {}

export class ItemMediaSuggestionAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

export class ItemMediaSuggestionAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

/**
* The type of the referenced entity.
*/
export class ItemProductSuggestionDataType extends S.Literal("ItemProductSuggestion") {}

export class ItemProductSuggestionAttributesSource extends S.Literal("GOOGLE_SHOPPING", "AMAZON") {}

/**
* The type of the referenced entity.
*/
export class UserAccountRoleDataType extends S.Literal("UserAccountRole") {}

/**
* What level of permissions the user has for this account.
*/
export class UserAccountRoleAttributesRole extends S.Literal("OWNER", "MANAGER", "COLLABORATOR") {}

/**
* The type of the referenced entity.
*/
export class FinancialDocumentDataType extends S.Literal("FinancialDocument") {}

export class FinancialDocumentAttributes extends S.Class<FinancialDocumentAttributes>("FinancialDocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.String, { nullable: true })
}) {}

export class ProfileControllerGetCurrentUserParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class HealthControllerInternalHealthCheck200 extends S.Struct({
  "status": S.optionalWith(S.String, { nullable: true }),
  "info": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "error": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "details": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class HealthControllerInternalHealthCheck503 extends S.Struct({
  "status": S.optionalWith(S.String, { nullable: true }),
  "info": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "error": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "details": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class HealthControllerExternalHealthCheck200 extends S.Struct({
  "status": S.optionalWith(S.String, { nullable: true }),
  "info": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "error": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "details": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class HealthControllerExternalHealthCheck503 extends S.Struct({
  "status": S.optionalWith(S.String, { nullable: true }),
  "info": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "error": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "details": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class UserControllerGetUserByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class UserControllerUpdateUserByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateUserDataType extends S.Literal("User") {}

export class UpdateUserAttributes extends S.Class<UpdateUserAttributes>("UpdateUserAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether or not the user is an admin
*/
"isAdmin": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateEmailAddressRefType extends S.Literal("EmailAddress") {}

/**
* The type of the referenced entity.
*/
export class CreatePhoneNumberRefType extends S.Literal("PhoneNumber") {}

/**
* The type of the referenced entity.
*/
export class CreateAccountRefType extends S.Literal("Account") {}

/**
* The type of the referenced entity.
*/
export class CreateUserAccountRoleRefType extends S.Literal("UserAccountRole") {}

/**
* The type of the referenced entity.
*/
export class CreateUserDataType extends S.Literal("User") {}

export class CreateUserAttributes extends S.Class<CreateUserAttributes>("CreateUserAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether or not the user is an admin
*/
"isAdmin": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateEmailAddressDataType extends S.Literal("EmailAddress") {}

export class CreateEmailAddressAttributes extends S.Class<CreateEmailAddressAttributes>("CreateEmailAddressAttributes")({
  "address": S.String,
  /**
* Whether email address is verified.
*/
"isVerified": S.optionalWith(S.Boolean, { nullable: true }),
  "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAccountProviderContactRefType extends S.Literal("AccountProviderContact") {}

/**
* The type of the referenced entity.
*/
export class CreateUserRefType extends S.Literal("User") {}

/**
* The type of the referenced entity.
*/
export class UpdateEmailAddressDataType extends S.Literal("EmailAddress") {}

export class UpdateEmailAddressAttributes extends S.Class<UpdateEmailAddressAttributes>("UpdateEmailAddressAttributes")({
  "address": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether email address is verified.
*/
"isVerified": S.optionalWith(S.Boolean, { nullable: true }),
  "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateIdentityDataType extends S.Literal("Identity") {}

export class CreateIdentityAttributes extends S.Class<CreateIdentityAttributes>("CreateIdentityAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateIdentityDataType extends S.Literal("Identity") {}

export class UpdateIdentityAttributes extends S.Class<UpdateIdentityAttributes>("UpdateIdentityAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAccountProviderContactDataType extends S.Literal("AccountProviderContact") {}

export class CreateAccountProviderContactAttributes extends S.Class<CreateAccountProviderContactAttributes>("CreateAccountProviderContactAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAccountProviderRefType extends S.Literal("AccountProvider") {}

/**
* The type of the referenced entity.
*/
export class UpdateAccountProviderContactDataType extends S.Literal("AccountProviderContact") {}

export class UpdateAccountProviderContactAttributes extends S.Class<UpdateAccountProviderContactAttributes>("UpdateAccountProviderContactAttributes")({
  /**
* The user's full legal name
*/
"legalName": S.optionalWith(S.String, { nullable: true }),
  /**
* The user's preferred name (e.g., first name)
*/
"preferredName": S.optionalWith(S.String, { nullable: true }),
  "avatarKey": S.optionalWith(S.String, { nullable: true }),
  "avatarUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreatePhoneNumberDataType extends S.Literal("PhoneNumber") {}

export class CreatePhoneNumberAttributes extends S.Class<CreatePhoneNumberAttributes>("CreatePhoneNumberAttributes")({
  "number": S.String,
  "isVerified": S.optionalWith(S.Boolean, { nullable: true }),
  "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdatePhoneNumberDataType extends S.Literal("PhoneNumber") {}

export class UpdatePhoneNumberAttributes extends S.Class<UpdatePhoneNumberAttributes>("UpdatePhoneNumberAttributes")({
  "number": S.optionalWith(S.String, { nullable: true }),
  "isVerified": S.optionalWith(S.Boolean, { nullable: true }),
  "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAccountProviderDataType extends S.Literal("AccountProvider") {}

export class CreateAccountProviderAttributes extends S.Class<CreateAccountProviderAttributes>("CreateAccountProviderAttributes")({
  /**
* Required if provider not set.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  "offerings": S.optionalWith(S.Array(S.Literal("ITEM", "SERVICE", "COVERAGE", "AID")), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateProviderRefType extends S.Literal("Provider") {}

/**
* The type of the referenced entity.
*/
export class UpdateAccountProviderDataType extends S.Literal("AccountProvider") {}

export class UpdateAccountProviderAttributes extends S.Class<UpdateAccountProviderAttributes>("UpdateAccountProviderAttributes")({
  /**
* Required if provider not set.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  "offerings": S.optionalWith(S.Array(S.Literal("ITEM", "SERVICE", "COVERAGE", "AID")), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAccountDataType extends S.Literal("Account") {}

export class CreateAccountAttributes extends S.Class<CreateAccountAttributes>("CreateAccountAttributes")({
  /**
* The name for the account
*/
"name": S.String
}) {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentRefType extends S.Literal("Incident") {}

/**
* The type of the referenced entity.
*/
export class CreateDwellingRefType extends S.Literal("Dwelling") {}

/**
* The type of the referenced entity.
*/
export class CreateCurrencyRefType extends S.Literal("Currency") {}

/**
* The type of the referenced entity.
*/
export class UpdateAccountDataType extends S.Literal("Account") {}

export class UpdateAccountAttributes extends S.Class<UpdateAccountAttributes>("UpdateAccountAttributes")({
  /**
* The name for the account
*/
"name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateProjectDataType extends S.Literal("Project") {}

export class CreateProjectAttributes extends S.Class<CreateProjectAttributes>("CreateProjectAttributes")({
  "name": S.String,
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateProjectMediaRefType extends S.Literal("ProjectMedia") {}

/**
* The type of the referenced entity.
*/
export class UpdateProjectDataType extends S.Literal("Project") {}

export class UpdateProjectAttributes extends S.Class<UpdateProjectAttributes>("UpdateProjectAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentDataType extends S.Literal("Incident") {}

export class CreateIncidentAttributes extends S.Class<CreateIncidentAttributes>("CreateIncidentAttributes")({
  "name": S.String,
  "description": S.optionalWith(S.String, { nullable: true }),
  "occurredDate": S.String,
  "isFemaDisaster": S.optionalWith(S.Boolean, { nullable: true }),
  "wasSomeoneInjured": S.optionalWith(S.Boolean, { nullable: true }),
  "isThereLiability": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentTypeRefType extends S.Literal("IncidentType") {}

/**
* The type of the referenced entity.
*/
export class CreateDisasterRefType extends S.Literal("Disaster") {}

/**
* The type of the referenced entity.
*/
export class UpdateIncidentDataType extends S.Literal("Incident") {}

export class UpdateIncidentAttributes extends S.Class<UpdateIncidentAttributes>("UpdateIncidentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "occurredDate": S.optionalWith(S.String, { nullable: true }),
  "isFemaDisaster": S.optionalWith(S.Boolean, { nullable: true }),
  "wasSomeoneInjured": S.optionalWith(S.Boolean, { nullable: true }),
  "isThereLiability": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateProjectMediaDataType extends S.Literal("ProjectMedia") {}

export class CreateProjectMediaAttributesStage extends S.Literal("BEFORE", "DURING", "AFTER") {}

/**
* The type of the referenced entity.
*/
export class CreateMediaRefType extends S.Literal("Media") {}

/**
* The type of the referenced entity.
*/
export class UpdateProjectMediaDataType extends S.Literal("ProjectMedia") {}

export class UpdateProjectMediaAttributesStage extends S.Literal("BEFORE", "DURING", "AFTER") {}

/**
* The type of the referenced entity.
*/
export class CreateMediaDataType extends S.Literal("Media") {}

export class CreateMediaAttributesSubjectState extends S.Literal("INTACT", "DAMAGED", "IN_PROGRESS", "MISSING") {}

/**
* The type of the referenced entity.
*/
export class CreateFileRefType extends S.Literal("File") {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceRefType extends S.Literal("Space") {}

/**
* The type of the referenced entity.
*/
export class CreateEntrySourceMediaRefType extends S.Literal("EntrySourceMedia") {}

/**
* The type of the referenced entity.
*/
export class UpdateMediaDataType extends S.Literal("Media") {}

export class UpdateMediaAttributesSubjectState extends S.Literal("INTACT", "DAMAGED", "IN_PROGRESS", "MISSING") {}

/**
* The type of the referenced entity.
*/
export class CreateFileDataType extends S.Literal("File") {}

/**
* The storage provider for this file.
*/
export class CreateFileAttributesStorageProvider extends S.Literal("LOTI_S3") {}

export class CreateFileAttributesType extends S.Literal("IMAGE", "VIDEO", "AUDIO", "DOCUMENT") {}

/**
* The type of the referenced entity.
*/
export class CreateFileProcessRefType extends S.Literal("FileProcess") {}

/**
* The type of the referenced entity.
*/
export class CreateChangeOrderRefType extends S.Literal("ChangeOrder") {}

/**
* The type of the referenced entity.
*/
export class CreateEstimateRefType extends S.Literal("Estimate") {}

/**
* The type of the referenced entity.
*/
export class CreateInvoiceRefType extends S.Literal("Invoice") {}

/**
* The type of the referenced entity.
*/
export class CreatePaymentRefType extends S.Literal("Payment") {}

/**
* The type of the referenced entity.
*/
export class CreateAssetAppraisalRefType extends S.Literal("AssetAppraisal") {}

/**
* The type of the referenced entity.
*/
export class CreateAppraisalRefType extends S.Literal("Appraisal") {}

/**
* The type of the referenced entity.
*/
export class CreateFundingRefType extends S.Literal("Funding") {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentReportRefType extends S.Literal("IncidentReport") {}

/**
* The type of the referenced entity.
*/
export class CreatePoliceReportRefType extends S.Literal("PoliceReport") {}

/**
* The type of the referenced entity.
*/
export class CreateParamedicReportRefType extends S.Literal("ParamedicReport") {}

/**
* The type of the referenced entity.
*/
export class CreateContractRefType extends S.Literal("Contract") {}

/**
* The type of the referenced entity.
*/
export class CreateRentRollRefType extends S.Literal("RentRoll") {}

/**
* The type of the referenced entity.
*/
export class CreatePermitRefType extends S.Literal("Permit") {}

/**
* The type of the referenced entity.
*/
export class CreateBlueprintRefType extends S.Literal("Blueprint") {}

/**
* The type of the referenced entity.
*/
export class CreateDeclarationsPageRefType extends S.Literal("DeclarationsPage") {}

/**
* The type of the referenced entity.
*/
export class CreatePolicyJacketRefType extends S.Literal("PolicyJacket") {}

/**
* The type of the referenced entity.
*/
export class CreateScopeOfLossRefType extends S.Literal("ScopeOfLoss") {}

/**
* The type of the referenced entity.
*/
export class CreateDeliveryPaperworkRefType extends S.Literal("DeliveryPaperwork") {}

/**
* The type of the referenced entity.
*/
export class CreateProductSpecRefType extends S.Literal("ProductSpec") {}

/**
* The type of the referenced entity.
*/
export class CreateUserManualRefType extends S.Literal("UserManual") {}

/**
* The type of the referenced entity.
*/
export class CreateWarrantyRefType extends S.Literal("Warranty") {}

/**
* The type of the referenced entity.
*/
export class CreateDeedRefType extends S.Literal("Deed") {}

/**
* The type of the referenced entity.
*/
export class UpdateFileDataType extends S.Literal("File") {}

/**
* The storage provider for this file.
*/
export class UpdateFileAttributesStorageProvider extends S.Literal("LOTI_S3") {}

export class UpdateFileAttributesType extends S.Literal("IMAGE", "VIDEO", "AUDIO", "DOCUMENT") {}

/**
* The type of the referenced entity.
*/
export class CreateAssetDataType extends S.Literal("Asset") {}

export class CreateAssetAttributes extends S.Class<CreateAssetAttributes>("CreateAssetAttributes")({
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAssetTypeRefType extends S.Literal("AssetType") {}

/**
* The type of the referenced entity.
*/
export class UpdateAssetDataType extends S.Literal("Asset") {}

export class UpdateAssetAttributes extends S.Class<UpdateAssetAttributes>("UpdateAssetAttributes")({
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDwellingDataType extends S.Literal("Dwelling") {}

export class CreateDwellingAttributes extends S.Class<CreateDwellingAttributes>("CreateDwellingAttributes")({
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAddressRefType extends S.Literal("Address") {}

/**
* The type of the referenced entity.
*/
export class UpdateDwellingDataType extends S.Literal("Dwelling") {}

export class UpdateDwellingAttributes extends S.Class<UpdateDwellingAttributes>("UpdateDwellingAttributes")({
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAssetTypeDataType extends S.Literal("AssetType") {}

export class CreateAssetTypeAttributes extends S.Class<CreateAssetTypeAttributes>("CreateAssetTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateAssetTypeDataType extends S.Literal("AssetType") {}

export class UpdateAssetTypeAttributes extends S.Class<UpdateAssetTypeAttributes>("UpdateAssetTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAssetAppraisalDataType extends S.Literal("AssetAppraisal") {}

export class CreateAssetAppraisalAttributes extends S.Class<CreateAssetAppraisalAttributes>("CreateAssetAppraisalAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.String
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDocumentTypeRefType extends S.Literal("DocumentType") {}

/**
* The type of the referenced entity.
*/
export class UpdateAssetAppraisalDataType extends S.Literal("AssetAppraisal") {}

export class UpdateAssetAppraisalAttributes extends S.Class<UpdateAssetAppraisalAttributes>("UpdateAssetAppraisalAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDocumentTypeDataType extends S.Literal("DocumentType") {}

export class CreateDocumentTypeAttributes extends S.Class<CreateDocumentTypeAttributes>("CreateDocumentTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDocumentClassRefType extends S.Literal("DocumentClass") {}

/**
* The type of the referenced entity.
*/
export class UpdateDocumentTypeDataType extends S.Literal("DocumentType") {}

export class UpdateDocumentTypeAttributes extends S.Class<UpdateDocumentTypeAttributes>("UpdateDocumentTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDocumentClassDataType extends S.Literal("DocumentClass") {}

export class CreateDocumentClassAttributes extends S.Class<CreateDocumentClassAttributes>("CreateDocumentClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDocumentClassDataType extends S.Literal("DocumentClass") {}

export class UpdateDocumentClassAttributes extends S.Class<UpdateDocumentClassAttributes>("UpdateDocumentClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceDataType extends S.Literal("Space") {}

export class CreateSpaceAttributesUse extends S.Literal("PERSONAL", "SHORT_TERM_RENTAL", "LEASED", "BUSINESS", "AGRICULTURAL", "UNUSED") {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceTypeRefType extends S.Literal("SpaceType") {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceGroupRefType extends S.Literal("SpaceGroup") {}

/**
* The type of the referenced entity.
*/
export class UpdateSpaceDataType extends S.Literal("Space") {}

export class UpdateSpaceAttributesUse extends S.Literal("PERSONAL", "SHORT_TERM_RENTAL", "LEASED", "BUSINESS", "AGRICULTURAL", "UNUSED") {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceTypeDataType extends S.Literal("SpaceType") {}

export class CreateSpaceTypeAttributes extends S.Class<CreateSpaceTypeAttributes>("CreateSpaceTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceClassRefType extends S.Literal("SpaceClass") {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceGroupTypeRefType extends S.Literal("SpaceGroupType") {}

/**
* The type of the referenced entity.
*/
export class UpdateSpaceTypeDataType extends S.Literal("SpaceType") {}

export class UpdateSpaceTypeAttributes extends S.Class<UpdateSpaceTypeAttributes>("UpdateSpaceTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceClassDataType extends S.Literal("SpaceClass") {}

export class CreateSpaceClassAttributes extends S.Class<CreateSpaceClassAttributes>("CreateSpaceClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceCategoryRefType extends S.Literal("SpaceCategory") {}

/**
* The type of the referenced entity.
*/
export class UpdateSpaceClassDataType extends S.Literal("SpaceClass") {}

export class UpdateSpaceClassAttributes extends S.Class<UpdateSpaceClassAttributes>("UpdateSpaceClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceCategoryDataType extends S.Literal("SpaceCategory") {}

export class CreateSpaceCategoryAttributes extends S.Class<CreateSpaceCategoryAttributes>("CreateSpaceCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateSpaceCategoryDataType extends S.Literal("SpaceCategory") {}

export class UpdateSpaceCategoryAttributes extends S.Class<UpdateSpaceCategoryAttributes>("UpdateSpaceCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceGroupTypeDataType extends S.Literal("SpaceGroupType") {}

export class CreateSpaceGroupTypeAttributes extends S.Class<CreateSpaceGroupTypeAttributes>("CreateSpaceGroupTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBucketTypeRefType extends S.Literal("BucketType") {}

/**
* The type of the referenced entity.
*/
export class UpdateSpaceGroupTypeDataType extends S.Literal("SpaceGroupType") {}

export class UpdateSpaceGroupTypeAttributes extends S.Class<UpdateSpaceGroupTypeAttributes>("UpdateSpaceGroupTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBucketTypeDataType extends S.Literal("BucketType") {}

export class CreateBucketTypeAttributes extends S.Class<CreateBucketTypeAttributes>("CreateBucketTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBucketClassRefType extends S.Literal("BucketClass") {}

/**
* The type of the referenced entity.
*/
export class UpdateBucketTypeDataType extends S.Literal("BucketType") {}

export class UpdateBucketTypeAttributes extends S.Class<UpdateBucketTypeAttributes>("UpdateBucketTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBucketClassDataType extends S.Literal("BucketClass") {}

export class CreateBucketClassAttributes extends S.Class<CreateBucketClassAttributes>("CreateBucketClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateBucketClassDataType extends S.Literal("BucketClass") {}

export class UpdateBucketClassAttributes extends S.Class<UpdateBucketClassAttributes>("UpdateBucketClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceGroupDataType extends S.Literal("SpaceGroup") {}

export class CreateSpaceGroupAttributes extends S.Class<CreateSpaceGroupAttributes>("CreateSpaceGroupAttributes")({
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateSpaceGroupDataType extends S.Literal("SpaceGroup") {}

export class UpdateSpaceGroupAttributes extends S.Class<UpdateSpaceGroupAttributes>("UpdateSpaceGroupAttributes")({
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateCurrencyDataType extends S.Literal("Currency") {}

export class CreateCurrencyAttributes extends S.Class<CreateCurrencyAttributes>("CreateCurrencyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "iso": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateCurrencyDataType extends S.Literal("Currency") {}

export class UpdateCurrencyAttributes extends S.Class<UpdateCurrencyAttributes>("UpdateCurrencyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "iso": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAddressDataType extends S.Literal("Address") {}

export class CreateAddressAttributes extends S.Class<CreateAddressAttributes>("CreateAddressAttributes")({
  "streetAddress": S.String,
  "streetAddress2": S.optionalWith(S.String, { nullable: true }),
  "city": S.String,
  "state": S.String,
  "postal": S.String
}) {}

/**
* The type of the referenced entity.
*/
export class CreateCountryRefType extends S.Literal("Country") {}

/**
* The type of the referenced entity.
*/
export class UpdateAddressDataType extends S.Literal("Address") {}

export class UpdateAddressAttributes extends S.Class<UpdateAddressAttributes>("UpdateAddressAttributes")({
  "streetAddress": S.optionalWith(S.String, { nullable: true }),
  "streetAddress2": S.optionalWith(S.String, { nullable: true }),
  "city": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(S.String, { nullable: true }),
  "postal": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateCountryDataType extends S.Literal("Country") {}

export class CreateCountryAttributes extends S.Class<CreateCountryAttributes>("CreateCountryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "callingCode": S.optionalWith(S.String, { nullable: true }),
  "iso2": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateCountryDataType extends S.Literal("Country") {}

export class UpdateCountryAttributes extends S.Class<UpdateCountryAttributes>("UpdateCountryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "callingCode": S.optionalWith(S.String, { nullable: true }),
  "iso2": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateFileProcessDataType extends S.Literal("FileProcess") {}

export class CreateFileProcessAttributesProvider extends S.Literal("TRANSLOADIT") {}

export class CreateFileProcessAttributesType extends S.Literal("CONVERSION", "DATA_EXTRACTION") {}

export class CreateFileProcessAttributesStatus extends S.Literal("QUEUED", "PROCESSING", "PAUSED", "COMPLETED", "FAILED") {}

/**
* The type of the referenced entity.
*/
export class UpdateFileProcessDataType extends S.Literal("FileProcess") {}

export class UpdateFileProcessAttributesProvider extends S.Literal("TRANSLOADIT") {}

export class UpdateFileProcessAttributesType extends S.Literal("CONVERSION", "DATA_EXTRACTION") {}

export class UpdateFileProcessAttributesStatus extends S.Literal("QUEUED", "PROCESSING", "PAUSED", "COMPLETED", "FAILED") {}

/**
* The type of the referenced entity.
*/
export class CreateDocumentDataType extends S.Literal("Document") {}

export class CreateDocumentAttributes extends S.Class<CreateDocumentAttributes>("CreateDocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDocumentDataType extends S.Literal("Document") {}

export class UpdateDocumentAttributes extends S.Class<UpdateDocumentAttributes>("UpdateDocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateChangeOrderDataType extends S.Literal("ChangeOrder") {}

export class CreateChangeOrderAttributes extends S.Class<CreateChangeOrderAttributes>("CreateChangeOrderAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemizableFinancialDocumentStatsRefType extends S.Literal("ItemizableFinancialDocumentStats") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceRefType extends S.Literal("Service") {}

/**
* The type of the referenced entity.
*/
export class CreateItemChangeOrderRefType extends S.Literal("ItemChangeOrder") {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactChangeOrderRefType extends S.Literal("ItemImpactChangeOrder") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskChangeOrderRefType extends S.Literal("ServiceTaskChangeOrder") {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactRefType extends S.Literal("ItemImpact") {}

/**
* The type of the referenced entity.
*/
export class CreateItemRefType extends S.Literal("Item") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskRefType extends S.Literal("ServiceTask") {}

/**
* The type of the referenced entity.
*/
export class CreateThirdPartyImpactRefType extends S.Literal("ThirdPartyImpact") {}

/**
* The type of the referenced entity.
*/
export class UpdateChangeOrderDataType extends S.Literal("ChangeOrder") {}

export class UpdateChangeOrderAttributes extends S.Class<UpdateChangeOrderAttributes>("UpdateChangeOrderAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemizableFinancialDocumentStatsDataType extends S.Literal("ItemizableFinancialDocumentStats") {}

export class CreateItemizableFinancialDocumentStatsAttributes extends S.Class<CreateItemizableFinancialDocumentStatsAttributes>("CreateItemizableFinancialDocumentStatsAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedCount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "isFullyItemized": S.optionalWith(S.Boolean, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "isItemizationComplete": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemizableFinancialDocumentStatsDataType extends S.Literal("ItemizableFinancialDocumentStats") {}

export class UpdateItemizableFinancialDocumentStatsAttributes extends S.Class<UpdateItemizableFinancialDocumentStatsAttributes>("UpdateItemizableFinancialDocumentStatsAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedCount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemizedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "isFullyItemized": S.optionalWith(S.Boolean, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "isItemizationComplete": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemizableFinancialDocumentDataType extends S.Literal("ItemizableFinancialDocument") {}

export class CreateItemizableFinancialDocumentAttributes extends S.Class<CreateItemizableFinancialDocumentAttributes>("CreateItemizableFinancialDocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemizableFinancialDocumentDataType extends S.Literal("ItemizableFinancialDocument") {}

export class UpdateItemizableFinancialDocumentAttributes extends S.Class<UpdateItemizableFinancialDocumentAttributes>("UpdateItemizableFinancialDocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateEstimateDataType extends S.Literal("Estimate") {}

export class CreateEstimateAttributes extends S.Class<CreateEstimateAttributes>("CreateEstimateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemEstimateRefType extends S.Literal("ItemEstimate") {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactEstimateRefType extends S.Literal("ItemImpactEstimate") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskEstimateRefType extends S.Literal("ServiceTaskEstimate") {}

/**
* The type of the referenced entity.
*/
export class UpdateEstimateDataType extends S.Literal("Estimate") {}

export class UpdateEstimateAttributes extends S.Class<UpdateEstimateAttributes>("UpdateEstimateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceDataType extends S.Literal("Service") {}

export class CreateServiceAttributes extends S.Class<CreateServiceAttributes>("CreateServiceAttributes")({
  "name": S.String,
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "paidLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimatedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateEntrySourceMetadataRefType extends S.Literal("EntrySourceMetadata") {}

/**
* The type of the referenced entity.
*/
export class CreateEntryRefType extends S.Literal("Entry") {}

/**
* The type of the referenced entity.
*/
export class CreateItemAppraisalRefType extends S.Literal("ItemAppraisal") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTypeRefType extends S.Literal("ServiceType") {}

/**
* The type of the referenced entity.
*/
export class CreateItemPaymentRefType extends S.Literal("ItemPayment") {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactPaymentRefType extends S.Literal("ItemImpactPayment") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskPaymentRefType extends S.Literal("ServiceTaskPayment") {}

/**
* The type of the referenced entity.
*/
export class CreateItemInvoiceRefType extends S.Literal("ItemInvoice") {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactInvoiceRefType extends S.Literal("ItemImpactInvoice") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskInvoiceRefType extends S.Literal("ServiceTaskInvoice") {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceDataType extends S.Literal("Service") {}

export class UpdateServiceAttributes extends S.Class<UpdateServiceAttributes>("UpdateServiceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "paidLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimatedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateEntrySourceMetadataDataType extends S.Literal("EntrySourceMetadata") {}

export class CreateEntrySourceMetadataAttributesEntrySourceType extends S.Literal("ITEM", "ITEM_IMPACT", "SERVICE", "SERVICE_TASK", "THIRD_PARTY_IMPACT") {}

/**
* The type of the referenced entity.
*/
export class UpdateEntrySourceMetadataDataType extends S.Literal("EntrySourceMetadata") {}

export class UpdateEntrySourceMetadataAttributesEntrySourceType extends S.Literal("ITEM", "ITEM_IMPACT", "SERVICE", "SERVICE_TASK", "THIRD_PARTY_IMPACT") {}

/**
* The type of the referenced entity.
*/
export class CreateEntrySourceDataType extends S.Literal("EntrySource") {}

export class CreateEntrySourceAttributes extends S.Class<CreateEntrySourceAttributes>("CreateEntrySourceAttributes")({
  "name": S.String,
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateEntrySourceDataType extends S.Literal("EntrySource") {}

export class UpdateEntrySourceAttributes extends S.Class<UpdateEntrySourceAttributes>("UpdateEntrySourceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactDataType extends S.Literal("ItemImpact") {}

export class CreateItemImpactAttributesConditionAtImpact extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

export class CreateItemImpactAttributesItemQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

/**
* The type of the referenced entity.
*/
export class CreateItemTypeRefType extends S.Literal("ItemType") {}

/**
* The type of the referenced entity.
*/
export class UpdateItemImpactDataType extends S.Literal("ItemImpact") {}

export class UpdateItemImpactAttributesConditionAtImpact extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

export class UpdateItemImpactAttributesItemQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

/**
* The type of the referenced entity.
*/
export class CreateEntryDataType extends S.Literal("Entry") {}

export class CreateEntryAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

export class CreateEntryAttributesSubmissionStatus extends S.Literal("NOT_SUBMITTED", "SUBMITTED", "REVISED") {}

/**
* The type of the referenced entity.
*/
export class CreateBucketRefType extends S.Literal("Bucket") {}

/**
* The type of the referenced entity.
*/
export class CreateSubBucketRefType extends S.Literal("SubBucket") {}

/**
* The type of the referenced entity.
*/
export class CreateClaimRefType extends S.Literal("Claim") {}

/**
* The type of the referenced entity.
*/
export class UpdateEntryDataType extends S.Literal("Entry") {}

export class UpdateEntryAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

export class UpdateEntryAttributesSubmissionStatus extends S.Literal("NOT_SUBMITTED", "SUBMITTED", "REVISED") {}

/**
* The type of the referenced entity.
*/
export class CreateBaseBucketDataType extends S.Literal("BaseBucket") {}

export class CreateBaseBucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateBaseBucketMetadataRefType extends S.Literal("BaseBucketMetadata") {}

/**
* The type of the referenced entity.
*/
export class CreateBucketFundingRefType extends S.Literal("BucketFunding") {}

/**
* The type of the referenced entity.
*/
export class UpdateBaseBucketDataType extends S.Literal("BaseBucket") {}

export class UpdateBaseBucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateBucketDataType extends S.Literal("Bucket") {}

export class CreateBucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateCoverageRefType extends S.Literal("Coverage") {}

/**
* The type of the referenced entity.
*/
export class CreateDeductibleRefType extends S.Literal("Deductible") {}

/**
* The type of the referenced entity.
*/
export class CreateClaimDeductibleRefType extends S.Literal("ClaimDeductible") {}

/**
* The type of the referenced entity.
*/
export class UpdateBucketDataType extends S.Literal("Bucket") {}

export class UpdateBucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateFundingSourceDataType extends S.Literal("FundingSource") {}

export class CreateFundingSourceAttributes extends S.Class<CreateFundingSourceAttributes>("CreateFundingSourceAttributes")({
  "name": S.String,
  "entryAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateFundingSourceDataType extends S.Literal("FundingSource") {}

export class UpdateFundingSourceAttributes extends S.Class<UpdateFundingSourceAttributes>("UpdateFundingSourceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateClaimDataType extends S.Literal("Claim") {}

export class CreateClaimAttributesStatus extends S.Literal("OPEN", "CLOSED") {}

/**
* The type of the referenced entity.
*/
export class CreatePolicyTermRefType extends S.Literal("PolicyTerm") {}

/**
* The type of the referenced entity.
*/
export class UpdateClaimDataType extends S.Literal("Claim") {}

export class UpdateClaimAttributesStatus extends S.Literal("OPEN", "CLOSED") {}

/**
* The type of the referenced entity.
*/
export class CreateFundingDataType extends S.Literal("Funding") {}

export class CreateFundingAttributes extends S.Class<CreateFundingAttributes>("CreateFundingAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "isAllocated": S.optionalWith(S.Boolean, { nullable: true }),
  "allocatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "allocatedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAllocated": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateFundingDataType extends S.Literal("Funding") {}

export class UpdateFundingAttributes extends S.Class<UpdateFundingAttributes>("UpdateFundingAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "isAllocated": S.optionalWith(S.Boolean, { nullable: true }),
  "allocatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "allocatedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAllocated": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBucketFundingDataType extends S.Literal("BucketFunding") {}

export class CreateBucketFundingAttributes extends S.Class<CreateBucketFundingAttributes>("CreateBucketFundingAttributes")({
  "amount": S.Number,
  "date": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateBucketFundingDataType extends S.Literal("BucketFunding") {}

export class UpdateBucketFundingAttributes extends S.Class<UpdateBucketFundingAttributes>("UpdateBucketFundingAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateClaimTargetDataType extends S.Literal("ClaimTarget") {}

export class CreateClaimTargetAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class UpdateClaimTargetDataType extends S.Literal("ClaimTarget") {}

export class UpdateClaimTargetAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreatePolicyTermDataType extends S.Literal("PolicyTerm") {}

export class CreatePolicyTermAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreatePolicyRefType extends S.Literal("Policy") {}

/**
* The type of the referenced entity.
*/
export class CreatePolicyTemplateRefType extends S.Literal("PolicyTemplate") {}

/**
* The type of the referenced entity.
*/
export class UpdatePolicyTermDataType extends S.Literal("PolicyTerm") {}

export class UpdatePolicyTermAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateProviderDataType extends S.Literal("Provider") {}

export class CreateProviderAttributes extends S.Class<CreateProviderAttributes>("CreateProviderAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "offerings": S.optionalWith(S.Array(S.Literal("ITEM", "SERVICE", "COVERAGE", "AID")), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateProviderDataType extends S.Literal("Provider") {}

export class UpdateProviderAttributes extends S.Class<UpdateProviderAttributes>("UpdateProviderAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "offerings": S.optionalWith(S.Array(S.Literal("ITEM", "SERVICE", "COVERAGE", "AID")), { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDeductibleDataType extends S.Literal("Deductible") {}

export class CreateDeductibleAttributes extends S.Class<CreateDeductibleAttributes>("CreateDeductibleAttributes")({
  "amount": S.Number,
  "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDeductibleDataType extends S.Literal("Deductible") {}

export class UpdateDeductibleAttributes extends S.Class<UpdateDeductibleAttributes>("UpdateDeductibleAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBucketDefinitionDataType extends S.Literal("BucketDefinition") {}

/**
* Is required if not set in .basis
*/
export class CreateBucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateSubCoverageRefType extends S.Literal("SubCoverage") {}

/**
* The type of the referenced entity.
*/
export class UpdateBucketDefinitionDataType extends S.Literal("BucketDefinition") {}

/**
* Is required if not set in .basis
*/
export class UpdateBucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateCoverageDataType extends S.Literal("Coverage") {}

/**
* Is required if not set in .basis
*/
export class CreateCoverageAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateCoverageTemplateRefType extends S.Literal("CoverageTemplate") {}

/**
* The type of the referenced entity.
*/
export class CreateCoverageGroupRefType extends S.Literal("CoverageGroup") {}

/**
* The type of the referenced entity.
*/
export class CreatePerilRefType extends S.Literal("Peril") {}

/**
* The type of the referenced entity.
*/
export class CreateEndorsementRefType extends S.Literal("Endorsement") {}

/**
* The type of the referenced entity.
*/
export class UpdateCoverageDataType extends S.Literal("Coverage") {}

/**
* Is required if not set in .basis
*/
export class UpdateCoverageAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateSubBucketDefinitionDataType extends S.Literal("SubBucketDefinition") {}

export class CreateSubBucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class UpdateSubBucketDefinitionDataType extends S.Literal("SubBucketDefinition") {}

export class UpdateSubBucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateSubCoverageDataType extends S.Literal("SubCoverage") {}

export class CreateSubCoverageAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateSubCoverageTemplateRefType extends S.Literal("SubCoverageTemplate") {}

/**
* The type of the referenced entity.
*/
export class UpdateSubCoverageDataType extends S.Literal("SubCoverage") {}

export class UpdateSubCoverageAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateSubBucketDataType extends S.Literal("SubBucket") {}

export class CreateSubBucketAttributes extends S.Class<CreateSubBucketAttributes>("CreateSubBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBaseSubBucketMetadataRefType extends S.Literal("BaseSubBucketMetadata") {}

/**
* The type of the referenced entity.
*/
export class UpdateSubBucketDataType extends S.Literal("SubBucket") {}

export class UpdateSubBucketAttributes extends S.Class<UpdateSubBucketAttributes>("UpdateSubBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBaseSubBucketMetadataDataType extends S.Literal("BaseSubBucketMetadata") {}

export class CreateBaseSubBucketMetadataAttributes extends S.Class<CreateBaseSubBucketMetadataAttributes>("CreateBaseSubBucketMetadataAttributes")({
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateBaseSubBucketMetadataDataType extends S.Literal("BaseSubBucketMetadata") {}

export class UpdateBaseSubBucketMetadataAttributes extends S.Class<UpdateBaseSubBucketMetadataAttributes>("UpdateBaseSubBucketMetadataAttributes")({
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSubCoverageTemplateDataType extends S.Literal("SubCoverageTemplate") {}

export class CreateSubCoverageTemplateAttributes extends S.Class<CreateSubCoverageTemplateAttributes>("CreateSubCoverageTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateEndorsementTemplateRefType extends S.Literal("EndorsementTemplate") {}

/**
* The type of the referenced entity.
*/
export class UpdateSubCoverageTemplateDataType extends S.Literal("SubCoverageTemplate") {}

export class UpdateSubCoverageTemplateAttributes extends S.Class<UpdateSubCoverageTemplateAttributes>("UpdateSubCoverageTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateCoverageTemplateDataType extends S.Literal("CoverageTemplate") {}

export class CreateCoverageTemplateAttributes extends S.Class<CreateCoverageTemplateAttributes>("CreateCoverageTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateCoverageGroupTemplateRefType extends S.Literal("CoverageGroupTemplate") {}

/**
* The type of the referenced entity.
*/
export class UpdateCoverageTemplateDataType extends S.Literal("CoverageTemplate") {}

export class UpdateCoverageTemplateAttributes extends S.Class<UpdateCoverageTemplateAttributes>("UpdateCoverageTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateCoverageGroupTemplateDataType extends S.Literal("CoverageGroupTemplate") {}

export class CreateCoverageGroupTemplateAttributes extends S.Class<CreateCoverageGroupTemplateAttributes>("CreateCoverageGroupTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateCoverageGroupTemplateDataType extends S.Literal("CoverageGroupTemplate") {}

export class UpdateCoverageGroupTemplateAttributes extends S.Class<UpdateCoverageGroupTemplateAttributes>("UpdateCoverageGroupTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreatePerilDataType extends S.Literal("Peril") {}

export class CreatePerilAttributes extends S.Class<CreatePerilAttributes>("CreatePerilAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdatePerilDataType extends S.Literal("Peril") {}

export class UpdatePerilAttributes extends S.Class<UpdatePerilAttributes>("UpdatePerilAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateEndorsementTemplateDataType extends S.Literal("EndorsementTemplate") {}

export class CreateEndorsementTemplateAttributesEffect extends S.Literal("COVERAGE", "ADJUSTMENT", "PERIL", "LOSS_SETTLEMENT_TYPE", "OTHER") {}

export class CreateEndorsementTemplateAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class UpdateEndorsementTemplateDataType extends S.Literal("EndorsementTemplate") {}

export class UpdateEndorsementTemplateAttributesEffect extends S.Literal("COVERAGE", "ADJUSTMENT", "PERIL", "LOSS_SETTLEMENT_TYPE", "OTHER") {}

export class UpdateEndorsementTemplateAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateEndorsementDataType extends S.Literal("Endorsement") {}

export class CreateEndorsementAttributesEffect extends S.Literal("COVERAGE", "ADJUSTMENT", "PERIL", "LOSS_SETTLEMENT_TYPE", "OTHER") {}

export class CreateEndorsementAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class UpdateEndorsementDataType extends S.Literal("Endorsement") {}

export class UpdateEndorsementAttributesEffect extends S.Literal("COVERAGE", "ADJUSTMENT", "PERIL", "LOSS_SETTLEMENT_TYPE", "OTHER") {}

export class UpdateEndorsementAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "REPLACEMENT_COST_VALUE", "AGREED_VALUE", "FUNCTIONAL_REPLACEMENT_COST", "STATED_AMOUNT", "GUARANTEED_REPLACEMENT_COST", "EXTENDED_REPLACEMENT_COST", "MARKET_VALUE") {}

/**
* The type of the referenced entity.
*/
export class CreateCoverageGroupDataType extends S.Literal("CoverageGroup") {}

/**
* The type of the referenced entity.
*/
export class UpdateCoverageGroupDataType extends S.Literal("CoverageGroup") {}

/**
* The type of the referenced entity.
*/
export class CreateClaimDeductibleDataType extends S.Literal("ClaimDeductible") {}

export class CreateClaimDeductibleAttributes extends S.Class<CreateClaimDeductibleAttributes>("CreateClaimDeductibleAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateClaimDeductibleDataType extends S.Literal("ClaimDeductible") {}

export class UpdateClaimDeductibleAttributes extends S.Class<UpdateClaimDeductibleAttributes>("UpdateClaimDeductibleAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreatePolicyDataType extends S.Literal("Policy") {}

export class CreatePolicyAttributesStatus extends S.Literal("ACTIVE", "CANCELED", "EXPIRED", "UNVERIFIED", "PENDING_ACTIVATION", "PENDING_CANCELLATION", "RESCINDED") {}

/**
* The type of the referenced entity.
*/
export class UpdatePolicyDataType extends S.Literal("Policy") {}

export class UpdatePolicyAttributesStatus extends S.Literal("ACTIVE", "CANCELED", "EXPIRED", "UNVERIFIED", "PENDING_ACTIVATION", "PENDING_CANCELLATION", "RESCINDED") {}

/**
* The type of the referenced entity.
*/
export class CreatePolicyTemplateDataType extends S.Literal("PolicyTemplate") {}

export class CreatePolicyTemplateAttributes extends S.Class<CreatePolicyTemplateAttributes>("CreatePolicyTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdatePolicyTemplateDataType extends S.Literal("PolicyTemplate") {}

export class UpdatePolicyTemplateAttributes extends S.Class<UpdatePolicyTemplateAttributes>("UpdatePolicyTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBaseBucketMetadataDataType extends S.Literal("BaseBucketMetadata") {}

export class CreateBaseBucketMetadataAttributes extends S.Class<CreateBaseBucketMetadataAttributes>("CreateBaseBucketMetadataAttributes")({
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateBaseBucketMetadataDataType extends S.Literal("BaseBucketMetadata") {}

export class UpdateBaseBucketMetadataAttributes extends S.Class<UpdateBaseBucketMetadataAttributes>("UpdateBaseBucketMetadataAttributes")({
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBaseSubBucketDataType extends S.Literal("BaseSubBucket") {}

export class CreateBaseSubBucketAttributes extends S.Class<CreateBaseSubBucketAttributes>("CreateBaseSubBucketAttributes")({
  "limitAmount": S.Number,
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateBaseSubBucketDataType extends S.Literal("BaseSubBucket") {}

export class UpdateBaseSubBucketAttributes extends S.Class<UpdateBaseSubBucketAttributes>("UpdateBaseSubBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemAppraisalDataType extends S.Literal("ItemAppraisal") {}

export class CreateItemAppraisalAttributes extends S.Class<CreateItemAppraisalAttributes>("CreateItemAppraisalAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemAppraisalDataType extends S.Literal("ItemAppraisal") {}

export class UpdateItemAppraisalAttributes extends S.Class<UpdateItemAppraisalAttributes>("UpdateItemAppraisalAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAppraisalDataType extends S.Literal("Appraisal") {}

export class CreateAppraisalAttributes extends S.Class<CreateAppraisalAttributes>("CreateAppraisalAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.String,
  "lineCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDepreciationModifierRefType extends S.Literal("DepreciationModifier") {}

/**
* The type of the referenced entity.
*/
export class CreateDepreciationOverrideRefType extends S.Literal("DepreciationOverride") {}

/**
* The type of the referenced entity.
*/
export class CreateAssetAttributeTypeItemTemplateRefType extends S.Literal("AssetAttributeTypeItemTemplate") {}

/**
* The type of the referenced entity.
*/
export class CreateItemTemplateRefType extends S.Literal("ItemTemplate") {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceTypeItemTemplateRefType extends S.Literal("SpaceTypeItemTemplate") {}

/**
* The type of the referenced entity.
*/
export class CreateSubmissionTrackTemplateRefType extends S.Literal("SubmissionTrackTemplate") {}

/**
* The type of the referenced entity.
*/
export class CreateAssetAttributeClassRefType extends S.Literal("AssetAttributeClass") {}

/**
* The type of the referenced entity.
*/
export class CreateAssetAttributeTypeRefType extends S.Literal("AssetAttributeType") {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentClassRefType extends S.Literal("IncidentClass") {}

/**
* The type of the referenced entity.
*/
export class CreateItemCategoryRefType extends S.Literal("ItemCategory") {}

/**
* The type of the referenced entity.
*/
export class CreateItemClassRefType extends S.Literal("ItemClass") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceCategoryRefType extends S.Literal("ServiceCategory") {}

/**
* The type of the referenced entity.
*/
export class CreateServiceClassRefType extends S.Literal("ServiceClass") {}

/**
* The type of the referenced entity.
*/
export class CreateAccountInviteRefType extends S.Literal("AccountInvite") {}

/**
* The type of the referenced entity.
*/
export class CreateAuthProfileRefType extends S.Literal("AuthProfile") {}

/**
* The type of the referenced entity.
*/
export class CreateProjectImpactRefType extends S.Literal("ProjectImpact") {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentImpactRefType extends S.Literal("IncidentImpact") {}

/**
* The type of the referenced entity.
*/
export class CreateItemMediaSuggestionRefType extends S.Literal("ItemMediaSuggestion") {}

/**
* The type of the referenced entity.
*/
export class CreateItemProductSuggestionRefType extends S.Literal("ItemProductSuggestion") {}

/**
* The type of the referenced entity.
*/
export class CreateThirdPartyDwellingRefType extends S.Literal("ThirdPartyDwelling") {}

/**
* The type of the referenced entity.
*/
export class CreateThirdPartyIndividualRefType extends S.Literal("ThirdPartyIndividual") {}

/**
* The type of the referenced entity.
*/
export class UpdateAppraisalDataType extends S.Literal("Appraisal") {}

export class UpdateAppraisalAttributes extends S.Class<UpdateAppraisalAttributes>("UpdateAppraisalAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.String, { nullable: true }),
  "lineCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAppraisalLineDataType extends S.Literal("AppraisalLine") {}

export class CreateAppraisalLineAttributes extends S.Class<CreateAppraisalLineAttributes>("CreateAppraisalLineAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateAppraisalLineDataType extends S.Literal("AppraisalLine") {}

export class UpdateAppraisalLineAttributes extends S.Class<UpdateAppraisalLineAttributes>("UpdateAppraisalLineAttributes")({
  "amount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBaseEntityDataType extends S.Literal("BaseEntity") {}

/**
* The type of the referenced entity.
*/
export class UpdateBaseEntityDataType extends S.Literal("BaseEntity") {}

/**
* The type of the referenced entity.
*/
export class CreateInvoiceDataType extends S.Literal("Invoice") {}

export class CreateInvoiceAttributes extends S.Class<CreateInvoiceAttributes>("CreateInvoiceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateInvoiceDataType extends S.Literal("Invoice") {}

export class UpdateInvoiceAttributes extends S.Class<UpdateInvoiceAttributes>("UpdateInvoiceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateInvoiceLineDataType extends S.Literal("InvoiceLine") {}

export class CreateInvoiceLineAttributes extends S.Class<CreateInvoiceLineAttributes>("CreateInvoiceLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateInvoiceLineDataType extends S.Literal("InvoiceLine") {}

export class UpdateInvoiceLineAttributes extends S.Class<UpdateInvoiceLineAttributes>("UpdateInvoiceLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemInvoiceDataType extends S.Literal("ItemInvoice") {}

export class CreateItemInvoiceAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class UpdateItemInvoiceDataType extends S.Literal("ItemInvoice") {}

export class UpdateItemInvoiceAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class CreateItemDataType extends S.Literal("Item") {}

export class CreateItemAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

export class CreateItemAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

/**
* The type of the referenced entity.
*/
export class UpdateItemDataType extends S.Literal("Item") {}

export class UpdateItemAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

export class UpdateItemAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

/**
* The type of the referenced entity.
*/
export class CreateItemTypeDataType extends S.Literal("ItemType") {}

export class CreateItemTypeAttributes extends S.Class<CreateItemTypeAttributes>("CreateItemTypeAttributes")({
  "lifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationPercentage": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemTypeDataType extends S.Literal("ItemType") {}

export class UpdateItemTypeAttributes extends S.Class<UpdateItemTypeAttributes>("UpdateItemTypeAttributes")({
  "lifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationPercentage": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDepreciationModifierDataType extends S.Literal("DepreciationModifier") {}

export class CreateDepreciationModifierAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

export class CreateDepreciationModifierAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

/**
* The type of the referenced entity.
*/
export class UpdateDepreciationModifierDataType extends S.Literal("DepreciationModifier") {}

export class UpdateDepreciationModifierAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

export class UpdateDepreciationModifierAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

/**
* The type of the referenced entity.
*/
export class CreateDepreciationScheduleDataType extends S.Literal("DepreciationSchedule") {}

export class CreateDepreciationScheduleAttributes extends S.Class<CreateDepreciationScheduleAttributes>("CreateDepreciationScheduleAttributes")({
  "lifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationPercentage": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDepreciationScheduleDataType extends S.Literal("DepreciationSchedule") {}

export class UpdateDepreciationScheduleAttributes extends S.Class<UpdateDepreciationScheduleAttributes>("UpdateDepreciationScheduleAttributes")({
  "lifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationPercentage": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDepreciationOverrideDataType extends S.Literal("DepreciationOverride") {}

export class CreateDepreciationOverrideAttributes extends S.Class<CreateDepreciationOverrideAttributes>("CreateDepreciationOverrideAttributes")({
  "ageInMonths": S.optionalWith(S.Number, { nullable: true }),
  "valuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDepreciationOverrideDataType extends S.Literal("DepreciationOverride") {}

export class UpdateDepreciationOverrideAttributes extends S.Class<UpdateDepreciationOverrideAttributes>("UpdateDepreciationOverrideAttributes")({
  "ageInMonths": S.optionalWith(S.Number, { nullable: true }),
  "valuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemClassDataType extends S.Literal("ItemClass") {}

export class CreateItemClassAttributes extends S.Class<CreateItemClassAttributes>("CreateItemClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemClassDataType extends S.Literal("ItemClass") {}

export class UpdateItemClassAttributes extends S.Class<UpdateItemClassAttributes>("UpdateItemClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemCategoryDataType extends S.Literal("ItemCategory") {}

export class CreateItemCategoryAttributes extends S.Class<CreateItemCategoryAttributes>("CreateItemCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemCategoryDataType extends S.Literal("ItemCategory") {}

export class UpdateItemCategoryAttributes extends S.Class<UpdateItemCategoryAttributes>("UpdateItemCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreatePaymentDataType extends S.Literal("Payment") {}

export class CreatePaymentAttributes extends S.Class<CreatePaymentAttributes>("CreatePaymentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdatePaymentDataType extends S.Literal("Payment") {}

export class UpdatePaymentAttributes extends S.Class<UpdatePaymentAttributes>("UpdatePaymentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreatePaymentLineDataType extends S.Literal("PaymentLine") {}

export class CreatePaymentLineAttributes extends S.Class<CreatePaymentLineAttributes>("CreatePaymentLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdatePaymentLineDataType extends S.Literal("PaymentLine") {}

export class UpdatePaymentLineAttributes extends S.Class<UpdatePaymentLineAttributes>("UpdatePaymentLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemPaymentDataType extends S.Literal("ItemPayment") {}

export class CreateItemPaymentAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class UpdateItemPaymentDataType extends S.Literal("ItemPayment") {}

export class UpdateItemPaymentAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactPaymentDataType extends S.Literal("ItemImpactPayment") {}

export class CreateItemImpactPaymentAttributes extends S.Class<CreateItemImpactPaymentAttributes>("CreateItemImpactPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemImpactPaymentDataType extends S.Literal("ItemImpactPayment") {}

export class UpdateItemImpactPaymentAttributes extends S.Class<UpdateItemImpactPaymentAttributes>("UpdateItemImpactPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskPaymentDataType extends S.Literal("ServiceTaskPayment") {}

export class CreateServiceTaskPaymentAttributes extends S.Class<CreateServiceTaskPaymentAttributes>("CreateServiceTaskPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceTaskPaymentDataType extends S.Literal("ServiceTaskPayment") {}

export class UpdateServiceTaskPaymentAttributes extends S.Class<UpdateServiceTaskPaymentAttributes>("UpdateServiceTaskPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskDataType extends S.Literal("ServiceTask") {}

export class CreateServiceTaskAttributes extends S.Class<CreateServiceTaskAttributes>("CreateServiceTaskAttributes")({
  "name": S.String,
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceTaskDataType extends S.Literal("ServiceTask") {}

export class UpdateServiceTaskAttributes extends S.Class<UpdateServiceTaskAttributes>("UpdateServiceTaskAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactInvoiceDataType extends S.Literal("ItemImpactInvoice") {}

export class CreateItemImpactInvoiceAttributes extends S.Class<CreateItemImpactInvoiceAttributes>("CreateItemImpactInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemImpactInvoiceDataType extends S.Literal("ItemImpactInvoice") {}

export class UpdateItemImpactInvoiceAttributes extends S.Class<UpdateItemImpactInvoiceAttributes>("UpdateItemImpactInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskInvoiceDataType extends S.Literal("ServiceTaskInvoice") {}

export class CreateServiceTaskInvoiceAttributes extends S.Class<CreateServiceTaskInvoiceAttributes>("CreateServiceTaskInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceTaskInvoiceDataType extends S.Literal("ServiceTaskInvoice") {}

export class UpdateServiceTaskInvoiceAttributes extends S.Class<UpdateServiceTaskInvoiceAttributes>("UpdateServiceTaskInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentReportDataType extends S.Literal("IncidentReport") {}

export class CreateIncidentReportAttributes extends S.Class<CreateIncidentReportAttributes>("CreateIncidentReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateIncidentReportDataType extends S.Literal("IncidentReport") {}

export class UpdateIncidentReportAttributes extends S.Class<UpdateIncidentReportAttributes>("UpdateIncidentReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreatePoliceReportDataType extends S.Literal("PoliceReport") {}

export class CreatePoliceReportAttributes extends S.Class<CreatePoliceReportAttributes>("CreatePoliceReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdatePoliceReportDataType extends S.Literal("PoliceReport") {}

export class UpdatePoliceReportAttributes extends S.Class<UpdatePoliceReportAttributes>("UpdatePoliceReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateParamedicReportDataType extends S.Literal("ParamedicReport") {}

export class CreateParamedicReportAttributes extends S.Class<CreateParamedicReportAttributes>("CreateParamedicReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateParamedicReportDataType extends S.Literal("ParamedicReport") {}

export class UpdateParamedicReportAttributes extends S.Class<UpdateParamedicReportAttributes>("UpdateParamedicReportAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateContractDataType extends S.Literal("Contract") {}

export class CreateContractAttributes extends S.Class<CreateContractAttributes>("CreateContractAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateContractDataType extends S.Literal("Contract") {}

export class UpdateContractAttributes extends S.Class<UpdateContractAttributes>("UpdateContractAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateRentRollDataType extends S.Literal("RentRoll") {}

export class CreateRentRollAttributes extends S.Class<CreateRentRollAttributes>("CreateRentRollAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateRentRollDataType extends S.Literal("RentRoll") {}

export class UpdateRentRollAttributes extends S.Class<UpdateRentRollAttributes>("UpdateRentRollAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreatePermitDataType extends S.Literal("Permit") {}

export class CreatePermitAttributes extends S.Class<CreatePermitAttributes>("CreatePermitAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdatePermitDataType extends S.Literal("Permit") {}

export class UpdatePermitAttributes extends S.Class<UpdatePermitAttributes>("UpdatePermitAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateBlueprintDataType extends S.Literal("Blueprint") {}

export class CreateBlueprintAttributes extends S.Class<CreateBlueprintAttributes>("CreateBlueprintAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateBlueprintDataType extends S.Literal("Blueprint") {}

export class UpdateBlueprintAttributes extends S.Class<UpdateBlueprintAttributes>("UpdateBlueprintAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDeclarationsPageDataType extends S.Literal("DeclarationsPage") {}

export class CreateDeclarationsPageAttributes extends S.Class<CreateDeclarationsPageAttributes>("CreateDeclarationsPageAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDeclarationsPageDataType extends S.Literal("DeclarationsPage") {}

export class UpdateDeclarationsPageAttributes extends S.Class<UpdateDeclarationsPageAttributes>("UpdateDeclarationsPageAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreatePolicyJacketDataType extends S.Literal("PolicyJacket") {}

export class CreatePolicyJacketAttributes extends S.Class<CreatePolicyJacketAttributes>("CreatePolicyJacketAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdatePolicyJacketDataType extends S.Literal("PolicyJacket") {}

export class UpdatePolicyJacketAttributes extends S.Class<UpdatePolicyJacketAttributes>("UpdatePolicyJacketAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateScopeOfLossDataType extends S.Literal("ScopeOfLoss") {}

export class CreateScopeOfLossAttributes extends S.Class<CreateScopeOfLossAttributes>("CreateScopeOfLossAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateScopeOfLossDataType extends S.Literal("ScopeOfLoss") {}

export class UpdateScopeOfLossAttributes extends S.Class<UpdateScopeOfLossAttributes>("UpdateScopeOfLossAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDeliveryPaperworkDataType extends S.Literal("DeliveryPaperwork") {}

export class CreateDeliveryPaperworkAttributes extends S.Class<CreateDeliveryPaperworkAttributes>("CreateDeliveryPaperworkAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDeliveryPaperworkDataType extends S.Literal("DeliveryPaperwork") {}

export class UpdateDeliveryPaperworkAttributes extends S.Class<UpdateDeliveryPaperworkAttributes>("UpdateDeliveryPaperworkAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateProductSpecDataType extends S.Literal("ProductSpec") {}

export class CreateProductSpecAttributes extends S.Class<CreateProductSpecAttributes>("CreateProductSpecAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateProductSpecDataType extends S.Literal("ProductSpec") {}

export class UpdateProductSpecAttributes extends S.Class<UpdateProductSpecAttributes>("UpdateProductSpecAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateUserManualDataType extends S.Literal("UserManual") {}

export class CreateUserManualAttributes extends S.Class<CreateUserManualAttributes>("CreateUserManualAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateUserManualDataType extends S.Literal("UserManual") {}

export class UpdateUserManualAttributes extends S.Class<UpdateUserManualAttributes>("UpdateUserManualAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateWarrantyDataType extends S.Literal("Warranty") {}

export class CreateWarrantyAttributes extends S.Class<CreateWarrantyAttributes>("CreateWarrantyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateWarrantyDataType extends S.Literal("Warranty") {}

export class UpdateWarrantyAttributes extends S.Class<UpdateWarrantyAttributes>("UpdateWarrantyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDeedDataType extends S.Literal("Deed") {}

export class CreateDeedAttributes extends S.Class<CreateDeedAttributes>("CreateDeedAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDeedDataType extends S.Literal("Deed") {}

export class UpdateDeedAttributes extends S.Class<UpdateDeedAttributes>("UpdateDeedAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemChangeOrderDataType extends S.Literal("ItemChangeOrder") {}

export class CreateItemChangeOrderAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class UpdateItemChangeOrderDataType extends S.Literal("ItemChangeOrder") {}

export class UpdateItemChangeOrderAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class CreateItemEstimateDataType extends S.Literal("ItemEstimate") {}

export class CreateItemEstimateAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class UpdateItemEstimateDataType extends S.Literal("ItemEstimate") {}

export class UpdateItemEstimateAttributesPurpose extends S.Literal("PURCHASE", "BUILD", "SOURCING", "REPAIR", "MODIFICATION", "RELOCATION", "REMOVAL", "MAINTENANCE", "INSPECTION", "APPRAISAL") {}

/**
* The type of the referenced entity.
*/
export class CreateChangeOrderLineDataType extends S.Literal("ChangeOrderLine") {}

export class CreateChangeOrderLineAttributes extends S.Class<CreateChangeOrderLineAttributes>("CreateChangeOrderLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateChangeOrderLineDataType extends S.Literal("ChangeOrderLine") {}

export class UpdateChangeOrderLineAttributes extends S.Class<UpdateChangeOrderLineAttributes>("UpdateChangeOrderLineAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactChangeOrderDataType extends S.Literal("ItemImpactChangeOrder") {}

export class CreateItemImpactChangeOrderAttributes extends S.Class<CreateItemImpactChangeOrderAttributes>("CreateItemImpactChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemImpactChangeOrderDataType extends S.Literal("ItemImpactChangeOrder") {}

export class UpdateItemImpactChangeOrderAttributes extends S.Class<UpdateItemImpactChangeOrderAttributes>("UpdateItemImpactChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemImpactEstimateDataType extends S.Literal("ItemImpactEstimate") {}

export class CreateItemImpactEstimateAttributes extends S.Class<CreateItemImpactEstimateAttributes>("CreateItemImpactEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemImpactEstimateDataType extends S.Literal("ItemImpactEstimate") {}

export class UpdateItemImpactEstimateAttributes extends S.Class<UpdateItemImpactEstimateAttributes>("UpdateItemImpactEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskChangeOrderDataType extends S.Literal("ServiceTaskChangeOrder") {}

export class CreateServiceTaskChangeOrderAttributes extends S.Class<CreateServiceTaskChangeOrderAttributes>("CreateServiceTaskChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceTaskChangeOrderDataType extends S.Literal("ServiceTaskChangeOrder") {}

export class UpdateServiceTaskChangeOrderAttributes extends S.Class<UpdateServiceTaskChangeOrderAttributes>("UpdateServiceTaskChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTaskEstimateDataType extends S.Literal("ServiceTaskEstimate") {}

export class CreateServiceTaskEstimateAttributes extends S.Class<CreateServiceTaskEstimateAttributes>("CreateServiceTaskEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceTaskEstimateDataType extends S.Literal("ServiceTaskEstimate") {}

export class UpdateServiceTaskEstimateAttributes extends S.Class<UpdateServiceTaskEstimateAttributes>("UpdateServiceTaskEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateEstimateLineDataType extends S.Literal("EstimateLine") {}

export class CreateEstimateLineAttributes extends S.Class<CreateEstimateLineAttributes>("CreateEstimateLineAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateEstimateLineDataType extends S.Literal("EstimateLine") {}

export class UpdateEstimateLineAttributes extends S.Class<UpdateEstimateLineAttributes>("UpdateEstimateLineAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateDisasterDataType extends S.Literal("Disaster") {}

export class CreateDisasterAttributes extends S.Class<CreateDisasterAttributes>("CreateDisasterAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateDisasterDataType extends S.Literal("Disaster") {}

export class UpdateDisasterAttributes extends S.Class<UpdateDisasterAttributes>("UpdateDisasterAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentTypeDataType extends S.Literal("IncidentType") {}

export class CreateIncidentTypeAttributes extends S.Class<CreateIncidentTypeAttributes>("CreateIncidentTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateIncidentTypeDataType extends S.Literal("IncidentType") {}

export class UpdateIncidentTypeAttributes extends S.Class<UpdateIncidentTypeAttributes>("UpdateIncidentTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentClassDataType extends S.Literal("IncidentClass") {}

export class CreateIncidentClassAttributes extends S.Class<CreateIncidentClassAttributes>("CreateIncidentClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateIncidentClassDataType extends S.Literal("IncidentClass") {}

export class UpdateIncidentClassAttributes extends S.Class<UpdateIncidentClassAttributes>("UpdateIncidentClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAssetAttributeTypeItemTemplateDataType extends S.Literal("AssetAttributeTypeItemTemplate") {}

export class CreateAssetAttributeTypeItemTemplateAttributes extends S.Class<CreateAssetAttributeTypeItemTemplateAttributes>("CreateAssetAttributeTypeItemTemplateAttributes")({
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "likelihood": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateAssetAttributeTypeItemTemplateDataType extends S.Literal("AssetAttributeTypeItemTemplate") {}

export class UpdateAssetAttributeTypeItemTemplateAttributes extends S.Class<UpdateAssetAttributeTypeItemTemplateAttributes>("UpdateAssetAttributeTypeItemTemplateAttributes")({
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "likelihood": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAssetAttributeTypeDataType extends S.Literal("AssetAttributeType") {}

export class CreateAssetAttributeTypeAttributes extends S.Class<CreateAssetAttributeTypeAttributes>("CreateAssetAttributeTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "question": S.optionalWith(S.String, { nullable: true }),
  "maxMagnitude": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateAssetAttributeTypeDataType extends S.Literal("AssetAttributeType") {}

export class UpdateAssetAttributeTypeAttributes extends S.Class<UpdateAssetAttributeTypeAttributes>("UpdateAssetAttributeTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "question": S.optionalWith(S.String, { nullable: true }),
  "maxMagnitude": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAssetAttributeClassDataType extends S.Literal("AssetAttributeClass") {}

export class CreateAssetAttributeClassAttributes extends S.Class<CreateAssetAttributeClassAttributes>("CreateAssetAttributeClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "question": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateAssetAttributeClassDataType extends S.Literal("AssetAttributeClass") {}

export class UpdateAssetAttributeClassAttributes extends S.Class<UpdateAssetAttributeClassAttributes>("UpdateAssetAttributeClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "question": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateItemTemplateDataType extends S.Literal("ItemTemplate") {}

export class CreateItemTemplateAttributes extends S.Class<CreateItemTemplateAttributes>("CreateItemTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateItemTemplateDataType extends S.Literal("ItemTemplate") {}

export class UpdateItemTemplateAttributes extends S.Class<UpdateItemTemplateAttributes>("UpdateItemTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSpaceTypeItemTemplateDataType extends S.Literal("SpaceTypeItemTemplate") {}

export class CreateSpaceTypeItemTemplateAttributes extends S.Class<CreateSpaceTypeItemTemplateAttributes>("CreateSpaceTypeItemTemplateAttributes")({
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "likelihood": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateSpaceTypeItemTemplateDataType extends S.Literal("SpaceTypeItemTemplate") {}

export class UpdateSpaceTypeItemTemplateAttributes extends S.Class<UpdateSpaceTypeItemTemplateAttributes>("UpdateSpaceTypeItemTemplateAttributes")({
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "likelihood": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateSubmissionTrackTemplateDataType extends S.Literal("SubmissionTrackTemplate") {}

export class CreateSubmissionTrackTemplateAttributes extends S.Class<CreateSubmissionTrackTemplateAttributes>("CreateSubmissionTrackTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateSubmissionTrackTemplateDataType extends S.Literal("SubmissionTrackTemplate") {}

export class UpdateSubmissionTrackTemplateAttributes extends S.Class<UpdateSubmissionTrackTemplateAttributes>("UpdateSubmissionTrackTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceCategoryDataType extends S.Literal("ServiceCategory") {}

export class CreateServiceCategoryAttributes extends S.Class<CreateServiceCategoryAttributes>("CreateServiceCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceCategoryDataType extends S.Literal("ServiceCategory") {}

export class UpdateServiceCategoryAttributes extends S.Class<UpdateServiceCategoryAttributes>("UpdateServiceCategoryAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceClassDataType extends S.Literal("ServiceClass") {}

export class CreateServiceClassAttributes extends S.Class<CreateServiceClassAttributes>("CreateServiceClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceClassDataType extends S.Literal("ServiceClass") {}

export class UpdateServiceClassAttributes extends S.Class<UpdateServiceClassAttributes>("UpdateServiceClassAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateServiceTypeDataType extends S.Literal("ServiceType") {}

export class CreateServiceTypeAttributes extends S.Class<CreateServiceTypeAttributes>("CreateServiceTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateServiceTypeDataType extends S.Literal("ServiceType") {}

export class UpdateServiceTypeAttributes extends S.Class<UpdateServiceTypeAttributes>("UpdateServiceTypeAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateAccountInviteDataType extends S.Literal("AccountInvite") {}

/**
* What level of permissions the user has for this account.
*/
export class CreateAccountInviteAttributesRole extends S.Literal("OWNER", "MANAGER", "COLLABORATOR") {}

/**
* The type of the referenced entity.
*/
export class UpdateAccountInviteDataType extends S.Literal("AccountInvite") {}

/**
* What level of permissions the user has for this account.
*/
export class UpdateAccountInviteAttributesRole extends S.Literal("OWNER", "MANAGER", "COLLABORATOR") {}

/**
* The type of the referenced entity.
*/
export class CreateAuthProfileDataType extends S.Literal("AuthProfile") {}

export class CreateAuthProfileAttributesProvider extends S.Literal("CLERK", "LOGTO", "TEST") {}

/**
* The type of the referenced entity.
*/
export class UpdateAuthProfileDataType extends S.Literal("AuthProfile") {}

export class UpdateAuthProfileAttributesProvider extends S.Literal("CLERK", "LOGTO", "TEST") {}

/**
* The type of the referenced entity.
*/
export class CreateEntrySourceMediaDataType extends S.Literal("EntrySourceMedia") {}

export class CreateEntrySourceMediaAttributes extends S.Class<CreateEntrySourceMediaAttributes>("CreateEntrySourceMediaAttributes")({
  "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
  "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateEntrySourceMediaDataType extends S.Literal("EntrySourceMedia") {}

export class UpdateEntrySourceMediaAttributes extends S.Class<UpdateEntrySourceMediaAttributes>("UpdateEntrySourceMediaAttributes")({
  "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
  "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateThirdPartyImpactDataType extends S.Literal("ThirdPartyImpact") {}

export class CreateThirdPartyImpactAttributes extends S.Class<CreateThirdPartyImpactAttributes>("CreateThirdPartyImpactAttributes")({
  "name": S.String,
  "description": S.String,
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateThirdPartyImpactDataType extends S.Literal("ThirdPartyImpact") {}

export class UpdateThirdPartyImpactAttributes extends S.Class<UpdateThirdPartyImpactAttributes>("UpdateThirdPartyImpactAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateThirdPartyDataType extends S.Literal("ThirdParty") {}

/**
* The type of the referenced entity.
*/
export class UpdateThirdPartyDataType extends S.Literal("ThirdParty") {}

/**
* The type of the referenced entity.
*/
export class CreateThirdPartyDwellingDataType extends S.Literal("ThirdPartyDwelling") {}

export class CreateThirdPartyDwellingAttributes extends S.Class<CreateThirdPartyDwellingAttributes>("CreateThirdPartyDwellingAttributes")({
  "streetAddress": S.String,
  "streetAddress2": S.optionalWith(S.String, { nullable: true }),
  "city": S.String,
  "state": S.String,
  "postal": S.String
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateThirdPartyDwellingDataType extends S.Literal("ThirdPartyDwelling") {}

export class UpdateThirdPartyDwellingAttributes extends S.Class<UpdateThirdPartyDwellingAttributes>("UpdateThirdPartyDwellingAttributes")({
  "streetAddress": S.optionalWith(S.String, { nullable: true }),
  "streetAddress2": S.optionalWith(S.String, { nullable: true }),
  "city": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(S.String, { nullable: true }),
  "postal": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateThirdPartyIndividualDataType extends S.Literal("ThirdPartyIndividual") {}

export class CreateThirdPartyIndividualAttributes extends S.Class<CreateThirdPartyIndividualAttributes>("CreateThirdPartyIndividualAttributes")({
  "name": S.String
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateThirdPartyIndividualDataType extends S.Literal("ThirdPartyIndividual") {}

export class UpdateThirdPartyIndividualAttributes extends S.Class<UpdateThirdPartyIndividualAttributes>("UpdateThirdPartyIndividualAttributes")({
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the referenced entity.
*/
export class CreateProjectImpactDataType extends S.Literal("ProjectImpact") {}

export class CreateProjectImpactAttributesExtent extends S.Literal("PARTIAL", "TOTAL") {}

/**
* The type of the referenced entity.
*/
export class UpdateProjectImpactDataType extends S.Literal("ProjectImpact") {}

export class UpdateProjectImpactAttributesExtent extends S.Literal("PARTIAL", "TOTAL") {}

/**
* The type of the referenced entity.
*/
export class CreateIncidentImpactDataType extends S.Literal("IncidentImpact") {}

export class CreateIncidentImpactAttributesExtent extends S.Literal("PARTIAL", "TOTAL") {}

/**
* The type of the referenced entity.
*/
export class UpdateIncidentImpactDataType extends S.Literal("IncidentImpact") {}

export class UpdateIncidentImpactAttributesExtent extends S.Literal("PARTIAL", "TOTAL") {}

/**
* The type of the referenced entity.
*/
export class CreateItemMediaSuggestionDataType extends S.Literal("ItemMediaSuggestion") {}

export class CreateItemMediaSuggestionAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

export class CreateItemMediaSuggestionAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

/**
* The type of the referenced entity.
*/
export class UpdateItemMediaSuggestionDataType extends S.Literal("ItemMediaSuggestion") {}

export class UpdateItemMediaSuggestionAttributesQuality extends S.Literal("BESPOKE", "LUXURY", "MAINSTREAM", "BUDGET", "GENERIC") {}

export class UpdateItemMediaSuggestionAttributesCondition extends S.Literal("NEW", "EXCELLENT", "AVERAGE", "FAIR", "POOR") {}

/**
* The type of the referenced entity.
*/
export class CreateItemProductSuggestionDataType extends S.Literal("ItemProductSuggestion") {}

export class CreateItemProductSuggestionAttributesSource extends S.Literal("GOOGLE_SHOPPING", "AMAZON") {}

/**
* The type of the referenced entity.
*/
export class UpdateItemProductSuggestionDataType extends S.Literal("ItemProductSuggestion") {}

export class UpdateItemProductSuggestionAttributesSource extends S.Literal("GOOGLE_SHOPPING", "AMAZON") {}

/**
* The type of the referenced entity.
*/
export class CreateUserAccountRoleDataType extends S.Literal("UserAccountRole") {}

/**
* What level of permissions the user has for this account.
*/
export class CreateUserAccountRoleAttributesRole extends S.Literal("OWNER", "MANAGER", "COLLABORATOR") {}

/**
* The type of the referenced entity.
*/
export class UpdateUserAccountRoleDataType extends S.Literal("UserAccountRole") {}

/**
* What level of permissions the user has for this account.
*/
export class UpdateUserAccountRoleAttributesRole extends S.Literal("OWNER", "MANAGER", "COLLABORATOR") {}

/**
* The type of the referenced entity.
*/
export class CreateFinancialDocumentDataType extends S.Literal("FinancialDocument") {}

export class CreateFinancialDocumentAttributes extends S.Class<CreateFinancialDocumentAttributes>("CreateFinancialDocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.String
}) {}

/**
* The type of the referenced entity.
*/
export class UpdateFinancialDocumentDataType extends S.Literal("FinancialDocument") {}

export class UpdateFinancialDocumentAttributes extends S.Class<UpdateFinancialDocumentAttributes>("UpdateFinancialDocumentAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "amount": S.optionalWith(S.String, { nullable: true })
}) {}

export class UserControllerGetUserPrimaryEmailAddressParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class UserControllerGetUserPrimaryPhoneNumberParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class UserControllerGetUserDefaultAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class UserControllerGetUserAccountRolesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ListLinkObject extends S.Class<ListLinkObject>("ListLinkObject")({
  /**
* Link to the current entity set.
*/
"self": S.optionalWith(S.String, { nullable: true }),
  /**
* Link to the next entity set, if available.
*/
"next": S.optionalWith(S.String, { nullable: true }),
  /**
* Link to the previous entity set, if available.
*/
"prev": S.optionalWith(S.String, { nullable: true })
}) {}

export class UserAccountRoleControllerGetUserAccountRoleListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerCreateUserAccountRoleParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerGetUserAccountRoleByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerDeleteUserAccountRoleByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerUpdateUserAccountRoleByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerGetUserAccountRoleUserParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerGetUserAccountRoleUserRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerPatchUserAccountRoleUserRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerGetUserAccountRoleAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerGetUserAccountRoleAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserAccountRoleControllerPatchUserAccountRoleAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyControllerGetThirdPartyListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyControllerCreateThirdPartyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyControllerGetThirdPartyByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyControllerDeleteThirdPartyByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyControllerUpdateThirdPartyByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyControllerGetThirdPartyProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyControllerGetThirdPartyProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyControllerPatchThirdPartyProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyIndividualControllerGetThirdPartyIndividualListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyIndividualControllerCreateThirdPartyIndividualParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyIndividualControllerGetThirdPartyIndividualByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyIndividualControllerDeleteThirdPartyIndividualByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyIndividualControllerUpdateThirdPartyIndividualByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyIndividualControllerGetThirdPartyIndividualProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyIndividualControllerGetThirdPartyIndividualProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyIndividualControllerPatchThirdPartyIndividualProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerCreateThirdPartyImpactParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerDeleteThirdPartyImpactByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerUpdateThirdPartyImpactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerPatchThirdPartyImpactProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerPatchThirdPartyImpactAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerPatchThirdPartyImpactCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerPatchThirdPartyImpactSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyImpactControllerPatchThirdPartyImpactThirdPartyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerGetThirdPartyDwellingListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerCreateThirdPartyDwellingParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerGetThirdPartyDwellingByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerDeleteThirdPartyDwellingByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerUpdateThirdPartyDwellingByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerGetThirdPartyDwellingProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerGetThirdPartyDwellingProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerPatchThirdPartyDwellingProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerGetThirdPartyDwellingCountryParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerGetThirdPartyDwellingCountryRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ThirdPartyDwellingControllerPatchThirdPartyDwellingCountryRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerCreateSubCoverageParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerDeleteSubCoverageByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerUpdateSubCoverageByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageParentParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageParentRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerPatchSubCoverageParentRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageBucketsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerPatchSubCoverageTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageEndorsementsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerGetSubCoverageEndorsementsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerPostSubCoverageEndorsementsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerDeleteSubCoverageEndorsementsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubCoverageControllerPatchSubCoverageEndorsementsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerCreateSubBucketParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerDeleteSubBucketByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerUpdateSubBucketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketParentParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketParentRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerPatchSubBucketParentRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketFundingSourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketFundingSourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketDefinitionParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerGetSubBucketDefinitionRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketControllerPatchSubBucketDefinitionRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SubBucketDefinitionControllerGetSubBucketDefinitionListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SubBucketDefinitionControllerCreateSubBucketDefinitionParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SubBucketDefinitionControllerGetSubBucketDefinitionByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SubBucketDefinitionControllerUpdateSubBucketDefinitionByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SubBucketDefinitionControllerGetSubBucketDefinitionParentParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SubBucketDefinitionControllerGetSubBucketDefinitionBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceControllerGetSpaceListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceControllerCreateSpaceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceControllerGetSpaceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceControllerDeleteSpaceByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceControllerUpdateSpaceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceControllerGetSpaceTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceControllerGetSpaceTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceControllerPatchSpaceTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceControllerGetSpaceGroupParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceControllerGetSpaceGroupRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceControllerPatchSpaceGroupRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceControllerGetSpaceAssetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceControllerGetSpaceAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceControllerPatchSpaceAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerGetSpaceGroupListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerCreateSpaceGroupParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerGetSpaceGroupByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerDeleteSpaceGroupByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerUpdateSpaceGroupByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerGetSpaceGroupTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerGetSpaceGroupTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerPatchSpaceGroupTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerGetSpaceGroupAssetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerGetSpaceGroupAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerPatchSpaceGroupAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerGetSpaceGroupSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerGetSpaceGroupSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerPostSpaceGroupSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerDeleteSpaceGroupSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceGroupControllerPatchSpaceGroupSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerCreateServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerDeleteServiceByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerUpdateServiceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerPatchServiceProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerPatchServiceAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerPatchServiceCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceAppraisalsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceAppraisalsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceSelectedAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerPatchServiceSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceRelevantAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceRelevantAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerPatchServiceTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServicePaymentsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServicePaymentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceInvoicesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceInvoicesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceEstimatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceEstimatesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceChangeOrdersParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServicePaidLineItemsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServicePaidLineItemsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceInvoicedLineItemsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceInvoicedLineItemsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceEstimatedLineItemsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceControllerGetServiceEstimatedLineItemsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerCreateServiceTaskParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerDeleteServiceTaskByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerUpdateServiceTaskByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerPatchServiceTaskProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerPatchServiceTaskAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerPatchServiceTaskCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskAppraisalsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskAppraisalsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskSelectedAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerPatchServiceTaskSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskRelevantAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskRelevantAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerPatchServiceTaskServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskPaymentsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskPaymentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskInvoicesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskInvoicesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskEstimatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskEstimatesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskChangeOrdersParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ServiceTaskControllerGetServiceTaskChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectControllerGetProjectListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectControllerCreateProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectControllerGetProjectByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectControllerDeleteProjectByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectControllerUpdateProjectByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectControllerGetProjectAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectControllerGetProjectAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectControllerPatchProjectAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectControllerGetProjectMediaAttachmentsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectControllerGetProjectMediaAttachmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectControllerPostProjectMediaAttachmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectControllerDeleteProjectMediaAttachmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectControllerPatchProjectMediaAttachmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerGetProjectMediaListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerCreateProjectMediaParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerGetProjectMediaByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerDeleteProjectMediaByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerUpdateProjectMediaByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerGetProjectMediaMediaParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerGetProjectMediaMediaRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerPatchProjectMediaMediaRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerGetProjectMediaProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerGetProjectMediaProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectMediaControllerPatchProjectMediaProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerGetProjectImpactListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerCreateProjectImpactParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerGetProjectImpactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerDeleteProjectImpactByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerUpdateProjectImpactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerGetProjectImpactAssetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerGetProjectImpactAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerPatchProjectImpactAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerGetProjectImpactProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerGetProjectImpactProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerPatchProjectImpactProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerGetProjectImpactSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerGetProjectImpactSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerPostProjectImpactSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerDeleteProjectImpactSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProjectImpactControllerPatchProjectImpactSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerCreatePolicyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerDeletePolicyByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerUpdatePolicyByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyProviderParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyProviderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerPatchPolicyProviderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerPatchPolicyTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerPatchPolicyCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerPostPolicyAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerDeletePolicyAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerPatchPolicyAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerPatchPolicyAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyTermsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyControllerGetPolicyTermsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerCreatePolicyTermParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerDeletePolicyTermByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerUpdatePolicyTermByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermProviderParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermProviderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerPatchPolicyTermCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermDeductiblesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermDeductiblesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermBucketDefinitionsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermBucketDefinitionsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermPolicyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermPolicyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerPatchPolicyTermPolicyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerPostPolicyTermAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerDeletePolicyTermAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerPatchPolicyTermAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerGetPolicyTermTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyTermControllerPatchPolicyTermTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PhoneNumberControllerGetPhoneNumberListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PhoneNumberControllerCreatePhoneNumberParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class PhoneNumberControllerGetPhoneNumberByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class PhoneNumberControllerUpdatePhoneNumberByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class PhoneNumberControllerGetPhoneNumberIdentityParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class MediaControllerGetMediaListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerCreateMediaParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerDeleteMediaByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerUpdateMediaByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerPatchMediaAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerPatchMediaFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerPostMediaAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerDeleteMediaAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerPatchMediaAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerPostMediaSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerDeleteMediaSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerPatchMediaSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaProjectAssignmentsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaProjectAssignmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerPostMediaProjectAssignmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerDeleteMediaProjectAssignmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerPatchMediaProjectAssignmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaEntrySourceAnnotationsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class MediaControllerGetMediaEntrySourceAnnotationsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerCreateItemParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerDeleteItemByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerUpdateItemByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerPatchItemProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerPatchItemAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerPatchItemCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemAppraisalsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemAppraisalsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemSelectedAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerPatchItemSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemRelevantAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemRelevantAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerPatchItemTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemAssetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerPatchItemAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemSpaceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemSpaceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerPatchItemSpaceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemReplacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemReplacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemPaymentsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemPaymentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemInvoicesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemInvoicesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemEstimatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemEstimatesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemChangeOrdersParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemImpactsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemControllerGetItemImpactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemProductSuggestionControllerGetItemProductSuggestionListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemProductSuggestionControllerCreateItemProductSuggestionParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemProductSuggestionControllerGetItemProductSuggestionByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemProductSuggestionControllerDeleteItemProductSuggestionByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemProductSuggestionControllerUpdateItemProductSuggestionByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemProductSuggestionControllerGetItemProductSuggestionItemParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemProductSuggestionControllerGetItemProductSuggestionItemRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemProductSuggestionControllerPatchItemProductSuggestionItemRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerCreateItemMediaSuggestionParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerDeleteItemMediaSuggestionByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerUpdateItemMediaSuggestionByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionMediaParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionMediaRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerPatchItemMediaSuggestionMediaRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionItemParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionItemRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerPatchItemMediaSuggestionItemRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerPatchItemMediaSuggestionExistingItemsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerPatchItemMediaSuggestionTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionAssetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerPatchItemMediaSuggestionAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemMediaSuggestionControllerPatchItemMediaSuggestionSpaceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerCreateItemImpactParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerDeleteItemImpactByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerUpdateItemImpactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerPatchItemImpactProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerPatchItemImpactAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerPatchItemImpactCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactAppraisalsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactAppraisalsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactSelectedAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerPatchItemImpactSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactRelevantAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactRelevantAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactItemParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactItemRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerPatchItemImpactItemRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactReplacementParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactReplacementRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerPatchItemImpactReplacementRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactPaymentsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactPaymentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactInvoicesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactInvoicesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactEstimatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactEstimatesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactChangeOrdersParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactItemTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ItemImpactControllerGetItemImpactItemTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentControllerCreateIncidentParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentControllerDeleteIncidentByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerUpdateIncidentByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerPatchIncidentAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentMediaAttachmentsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentMediaAttachmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerPostIncidentMediaAttachmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerDeleteIncidentMediaAttachmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerPatchIncidentMediaAttachmentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerPatchIncidentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentDisasterParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentControllerGetIncidentDisasterRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentControllerPatchIncidentDisasterRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerCreateIncidentImpactParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerDeleteIncidentImpactByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerUpdateIncidentImpactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactAssetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerPatchIncidentImpactAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerPatchIncidentImpactProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerPostIncidentImpactSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerDeleteIncidentImpactSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerPatchIncidentImpactSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactPerilsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerGetIncidentImpactPerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerPostIncidentImpactPerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerDeleteIncidentImpactPerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentImpactControllerPatchIncidentImpactPerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerCreateFundingSourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerDeleteFundingSourceByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerUpdateFundingSourceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerPatchFundingSourceProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceBucketsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceFundingsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceFundingsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceContactsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceContactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerPostFundingSourceContactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerDeleteFundingSourceContactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerPatchFundingSourceContactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerGetFundingSourceCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingSourceControllerPatchFundingSourceCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerDeleteFileByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerUpdateFileByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerPatchFileAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerPostFileProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerDeleteFileProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerPatchFileProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerPostFileAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerDeleteFileAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerPatchFileAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileProcessesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileProcessesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileMediaParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileMediaRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileDocumentsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileDocumentsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileAddedByParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileControllerGetFileAddedByRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FileProcessControllerGetFileProcessListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileProcessControllerGetFileProcessByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileProcessControllerGetFileProcessFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class FileProcessControllerGetFileProcessFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerCreateEntryParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerDeleteEntryByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerUpdateEntryByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntrySourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntrySourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerPatchEntrySourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryBucketParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryBucketRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerPatchEntryBucketRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntrySubBucketParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntrySubBucketRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerPatchEntrySubBucketRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryFundingSourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryFundingSourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntryControllerGetEntryCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerCreateEntrySourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerDeleteEntrySourceByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerUpdateEntrySourceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerPatchEntrySourceProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerPatchEntrySourceAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerPatchEntrySourceCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceAppraisalsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceAppraisalsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceSelectedAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerPatchEntrySourceSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceRelevantAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceControllerGetEntrySourceRelevantAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataObjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataObjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerGetEntrySourceMediaListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerCreateEntrySourceMediaParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerGetEntrySourceMediaByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerDeleteEntrySourceMediaByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerUpdateEntrySourceMediaByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerGetEntrySourceMediaEntrySourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerGetEntrySourceMediaEntrySourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerPatchEntrySourceMediaEntrySourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerGetEntrySourceMediaMediaParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerGetEntrySourceMediaMediaRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntrySourceMediaControllerPatchEntrySourceMediaMediaRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerCreateEndorsementParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerDeleteEndorsementByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerUpdateEndorsementByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementPolicyTermParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementPolicyTermRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerPatchEndorsementPolicyTermRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerPatchEndorsementTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementCoveragesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementCoveragesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerPostEndorsementCoveragesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerDeleteEndorsementCoveragesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerPatchEndorsementCoveragesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementSubCoveragesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementSubCoveragesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerPostEndorsementSubCoveragesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerDeleteEndorsementSubCoveragesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerPatchEndorsementSubCoveragesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementPerilsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerGetEndorsementPerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerPostEndorsementPerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerDeleteEndorsementPerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EndorsementControllerPatchEndorsementPerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EmailAddressControllerGetEmailAddressListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class EmailAddressControllerCreateEmailAddressParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class EmailAddressControllerGetEmailAddressByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class EmailAddressControllerUpdateEmailAddressByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class EmailAddressControllerGetEmailAddressIdentityParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class DwellingControllerGetDwellingListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerCreateDwellingParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerDeleteDwellingByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerUpdateDwellingByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingAssetTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingAssetTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerPatchDwellingAssetTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerPatchDwellingAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingAppraisalsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingAppraisalsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingSelectedAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerPatchDwellingSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingRelevantAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingRelevantAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingAddressParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DwellingControllerGetDwellingAddressRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DwellingControllerPatchDwellingAddressRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeductibleControllerGetDeductibleListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DeductibleControllerCreateDeductibleParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class DeductibleControllerGetDeductibleByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class DeductibleControllerUpdateDeductibleByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class DeductibleControllerGetDeductibleClaimTargetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class DeductibleControllerGetDeductibleBucketDefinitionsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DeductibleControllerGetDeductibleClaimDeductiblesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CoverageControllerGetCoverageListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerCreateCoverageParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerDeleteCoverageByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerUpdateCoverageByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageBasisParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageBasisRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPatchCoverageBasisRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageBucketTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageBucketTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPatchCoverageBucketTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageDeductibleParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageDeductibleRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPatchCoverageDeductibleRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageSubBucketDefinitionsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageSubBucketDefinitionsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageBucketsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPostCoverageAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerDeleteCoverageAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPatchCoverageAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPatchCoverageTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageGroupParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageGroupRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPatchCoverageGroupRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoveragePerilsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoveragePerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPostCoveragePerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerDeleteCoveragePerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerPatchCoveragePerilsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageEndorsementsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageControllerGetCoverageEndorsementsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerGetCoverageGroupListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerCreateCoverageGroupParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerGetCoverageGroupByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerDeleteCoverageGroupByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerUpdateCoverageGroupByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerGetCoverageGroupPolicyTermParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerGetCoverageGroupPolicyTermRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerPatchCoverageGroupPolicyTermRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerGetCoverageGroupTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerGetCoverageGroupTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class CoverageGroupControllerPatchCoverageGroupTemplateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerCreateClaimParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerDeleteClaimByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerUpdateClaimByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerPatchClaimProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimBucketsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimFundingsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimFundingsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimContactsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimContactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerPostClaimContactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerDeleteClaimContactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerPatchClaimContactsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerPatchClaimCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimTargetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimTargetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerPatchClaimTargetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimProviderParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimProviderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimDeductiblesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimControllerGetClaimDeductiblesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerCreateClaimDeductibleParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerDeleteClaimDeductibleByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerUpdateClaimDeductibleByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleContextParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleContextRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerPatchClaimDeductibleContextRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleClaimParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleClaimRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerPatchClaimDeductibleClaimRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleTargetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleTargetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ClaimDeductibleControllerGetClaimDeductibleBucketsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerCreateBucketParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerDeleteBucketByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerUpdateBucketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerPatchBucketTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketFundingSourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketFundingSourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerPatchBucketFundingSourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketSubBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketSubBucketsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketFundingsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketFundingsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketDefinitionParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketDefinitionRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerPatchBucketDefinitionRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketDeductibleParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketDeductibleRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketClaimDeductibleParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketControllerGetBucketClaimDeductibleRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerCreateBucketFundingParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerDeleteBucketFundingByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerUpdateBucketFundingByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingFundingParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingFundingRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerPatchBucketFundingFundingRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingBucketParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingBucketRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerPatchBucketFundingBucketRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingFundingSourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingFundingSourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BucketFundingControllerGetBucketFundingCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BucketDefinitionControllerGetBucketDefinitionListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketDefinitionControllerCreateBucketDefinitionParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class BucketDefinitionControllerGetBucketDefinitionByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class BucketDefinitionControllerUpdateBucketDefinitionByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class BucketDefinitionControllerGetBucketDefinitionBasisParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class BucketDefinitionControllerGetBucketDefinitionBucketTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class BucketDefinitionControllerGetBucketDefinitionDeductibleParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitionsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketDefinitionControllerGetBucketDefinitionBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BaseSubBucketControllerGetBaseSubBucketListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerCreateBaseSubBucketParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerDeleteBaseSubBucketByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerUpdateBaseSubBucketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketParentParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketParentRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerPatchBaseSubBucketParentRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketFundingSourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketFundingSourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketControllerGetBaseSubBucketEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketMetadataControllerGetBaseSubBucketMetadataListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketMetadataControllerGetBaseSubBucketMetadataByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerCreateBaseBucketParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerDeleteBaseBucketByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerUpdateBaseBucketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerPatchBaseBucketTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketFundingSourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketFundingSourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerPatchBaseBucketFundingSourceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketMetadataParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketMetadataRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketProjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketProjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketEntriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketEntriesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketSubBucketsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketSubBucketsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketFundingsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketControllerGetBaseBucketFundingsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BaseBucketMetadataControllerGetBaseBucketMetadataListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketMetadataControllerGetBaseBucketMetadataByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketMetadataControllerGetBaseBucketMetadataObjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BaseBucketMetadataControllerGetBaseBucketMetadataObjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerCreateAssetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerDeleteAssetByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerUpdateAssetByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetAssetTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetAssetTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerPatchAssetAssetTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerPatchAssetAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetAppraisalsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetAppraisalsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetSelectedAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerPatchAssetSelectedAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetRelevantAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetControllerGetAssetRelevantAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AddressControllerGetAddressListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AddressControllerCreateAddressParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AddressControllerGetAddressByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AddressControllerDeleteAddressByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AddressControllerUpdateAddressByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AddressControllerGetAddressAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AddressControllerGetAddressAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AddressControllerPatchAddressAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AddressControllerGetAddressCountryParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AddressControllerGetAddressCountryRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AddressControllerPatchAddressCountryRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountControllerGetAccountByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AccountControllerUpdateAccountByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AccountControllerGetAccountOwnerParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AccountControllerGetAccountProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AccountControllerGetAccountAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AccountControllerGetAccountUserRolesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AccountControllerGetAccountDefaultCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AccountProviderControllerGetAccountProviderListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerCreateAccountProviderParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerGetAccountProviderByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerDeleteAccountProviderByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerUpdateAccountProviderByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerGetAccountProviderAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerGetAccountProviderAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerPatchAccountProviderAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerGetAccountProviderProviderParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerGetAccountProviderProviderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderControllerPatchAccountProviderProviderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerCreateAccountProviderContactParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerDeleteAccountProviderContactByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerUpdateAccountProviderContactByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerPatchAccountProviderContactPrimaryEmailAddressRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerPatchAccountProviderContactPrimaryPhoneNumberRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactProviderParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactProviderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerPatchAccountProviderContactProviderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactUserParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerGetAccountProviderContactUserRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountProviderContactControllerPatchAccountProviderContactUserRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerGetAccountInviteListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerCreateAccountInviteParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerGetAccountInviteByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerDeleteAccountInviteByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerUpdateAccountInviteByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerGetAccountInviteAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerGetAccountInviteAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerPatchAccountInviteAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerGetAccountInviteInvitedByParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerGetAccountInviteInvitedByRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerGetAccountInviteAcceptedByParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AccountInviteControllerGetAccountInviteAcceptedByRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class SpaceTypeControllerGetSpaceTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceTypeControllerGetSpaceTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SpaceTypeControllerGetSpaceTypeClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceTypeControllerGetSpaceTypeAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceTypeControllerGetSpaceTypeGroupTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceGroupTypeControllerGetSpaceGroupTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceGroupTypeControllerGetSpaceGroupTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceClassControllerGetSpaceClassListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceClassControllerGetSpaceClassByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SpaceClassControllerGetSpaceClassCategoriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceClassControllerGetSpaceClassTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceClassControllerGetSpaceClassAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceClassControllerGetSpaceClassGroupTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceCategoryControllerGetSpaceCategoryListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceCategoryControllerGetSpaceCategoryByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SpaceCategoryControllerGetSpaceCategoryClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceCategoryControllerGetSpaceCategoryAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceCategoryControllerGetSpaceCategoryGroupTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceTypeControllerGetServiceTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceTypeControllerGetServiceTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ServiceTypeControllerGetServiceTypeAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceClassControllerGetServiceClassListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceClassControllerGetServiceClassByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ServiceClassControllerGetServiceClassCategoriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceClassControllerGetServiceClassTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceClassControllerGetServiceClassAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceCategoryControllerGetServiceCategoryListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceCategoryControllerGetServiceCategoryByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ServiceCategoryControllerGetServiceCategoryClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ServiceCategoryControllerGetServiceCategoryAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemTypeControllerGetItemTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemTypeControllerGetItemTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ItemTypeControllerGetItemTypeDepreciationModifiersParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemTypeControllerGetItemTypeDepreciationOverridesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemTypeControllerGetItemTypeClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemTypeControllerGetItemTypeAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemClassControllerGetItemClassListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemClassControllerGetItemClassByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ItemClassControllerGetItemClassCategoriesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemClassControllerGetItemClassTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemClassControllerGetItemClassAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemCategoryControllerGetItemCategoryListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemCategoryControllerGetItemCategoryByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ItemCategoryControllerGetItemCategoryClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemCategoryControllerGetItemCategoryAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class IncidentTypeControllerGetIncidentTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class IncidentTypeControllerGetIncidentTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class IncidentTypeControllerGetIncidentTypeClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class IncidentTypeControllerGetIncidentTypeAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class IncidentTypeControllerGetIncidentTypePerilsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class IncidentClassControllerGetIncidentClassListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class IncidentClassControllerGetIncidentClassByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class IncidentClassControllerGetIncidentClassTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class IncidentClassControllerGetIncidentClassAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DocumentTypeControllerGetDocumentTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DocumentTypeControllerGetDocumentTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class DocumentTypeControllerGetDocumentTypeClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DocumentTypeControllerGetDocumentTypeAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DocumentClassControllerGetDocumentClassListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DocumentClassControllerGetDocumentClassByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class DocumentClassControllerGetDocumentClassTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DocumentClassControllerGetDocumentClassAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketTypeControllerGetBucketTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketTypeControllerGetBucketTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class BucketTypeControllerGetBucketTypeClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketTypeControllerGetBucketTypeAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketClassControllerGetBucketClassListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketClassControllerGetBucketClassByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class BucketClassControllerGetBucketClassTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketClassControllerGetBucketClassAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetTypeControllerGetAssetTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetTypeControllerGetAssetTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AssetAttributeTypeControllerGetAssetAttributeTypeListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetAttributeTypeControllerGetAssetAttributeTypeByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AssetAttributeTypeControllerGetAssetAttributeTypeClassesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetAttributeClassControllerGetAssetAttributeClassListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetAttributeClassControllerGetAssetAttributeClassByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AssetAttributeClassControllerGetAssetAttributeClassTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetAttributeClassControllerGetAssetAttributeClassAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SubmissionTrackTemplateControllerGetSubmissionTrackTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SubmissionTrackTemplateControllerGetSubmissionTrackTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SubCoverageTemplateControllerGetSubCoverageTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SubCoverageTemplateControllerGetSubCoverageTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class PolicyTemplateControllerGetPolicyTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PolicyTemplateControllerGetPolicyTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class PolicyTemplateControllerGetPolicyTemplateAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PolicyTemplateControllerGetPolicyTemplateCoverageTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PolicyTemplateControllerGetPolicyTemplateEndorsementTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PolicyTemplateControllerGetPolicyTemplatePerilsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemTemplateControllerGetItemTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemTemplateControllerGetItemTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ItemTemplateControllerGetItemTemplateItemTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ItemTemplateControllerGetItemTemplateAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class EndorsementTemplateControllerGetEndorsementTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class EndorsementTemplateControllerGetEndorsementTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class EndorsementTemplateControllerGetEndorsementTemplatePerilsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatessParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class EndorsementTemplateControllerGetEndorsementTemplateBucketTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CoverageTemplateControllerGetCoverageTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CoverageTemplateControllerGetCoverageTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class CoverageTemplateControllerGetCoverageTemplateGroupParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class CoverageTemplateControllerGetCoverageTemplatePerilsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CoverageTemplateControllerGetCoverageTemplateBucketTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CoverageTemplateControllerGetCoverageTemplateEndorsementTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CoverageGroupTemplateControllerGetCoverageGroupTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CoverageGroupTemplateControllerGetCoverageGroupTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplatesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ProviderControllerGetProviderListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ProviderControllerGetProviderByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class PerilControllerGetPerilListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PerilControllerGetPerilByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class PerilControllerGetPerilAssetTypesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DisasterControllerGetDisasterListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DisasterControllerGetDisasterByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class DisasterControllerGetDisasterIncidentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class CurrencyControllerGetCurrencyListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CurrencyControllerGetCurrencyByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class CountryControllerGetCountryListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CountryControllerGetCountryByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class WarrantyControllerGetWarrantyListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerCreateWarrantyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerDeleteWarrantyByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerUpdateWarrantyByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerPatchWarrantyAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerPatchWarrantyFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerPostWarrantyAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerDeleteWarrantyAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerPatchWarrantyAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantySpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantySpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerPostWarrantySpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerDeleteWarrantySpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerPatchWarrantySpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerGetWarrantyProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerPostWarrantyProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerDeleteWarrantyProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class WarrantyControllerPatchWarrantyProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerCreateUserManualParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerDeleteUserManualByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerUpdateUserManualByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerPatchUserManualAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerPatchUserManualFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerPostUserManualAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerDeleteUserManualAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerPatchUserManualAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerPostUserManualSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerDeleteUserManualSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerPatchUserManualSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class UserManualControllerGetUserManualProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerPostUserManualProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerDeleteUserManualProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UserManualControllerPatchUserManualProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerCreateScopeOfLossParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerDeleteScopeOfLossByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerUpdateScopeOfLossByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerPatchScopeOfLossAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerPatchScopeOfLossFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerPostScopeOfLossAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerDeleteScopeOfLossAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerPatchScopeOfLossAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerPostScopeOfLossSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerDeleteScopeOfLossSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerPatchScopeOfLossSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerGetScopeOfLossProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerPostScopeOfLossProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerDeleteScopeOfLossProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ScopeOfLossControllerPatchScopeOfLossProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerCreateRentRollParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerDeleteRentRollByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerUpdateRentRollByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerPatchRentRollAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerPatchRentRollFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerPostRentRollAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerDeleteRentRollAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerPatchRentRollAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerPostRentRollSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerDeleteRentRollSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerPatchRentRollSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class RentRollControllerGetRentRollProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerPostRentRollProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerDeleteRentRollProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class RentRollControllerPatchRentRollProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerCreateProductSpecParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerDeleteProductSpecByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerUpdateProductSpecByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerPatchProductSpecAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerPatchProductSpecFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerPostProductSpecAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerDeleteProductSpecAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerPatchProductSpecAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerPostProductSpecSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerDeleteProductSpecSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerPatchProductSpecSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerGetProductSpecProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerPostProductSpecProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerDeleteProductSpecProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ProductSpecControllerPatchProductSpecProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerCreatePolicyJacketParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerDeletePolicyJacketByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerUpdatePolicyJacketByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerPatchPolicyJacketAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerPatchPolicyJacketFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerPostPolicyJacketAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerDeletePolicyJacketAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerPatchPolicyJacketAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerPostPolicyJacketSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerDeletePolicyJacketSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerPatchPolicyJacketSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerGetPolicyJacketProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerPostPolicyJacketProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerDeletePolicyJacketProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PolicyJacketControllerPatchPolicyJacketProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerCreatePoliceReportParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerDeletePoliceReportByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerUpdatePoliceReportByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerPatchPoliceReportAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerPatchPoliceReportFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerPostPoliceReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerDeletePoliceReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerPatchPoliceReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerPostPoliceReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerDeletePoliceReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerPatchPoliceReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerGetPoliceReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerPostPoliceReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerDeletePoliceReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PoliceReportControllerPatchPoliceReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerCreatePermitParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerDeletePermitByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerUpdatePermitByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerPatchPermitAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerPatchPermitFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerPostPermitAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerDeletePermitAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerPatchPermitAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerPostPermitSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerDeletePermitSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerPatchPermitSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PermitControllerGetPermitProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerPostPermitProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerDeletePermitProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermitControllerPatchPermitProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerCreatePaymentParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerDeletePaymentByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerUpdatePaymentByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPatchPaymentAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPatchPaymentFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPostPaymentAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerDeletePaymentAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPatchPaymentAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPostPaymentSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerDeletePaymentSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPatchPaymentSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPostPaymentProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerDeletePaymentProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPatchPaymentProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPatchPaymentCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentStatsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentStatsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPatchPaymentVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerPatchPaymentServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentLinesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentLinesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentLineSubjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentControllerGetPaymentLineSubjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerCreateParamedicReportParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerDeleteParamedicReportByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerUpdateParamedicReportByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerPatchParamedicReportAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerPatchParamedicReportFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerPostParamedicReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerDeleteParamedicReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerPatchParamedicReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerPostParamedicReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerDeleteParamedicReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerPatchParamedicReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerGetParamedicReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerPostParamedicReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerDeleteParamedicReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ParamedicReportControllerPatchParamedicReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerCreateInvoiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerDeleteInvoiceByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerUpdateInvoiceByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPatchInvoiceAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPatchInvoiceFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPostInvoiceAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerDeleteInvoiceAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPatchInvoiceAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPostInvoiceSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerDeleteInvoiceSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPatchInvoiceSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPostInvoiceProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerDeleteInvoiceProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPatchInvoiceProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPatchInvoiceCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceStatsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceStatsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPatchInvoiceVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerPatchInvoiceServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceLinesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceLinesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceLineSubjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceControllerGetInvoiceLineSubjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerCreateIncidentReportParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerDeleteIncidentReportByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerUpdateIncidentReportByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerPatchIncidentReportAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerPatchIncidentReportFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerPostIncidentReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerDeleteIncidentReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerPatchIncidentReportAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerPostIncidentReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerDeleteIncidentReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerPatchIncidentReportSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerGetIncidentReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerPostIncidentReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerDeleteIncidentReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class IncidentReportControllerPatchIncidentReportProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FundingControllerGetFundingListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class FundingControllerCreateFundingParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class FundingControllerGetFundingByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class FundingControllerUpdateFundingByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class FundingControllerGetFundingDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class FundingControllerGetFundingAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class FundingControllerGetFundingFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class FundingControllerGetFundingAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class FundingControllerGetFundingSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class FundingControllerGetFundingProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class FundingControllerGetFundingSourceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class FundingControllerGetFundingAllocationsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {}

export class EstimateControllerGetEstimateListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerCreateEstimateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerDeleteEstimateByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerUpdateEstimateByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPatchEstimateAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPatchEstimateFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPostEstimateAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerDeleteEstimateAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPatchEstimateAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPostEstimateSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerDeleteEstimateSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPatchEstimateSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPostEstimateProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerDeleteEstimateProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPatchEstimateProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPatchEstimateCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateStatsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateStatsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPatchEstimateVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerPatchEstimateServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateLinesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateLinesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateLineSubjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateLineSubjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateChangeOrdersParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateControllerGetEstimateChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerCreateDocumentParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerDeleteDocumentByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerUpdateDocumentByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerPatchDocumentAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerPatchDocumentFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerPostDocumentAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerDeleteDocumentAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerPatchDocumentAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerPostDocumentSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerDeleteDocumentSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerPatchDocumentSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DocumentControllerGetDocumentProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerPostDocumentProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerDeleteDocumentProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DocumentControllerPatchDocumentProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerCreateDeliveryPaperworkParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerDeleteDeliveryPaperworkByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerUpdateDeliveryPaperworkByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerPatchDeliveryPaperworkAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerPatchDeliveryPaperworkFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerPatchDeliveryPaperworkAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerPatchDeliveryPaperworkSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerGetDeliveryPaperworkProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeliveryPaperworkControllerPatchDeliveryPaperworkProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerCreateDeedParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerDeleteDeedByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerUpdateDeedByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerPatchDeedAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerPatchDeedFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerPostDeedAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerDeleteDeedAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerPatchDeedAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerPostDeedSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerDeleteDeedSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerPatchDeedSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeedControllerGetDeedProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerPostDeedProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerDeleteDeedProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeedControllerPatchDeedProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerCreateDeclarationsPageParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerDeleteDeclarationsPageByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerUpdateDeclarationsPageByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerPatchDeclarationsPageAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerPatchDeclarationsPageFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerPostDeclarationsPageAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerDeleteDeclarationsPageAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerPatchDeclarationsPageAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerPostDeclarationsPageSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerDeleteDeclarationsPageSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerPatchDeclarationsPageSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerGetDeclarationsPageProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerPostDeclarationsPageProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerDeleteDeclarationsPageProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class DeclarationsPageControllerPatchDeclarationsPageProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerCreateContractParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerDeleteContractByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerUpdateContractByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerPatchContractAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerPatchContractFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerPostContractAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerDeleteContractAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerPatchContractAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerPostContractSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerDeleteContractSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerPatchContractSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ContractControllerGetContractProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerPostContractProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerDeleteContractProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ContractControllerPatchContractProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerCreateChangeOrderParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerDeleteChangeOrderByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerUpdateChangeOrderByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPatchChangeOrderAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPatchChangeOrderFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPostChangeOrderAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerDeleteChangeOrderAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPatchChangeOrderAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPostChangeOrderSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerDeleteChangeOrderSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPatchChangeOrderSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPostChangeOrderProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerDeleteChangeOrderProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPatchChangeOrderProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPatchChangeOrderCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderStatsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderStatsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderEstimateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderEstimateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerPatchChangeOrderEstimateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderLinesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderLinesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderLineSubjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderControllerGetChangeOrderLineSubjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerCreateBlueprintParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerDeleteBlueprintByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerUpdateBlueprintByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerPatchBlueprintAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerPatchBlueprintFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerPostBlueprintAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerDeleteBlueprintAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerPatchBlueprintAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerPostBlueprintSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerDeleteBlueprintSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerPatchBlueprintSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerGetBlueprintProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerPostBlueprintProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerDeleteBlueprintProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class BlueprintControllerPatchBlueprintProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerCreateAssetAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerDeleteAssetAppraisalByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerUpdateAssetAppraisalByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPatchAssetAppraisalAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPatchAssetAppraisalFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPostAssetAppraisalAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerDeleteAssetAppraisalAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPatchAssetAppraisalAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPostAssetAppraisalSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerDeleteAssetAppraisalSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPatchAssetAppraisalSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPostAssetAppraisalProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerDeleteAssetAppraisalProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPatchAssetAppraisalProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPatchAssetAppraisalCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPatchAssetAppraisalVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalAssetParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerGetAssetAppraisalAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AssetAppraisalControllerPatchAssetAppraisalAssetRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerCreateAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerDeleteAppraisalByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerUpdateAppraisalByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalDocumentTypeParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalDocumentTypeRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalAccountParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPatchAppraisalAccountRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalFileParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPatchAppraisalFileRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalAssetsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPostAppraisalAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerDeleteAppraisalAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPatchAppraisalAssetsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalSpacesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPostAppraisalSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerDeleteAppraisalSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPatchAppraisalSpacesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalProjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPostAppraisalProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerDeleteAppraisalProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPatchAppraisalProjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalCurrencyParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPatchAppraisalCurrencyRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerPatchAppraisalVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalLinesParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalLinesRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalSubjectsParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalControllerGetAppraisalSubjectsRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLineListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerCreatePaymentLineParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerDeletePaymentLineByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerUpdatePaymentLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLinePaymentParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLinePaymentRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerPatchPaymentLinePaymentRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLineSubjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerPatchPaymentLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLineServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLineServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerPatchPaymentLineServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLineVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerGetPaymentLineVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PaymentLineControllerPatchPaymentLineVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerCreateInvoiceLineParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerDeleteInvoiceLineByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerUpdateInvoiceLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineInvoiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineInvoiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerPatchInvoiceLineInvoiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineSubjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerPatchInvoiceLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerPatchInvoiceLineServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerGetInvoiceLineVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class InvoiceLineControllerPatchInvoiceLineVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerCreateEstimateLineParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerDeleteEstimateLineByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerUpdateEstimateLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineEstimateParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineEstimateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerPatchEstimateLineEstimateRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineSubjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerPatchEstimateLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineChangeOrdersParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerPostEstimateLineChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerDeleteEstimateLineChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerPatchEstimateLineChangeOrdersRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerPatchEstimateLineServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerGetEstimateLineVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EstimateLineControllerPatchEstimateLineVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerCreateChangeOrderLineParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerDeleteChangeOrderLineByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerUpdateChangeOrderLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineEstimateLineParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineEstimateLineRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerPatchChangeOrderLineEstimateLineRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineChangeOrderParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineChangeOrderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerPatchChangeOrderLineChangeOrderRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineVendorParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineVendorRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineServiceParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineServiceRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineSubjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class ChangeOrderLineControllerGetChangeOrderLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerGetAppraisalLineListParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "filter": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(S.String, { nullable: true }),
  "page[offset]": S.optionalWith(S.Number, { nullable: true }),
  "page[limit]": S.optionalWith(S.Number, { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerCreateAppraisalLineParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerGetAppraisalLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerDeleteAppraisalLineByIdParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerUpdateAppraisalLineByIdParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerGetAppraisalLineAppraisalParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerGetAppraisalLineAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerPatchAppraisalLineAppraisalRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerGetAppraisalLineSubjectParams extends S.Struct({
  "include": S.optionalWith(S.String, { nullable: true }),
  "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerGetAppraisalLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class AppraisalLineControllerPatchAppraisalLineSubjectRefParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermissionsControllerCheckUpsertPermissionsParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class PermissionsControllerCheckDeletePermissionsParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class EntityReference extends S.Class<EntityReference>("EntityReference")({
  /**
* UUID for the object
*/
"id": S.String,
  /**
* Object type
*/
"type": S.String
}) {}

export class UploadsControllerStartUploadParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

/**
* The semantic type of file that is being uploaded.
*/
export class TransloaditAssemblyOptionsDtoType extends S.Literal("FILE", "AVATAR") {}

/**
* What provider will be used for uploads.
*/
export class TransloaditAssemblyOptionsDtoProvider extends S.Literal("TRANSLOADIT") {}

export class TransloaditAssemblyAuth extends S.Class<TransloaditAssemblyAuth>("TransloaditAssemblyAuth")({
  /**
* Transloadit auth key
*/
"key": S.String,
  /**
* Expiration timestamp for the signed params (ISO 8601)
*/
"expires": S.String
}) {}

export class TransloaditStoreFileAssemblyFields extends S.Class<TransloaditStoreFileAssemblyFields>("TransloaditStoreFileAssemblyFields")({
  /**
* Account identifier
*/
"accountId": S.String
}) {}

export class TransloaditAvatarAssemblyFields extends S.Class<TransloaditAvatarAssemblyFields>("TransloaditAvatarAssemblyFields")({
  /**
* User ID
*/
"userId": S.String
}) {}

export class UploadsControllerInitializeFileIdsParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class UploadFilesDto extends S.Class<UploadFilesDto>("UploadFilesDto")({
  /**
* An array of asset IDs that this file should belong to.
*/
"assetIds": S.Array(S.String).pipe(S.propertySignature, S.withConstructorDefault(() => [] as const)),
  /**
* An array of project IDs that this file should belong to.
*/
"projectIds": S.Array(S.String).pipe(S.propertySignature, S.withConstructorDefault(() => [] as const)),
  /**
* How many files should be initialized
*/
"count": S.Number.pipe(S.propertySignature, S.withConstructorDefault(() => 1 as const))
}) {}

export class UploadFilesResponseDto extends S.Class<UploadFilesResponseDto>("UploadFilesResponseDto")({
  /**
* List of file IDs.
*/
"ids": S.Array(S.String)
}) {}

export class CdnControllerSetCdnCookiesParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

export class FilesCdnAccessDto extends S.Class<FilesCdnAccessDto>("FilesCdnAccessDto")({
  /**
* How long the ttl should be.
*/
"ttlSeconds": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CdnResourceDto extends S.Class<CdnResourceDto>("CdnResourceDto")({
  /**
* The resource path pattern this policy applies to
*/
"resource": S.String,
  /**
* Time-to-live in seconds for this signed policy
*/
"ttl": S.Number,
  /**
* When this resource policy expires (ISO 8601)
*/
"expiresAt": S.String
}) {}

export class CdnControllerGetSignedUrlsParams extends S.Struct({
  "X-Account-Id": S.String
}) {}

/**
* HTTP action to sign for (GET for download, PUT for upload, HEAD for metadata).
*/
export class SignedUrlItemDtoAction extends S.Literal("GET", "PUT", "HEAD") {}

/**
* Action for which this URL was issued
*/
export class SignedUrlResultDtoAction extends S.Literal("GET", "PUT", "HEAD") {}

export class SignedUrlErrorDto extends S.Class<SignedUrlErrorDto>("SignedUrlErrorDto")({
  /**
* Error code describing the failure
*/
"code": S.String,
  /**
* Human-readable error message
*/
"message": S.String
}) {}

export class EntityMetadata extends S.Class<EntityMetadata>("EntityMetadata")({
  /**
* Object outlining any redacted fields, relative to expected
*/
"redacted": S.optionalWith(RedactedData, { nullable: true })
}) {}

export class UserRef extends S.Class<UserRef>("UserRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UserRefType
}) {}

export class IncidentRef extends S.Class<IncidentRef>("IncidentRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentRefType
}) {}

export class DwellingRef extends S.Class<DwellingRef>("DwellingRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DwellingRefType
}) {}

export class UserAccountRoleRef extends S.Class<UserAccountRoleRef>("UserAccountRoleRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UserAccountRoleRefType
}) {}

export class CurrencyRef extends S.Class<CurrencyRef>("CurrencyRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CurrencyRefType
}) {}

export class EmailAddressRef extends S.Class<EmailAddressRef>("EmailAddressRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EmailAddressRefType
}) {}

export class PhoneNumberRef extends S.Class<PhoneNumberRef>("PhoneNumberRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PhoneNumberRefType
}) {}

export class AccountRef extends S.Class<AccountRef>("AccountRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AccountRefType
}) {}

export class AccountProviderContactRef extends S.Class<AccountProviderContactRef>("AccountProviderContactRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AccountProviderContactRefType
}) {}

export class AccountProviderRef extends S.Class<AccountProviderRef>("AccountProviderRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AccountProviderRefType
}) {}

export class ProviderRef extends S.Class<ProviderRef>("ProviderRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProviderRefType
}) {}

export class ProjectMediaRef extends S.Class<ProjectMediaRef>("ProjectMediaRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProjectMediaRefType
}) {}

export class IncidentTypeRef extends S.Class<IncidentTypeRef>("IncidentTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentTypeRefType
}) {}

export class DisasterRef extends S.Class<DisasterRef>("DisasterRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DisasterRefType
}) {}

export class ProjectMediaAttributes extends S.Class<ProjectMediaAttributes>("ProjectMediaAttributes")({
  "stage": S.optionalWith(ProjectMediaAttributesStage, { nullable: true })
}) {}

export class MediaRef extends S.Class<MediaRef>("MediaRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": MediaRefType
}) {}

export class MediaAttributes extends S.Class<MediaAttributes>("MediaAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "subjectState": S.optionalWith(MediaAttributesSubjectState, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

export class FileRef extends S.Class<FileRef>("FileRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": FileRefType
}) {}

export class SpaceRef extends S.Class<SpaceRef>("SpaceRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceRefType
}) {}

export class EntrySourceMediaRef extends S.Class<EntrySourceMediaRef>("EntrySourceMediaRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EntrySourceMediaRefType
}) {}

export class FileAttributes extends S.Class<FileAttributes>("FileAttributes")({
  /**
* The storage provider for this file.
*/
"storageProvider": S.optionalWith(FileAttributesStorageProvider, { nullable: true }),
  "originalKey": S.optionalWith(S.String, { nullable: true }),
  "originalUrl": S.optionalWith(S.String, { nullable: true }),
  "presentationKey": S.optionalWith(S.String, { nullable: true }),
  "presentationUrl": S.optionalWith(S.String, { nullable: true }),
  "thumbnailKey": S.optionalWith(S.String, { nullable: true }),
  "thumbnailUrl": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(FileAttributesType, { nullable: true }),
  "filename": S.optionalWith(S.String, { nullable: true }),
  "extension": S.optionalWith(S.String, { nullable: true }),
  "width": S.optionalWith(S.Number, { nullable: true }),
  "height": S.optionalWith(S.Number, { nullable: true }),
  "size": S.optionalWith(S.Number, { nullable: true }),
  "blurhash": S.optionalWith(S.String, { nullable: true }),
  "durationMs": S.optionalWith(S.Number, { nullable: true }),
  "pageCount": S.optionalWith(S.Number, { nullable: true }),
  "createdAt": S.optionalWith(S.String, { nullable: true }),
  "modifiedAt": S.optionalWith(S.String, { nullable: true }),
  "mediaCount": S.optionalWith(S.Number, { nullable: true }),
  "documentCount": S.optionalWith(S.Number, { nullable: true }),
  "addedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class FileProcessRef extends S.Class<FileProcessRef>("FileProcessRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": FileProcessRefType
}) {}

export class ChangeOrderRef extends S.Class<ChangeOrderRef>("ChangeOrderRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ChangeOrderRefType
}) {}

export class EstimateRef extends S.Class<EstimateRef>("EstimateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EstimateRefType
}) {}

export class InvoiceRef extends S.Class<InvoiceRef>("InvoiceRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": InvoiceRefType
}) {}

export class PaymentRef extends S.Class<PaymentRef>("PaymentRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PaymentRefType
}) {}

export class AssetAppraisalRef extends S.Class<AssetAppraisalRef>("AssetAppraisalRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetAppraisalRefType
}) {}

export class AppraisalRef extends S.Class<AppraisalRef>("AppraisalRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AppraisalRefType
}) {}

export class FundingRef extends S.Class<FundingRef>("FundingRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": FundingRefType
}) {}

export class IncidentReportRef extends S.Class<IncidentReportRef>("IncidentReportRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentReportRefType
}) {}

export class PoliceReportRef extends S.Class<PoliceReportRef>("PoliceReportRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PoliceReportRefType
}) {}

export class ParamedicReportRef extends S.Class<ParamedicReportRef>("ParamedicReportRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ParamedicReportRefType
}) {}

export class ContractRef extends S.Class<ContractRef>("ContractRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ContractRefType
}) {}

export class RentRollRef extends S.Class<RentRollRef>("RentRollRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": RentRollRefType
}) {}

export class PermitRef extends S.Class<PermitRef>("PermitRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PermitRefType
}) {}

export class BlueprintRef extends S.Class<BlueprintRef>("BlueprintRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BlueprintRefType
}) {}

export class DeclarationsPageRef extends S.Class<DeclarationsPageRef>("DeclarationsPageRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DeclarationsPageRefType
}) {}

export class PolicyJacketRef extends S.Class<PolicyJacketRef>("PolicyJacketRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PolicyJacketRefType
}) {}

export class ScopeOfLossRef extends S.Class<ScopeOfLossRef>("ScopeOfLossRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ScopeOfLossRefType
}) {}

export class DeliveryPaperworkRef extends S.Class<DeliveryPaperworkRef>("DeliveryPaperworkRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DeliveryPaperworkRefType
}) {}

export class ProductSpecRef extends S.Class<ProductSpecRef>("ProductSpecRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProductSpecRefType
}) {}

export class UserManualRef extends S.Class<UserManualRef>("UserManualRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UserManualRefType
}) {}

export class WarrantyRef extends S.Class<WarrantyRef>("WarrantyRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": WarrantyRefType
}) {}

export class DeedRef extends S.Class<DeedRef>("DeedRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DeedRefType
}) {}

export class AssetTypeRef extends S.Class<AssetTypeRef>("AssetTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetTypeRefType
}) {}

export class AddressRef extends S.Class<AddressRef>("AddressRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AddressRefType
}) {}

export class DocumentTypeRef extends S.Class<DocumentTypeRef>("DocumentTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DocumentTypeRefType
}) {}

export class DocumentClassRef extends S.Class<DocumentClassRef>("DocumentClassRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DocumentClassRefType
}) {}

export class SpaceAttributes extends S.Class<SpaceAttributes>("SpaceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "use": S.optionalWith(SpaceAttributesUse, { nullable: true })
}) {}

export class SpaceTypeRef extends S.Class<SpaceTypeRef>("SpaceTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceTypeRefType
}) {}

export class SpaceGroupRef extends S.Class<SpaceGroupRef>("SpaceGroupRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceGroupRefType
}) {}

export class SpaceClassRef extends S.Class<SpaceClassRef>("SpaceClassRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceClassRefType
}) {}

export class SpaceGroupTypeRef extends S.Class<SpaceGroupTypeRef>("SpaceGroupTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceGroupTypeRefType
}) {}

export class SpaceCategoryRef extends S.Class<SpaceCategoryRef>("SpaceCategoryRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceCategoryRefType
}) {}

export class BucketTypeRef extends S.Class<BucketTypeRef>("BucketTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketTypeRefType
}) {}

export class BucketClassRef extends S.Class<BucketClassRef>("BucketClassRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketClassRefType
}) {}

export class CountryRef extends S.Class<CountryRef>("CountryRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CountryRefType
}) {}

export class FileProcessAttributes extends S.Class<FileProcessAttributes>("FileProcessAttributes")({
  "processId": S.optionalWith(S.String, { nullable: true }),
  "provider": S.optionalWith(FileProcessAttributesProvider, { nullable: true }),
  "type": S.optionalWith(FileProcessAttributesType, { nullable: true }),
  "status": S.optionalWith(FileProcessAttributesStatus, { nullable: true }),
  "startedAt": S.optionalWith(S.String, { nullable: true }),
  "endedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class ItemizableFinancialDocumentStatsRef extends S.Class<ItemizableFinancialDocumentStatsRef>("ItemizableFinancialDocumentStatsRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemizableFinancialDocumentStatsRefType
}) {}

export class ServiceRef extends S.Class<ServiceRef>("ServiceRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceRefType
}) {}

export class ItemChangeOrderRef extends S.Class<ItemChangeOrderRef>("ItemChangeOrderRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemChangeOrderRefType
}) {}

export class ItemImpactChangeOrderRef extends S.Class<ItemImpactChangeOrderRef>("ItemImpactChangeOrderRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactChangeOrderRefType
}) {}

export class ServiceTaskChangeOrderRef extends S.Class<ServiceTaskChangeOrderRef>("ServiceTaskChangeOrderRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskChangeOrderRefType
}) {}

export class ItemImpactRef extends S.Class<ItemImpactRef>("ItemImpactRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactRefType
}) {}

export class ItemRef extends S.Class<ItemRef>("ItemRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemRefType
}) {}

export class ServiceTaskRef extends S.Class<ServiceTaskRef>("ServiceTaskRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskRefType
}) {}

export class ThirdPartyImpactRef extends S.Class<ThirdPartyImpactRef>("ThirdPartyImpactRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ThirdPartyImpactRefType
}) {}

export class ItemEstimateRef extends S.Class<ItemEstimateRef>("ItemEstimateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemEstimateRefType
}) {}

export class ItemImpactEstimateRef extends S.Class<ItemImpactEstimateRef>("ItemImpactEstimateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactEstimateRefType
}) {}

export class ServiceTaskEstimateRef extends S.Class<ServiceTaskEstimateRef>("ServiceTaskEstimateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskEstimateRefType
}) {}

export class EntrySourceMetadataRef extends S.Class<EntrySourceMetadataRef>("EntrySourceMetadataRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EntrySourceMetadataRefType
}) {}

export class EntryRef extends S.Class<EntryRef>("EntryRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EntryRefType
}) {}

export class ItemAppraisalRef extends S.Class<ItemAppraisalRef>("ItemAppraisalRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemAppraisalRefType
}) {}

export class ServiceTypeRef extends S.Class<ServiceTypeRef>("ServiceTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTypeRefType
}) {}

export class ItemPaymentRef extends S.Class<ItemPaymentRef>("ItemPaymentRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemPaymentRefType
}) {}

export class ItemImpactPaymentRef extends S.Class<ItemImpactPaymentRef>("ItemImpactPaymentRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactPaymentRefType
}) {}

export class ServiceTaskPaymentRef extends S.Class<ServiceTaskPaymentRef>("ServiceTaskPaymentRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskPaymentRefType
}) {}

export class ItemInvoiceRef extends S.Class<ItemInvoiceRef>("ItemInvoiceRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemInvoiceRefType
}) {}

export class ItemImpactInvoiceRef extends S.Class<ItemImpactInvoiceRef>("ItemImpactInvoiceRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactInvoiceRefType
}) {}

export class ServiceTaskInvoiceRef extends S.Class<ServiceTaskInvoiceRef>("ServiceTaskInvoiceRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskInvoiceRefType
}) {}

export class EntrySourceMetadataAttributes extends S.Class<EntrySourceMetadataAttributes>("EntrySourceMetadataAttributes")({
  "entrySourceType": S.optionalWith(EntrySourceMetadataAttributesEntrySourceType, { nullable: true }),
  "assignedEntryCount": S.optionalWith(S.Number, { nullable: true }),
  "assignedEntryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedEntryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemImpactAttributes extends S.Class<ItemImpactAttributes>("ItemImpactAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Struct({
  "item.type": S.optionalWith(S.Boolean, { nullable: true }),
  "impactDate": S.optionalWith(S.Boolean, { nullable: true }),
  "item.quality": S.optionalWith(S.Boolean, { nullable: true }),
  "item.acquiredDate": S.optionalWith(S.Boolean, { nullable: true }),
  "conditionAtImpact": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "isExactReplacement": S.optionalWith(S.Boolean, { nullable: true }),
  "impactDate": S.optionalWith(S.String, { nullable: true }),
  "isLost": S.optionalWith(S.Boolean, { nullable: true }),
  "conditionAtImpact": S.optionalWith(ItemImpactAttributesConditionAtImpact, { nullable: true }),
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "replacementPaidAmount": S.optionalWith(S.Number, { nullable: true }),
  "replacementInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "replacementEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemDepreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemAppraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "customDepreciationLifespanInMonths": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationAccelerationFactor": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationMinimumValuePercentage": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideAgeInMonths": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideValuePercentage": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideDescription": S.optionalWith(S.String, { nullable: true }),
  "isDepreciationCustom": S.optionalWith(S.Boolean, { nullable: true }),
  "customDepreciationFieldsSetBySystem": S.optionalWith(S.Array(S.String), { nullable: true }),
  "itemQuality": S.optionalWith(ItemImpactAttributesItemQuality, { nullable: true }),
  "itemAcquiredDate": S.optionalWith(S.String, { nullable: true }),
  "itemAcquiredQuantity": S.optionalWith(S.Number, { nullable: true }),
  "itemIsDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
  "depreciationLifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationMinimumValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "depreciationAccelerationFactor": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationRate": S.optionalWith(S.Number, { nullable: true }),
  "ageInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationOverrideAgeInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationOverrideValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "rcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "acvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAcvAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemTypeRef extends S.Class<ItemTypeRef>("ItemTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemTypeRefType
}) {}

export class EntryAttributes extends S.Class<EntryAttributes>("EntryAttributes")({
  "lossSettlementType": S.optionalWith(EntryAttributesLossSettlementType, { nullable: true }),
  "incurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "projectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "overriddenIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "overriddenProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "approvedAmount": S.optionalWith(S.Number, { nullable: true }),
  "isResolved": S.optionalWith(S.Boolean, { nullable: true }),
  "number": S.optionalWith(S.Number, { nullable: true }),
  "targetAssignmentPercentage": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "submissionStatus": S.optionalWith(EntryAttributesSubmissionStatus, { nullable: true, default: () => "NOT_SUBMITTED" as const }),
  "lastSubmittedAmount": S.optionalWith(S.Number, { nullable: true }),
  "lastSubmittedIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "lastSubmittedProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionAmountDelta": S.optionalWith(S.Number, { nullable: true }),
  "submissionIncurredAmountDelta": S.optionalWith(S.Number, { nullable: true }),
  "submissionProjectedAmountDelta": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BucketRef extends S.Class<BucketRef>("BucketRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketRefType
}) {}

export class SubBucketRef extends S.Class<SubBucketRef>("SubBucketRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubBucketRefType
}) {}

export class ClaimRef extends S.Class<ClaimRef>("ClaimRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ClaimRefType
}) {}

export class BaseBucketAttributes extends S.Class<BaseBucketAttributes>("BaseBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(BaseBucketAttributesLossSettlementType, { nullable: true, default: () => "REPLACEMENT_COST_VALUE" as const }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "fundingCount": S.optionalWith(S.Number, { nullable: true }),
  "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
  "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyFunded": S.optionalWith(S.Number, { nullable: true })
}) {}

export class BaseBucketMetadataRef extends S.Class<BaseBucketMetadataRef>("BaseBucketMetadataRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BaseBucketMetadataRefType
}) {}

export class BucketFundingRef extends S.Class<BucketFundingRef>("BucketFundingRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketFundingRefType
}) {}

export class BucketAttributes extends S.Class<BucketAttributes>("BucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(BucketAttributesLossSettlementType, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "fundingCount": S.optionalWith(S.Number, { nullable: true }),
  "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
  "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyFunded": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

export class CoverageRef extends S.Class<CoverageRef>("CoverageRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CoverageRefType
}) {}

export class DeductibleRef extends S.Class<DeductibleRef>("DeductibleRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DeductibleRefType
}) {}

export class ClaimDeductibleRef extends S.Class<ClaimDeductibleRef>("ClaimDeductibleRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ClaimDeductibleRefType
}) {}

export class ClaimAttributes extends S.Class<ClaimAttributes>("ClaimAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "claimId": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(ClaimAttributesStatus, { nullable: true, default: () => "OPEN" as const }),
  "openedDate": S.optionalWith(S.String, { nullable: true }),
  "closedDate": S.optionalWith(S.String, { nullable: true })
}) {}

export class PolicyTermRef extends S.Class<PolicyTermRef>("PolicyTermRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PolicyTermRefType
}) {}

export class ClaimTargetAttributes extends S.Class<ClaimTargetAttributes>("ClaimTargetAttributes")({
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "lossSettlementType": S.optionalWith(ClaimTargetAttributesLossSettlementType, { nullable: true })
}) {}

export class PolicyTermAttributes extends S.Class<PolicyTermAttributes>("PolicyTermAttributes")({
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "lossSettlementType": S.optionalWith(PolicyTermAttributesLossSettlementType, { nullable: true }),
  "premiumAmount": S.optionalWith(S.Number, { nullable: true }),
  "paymentDueDate": S.optionalWith(S.String, { nullable: true }),
  "isFullyPaid": S.optionalWith(S.Boolean, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "dueAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class PolicyRef extends S.Class<PolicyRef>("PolicyRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PolicyRefType
}) {}

export class PolicyTemplateRef extends S.Class<PolicyTemplateRef>("PolicyTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PolicyTemplateRefType
}) {}

export class BucketDefinitionAttributes extends S.Class<BucketDefinitionAttributes>("BucketDefinitionAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  /**
* Is required if not set in .basis
*/
"lossSettlementType": S.optionalWith(BucketDefinitionAttributesLossSettlementType, { nullable: true }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SubCoverageRef extends S.Class<SubCoverageRef>("SubCoverageRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubCoverageRefType
}) {}

export class CoverageAttributes extends S.Class<CoverageAttributes>("CoverageAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  /**
* Is required if not set in .basis
*/
"lossSettlementType": S.optionalWith(CoverageAttributesLossSettlementType, { nullable: true }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CoverageTemplateRef extends S.Class<CoverageTemplateRef>("CoverageTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CoverageTemplateRefType
}) {}

export class CoverageGroupRef extends S.Class<CoverageGroupRef>("CoverageGroupRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CoverageGroupRefType
}) {}

export class PerilRef extends S.Class<PerilRef>("PerilRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PerilRefType
}) {}

export class EndorsementRef extends S.Class<EndorsementRef>("EndorsementRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EndorsementRefType
}) {}

export class SubBucketDefinitionAttributes extends S.Class<SubBucketDefinitionAttributes>("SubBucketDefinitionAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(SubBucketDefinitionAttributesLossSettlementType, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SubCoverageAttributes extends S.Class<SubCoverageAttributes>("SubCoverageAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(SubCoverageAttributesLossSettlementType, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class SubCoverageTemplateRef extends S.Class<SubCoverageTemplateRef>("SubCoverageTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubCoverageTemplateRefType
}) {}

export class BaseSubBucketMetadataRef extends S.Class<BaseSubBucketMetadataRef>("BaseSubBucketMetadataRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BaseSubBucketMetadataRefType
}) {}

export class EndorsementTemplateRef extends S.Class<EndorsementTemplateRef>("EndorsementTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EndorsementTemplateRefType
}) {}

export class CoverageGroupTemplateRef extends S.Class<CoverageGroupTemplateRef>("CoverageGroupTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CoverageGroupTemplateRefType
}) {}

export class EndorsementTemplateAttributes extends S.Class<EndorsementTemplateAttributes>("EndorsementTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true }),
  "canopyApiTerm": S.optionalWith(S.String, { nullable: true }),
  "effect": S.optionalWith(EndorsementTemplateAttributesEffect, { nullable: true }),
  "lossSettlementType": S.optionalWith(EndorsementTemplateAttributesLossSettlementType, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class EndorsementAttributes extends S.Class<EndorsementAttributes>("EndorsementAttributes")({
  "formNumber": S.optionalWith(S.String, { nullable: true }),
  "effect": S.optionalWith(EndorsementAttributesEffect, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntryUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntryUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(EndorsementAttributesLossSettlementType, { nullable: true })
}) {}

export class PolicyAttributes extends S.Class<PolicyAttributes>("PolicyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(PolicyAttributesStatus, { nullable: true, default: () => "ACTIVE" as const }),
  "policyId": S.optionalWith(S.String, { nullable: true }),
  "isActive": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "startDate": S.optionalWith(S.String, { nullable: true }),
  "renewalDate": S.optionalWith(S.String, { nullable: true }),
  "canceledDate": S.optionalWith(S.String, { nullable: true })
}) {}

export class DepreciationModifierRef extends S.Class<DepreciationModifierRef>("DepreciationModifierRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DepreciationModifierRefType
}) {}

export class DepreciationOverrideRef extends S.Class<DepreciationOverrideRef>("DepreciationOverrideRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DepreciationOverrideRefType
}) {}

export class AssetAttributeTypeItemTemplateRef extends S.Class<AssetAttributeTypeItemTemplateRef>("AssetAttributeTypeItemTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetAttributeTypeItemTemplateRefType
}) {}

export class ItemTemplateRef extends S.Class<ItemTemplateRef>("ItemTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemTemplateRefType
}) {}

export class SpaceTypeItemTemplateRef extends S.Class<SpaceTypeItemTemplateRef>("SpaceTypeItemTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceTypeItemTemplateRefType
}) {}

export class SubmissionTrackTemplateRef extends S.Class<SubmissionTrackTemplateRef>("SubmissionTrackTemplateRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubmissionTrackTemplateRefType
}) {}

export class AssetAttributeClassRef extends S.Class<AssetAttributeClassRef>("AssetAttributeClassRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetAttributeClassRefType
}) {}

export class AssetAttributeTypeRef extends S.Class<AssetAttributeTypeRef>("AssetAttributeTypeRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetAttributeTypeRefType
}) {}

export class IncidentClassRef extends S.Class<IncidentClassRef>("IncidentClassRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentClassRefType
}) {}

export class ItemCategoryRef extends S.Class<ItemCategoryRef>("ItemCategoryRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemCategoryRefType
}) {}

export class ItemClassRef extends S.Class<ItemClassRef>("ItemClassRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemClassRefType
}) {}

export class ServiceCategoryRef extends S.Class<ServiceCategoryRef>("ServiceCategoryRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceCategoryRefType
}) {}

export class ServiceClassRef extends S.Class<ServiceClassRef>("ServiceClassRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceClassRefType
}) {}

export class AccountInviteRef extends S.Class<AccountInviteRef>("AccountInviteRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AccountInviteRefType
}) {}

export class AuthProfileRef extends S.Class<AuthProfileRef>("AuthProfileRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AuthProfileRefType
}) {}

export class ProjectImpactRef extends S.Class<ProjectImpactRef>("ProjectImpactRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProjectImpactRefType
}) {}

export class IncidentImpactRef extends S.Class<IncidentImpactRef>("IncidentImpactRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentImpactRefType
}) {}

export class ItemMediaSuggestionRef extends S.Class<ItemMediaSuggestionRef>("ItemMediaSuggestionRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemMediaSuggestionRefType
}) {}

export class ItemProductSuggestionRef extends S.Class<ItemProductSuggestionRef>("ItemProductSuggestionRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemProductSuggestionRefType
}) {}

export class ThirdPartyDwellingRef extends S.Class<ThirdPartyDwellingRef>("ThirdPartyDwellingRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ThirdPartyDwellingRefType
}) {}

export class ThirdPartyIndividualRef extends S.Class<ThirdPartyIndividualRef>("ThirdPartyIndividualRef")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ThirdPartyIndividualRefType
}) {}

export class ItemInvoiceAttributes extends S.Class<ItemInvoiceAttributes>("ItemInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(ItemInvoiceAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemAttributes extends S.Class<ItemAttributes>("ItemAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Struct({
  "type": S.optionalWith(S.Boolean, { nullable: true }),
  "quality": S.optionalWith(S.Boolean, { nullable: true }),
  "acquiredDate": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "quality": S.optionalWith(ItemAttributesQuality, { nullable: true }),
  "condition": S.optionalWith(ItemAttributesCondition, { nullable: true }),
  "isDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
  "acquiredDate": S.optionalWith(S.String, { nullable: true }),
  "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "currentQuantity": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionPaidAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class DepreciationModifierAttributes extends S.Class<DepreciationModifierAttributes>("DepreciationModifierAttributes")({
  "condition": S.optionalWith(DepreciationModifierAttributesCondition, { nullable: true }),
  "quality": S.optionalWith(DepreciationModifierAttributesQuality, { nullable: true }),
  "minimumValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "accelerationFactor": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemPaymentAttributes extends S.Class<ItemPaymentAttributes>("ItemPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(ItemPaymentAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemChangeOrderAttributes extends S.Class<ItemChangeOrderAttributes>("ItemChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(ItemChangeOrderAttributesPurpose, { nullable: true })
}) {}

export class ItemEstimateAttributes extends S.Class<ItemEstimateAttributes>("ItemEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "purpose": S.optionalWith(ItemEstimateAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class AccountInviteAttributes extends S.Class<AccountInviteAttributes>("AccountInviteAttributes")({
  /**
* What level of permissions the user has for this account.
*/
"role": S.optionalWith(AccountInviteAttributesRole, { nullable: true }),
  /**
* The user's email
*/
"email": S.optionalWith(S.String, { nullable: true }),
  "phone": S.optionalWith(S.String, { nullable: true }),
  "invitedAt": S.optionalWith(S.String, { nullable: true }),
  "acceptedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class AuthProfileAttributes extends S.Class<AuthProfileAttributes>("AuthProfileAttributes")({
  "provider": S.optionalWith(AuthProfileAttributesProvider, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true })
}) {}

export class ProjectImpactAttributes extends S.Class<ProjectImpactAttributes>("ProjectImpactAttributes")({
  "extent": S.optionalWith(ProjectImpactAttributesExtent, { nullable: true })
}) {}

export class IncidentImpactAttributes extends S.Class<IncidentImpactAttributes>("IncidentImpactAttributes")({
  "extent": S.optionalWith(IncidentImpactAttributesExtent, { nullable: true })
}) {}

export class ItemMediaSuggestionAttributes extends S.Class<ItemMediaSuggestionAttributes>("ItemMediaSuggestionAttributes")({
  "data_key": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "quality": S.optionalWith(ItemMediaSuggestionAttributesQuality, { nullable: true }),
  "condition": S.optionalWith(ItemMediaSuggestionAttributesCondition, { nullable: true }),
  "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
  "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {}

export class ItemProductSuggestionAttributes extends S.Class<ItemProductSuggestionAttributes>("ItemProductSuggestionAttributes")({
  "source": S.optionalWith(ItemProductSuggestionAttributesSource, { nullable: true }),
  "source_id": S.optionalWith(S.String, { nullable: true }),
  "data_key": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "sellerName": S.optionalWith(S.String, { nullable: true }),
  "sellerLink": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UserAccountRoleAttributes extends S.Class<UserAccountRoleAttributes>("UserAccountRoleAttributes")({
  /**
* What level of permissions the user has for this account.
*/
"role": S.optionalWith(UserAccountRoleAttributesRole, { nullable: true })
}) {}

export class CreateEmailAddressRef extends S.Class<CreateEmailAddressRef>("CreateEmailAddressRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEmailAddressRefType
}) {}

export class CreatePhoneNumberRef extends S.Class<CreatePhoneNumberRef>("CreatePhoneNumberRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePhoneNumberRefType
}) {}

export class CreateAccountRef extends S.Class<CreateAccountRef>("CreateAccountRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAccountRefType
}) {}

export class CreateUserAccountRoleRef extends S.Class<CreateUserAccountRoleRef>("CreateUserAccountRoleRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateUserAccountRoleRefType
}) {}

export class CreateAccountProviderContactRef extends S.Class<CreateAccountProviderContactRef>("CreateAccountProviderContactRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAccountProviderContactRefType
}) {}

export class CreateUserRef extends S.Class<CreateUserRef>("CreateUserRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateUserRefType
}) {}

export class CreateAccountProviderRef extends S.Class<CreateAccountProviderRef>("CreateAccountProviderRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAccountProviderRefType
}) {}

export class CreateProviderRef extends S.Class<CreateProviderRef>("CreateProviderRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProviderRefType
}) {}

export class CreateIncidentRef extends S.Class<CreateIncidentRef>("CreateIncidentRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentRefType
}) {}

export class CreateDwellingRef extends S.Class<CreateDwellingRef>("CreateDwellingRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDwellingRefType
}) {}

export class CreateCurrencyRef extends S.Class<CreateCurrencyRef>("CreateCurrencyRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCurrencyRefType
}) {}

export class CreateProjectMediaRef extends S.Class<CreateProjectMediaRef>("CreateProjectMediaRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProjectMediaRefType
}) {}

export class CreateIncidentTypeRef extends S.Class<CreateIncidentTypeRef>("CreateIncidentTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentTypeRefType
}) {}

export class CreateDisasterRef extends S.Class<CreateDisasterRef>("CreateDisasterRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDisasterRefType
}) {}

export class CreateProjectMediaAttributes extends S.Class<CreateProjectMediaAttributes>("CreateProjectMediaAttributes")({
  "stage": S.optionalWith(CreateProjectMediaAttributesStage, { nullable: true })
}) {}

export class CreateMediaRef extends S.Class<CreateMediaRef>("CreateMediaRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateMediaRefType
}) {}

export class UpdateProjectMediaAttributes extends S.Class<UpdateProjectMediaAttributes>("UpdateProjectMediaAttributes")({
  "stage": S.optionalWith(UpdateProjectMediaAttributesStage, { nullable: true })
}) {}

export class CreateMediaAttributes extends S.Class<CreateMediaAttributes>("CreateMediaAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "subjectState": S.optionalWith(CreateMediaAttributesSubjectState, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

export class CreateFileRef extends S.Class<CreateFileRef>("CreateFileRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateFileRefType
}) {}

export class CreateSpaceRef extends S.Class<CreateSpaceRef>("CreateSpaceRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceRefType
}) {}

export class CreateEntrySourceMediaRef extends S.Class<CreateEntrySourceMediaRef>("CreateEntrySourceMediaRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEntrySourceMediaRefType
}) {}

export class UpdateMediaAttributes extends S.Class<UpdateMediaAttributes>("UpdateMediaAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "note": S.optionalWith(S.String, { nullable: true }),
  "subjectState": S.optionalWith(UpdateMediaAttributesSubjectState, { nullable: true }),
  "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

export class CreateFileAttributes extends S.Class<CreateFileAttributes>("CreateFileAttributes")({
  /**
* The storage provider for this file.
*/
"storageProvider": CreateFileAttributesStorageProvider,
  "originalKey": S.optionalWith(S.String, { nullable: true }),
  "originalUrl": S.optionalWith(S.String, { nullable: true }),
  "presentationKey": S.optionalWith(S.String, { nullable: true }),
  "presentationUrl": S.optionalWith(S.String, { nullable: true }),
  "thumbnailKey": S.optionalWith(S.String, { nullable: true }),
  "thumbnailUrl": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(CreateFileAttributesType, { nullable: true }),
  "filename": S.optionalWith(S.String, { nullable: true }),
  "extension": S.optionalWith(S.String, { nullable: true }),
  "width": S.optionalWith(S.Number, { nullable: true }),
  "height": S.optionalWith(S.Number, { nullable: true }),
  "size": S.optionalWith(S.Number, { nullable: true }),
  "blurhash": S.optionalWith(S.String, { nullable: true }),
  "durationMs": S.optionalWith(S.Number, { nullable: true }),
  "pageCount": S.optionalWith(S.Number, { nullable: true }),
  "createdAt": S.optionalWith(S.String, { nullable: true }),
  "modifiedAt": S.optionalWith(S.String, { nullable: true }),
  "mediaCount": S.optionalWith(S.Number, { nullable: true }),
  "documentCount": S.optionalWith(S.Number, { nullable: true }),
  "addedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateFileProcessRef extends S.Class<CreateFileProcessRef>("CreateFileProcessRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateFileProcessRefType
}) {}

export class CreateChangeOrderRef extends S.Class<CreateChangeOrderRef>("CreateChangeOrderRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateChangeOrderRefType
}) {}

export class CreateEstimateRef extends S.Class<CreateEstimateRef>("CreateEstimateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEstimateRefType
}) {}

export class CreateInvoiceRef extends S.Class<CreateInvoiceRef>("CreateInvoiceRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateInvoiceRefType
}) {}

export class CreatePaymentRef extends S.Class<CreatePaymentRef>("CreatePaymentRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePaymentRefType
}) {}

export class CreateAssetAppraisalRef extends S.Class<CreateAssetAppraisalRef>("CreateAssetAppraisalRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetAppraisalRefType
}) {}

export class CreateAppraisalRef extends S.Class<CreateAppraisalRef>("CreateAppraisalRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAppraisalRefType
}) {}

export class CreateFundingRef extends S.Class<CreateFundingRef>("CreateFundingRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateFundingRefType
}) {}

export class CreateIncidentReportRef extends S.Class<CreateIncidentReportRef>("CreateIncidentReportRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentReportRefType
}) {}

export class CreatePoliceReportRef extends S.Class<CreatePoliceReportRef>("CreatePoliceReportRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePoliceReportRefType
}) {}

export class CreateParamedicReportRef extends S.Class<CreateParamedicReportRef>("CreateParamedicReportRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateParamedicReportRefType
}) {}

export class CreateContractRef extends S.Class<CreateContractRef>("CreateContractRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateContractRefType
}) {}

export class CreateRentRollRef extends S.Class<CreateRentRollRef>("CreateRentRollRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateRentRollRefType
}) {}

export class CreatePermitRef extends S.Class<CreatePermitRef>("CreatePermitRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePermitRefType
}) {}

export class CreateBlueprintRef extends S.Class<CreateBlueprintRef>("CreateBlueprintRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBlueprintRefType
}) {}

export class CreateDeclarationsPageRef extends S.Class<CreateDeclarationsPageRef>("CreateDeclarationsPageRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDeclarationsPageRefType
}) {}

export class CreatePolicyJacketRef extends S.Class<CreatePolicyJacketRef>("CreatePolicyJacketRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePolicyJacketRefType
}) {}

export class CreateScopeOfLossRef extends S.Class<CreateScopeOfLossRef>("CreateScopeOfLossRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateScopeOfLossRefType
}) {}

export class CreateDeliveryPaperworkRef extends S.Class<CreateDeliveryPaperworkRef>("CreateDeliveryPaperworkRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDeliveryPaperworkRefType
}) {}

export class CreateProductSpecRef extends S.Class<CreateProductSpecRef>("CreateProductSpecRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProductSpecRefType
}) {}

export class CreateUserManualRef extends S.Class<CreateUserManualRef>("CreateUserManualRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateUserManualRefType
}) {}

export class CreateWarrantyRef extends S.Class<CreateWarrantyRef>("CreateWarrantyRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateWarrantyRefType
}) {}

export class CreateDeedRef extends S.Class<CreateDeedRef>("CreateDeedRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDeedRefType
}) {}

export class UpdateFileAttributes extends S.Class<UpdateFileAttributes>("UpdateFileAttributes")({
  /**
* The storage provider for this file.
*/
"storageProvider": S.optionalWith(UpdateFileAttributesStorageProvider, { nullable: true }),
  "originalKey": S.optionalWith(S.String, { nullable: true }),
  "originalUrl": S.optionalWith(S.String, { nullable: true }),
  "presentationKey": S.optionalWith(S.String, { nullable: true }),
  "presentationUrl": S.optionalWith(S.String, { nullable: true }),
  "thumbnailKey": S.optionalWith(S.String, { nullable: true }),
  "thumbnailUrl": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(UpdateFileAttributesType, { nullable: true }),
  "filename": S.optionalWith(S.String, { nullable: true }),
  "extension": S.optionalWith(S.String, { nullable: true }),
  "width": S.optionalWith(S.Number, { nullable: true }),
  "height": S.optionalWith(S.Number, { nullable: true }),
  "size": S.optionalWith(S.Number, { nullable: true }),
  "blurhash": S.optionalWith(S.String, { nullable: true }),
  "durationMs": S.optionalWith(S.Number, { nullable: true }),
  "pageCount": S.optionalWith(S.Number, { nullable: true }),
  "createdAt": S.optionalWith(S.String, { nullable: true }),
  "modifiedAt": S.optionalWith(S.String, { nullable: true }),
  "mediaCount": S.optionalWith(S.Number, { nullable: true }),
  "documentCount": S.optionalWith(S.Number, { nullable: true }),
  "addedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateAssetTypeRef extends S.Class<CreateAssetTypeRef>("CreateAssetTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetTypeRefType
}) {}

export class CreateAddressRef extends S.Class<CreateAddressRef>("CreateAddressRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAddressRefType
}) {}

export class CreateAssetTypeData extends S.Class<CreateAssetTypeData>("CreateAssetTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetTypeDataType,
  "attributes": S.optionalWith(CreateAssetTypeAttributes, { nullable: true })
}) {}

export class CreateDocumentTypeRef extends S.Class<CreateDocumentTypeRef>("CreateDocumentTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDocumentTypeRefType
}) {}

export class CreateDocumentClassRef extends S.Class<CreateDocumentClassRef>("CreateDocumentClassRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDocumentClassRefType
}) {}

export class CreateSpaceAttributes extends S.Class<CreateSpaceAttributes>("CreateSpaceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "use": S.optionalWith(CreateSpaceAttributesUse, { nullable: true })
}) {}

export class CreateSpaceTypeRef extends S.Class<CreateSpaceTypeRef>("CreateSpaceTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceTypeRefType
}) {}

export class CreateSpaceGroupRef extends S.Class<CreateSpaceGroupRef>("CreateSpaceGroupRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceGroupRefType
}) {}

export class UpdateSpaceAttributes extends S.Class<UpdateSpaceAttributes>("UpdateSpaceAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "use": S.optionalWith(UpdateSpaceAttributesUse, { nullable: true })
}) {}

export class CreateSpaceClassRef extends S.Class<CreateSpaceClassRef>("CreateSpaceClassRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceClassRefType
}) {}

export class CreateSpaceGroupTypeRef extends S.Class<CreateSpaceGroupTypeRef>("CreateSpaceGroupTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceGroupTypeRefType
}) {}

export class CreateSpaceCategoryRef extends S.Class<CreateSpaceCategoryRef>("CreateSpaceCategoryRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceCategoryRefType
}) {}

export class CreateBucketTypeRef extends S.Class<CreateBucketTypeRef>("CreateBucketTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketTypeRefType
}) {}

export class CreateBucketClassRef extends S.Class<CreateBucketClassRef>("CreateBucketClassRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketClassRefType
}) {}

export class CreateCurrencyData extends S.Class<CreateCurrencyData>("CreateCurrencyData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCurrencyDataType,
  "attributes": S.optionalWith(CreateCurrencyAttributes, { nullable: true })
}) {}

export class CreateCountryRef extends S.Class<CreateCountryRef>("CreateCountryRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCountryRefType
}) {}

export class CreateCountryData extends S.Class<CreateCountryData>("CreateCountryData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCountryDataType,
  "attributes": S.optionalWith(CreateCountryAttributes, { nullable: true })
}) {}

export class CreateFileProcessAttributes extends S.Class<CreateFileProcessAttributes>("CreateFileProcessAttributes")({
  "processId": S.optionalWith(S.String, { nullable: true }),
  "provider": S.optionalWith(CreateFileProcessAttributesProvider, { nullable: true }),
  "type": S.optionalWith(CreateFileProcessAttributesType, { nullable: true }),
  "status": S.optionalWith(CreateFileProcessAttributesStatus, { nullable: true }),
  "startedAt": S.optionalWith(S.String, { nullable: true }),
  "endedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class UpdateFileProcessAttributes extends S.Class<UpdateFileProcessAttributes>("UpdateFileProcessAttributes")({
  "processId": S.optionalWith(S.String, { nullable: true }),
  "provider": S.optionalWith(UpdateFileProcessAttributesProvider, { nullable: true }),
  "type": S.optionalWith(UpdateFileProcessAttributesType, { nullable: true }),
  "status": S.optionalWith(UpdateFileProcessAttributesStatus, { nullable: true }),
  "startedAt": S.optionalWith(S.String, { nullable: true }),
  "endedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateItemizableFinancialDocumentStatsRef extends S.Class<CreateItemizableFinancialDocumentStatsRef>("CreateItemizableFinancialDocumentStatsRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemizableFinancialDocumentStatsRefType
}) {}

export class CreateServiceRef extends S.Class<CreateServiceRef>("CreateServiceRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceRefType
}) {}

export class CreateItemChangeOrderRef extends S.Class<CreateItemChangeOrderRef>("CreateItemChangeOrderRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemChangeOrderRefType
}) {}

export class CreateItemImpactChangeOrderRef extends S.Class<CreateItemImpactChangeOrderRef>("CreateItemImpactChangeOrderRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactChangeOrderRefType
}) {}

export class CreateServiceTaskChangeOrderRef extends S.Class<CreateServiceTaskChangeOrderRef>("CreateServiceTaskChangeOrderRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskChangeOrderRefType
}) {}

export class CreateItemImpactRef extends S.Class<CreateItemImpactRef>("CreateItemImpactRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactRefType
}) {}

export class CreateItemRef extends S.Class<CreateItemRef>("CreateItemRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemRefType
}) {}

export class CreateServiceTaskRef extends S.Class<CreateServiceTaskRef>("CreateServiceTaskRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskRefType
}) {}

export class CreateThirdPartyImpactRef extends S.Class<CreateThirdPartyImpactRef>("CreateThirdPartyImpactRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateThirdPartyImpactRefType
}) {}

export class CreateItemEstimateRef extends S.Class<CreateItemEstimateRef>("CreateItemEstimateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemEstimateRefType
}) {}

export class CreateItemImpactEstimateRef extends S.Class<CreateItemImpactEstimateRef>("CreateItemImpactEstimateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactEstimateRefType
}) {}

export class CreateServiceTaskEstimateRef extends S.Class<CreateServiceTaskEstimateRef>("CreateServiceTaskEstimateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskEstimateRefType
}) {}

export class CreateEntrySourceMetadataRef extends S.Class<CreateEntrySourceMetadataRef>("CreateEntrySourceMetadataRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEntrySourceMetadataRefType
}) {}

export class CreateEntryRef extends S.Class<CreateEntryRef>("CreateEntryRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEntryRefType
}) {}

export class CreateItemAppraisalRef extends S.Class<CreateItemAppraisalRef>("CreateItemAppraisalRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemAppraisalRefType
}) {}

export class CreateServiceTypeRef extends S.Class<CreateServiceTypeRef>("CreateServiceTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTypeRefType
}) {}

export class CreateItemPaymentRef extends S.Class<CreateItemPaymentRef>("CreateItemPaymentRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemPaymentRefType
}) {}

export class CreateItemImpactPaymentRef extends S.Class<CreateItemImpactPaymentRef>("CreateItemImpactPaymentRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactPaymentRefType
}) {}

export class CreateServiceTaskPaymentRef extends S.Class<CreateServiceTaskPaymentRef>("CreateServiceTaskPaymentRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskPaymentRefType
}) {}

export class CreateItemInvoiceRef extends S.Class<CreateItemInvoiceRef>("CreateItemInvoiceRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemInvoiceRefType
}) {}

export class CreateItemImpactInvoiceRef extends S.Class<CreateItemImpactInvoiceRef>("CreateItemImpactInvoiceRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactInvoiceRefType
}) {}

export class CreateServiceTaskInvoiceRef extends S.Class<CreateServiceTaskInvoiceRef>("CreateServiceTaskInvoiceRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskInvoiceRefType
}) {}

export class CreateEntrySourceMetadataAttributes extends S.Class<CreateEntrySourceMetadataAttributes>("CreateEntrySourceMetadataAttributes")({
  "entrySourceType": S.optionalWith(CreateEntrySourceMetadataAttributesEntrySourceType, { nullable: true }),
  "assignedEntryCount": S.optionalWith(S.Number, { nullable: true }),
  "assignedEntryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedEntryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateEntrySourceMetadataAttributes extends S.Class<UpdateEntrySourceMetadataAttributes>("UpdateEntrySourceMetadataAttributes")({
  "entrySourceType": S.optionalWith(UpdateEntrySourceMetadataAttributesEntrySourceType, { nullable: true }),
  "assignedEntryCount": S.optionalWith(S.Number, { nullable: true }),
  "assignedEntryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedEntryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateItemImpactAttributes extends S.Class<CreateItemImpactAttributes>("CreateItemImpactAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Struct({
  "item.type": S.optionalWith(S.Boolean, { nullable: true }),
  "impactDate": S.optionalWith(S.Boolean, { nullable: true }),
  "item.quality": S.optionalWith(S.Boolean, { nullable: true }),
  "item.acquiredDate": S.optionalWith(S.Boolean, { nullable: true }),
  "conditionAtImpact": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "isExactReplacement": S.optionalWith(S.Boolean, { nullable: true }),
  "impactDate": S.optionalWith(S.String, { nullable: true }),
  "isLost": S.optionalWith(S.Boolean, { nullable: true }),
  "conditionAtImpact": S.optionalWith(CreateItemImpactAttributesConditionAtImpact, { nullable: true }),
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "replacementPaidAmount": S.optionalWith(S.Number, { nullable: true }),
  "replacementInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "replacementEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemDepreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemAppraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "customDepreciationLifespanInMonths": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationAccelerationFactor": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationMinimumValuePercentage": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideAgeInMonths": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideValuePercentage": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideDescription": S.optionalWith(S.String, { nullable: true }),
  "isDepreciationCustom": S.optionalWith(S.Boolean, { nullable: true }),
  "customDepreciationFieldsSetBySystem": S.optionalWith(S.Array(S.String), { nullable: true }),
  "itemQuality": S.optionalWith(CreateItemImpactAttributesItemQuality, { nullable: true }),
  "itemAcquiredDate": S.optionalWith(S.String, { nullable: true }),
  "itemAcquiredQuantity": S.optionalWith(S.Number, { nullable: true }),
  "itemIsDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
  "depreciationLifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationMinimumValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "depreciationAccelerationFactor": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationRate": S.optionalWith(S.Number, { nullable: true }),
  "ageInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationOverrideAgeInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationOverrideValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "rcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "acvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAcvAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateItemTypeRef extends S.Class<CreateItemTypeRef>("CreateItemTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemTypeRefType
}) {}

export class UpdateItemImpactAttributes extends S.Class<UpdateItemImpactAttributes>("UpdateItemImpactAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Struct({
  "item.type": S.optionalWith(S.Boolean, { nullable: true }),
  "impactDate": S.optionalWith(S.Boolean, { nullable: true }),
  "item.quality": S.optionalWith(S.Boolean, { nullable: true }),
  "item.acquiredDate": S.optionalWith(S.Boolean, { nullable: true }),
  "conditionAtImpact": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "isExactReplacement": S.optionalWith(S.Boolean, { nullable: true }),
  "impactDate": S.optionalWith(S.String, { nullable: true }),
  "isLost": S.optionalWith(S.Boolean, { nullable: true }),
  "conditionAtImpact": S.optionalWith(UpdateItemImpactAttributesConditionAtImpact, { nullable: true }),
  "quantity": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "replacementPaidAmount": S.optionalWith(S.Number, { nullable: true }),
  "replacementInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "replacementEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemDepreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemAppraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "itemRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "customDepreciationLifespanInMonths": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationAccelerationFactor": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationMinimumValuePercentage": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideAgeInMonths": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideValuePercentage": S.optionalWith(S.Number, { nullable: true, default: () => -1 as const }),
  "customDepreciationOverrideDescription": S.optionalWith(S.String, { nullable: true }),
  "isDepreciationCustom": S.optionalWith(S.Boolean, { nullable: true }),
  "customDepreciationFieldsSetBySystem": S.optionalWith(S.Array(S.String), { nullable: true }),
  "itemQuality": S.optionalWith(UpdateItemImpactAttributesItemQuality, { nullable: true }),
  "itemAcquiredDate": S.optionalWith(S.String, { nullable: true }),
  "itemAcquiredQuantity": S.optionalWith(S.Number, { nullable: true }),
  "itemIsDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
  "depreciationLifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationMinimumValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "depreciationAccelerationFactor": S.optionalWith(S.Number, { nullable: true }),
  "monthlyDepreciationRate": S.optionalWith(S.Number, { nullable: true }),
  "ageInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationOverrideAgeInMonths": S.optionalWith(S.Number, { nullable: true }),
  "depreciationOverrideValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "rcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "acvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredRcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAcvAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAcvAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateEntryAttributes extends S.Class<CreateEntryAttributes>("CreateEntryAttributes")({
  "lossSettlementType": S.optionalWith(CreateEntryAttributesLossSettlementType, { nullable: true }),
  "incurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "projectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "overriddenIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "overriddenProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "approvedAmount": S.optionalWith(S.Number, { nullable: true }),
  "isResolved": S.optionalWith(S.Boolean, { nullable: true }),
  "number": S.optionalWith(S.Number, { nullable: true }),
  "targetAssignmentPercentage": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "submissionStatus": S.optionalWith(CreateEntryAttributesSubmissionStatus, { nullable: true, default: () => "NOT_SUBMITTED" as const }),
  "lastSubmittedAmount": S.optionalWith(S.Number, { nullable: true }),
  "lastSubmittedIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "lastSubmittedProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionAmountDelta": S.optionalWith(S.Number, { nullable: true }),
  "submissionIncurredAmountDelta": S.optionalWith(S.Number, { nullable: true }),
  "submissionProjectedAmountDelta": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateBucketRef extends S.Class<CreateBucketRef>("CreateBucketRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketRefType
}) {}

export class CreateSubBucketRef extends S.Class<CreateSubBucketRef>("CreateSubBucketRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubBucketRefType
}) {}

export class CreateClaimRef extends S.Class<CreateClaimRef>("CreateClaimRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateClaimRefType
}) {}

export class UpdateEntryAttributes extends S.Class<UpdateEntryAttributes>("UpdateEntryAttributes")({
  "lossSettlementType": S.optionalWith(UpdateEntryAttributesLossSettlementType, { nullable: true }),
  "incurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "projectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "overriddenIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "overriddenProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "approvedAmount": S.optionalWith(S.Number, { nullable: true }),
  "isResolved": S.optionalWith(S.Boolean, { nullable: true }),
  "number": S.optionalWith(S.Number, { nullable: true }),
  "targetAssignmentPercentage": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "submissionStatus": S.optionalWith(UpdateEntryAttributesSubmissionStatus, { nullable: true, default: () => "NOT_SUBMITTED" as const }),
  "lastSubmittedAmount": S.optionalWith(S.Number, { nullable: true }),
  "lastSubmittedIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "lastSubmittedProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submissionAmountDelta": S.optionalWith(S.Number, { nullable: true }),
  "submissionIncurredAmountDelta": S.optionalWith(S.Number, { nullable: true }),
  "submissionProjectedAmountDelta": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateBaseBucketAttributes extends S.Class<CreateBaseBucketAttributes>("CreateBaseBucketAttributes")({
  "limitAmount": S.Number,
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(CreateBaseBucketAttributesLossSettlementType, { nullable: true, default: () => "REPLACEMENT_COST_VALUE" as const }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "fundingCount": S.optionalWith(S.Number, { nullable: true }),
  "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
  "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyFunded": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateBaseBucketMetadataRef extends S.Class<CreateBaseBucketMetadataRef>("CreateBaseBucketMetadataRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBaseBucketMetadataRefType
}) {}

export class CreateBucketFundingRef extends S.Class<CreateBucketFundingRef>("CreateBucketFundingRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketFundingRefType
}) {}

export class UpdateBaseBucketAttributes extends S.Class<UpdateBaseBucketAttributes>("UpdateBaseBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(UpdateBaseBucketAttributesLossSettlementType, { nullable: true, default: () => "REPLACEMENT_COST_VALUE" as const }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "fundingCount": S.optionalWith(S.Number, { nullable: true }),
  "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
  "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyFunded": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateBucketAttributes extends S.Class<CreateBucketAttributes>("CreateBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(CreateBucketAttributesLossSettlementType, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "fundingCount": S.optionalWith(S.Number, { nullable: true }),
  "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
  "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyFunded": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateCoverageRef extends S.Class<CreateCoverageRef>("CreateCoverageRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCoverageRefType
}) {}

export class CreateDeductibleRef extends S.Class<CreateDeductibleRef>("CreateDeductibleRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDeductibleRefType
}) {}

export class CreateClaimDeductibleRef extends S.Class<CreateClaimDeductibleRef>("CreateClaimDeductibleRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateClaimDeductibleRefType
}) {}

export class UpdateBucketAttributes extends S.Class<UpdateBucketAttributes>("UpdateBucketAttributes")({
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(UpdateBucketAttributesLossSettlementType, { nullable: true }),
  "entryCount": S.optionalWith(S.Number, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
  "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
  "fundingCount": S.optionalWith(S.Number, { nullable: true }),
  "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
  "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyFunded": S.optionalWith(S.Number, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateClaimAttributes extends S.Class<CreateClaimAttributes>("CreateClaimAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "claimId": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(CreateClaimAttributesStatus, { nullable: true, default: () => "OPEN" as const }),
  "openedDate": S.optionalWith(S.String, { nullable: true }),
  "closedDate": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreatePolicyTermRef extends S.Class<CreatePolicyTermRef>("CreatePolicyTermRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePolicyTermRefType
}) {}

export class UpdateClaimAttributes extends S.Class<UpdateClaimAttributes>("UpdateClaimAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "entryAmount": S.optionalWith(S.Number, { nullable: true }),
  "claimId": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(UpdateClaimAttributesStatus, { nullable: true, default: () => "OPEN" as const }),
  "openedDate": S.optionalWith(S.String, { nullable: true }),
  "closedDate": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateClaimTargetAttributes extends S.Class<CreateClaimTargetAttributes>("CreateClaimTargetAttributes")({
  "effectiveStartDate": S.String,
  "effectiveEndDate": S.String,
  "name": S.String,
  "description": S.optionalWith(S.String, { nullable: true }),
  "lossSettlementType": S.optionalWith(CreateClaimTargetAttributesLossSettlementType, { nullable: true })
}) {}

export class UpdateClaimTargetAttributes extends S.Class<UpdateClaimTargetAttributes>("UpdateClaimTargetAttributes")({
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "lossSettlementType": S.optionalWith(UpdateClaimTargetAttributesLossSettlementType, { nullable: true })
}) {}

export class CreatePolicyTermAttributes extends S.Class<CreatePolicyTermAttributes>("CreatePolicyTermAttributes")({
  "effectiveStartDate": S.String,
  "effectiveEndDate": S.String,
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "lossSettlementType": S.optionalWith(CreatePolicyTermAttributesLossSettlementType, { nullable: true }),
  "premiumAmount": S.optionalWith(S.Number, { nullable: true }),
  "paymentDueDate": S.optionalWith(S.String, { nullable: true }),
  "isFullyPaid": S.optionalWith(S.Boolean, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "dueAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreatePolicyRef extends S.Class<CreatePolicyRef>("CreatePolicyRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePolicyRefType
}) {}

export class CreatePolicyTemplateRef extends S.Class<CreatePolicyTemplateRef>("CreatePolicyTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePolicyTemplateRefType
}) {}

export class UpdatePolicyTermAttributes extends S.Class<UpdatePolicyTermAttributes>("UpdatePolicyTermAttributes")({
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "lossSettlementType": S.optionalWith(UpdatePolicyTermAttributesLossSettlementType, { nullable: true }),
  "premiumAmount": S.optionalWith(S.Number, { nullable: true }),
  "paymentDueDate": S.optionalWith(S.String, { nullable: true }),
  "isFullyPaid": S.optionalWith(S.Boolean, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "dueAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateProviderData extends S.Class<CreateProviderData>("CreateProviderData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProviderDataType,
  "attributes": S.optionalWith(CreateProviderAttributes, { nullable: true })
}) {}

export class CreateBucketDefinitionAttributes extends S.Class<CreateBucketDefinitionAttributes>("CreateBucketDefinitionAttributes")({
  "name": S.String,
  "limitAmount": S.Number,
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  /**
* Is required if not set in .basis
*/
"lossSettlementType": S.optionalWith(CreateBucketDefinitionAttributesLossSettlementType, { nullable: true }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateSubCoverageRef extends S.Class<CreateSubCoverageRef>("CreateSubCoverageRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubCoverageRefType
}) {}

export class UpdateBucketDefinitionAttributes extends S.Class<UpdateBucketDefinitionAttributes>("UpdateBucketDefinitionAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  /**
* Is required if not set in .basis
*/
"lossSettlementType": S.optionalWith(UpdateBucketDefinitionAttributesLossSettlementType, { nullable: true }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateCoverageAttributes extends S.Class<CreateCoverageAttributes>("CreateCoverageAttributes")({
  "name": S.String,
  "limitAmount": S.Number,
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  /**
* Is required if not set in .basis
*/
"lossSettlementType": S.optionalWith(CreateCoverageAttributesLossSettlementType, { nullable: true }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateCoverageTemplateRef extends S.Class<CreateCoverageTemplateRef>("CreateCoverageTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCoverageTemplateRefType
}) {}

export class CreateCoverageGroupRef extends S.Class<CreateCoverageGroupRef>("CreateCoverageGroupRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCoverageGroupRefType
}) {}

export class CreatePerilRef extends S.Class<CreatePerilRef>("CreatePerilRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePerilRefType
}) {}

export class CreateEndorsementRef extends S.Class<CreateEndorsementRef>("CreateEndorsementRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEndorsementRefType
}) {}

export class UpdateCoverageAttributes extends S.Class<UpdateCoverageAttributes>("UpdateCoverageAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  /**
* Is required if not set in .basis
*/
"lossSettlementType": S.optionalWith(UpdateCoverageAttributesLossSettlementType, { nullable: true }),
  "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
  "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateSubBucketDefinitionAttributes extends S.Class<CreateSubBucketDefinitionAttributes>("CreateSubBucketDefinitionAttributes")({
  "name": S.String,
  "limitAmount": S.Number,
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(CreateSubBucketDefinitionAttributesLossSettlementType, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateSubBucketDefinitionAttributes extends S.Class<UpdateSubBucketDefinitionAttributes>("UpdateSubBucketDefinitionAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(UpdateSubBucketDefinitionAttributesLossSettlementType, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateSubCoverageAttributes extends S.Class<CreateSubCoverageAttributes>("CreateSubCoverageAttributes")({
  "name": S.String,
  "limitAmount": S.Number,
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(CreateSubCoverageAttributesLossSettlementType, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateSubCoverageTemplateRef extends S.Class<CreateSubCoverageTemplateRef>("CreateSubCoverageTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubCoverageTemplateRefType
}) {}

export class UpdateSubCoverageAttributes extends S.Class<UpdateSubCoverageAttributes>("UpdateSubCoverageAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(UpdateSubCoverageAttributesLossSettlementType, { nullable: true }),
  "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
  "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
  "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
  "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
  "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateBaseSubBucketMetadataRef extends S.Class<CreateBaseSubBucketMetadataRef>("CreateBaseSubBucketMetadataRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBaseSubBucketMetadataRefType
}) {}

export class CreateEndorsementTemplateRef extends S.Class<CreateEndorsementTemplateRef>("CreateEndorsementTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEndorsementTemplateRefType
}) {}

export class CreateCoverageGroupTemplateRef extends S.Class<CreateCoverageGroupTemplateRef>("CreateCoverageGroupTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCoverageGroupTemplateRefType
}) {}

export class CreateEndorsementTemplateAttributes extends S.Class<CreateEndorsementTemplateAttributes>("CreateEndorsementTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true }),
  "canopyApiTerm": S.optionalWith(S.String, { nullable: true }),
  "effect": S.optionalWith(CreateEndorsementTemplateAttributesEffect, { nullable: true }),
  "lossSettlementType": S.optionalWith(CreateEndorsementTemplateAttributesLossSettlementType, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class UpdateEndorsementTemplateAttributes extends S.Class<UpdateEndorsementTemplateAttributes>("UpdateEndorsementTemplateAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "articleUrl": S.optionalWith(S.String, { nullable: true }),
  "canopyApiTerm": S.optionalWith(S.String, { nullable: true }),
  "effect": S.optionalWith(UpdateEndorsementTemplateAttributesEffect, { nullable: true }),
  "lossSettlementType": S.optionalWith(UpdateEndorsementTemplateAttributesLossSettlementType, { nullable: true }),
  "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class CreateEndorsementAttributes extends S.Class<CreateEndorsementAttributes>("CreateEndorsementAttributes")({
  "formNumber": S.optionalWith(S.String, { nullable: true }),
  "effect": CreateEndorsementAttributesEffect,
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntryUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntryUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(CreateEndorsementAttributesLossSettlementType, { nullable: true })
}) {}

export class UpdateEndorsementAttributes extends S.Class<UpdateEndorsementAttributes>("UpdateEndorsementAttributes")({
  "formNumber": S.optionalWith(S.String, { nullable: true }),
  "effect": S.optionalWith(UpdateEndorsementAttributesEffect, { nullable: true }),
  "limitAmount": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntryUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
  "limitAmountPerEntryUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
  "lossSettlementType": S.optionalWith(UpdateEndorsementAttributesLossSettlementType, { nullable: true })
}) {}

export class CreatePolicyAttributes extends S.Class<CreatePolicyAttributes>("CreatePolicyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(CreatePolicyAttributesStatus, { nullable: true, default: () => "ACTIVE" as const }),
  "policyId": S.optionalWith(S.String, { nullable: true }),
  "isActive": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "startDate": S.optionalWith(S.String, { nullable: true }),
  "renewalDate": S.optionalWith(S.String, { nullable: true }),
  "canceledDate": S.optionalWith(S.String, { nullable: true })
}) {}

export class UpdatePolicyAttributes extends S.Class<UpdatePolicyAttributes>("UpdatePolicyAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(UpdatePolicyAttributesStatus, { nullable: true, default: () => "ACTIVE" as const }),
  "policyId": S.optionalWith(S.String, { nullable: true }),
  "isActive": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "startDate": S.optionalWith(S.String, { nullable: true }),
  "renewalDate": S.optionalWith(S.String, { nullable: true }),
  "canceledDate": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateDepreciationModifierRef extends S.Class<CreateDepreciationModifierRef>("CreateDepreciationModifierRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDepreciationModifierRefType
}) {}

export class CreateDepreciationOverrideRef extends S.Class<CreateDepreciationOverrideRef>("CreateDepreciationOverrideRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDepreciationOverrideRefType
}) {}

export class CreateAssetAttributeTypeItemTemplateRef extends S.Class<CreateAssetAttributeTypeItemTemplateRef>("CreateAssetAttributeTypeItemTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetAttributeTypeItemTemplateRefType
}) {}

export class CreateItemTemplateRef extends S.Class<CreateItemTemplateRef>("CreateItemTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemTemplateRefType
}) {}

export class CreateSpaceTypeItemTemplateRef extends S.Class<CreateSpaceTypeItemTemplateRef>("CreateSpaceTypeItemTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceTypeItemTemplateRefType
}) {}

export class CreateSubmissionTrackTemplateRef extends S.Class<CreateSubmissionTrackTemplateRef>("CreateSubmissionTrackTemplateRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubmissionTrackTemplateRefType
}) {}

export class CreateAssetAttributeClassRef extends S.Class<CreateAssetAttributeClassRef>("CreateAssetAttributeClassRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetAttributeClassRefType
}) {}

export class CreateAssetAttributeTypeRef extends S.Class<CreateAssetAttributeTypeRef>("CreateAssetAttributeTypeRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetAttributeTypeRefType
}) {}

export class CreateIncidentClassRef extends S.Class<CreateIncidentClassRef>("CreateIncidentClassRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentClassRefType
}) {}

export class CreateItemCategoryRef extends S.Class<CreateItemCategoryRef>("CreateItemCategoryRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemCategoryRefType
}) {}

export class CreateItemClassRef extends S.Class<CreateItemClassRef>("CreateItemClassRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemClassRefType
}) {}

export class CreateServiceCategoryRef extends S.Class<CreateServiceCategoryRef>("CreateServiceCategoryRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceCategoryRefType
}) {}

export class CreateServiceClassRef extends S.Class<CreateServiceClassRef>("CreateServiceClassRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceClassRefType
}) {}

export class CreateAccountInviteRef extends S.Class<CreateAccountInviteRef>("CreateAccountInviteRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAccountInviteRefType
}) {}

export class CreateAuthProfileRef extends S.Class<CreateAuthProfileRef>("CreateAuthProfileRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAuthProfileRefType
}) {}

export class CreateProjectImpactRef extends S.Class<CreateProjectImpactRef>("CreateProjectImpactRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProjectImpactRefType
}) {}

export class CreateIncidentImpactRef extends S.Class<CreateIncidentImpactRef>("CreateIncidentImpactRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentImpactRefType
}) {}

export class CreateItemMediaSuggestionRef extends S.Class<CreateItemMediaSuggestionRef>("CreateItemMediaSuggestionRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemMediaSuggestionRefType
}) {}

export class CreateItemProductSuggestionRef extends S.Class<CreateItemProductSuggestionRef>("CreateItemProductSuggestionRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemProductSuggestionRefType
}) {}

export class CreateThirdPartyDwellingRef extends S.Class<CreateThirdPartyDwellingRef>("CreateThirdPartyDwellingRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateThirdPartyDwellingRefType
}) {}

export class CreateThirdPartyIndividualRef extends S.Class<CreateThirdPartyIndividualRef>("CreateThirdPartyIndividualRef")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateThirdPartyIndividualRefType
}) {}

export class CreateBaseEntityData extends S.Class<CreateBaseEntityData>("CreateBaseEntityData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBaseEntityDataType
}) {}

export class CreateItemInvoiceAttributes extends S.Class<CreateItemInvoiceAttributes>("CreateItemInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(CreateItemInvoiceAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateItemInvoiceAttributes extends S.Class<UpdateItemInvoiceAttributes>("UpdateItemInvoiceAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(UpdateItemInvoiceAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateItemAttributes extends S.Class<CreateItemAttributes>("CreateItemAttributes")({
  "name": S.String,
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Struct({
  "type": S.optionalWith(S.Boolean, { nullable: true }),
  "quality": S.optionalWith(S.Boolean, { nullable: true }),
  "acquiredDate": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "quality": S.optionalWith(CreateItemAttributesQuality, { nullable: true }),
  "condition": S.optionalWith(CreateItemAttributesCondition, { nullable: true }),
  "isDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
  "acquiredDate": S.optionalWith(S.String, { nullable: true }),
  "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "currentQuantity": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionPaidAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateItemAttributes extends S.Class<UpdateItemAttributes>("UpdateItemAttributes")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
  "fieldsNeedingAttention": S.optionalWith(S.Struct({
  "type": S.optionalWith(S.Boolean, { nullable: true }),
  "quality": S.optionalWith(S.Boolean, { nullable: true }),
  "acquiredDate": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
  "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
  "quality": S.optionalWith(UpdateItemAttributesQuality, { nullable: true }),
  "condition": S.optionalWith(UpdateItemAttributesCondition, { nullable: true }),
  "isDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
  "acquiredDate": S.optionalWith(S.String, { nullable: true }),
  "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "currentQuantity": S.optionalWith(S.Number, { nullable: true }),
  "paymentCount": S.optionalWith(S.Number, { nullable: true }),
  "paidAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "estimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
  "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
  "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionPaidAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
  "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateDepreciationModifierAttributes extends S.Class<CreateDepreciationModifierAttributes>("CreateDepreciationModifierAttributes")({
  "condition": S.optionalWith(CreateDepreciationModifierAttributesCondition, { nullable: true }),
  "quality": S.optionalWith(CreateDepreciationModifierAttributesQuality, { nullable: true }),
  "minimumValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "accelerationFactor": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateDepreciationModifierAttributes extends S.Class<UpdateDepreciationModifierAttributes>("UpdateDepreciationModifierAttributes")({
  "condition": S.optionalWith(UpdateDepreciationModifierAttributesCondition, { nullable: true }),
  "quality": S.optionalWith(UpdateDepreciationModifierAttributesQuality, { nullable: true }),
  "minimumValuePercentage": S.optionalWith(S.Number, { nullable: true }),
  "accelerationFactor": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateItemPaymentAttributes extends S.Class<CreateItemPaymentAttributes>("CreateItemPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(CreateItemPaymentAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateItemPaymentAttributes extends S.Class<UpdateItemPaymentAttributes>("UpdateItemPaymentAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(UpdateItemPaymentAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateItemChangeOrderAttributes extends S.Class<CreateItemChangeOrderAttributes>("CreateItemChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(CreateItemChangeOrderAttributesPurpose, { nullable: true })
}) {}

export class UpdateItemChangeOrderAttributes extends S.Class<UpdateItemChangeOrderAttributes>("UpdateItemChangeOrderAttributes")({
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "purpose": S.optionalWith(UpdateItemChangeOrderAttributesPurpose, { nullable: true })
}) {}

export class CreateItemEstimateAttributes extends S.Class<CreateItemEstimateAttributes>("CreateItemEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "purpose": S.optionalWith(CreateItemEstimateAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateItemEstimateAttributes extends S.Class<UpdateItemEstimateAttributes>("UpdateItemEstimateAttributes")({
  "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true }),
  "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "currentAmount": S.optionalWith(S.String, { nullable: true }),
  "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
  "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
  "currentFeeAmount": S.optionalWith(S.String, { nullable: true }),
  "purpose": S.optionalWith(UpdateItemEstimateAttributesPurpose, { nullable: true, default: () => "PURCHASE" as const }),
  "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateAccountInviteAttributes extends S.Class<CreateAccountInviteAttributes>("CreateAccountInviteAttributes")({
  /**
* What level of permissions the user has for this account.
*/
"role": CreateAccountInviteAttributesRole,
  /**
* The user's email
*/
"email": S.String,
  "phone": S.optionalWith(S.String, { nullable: true }),
  "invitedAt": S.optionalWith(S.String, { nullable: true }),
  "acceptedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class UpdateAccountInviteAttributes extends S.Class<UpdateAccountInviteAttributes>("UpdateAccountInviteAttributes")({
  /**
* What level of permissions the user has for this account.
*/
"role": S.optionalWith(UpdateAccountInviteAttributesRole, { nullable: true }),
  /**
* The user's email
*/
"email": S.optionalWith(S.String, { nullable: true }),
  "phone": S.optionalWith(S.String, { nullable: true }),
  "invitedAt": S.optionalWith(S.String, { nullable: true }),
  "acceptedAt": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateAuthProfileAttributes extends S.Class<CreateAuthProfileAttributes>("CreateAuthProfileAttributes")({
  "provider": CreateAuthProfileAttributesProvider,
  "externalId": S.String
}) {}

export class UpdateAuthProfileAttributes extends S.Class<UpdateAuthProfileAttributes>("UpdateAuthProfileAttributes")({
  "provider": S.optionalWith(UpdateAuthProfileAttributesProvider, { nullable: true }),
  "externalId": S.optionalWith(S.String, { nullable: true })
}) {}

export class CreateProjectImpactAttributes extends S.Class<CreateProjectImpactAttributes>("CreateProjectImpactAttributes")({
  "extent": S.optionalWith(CreateProjectImpactAttributesExtent, { nullable: true })
}) {}

export class UpdateProjectImpactAttributes extends S.Class<UpdateProjectImpactAttributes>("UpdateProjectImpactAttributes")({
  "extent": S.optionalWith(UpdateProjectImpactAttributesExtent, { nullable: true })
}) {}

export class CreateIncidentImpactAttributes extends S.Class<CreateIncidentImpactAttributes>("CreateIncidentImpactAttributes")({
  "extent": S.optionalWith(CreateIncidentImpactAttributesExtent, { nullable: true })
}) {}

export class UpdateIncidentImpactAttributes extends S.Class<UpdateIncidentImpactAttributes>("UpdateIncidentImpactAttributes")({
  "extent": S.optionalWith(UpdateIncidentImpactAttributesExtent, { nullable: true })
}) {}

export class CreateItemMediaSuggestionAttributes extends S.Class<CreateItemMediaSuggestionAttributes>("CreateItemMediaSuggestionAttributes")({
  "data_key": S.String,
  "name": S.String,
  "quality": S.optionalWith(CreateItemMediaSuggestionAttributesQuality, { nullable: true }),
  "condition": S.optionalWith(CreateItemMediaSuggestionAttributesCondition, { nullable: true }),
  "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
  "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateItemMediaSuggestionAttributes extends S.Class<UpdateItemMediaSuggestionAttributes>("UpdateItemMediaSuggestionAttributes")({
  "data_key": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "quality": S.optionalWith(UpdateItemMediaSuggestionAttributesQuality, { nullable: true }),
  "condition": S.optionalWith(UpdateItemMediaSuggestionAttributesCondition, { nullable: true }),
  "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 as const }),
  "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
  "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
  "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateItemProductSuggestionAttributes extends S.Class<CreateItemProductSuggestionAttributes>("CreateItemProductSuggestionAttributes")({
  "source": CreateItemProductSuggestionAttributesSource,
  "source_id": S.String,
  "data_key": S.String,
  "description": S.optionalWith(S.String, { nullable: true }),
  "sellerName": S.optionalWith(S.String, { nullable: true }),
  "sellerLink": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.Number,
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class UpdateItemProductSuggestionAttributes extends S.Class<UpdateItemProductSuggestionAttributes>("UpdateItemProductSuggestionAttributes")({
  "source": S.optionalWith(UpdateItemProductSuggestionAttributesSource, { nullable: true }),
  "source_id": S.optionalWith(S.String, { nullable: true }),
  "data_key": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "sellerName": S.optionalWith(S.String, { nullable: true }),
  "sellerLink": S.optionalWith(S.String, { nullable: true }),
  "amount": S.optionalWith(S.Number, { nullable: true }),
  "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
  "taxAmount": S.optionalWith(S.Number, { nullable: true }),
  "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {}

export class CreateUserAccountRoleAttributes extends S.Class<CreateUserAccountRoleAttributes>("CreateUserAccountRoleAttributes")({
  /**
* What level of permissions the user has for this account.
*/
"role": CreateUserAccountRoleAttributesRole
}) {}

export class UpdateUserAccountRoleAttributes extends S.Class<UpdateUserAccountRoleAttributes>("UpdateUserAccountRoleAttributes")({
  /**
* What level of permissions the user has for this account.
*/
"role": S.optionalWith(UpdateUserAccountRoleAttributesRole, { nullable: true })
}) {}

export class JsonApiEntityReference extends S.Class<JsonApiEntityReference>("JsonApiEntityReference")({
  "data": EntityReference
}) {}

export class JsonApiEntityReferenceList extends S.Class<JsonApiEntityReferenceList>("JsonApiEntityReferenceList")({
  "data": S.Array(EntityReference)
}) {}

export class TransloaditAssemblyOptionsDto extends S.Class<TransloaditAssemblyOptionsDto>("TransloaditAssemblyOptionsDto")({
  /**
* The semantic type of file that is being uploaded.
*/
"type": TransloaditAssemblyOptionsDtoType,
  /**
* What provider will be used for uploads.
*/
"provider": TransloaditAssemblyOptionsDtoProvider
}) {}

export class TransloaditStoreFileAssemblyParams extends S.Class<TransloaditStoreFileAssemblyParams>("TransloaditStoreFileAssemblyParams")({
  "auth": TransloaditAssemblyAuth,
  /**
* Transloadit template ID to execute
*/
"template_id": S.String,
  /**
* Trusted fields interpolated in the template (signed server-side).
*/
"fields": TransloaditStoreFileAssemblyFields
}) {}

export class TransloaditAvatarAssemblyParams extends S.Class<TransloaditAvatarAssemblyParams>("TransloaditAvatarAssemblyParams")({
  "auth": TransloaditAssemblyAuth,
  /**
* Transloadit template ID to execute
*/
"template_id": S.String,
  /**
* Trusted fields interpolated in the template (signed server-side).
*/
"fields": TransloaditAvatarAssemblyFields
}) {}

export class CdnScopeDto extends S.Class<CdnScopeDto>("CdnScopeDto")({
  /**
* The CloudFront distribution domain used for access
*/
"domain": S.String,
  /**
* Account ID the scope applies to
*/
"accountId": S.String,
  /**
* User ID the scope applies to
*/
"userId": S.String,
  /**
* List of resource policies scoped to this user/account
*/
"resources": S.Array(CdnResourceDto)
}) {}

export class SignedUrlItemDto extends S.Class<SignedUrlItemDto>("SignedUrlItemDto")({
  /**
* Object key (relative path) or absolute URL to sign. Your API should enforce one style.
*/
"key": S.String,
  /**
* Optional per-item TTL (time-to-live) in seconds. Must be between 60s (1m) and 86400s (24h).
*/
"ttlSeconds": S.optionalWith(S.Number.pipe(S.greaterThanOrEqualTo(60), S.lessThanOrEqualTo(86400)), { nullable: true }),
  /**
* HTTP action to sign for (GET for download, PUT for upload, HEAD for metadata).
*/
"action": S.optionalWith(SignedUrlItemDtoAction, { nullable: true }),
  /**
* Content-Type header to enforce. For PUT uploads, sets the required Content-Type. For GET, sets the response Content-Type.
*/
"contentType": S.optionalWith(S.String, { nullable: true }),
  /**
* Response content disposition. Useful for forcing downloads or naming files in GET requests.
*/
"contentDisposition": S.optionalWith(S.String, { nullable: true }),
  /**
* Optional client-provided correlation ID to map requests to results.
*/
"clientToken": S.optionalWith(S.String, { nullable: true })
}) {}

export class SignedUrlResultDto extends S.Class<SignedUrlResultDto>("SignedUrlResultDto")({
  /**
* The storage key for the file
*/
"key": S.String,
  /**
* Signed URL for accessing the file (present on success)
*/
"url": S.optionalWith(S.String, { nullable: true }),
  /**
* Expiration timestamp in ISO 8601 format
*/
"expiresAt": S.optionalWith(S.String, { nullable: true }),
  /**
* Effective TTL (time to live) in seconds
*/
"ttlSeconds": S.optionalWith(S.Number, { nullable: true }),
  /**
* Action for which this URL was issued
*/
"action": S.optionalWith(SignedUrlResultDtoAction, { nullable: true }),
  /**
* Error details if URL generation failed
*/
"error": S.optionalWith(SignedUrlErrorDto, { nullable: true }),
  /**
* Optional client-provided token to correlate requests
*/
"clientToken": S.optionalWith(S.String, { nullable: true })
}) {}

export class AssetTypeData extends S.Class<AssetTypeData>("AssetTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true })
}) {}

export class CurrencyData extends S.Class<CurrencyData>("CurrencyData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CurrencyDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(CurrencyAttributes, { nullable: true })
}) {}

export class CountryData extends S.Class<CountryData>("CountryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CountryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(CountryAttributes, { nullable: true })
}) {}

export class ProviderData extends S.Class<ProviderData>("ProviderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProviderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ProviderAttributes, { nullable: true })
}) {}

export class BaseEntityData extends S.Class<BaseEntityData>("BaseEntityData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BaseEntityDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class UpdateAssetTypeData extends S.Class<UpdateAssetTypeData>("UpdateAssetTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAssetTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAssetTypeAttributes, { nullable: true })
}) {}

export class UpdateCurrencyData extends S.Class<UpdateCurrencyData>("UpdateCurrencyData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateCurrencyDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateCurrencyAttributes, { nullable: true })
}) {}

export class UpdateCountryData extends S.Class<UpdateCountryData>("UpdateCountryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateCountryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateCountryAttributes, { nullable: true })
}) {}

export class UpdateProviderData extends S.Class<UpdateProviderData>("UpdateProviderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateProviderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateProviderAttributes, { nullable: true })
}) {}

export class UpdateBaseEntityData extends S.Class<UpdateBaseEntityData>("UpdateBaseEntityData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBaseEntityDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true })
}) {}

export class ReferencedUser extends S.Class<ReferencedUser>("ReferencedUser")({
  /**
* Entity reference for User.
*/
"data": UserRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUser extends S.Class<NullableReferencedUser>("NullableReferencedUser")({
  /**
* Nullable entity reference for User.
*/
"data": S.NullOr(UserRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateUser extends S.Class<ReferencedUpdateUser>("ReferencedUpdateUser")({
  /**
* Entity reference for User.
*/
"data": UserRef
}) {}

export class NullableReferencedUpdateUser extends S.Class<NullableReferencedUpdateUser>("NullableReferencedUpdateUser")({
  /**
* Nullable entity reference for User.
*/
"data": S.NullOr(UserRef)
}) {}

export class ReferencedProjectList extends S.Class<ReferencedProjectList>("ReferencedProjectList")({
  /**
* A list of Project entity refs.
*/
"data": S.Array(IncidentRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedProject extends S.Class<ReferencedProject>("ReferencedProject")({
  /**
* Entity reference for Project.
*/
"data": IncidentRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedProject extends S.Class<NullableReferencedProject>("NullableReferencedProject")({
  /**
* Nullable entity reference for Project.
*/
"data": S.NullOr(IncidentRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateProject extends S.Class<ReferencedUpdateProject>("ReferencedUpdateProject")({
  /**
* Entity reference for Project.
*/
"data": IncidentRef
}) {}

export class NullableReferencedUpdateProject extends S.Class<NullableReferencedUpdateProject>("NullableReferencedUpdateProject")({
  /**
* Nullable entity reference for Project.
*/
"data": S.NullOr(IncidentRef)
}) {}

export class ReferencedUpdateProjectList extends S.Class<ReferencedUpdateProjectList>("ReferencedUpdateProjectList")({
  /**
* A list of Project entity refs.
*/
"data": S.Array(IncidentRef)
}) {}

export class ReferencedAssetList extends S.Class<ReferencedAssetList>("ReferencedAssetList")({
  /**
* A list of Asset entity refs.
*/
"data": S.Array(DwellingRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAsset extends S.Class<ReferencedAsset>("ReferencedAsset")({
  /**
* Entity reference for Asset.
*/
"data": DwellingRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedAsset extends S.Class<NullableReferencedAsset>("NullableReferencedAsset")({
  /**
* Nullable entity reference for Asset.
*/
"data": S.NullOr(DwellingRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateAsset extends S.Class<ReferencedUpdateAsset>("ReferencedUpdateAsset")({
  /**
* Entity reference for Asset.
*/
"data": DwellingRef
}) {}

export class ReferencedUpdateAssetList extends S.Class<ReferencedUpdateAssetList>("ReferencedUpdateAssetList")({
  /**
* A list of Asset entity refs.
*/
"data": S.Array(DwellingRef)
}) {}

export class NullableReferencedUpdateAsset extends S.Class<NullableReferencedUpdateAsset>("NullableReferencedUpdateAsset")({
  /**
* Nullable entity reference for Asset.
*/
"data": S.NullOr(DwellingRef)
}) {}

export class ReferencedUserAccountRoleList extends S.Class<ReferencedUserAccountRoleList>("ReferencedUserAccountRoleList")({
  /**
* A list of UserAccountRole entity refs.
*/
"data": S.Array(UserAccountRoleRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedCurrency extends S.Class<ReferencedCurrency>("ReferencedCurrency")({
  /**
* Entity reference for Currency.
*/
"data": CurrencyRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateCurrency extends S.Class<ReferencedUpdateCurrency>("ReferencedUpdateCurrency")({
  /**
* Entity reference for Currency.
*/
"data": CurrencyRef
}) {}

export class NullableReferencedEmailAddress extends S.Class<NullableReferencedEmailAddress>("NullableReferencedEmailAddress")({
  /**
* Nullable entity reference for EmailAddress.
*/
"data": S.NullOr(EmailAddressRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateEmailAddress extends S.Class<NullableReferencedUpdateEmailAddress>("NullableReferencedUpdateEmailAddress")({
  /**
* Nullable entity reference for EmailAddress.
*/
"data": S.NullOr(EmailAddressRef)
}) {}

export class NullableReferencedPhoneNumber extends S.Class<NullableReferencedPhoneNumber>("NullableReferencedPhoneNumber")({
  /**
* Nullable entity reference for PhoneNumber.
*/
"data": S.NullOr(PhoneNumberRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdatePhoneNumber extends S.Class<NullableReferencedUpdatePhoneNumber>("NullableReferencedUpdatePhoneNumber")({
  /**
* Nullable entity reference for PhoneNumber.
*/
"data": S.NullOr(PhoneNumberRef)
}) {}

export class NullableReferencedAccount extends S.Class<NullableReferencedAccount>("NullableReferencedAccount")({
  /**
* Nullable entity reference for Account.
*/
"data": S.NullOr(AccountRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAccount extends S.Class<ReferencedAccount>("ReferencedAccount")({
  /**
* Entity reference for Account.
*/
"data": AccountRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateAccount extends S.Class<NullableReferencedUpdateAccount>("NullableReferencedUpdateAccount")({
  /**
* Nullable entity reference for Account.
*/
"data": S.NullOr(AccountRef)
}) {}

export class ReferencedUpdateAccount extends S.Class<ReferencedUpdateAccount>("ReferencedUpdateAccount")({
  /**
* Entity reference for Account.
*/
"data": AccountRef
}) {}

export class ReferencedIdentity extends S.Class<ReferencedIdentity>("ReferencedIdentity")({
  /**
* Entity reference for Identity.
*/
"data": S.Union(AccountProviderContactRef,
UserRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAccountProviderContactList extends S.Class<ReferencedAccountProviderContactList>("ReferencedAccountProviderContactList")({
  /**
* A list of AccountProviderContact entity refs.
*/
"data": S.Array(AccountProviderContactRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateIdentity extends S.Class<ReferencedUpdateIdentity>("ReferencedUpdateIdentity")({
  /**
* Entity reference for Identity.
*/
"data": S.Union(AccountProviderContactRef,
UserRef)
}) {}

export class ReferencedUpdateAccountProviderContactList extends S.Class<ReferencedUpdateAccountProviderContactList>("ReferencedUpdateAccountProviderContactList")({
  /**
* A list of AccountProviderContact entity refs.
*/
"data": S.Array(AccountProviderContactRef)
}) {}

export class ReferencedAccountProvider extends S.Class<ReferencedAccountProvider>("ReferencedAccountProvider")({
  /**
* Entity reference for AccountProvider.
*/
"data": AccountProviderRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedAccountProvider extends S.Class<NullableReferencedAccountProvider>("NullableReferencedAccountProvider")({
  /**
* Nullable entity reference for AccountProvider.
*/
"data": S.NullOr(AccountProviderRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateAccountProvider extends S.Class<ReferencedUpdateAccountProvider>("ReferencedUpdateAccountProvider")({
  /**
* Entity reference for AccountProvider.
*/
"data": AccountProviderRef
}) {}

export class NullableReferencedUpdateAccountProvider extends S.Class<NullableReferencedUpdateAccountProvider>("NullableReferencedUpdateAccountProvider")({
  /**
* Nullable entity reference for AccountProvider.
*/
"data": S.NullOr(AccountProviderRef)
}) {}

export class NullableReferencedProvider extends S.Class<NullableReferencedProvider>("NullableReferencedProvider")({
  /**
* Nullable entity reference for Provider.
*/
"data": S.NullOr(ProviderRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedProvider extends S.Class<ReferencedProvider>("ReferencedProvider")({
  /**
* Entity reference for Provider.
*/
"data": ProviderRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateProvider extends S.Class<ReferencedUpdateProvider>("ReferencedUpdateProvider")({
  /**
* Entity reference for Provider.
*/
"data": ProviderRef
}) {}

export class NullableReferencedUpdateProvider extends S.Class<NullableReferencedUpdateProvider>("NullableReferencedUpdateProvider")({
  /**
* Nullable entity reference for Provider.
*/
"data": S.NullOr(ProviderRef)
}) {}

export class ReferencedProjectMediaList extends S.Class<ReferencedProjectMediaList>("ReferencedProjectMediaList")({
  /**
* A list of ProjectMedia entity refs.
*/
"data": S.Array(ProjectMediaRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateProjectMediaList extends S.Class<ReferencedUpdateProjectMediaList>("ReferencedUpdateProjectMediaList")({
  /**
* A list of ProjectMedia entity refs.
*/
"data": S.Array(ProjectMediaRef)
}) {}

export class ReferencedIncidentType extends S.Class<ReferencedIncidentType>("ReferencedIncidentType")({
  /**
* Entity reference for IncidentType.
*/
"data": IncidentTypeRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedIncidentTypeList extends S.Class<ReferencedIncidentTypeList>("ReferencedIncidentTypeList")({
  /**
* A list of IncidentType entity refs.
*/
"data": S.Array(IncidentTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateIncidentType extends S.Class<ReferencedUpdateIncidentType>("ReferencedUpdateIncidentType")({
  /**
* Entity reference for IncidentType.
*/
"data": IncidentTypeRef
}) {}

export class NullableReferencedDisaster extends S.Class<NullableReferencedDisaster>("NullableReferencedDisaster")({
  /**
* Nullable entity reference for Disaster.
*/
"data": S.NullOr(DisasterRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateDisaster extends S.Class<NullableReferencedUpdateDisaster>("NullableReferencedUpdateDisaster")({
  /**
* Nullable entity reference for Disaster.
*/
"data": S.NullOr(DisasterRef)
}) {}

export class ReferencedMedia extends S.Class<ReferencedMedia>("ReferencedMedia")({
  /**
* Entity reference for Media.
*/
"data": MediaRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedMediaList extends S.Class<ReferencedMediaList>("ReferencedMediaList")({
  /**
* A list of Media entity refs.
*/
"data": S.Array(MediaRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateMedia extends S.Class<ReferencedUpdateMedia>("ReferencedUpdateMedia")({
  /**
* Entity reference for Media.
*/
"data": MediaRef
}) {}

export class ReferencedFile extends S.Class<ReferencedFile>("ReferencedFile")({
  /**
* Entity reference for File.
*/
"data": FileRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedFile extends S.Class<NullableReferencedFile>("NullableReferencedFile")({
  /**
* Nullable entity reference for File.
*/
"data": S.NullOr(FileRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateFile extends S.Class<ReferencedUpdateFile>("ReferencedUpdateFile")({
  /**
* Entity reference for File.
*/
"data": FileRef
}) {}

export class NullableReferencedUpdateFile extends S.Class<NullableReferencedUpdateFile>("NullableReferencedUpdateFile")({
  /**
* Nullable entity reference for File.
*/
"data": S.NullOr(FileRef)
}) {}

export class ReferencedSpaceList extends S.Class<ReferencedSpaceList>("ReferencedSpaceList")({
  /**
* A list of Space entity refs.
*/
"data": S.Array(SpaceRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedSpace extends S.Class<NullableReferencedSpace>("NullableReferencedSpace")({
  /**
* Nullable entity reference for Space.
*/
"data": S.NullOr(SpaceRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateSpaceList extends S.Class<ReferencedUpdateSpaceList>("ReferencedUpdateSpaceList")({
  /**
* A list of Space entity refs.
*/
"data": S.Array(SpaceRef)
}) {}

export class NullableReferencedUpdateSpace extends S.Class<NullableReferencedUpdateSpace>("NullableReferencedUpdateSpace")({
  /**
* Nullable entity reference for Space.
*/
"data": S.NullOr(SpaceRef)
}) {}

export class ReferencedEntrySourceMediaList extends S.Class<ReferencedEntrySourceMediaList>("ReferencedEntrySourceMediaList")({
  /**
* A list of EntrySourceMedia entity refs.
*/
"data": S.Array(EntrySourceMediaRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedFileProcessList extends S.Class<ReferencedFileProcessList>("ReferencedFileProcessList")({
  /**
* A list of FileProcess entity refs.
*/
"data": S.Array(FileProcessRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedChangeOrderList extends S.Class<ReferencedChangeOrderList>("ReferencedChangeOrderList")({
  /**
* A list of ChangeOrder entity refs.
*/
"data": S.Array(ChangeOrderRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedChangeOrder extends S.Class<ReferencedChangeOrder>("ReferencedChangeOrder")({
  /**
* Entity reference for ChangeOrder.
*/
"data": ChangeOrderRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateChangeOrder extends S.Class<ReferencedUpdateChangeOrder>("ReferencedUpdateChangeOrder")({
  /**
* Entity reference for ChangeOrder.
*/
"data": ChangeOrderRef
}) {}

export class ReferencedEstimate extends S.Class<ReferencedEstimate>("ReferencedEstimate")({
  /**
* Entity reference for Estimate.
*/
"data": EstimateRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedEstimateList extends S.Class<ReferencedEstimateList>("ReferencedEstimateList")({
  /**
* A list of Estimate entity refs.
*/
"data": S.Array(EstimateRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedEstimate extends S.Class<NullableReferencedEstimate>("NullableReferencedEstimate")({
  /**
* Nullable entity reference for Estimate.
*/
"data": S.NullOr(EstimateRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateEstimate extends S.Class<ReferencedUpdateEstimate>("ReferencedUpdateEstimate")({
  /**
* Entity reference for Estimate.
*/
"data": EstimateRef
}) {}

export class NullableReferencedUpdateEstimate extends S.Class<NullableReferencedUpdateEstimate>("NullableReferencedUpdateEstimate")({
  /**
* Nullable entity reference for Estimate.
*/
"data": S.NullOr(EstimateRef)
}) {}

export class ReferencedInvoiceList extends S.Class<ReferencedInvoiceList>("ReferencedInvoiceList")({
  /**
* A list of Invoice entity refs.
*/
"data": S.Array(InvoiceRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedInvoice extends S.Class<NullableReferencedInvoice>("NullableReferencedInvoice")({
  /**
* Nullable entity reference for Invoice.
*/
"data": S.NullOr(InvoiceRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateInvoice extends S.Class<NullableReferencedUpdateInvoice>("NullableReferencedUpdateInvoice")({
  /**
* Nullable entity reference for Invoice.
*/
"data": S.NullOr(InvoiceRef)
}) {}

export class ReferencedItemizableFinancialDocument extends S.Class<ReferencedItemizableFinancialDocument>("ReferencedItemizableFinancialDocument")({
  /**
* Entity reference for ItemizableFinancialDocument.
*/
"data": S.Union(ChangeOrderRef,
EstimateRef,
InvoiceRef,
PaymentRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedPaymentList extends S.Class<ReferencedPaymentList>("ReferencedPaymentList")({
  /**
* A list of Payment entity refs.
*/
"data": S.Array(PaymentRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedPayment extends S.Class<NullableReferencedPayment>("NullableReferencedPayment")({
  /**
* Nullable entity reference for Payment.
*/
"data": S.NullOr(PaymentRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdatePayment extends S.Class<NullableReferencedUpdatePayment>("NullableReferencedUpdatePayment")({
  /**
* Nullable entity reference for Payment.
*/
"data": S.NullOr(PaymentRef)
}) {}

export class ReferencedAssetAppraisalList extends S.Class<ReferencedAssetAppraisalList>("ReferencedAssetAppraisalList")({
  /**
* A list of AssetAppraisal entity refs.
*/
"data": S.Array(AssetAppraisalRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedAssetAppraisal extends S.Class<NullableReferencedAssetAppraisal>("NullableReferencedAssetAppraisal")({
  /**
* Nullable entity reference for AssetAppraisal.
*/
"data": S.NullOr(AssetAppraisalRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateAssetAppraisal extends S.Class<NullableReferencedUpdateAssetAppraisal>("NullableReferencedUpdateAssetAppraisal")({
  /**
* Nullable entity reference for AssetAppraisal.
*/
"data": S.NullOr(AssetAppraisalRef)
}) {}

export class ReferencedAppraisal extends S.Class<ReferencedAppraisal>("ReferencedAppraisal")({
  /**
* Entity reference for Appraisal.
*/
"data": AppraisalRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateAppraisal extends S.Class<ReferencedUpdateAppraisal>("ReferencedUpdateAppraisal")({
  /**
* Entity reference for Appraisal.
*/
"data": AppraisalRef
}) {}

export class ReferencedFundingList extends S.Class<ReferencedFundingList>("ReferencedFundingList")({
  /**
* A list of Funding entity refs.
*/
"data": S.Array(FundingRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedFunding extends S.Class<ReferencedFunding>("ReferencedFunding")({
  /**
* Entity reference for Funding.
*/
"data": FundingRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateFunding extends S.Class<ReferencedUpdateFunding>("ReferencedUpdateFunding")({
  /**
* Entity reference for Funding.
*/
"data": FundingRef
}) {}

export class ReferencedDocumentList extends S.Class<ReferencedDocumentList>("ReferencedDocumentList")({
  /**
* A list of Document entity refs.
*/
"data": S.Array(S.Union(ChangeOrderRef,
EstimateRef,
InvoiceRef,
PaymentRef,
AssetAppraisalRef,
AppraisalRef,
FundingRef,
IncidentReportRef,
PoliceReportRef,
ParamedicReportRef,
ContractRef,
RentRollRef,
PermitRef,
BlueprintRef,
DeclarationsPageRef,
PolicyJacketRef,
ScopeOfLossRef,
DeliveryPaperworkRef,
ProductSpecRef,
UserManualRef,
WarrantyRef,
DeedRef)),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAssetType extends S.Class<ReferencedAssetType>("ReferencedAssetType")({
  /**
* Entity reference for AssetType.
*/
"data": AssetTypeRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAssetTypeList extends S.Class<ReferencedAssetTypeList>("ReferencedAssetTypeList")({
  /**
* A list of AssetType entity refs.
*/
"data": S.Array(AssetTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateAssetType extends S.Class<ReferencedUpdateAssetType>("ReferencedUpdateAssetType")({
  /**
* Entity reference for AssetType.
*/
"data": AssetTypeRef
}) {}

export class ReferencedAddress extends S.Class<ReferencedAddress>("ReferencedAddress")({
  /**
* Entity reference for Address.
*/
"data": AddressRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateAddress extends S.Class<ReferencedUpdateAddress>("ReferencedUpdateAddress")({
  /**
* Entity reference for Address.
*/
"data": AddressRef
}) {}

export class ReferencedDocumentType extends S.Class<ReferencedDocumentType>("ReferencedDocumentType")({
  /**
* Entity reference for DocumentType.
*/
"data": DocumentTypeRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedDocumentTypeList extends S.Class<ReferencedDocumentTypeList>("ReferencedDocumentTypeList")({
  /**
* A list of DocumentType entity refs.
*/
"data": S.Array(DocumentTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedDocumentClassList extends S.Class<ReferencedDocumentClassList>("ReferencedDocumentClassList")({
  /**
* A list of DocumentClass entity refs.
*/
"data": S.Array(DocumentClassRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedSpaceType extends S.Class<ReferencedSpaceType>("ReferencedSpaceType")({
  /**
* Entity reference for SpaceType.
*/
"data": SpaceTypeRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedSpaceTypeList extends S.Class<ReferencedSpaceTypeList>("ReferencedSpaceTypeList")({
  /**
* A list of SpaceType entity refs.
*/
"data": S.Array(SpaceTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateSpaceType extends S.Class<ReferencedUpdateSpaceType>("ReferencedUpdateSpaceType")({
  /**
* Entity reference for SpaceType.
*/
"data": SpaceTypeRef
}) {}

export class ReferencedSpaceGroup extends S.Class<ReferencedSpaceGroup>("ReferencedSpaceGroup")({
  /**
* Entity reference for SpaceGroup.
*/
"data": SpaceGroupRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateSpaceGroup extends S.Class<ReferencedUpdateSpaceGroup>("ReferencedUpdateSpaceGroup")({
  /**
* Entity reference for SpaceGroup.
*/
"data": SpaceGroupRef
}) {}

export class ReferencedSpaceClassList extends S.Class<ReferencedSpaceClassList>("ReferencedSpaceClassList")({
  /**
* A list of SpaceClass entity refs.
*/
"data": S.Array(SpaceClassRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedSpaceGroupTypeList extends S.Class<ReferencedSpaceGroupTypeList>("ReferencedSpaceGroupTypeList")({
  /**
* A list of SpaceGroupType entity refs.
*/
"data": S.Array(SpaceGroupTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedSpaceCategoryList extends S.Class<ReferencedSpaceCategoryList>("ReferencedSpaceCategoryList")({
  /**
* A list of SpaceCategory entity refs.
*/
"data": S.Array(SpaceCategoryRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBucketTypeList extends S.Class<ReferencedBucketTypeList>("ReferencedBucketTypeList")({
  /**
* A list of BucketType entity refs.
*/
"data": S.Array(BucketTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedBucketType extends S.Class<NullableReferencedBucketType>("NullableReferencedBucketType")({
  /**
* Nullable entity reference for BucketType.
*/
"data": S.NullOr(BucketTypeRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBucketType extends S.Class<ReferencedBucketType>("ReferencedBucketType")({
  /**
* Entity reference for BucketType.
*/
"data": BucketTypeRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateBucketType extends S.Class<NullableReferencedUpdateBucketType>("NullableReferencedUpdateBucketType")({
  /**
* Nullable entity reference for BucketType.
*/
"data": S.NullOr(BucketTypeRef)
}) {}

export class ReferencedBucketClassList extends S.Class<ReferencedBucketClassList>("ReferencedBucketClassList")({
  /**
* A list of BucketClass entity refs.
*/
"data": S.Array(BucketClassRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedCountry extends S.Class<ReferencedCountry>("ReferencedCountry")({
  /**
* Entity reference for Country.
*/
"data": CountryRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateCountry extends S.Class<ReferencedUpdateCountry>("ReferencedUpdateCountry")({
  /**
* Entity reference for Country.
*/
"data": CountryRef
}) {}

export class ReferencedItemizableFinancialDocumentStats extends S.Class<ReferencedItemizableFinancialDocumentStats>("ReferencedItemizableFinancialDocumentStats")({
  /**
* Entity reference for ItemizableFinancialDocumentStats.
*/
"data": ItemizableFinancialDocumentStatsRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedService extends S.Class<ReferencedService>("ReferencedService")({
  /**
* Entity reference for Service.
*/
"data": ServiceRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedService extends S.Class<NullableReferencedService>("NullableReferencedService")({
  /**
* Nullable entity reference for Service.
*/
"data": S.NullOr(ServiceRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateService extends S.Class<ReferencedUpdateService>("ReferencedUpdateService")({
  /**
* Entity reference for Service.
*/
"data": ServiceRef
}) {}

export class NullableReferencedUpdateService extends S.Class<NullableReferencedUpdateService>("NullableReferencedUpdateService")({
  /**
* Nullable entity reference for Service.
*/
"data": S.NullOr(ServiceRef)
}) {}

export class ReferencedChangeOrderLineList extends S.Class<ReferencedChangeOrderLineList>("ReferencedChangeOrderLineList")({
  /**
* A list of ChangeOrderLine entity refs.
*/
"data": S.Array(S.Union(ItemChangeOrderRef,
ItemImpactChangeOrderRef,
ServiceTaskChangeOrderRef)),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateChangeOrderLineList extends S.Class<ReferencedUpdateChangeOrderLineList>("ReferencedUpdateChangeOrderLineList")({
  /**
* A list of ChangeOrderLine entity refs.
*/
"data": S.Array(S.Union(ItemChangeOrderRef,
ItemImpactChangeOrderRef,
ServiceTaskChangeOrderRef))
}) {}

export class NullableReferencedItemImpact extends S.Class<NullableReferencedItemImpact>("NullableReferencedItemImpact")({
  /**
* Nullable entity reference for ItemImpact.
*/
"data": S.NullOr(ItemImpactRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemImpactList extends S.Class<ReferencedItemImpactList>("ReferencedItemImpactList")({
  /**
* A list of ItemImpact entity refs.
*/
"data": S.Array(ItemImpactRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemImpact extends S.Class<ReferencedItemImpact>("ReferencedItemImpact")({
  /**
* Entity reference for ItemImpact.
*/
"data": ItemImpactRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItem extends S.Class<ReferencedItem>("ReferencedItem")({
  /**
* Entity reference for Item.
*/
"data": ItemRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedItem extends S.Class<NullableReferencedItem>("NullableReferencedItem")({
  /**
* Nullable entity reference for Item.
*/
"data": S.NullOr(ItemRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemList extends S.Class<ReferencedItemList>("ReferencedItemList")({
  /**
* A list of Item entity refs.
*/
"data": S.Array(ItemRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateItem extends S.Class<ReferencedUpdateItem>("ReferencedUpdateItem")({
  /**
* Entity reference for Item.
*/
"data": ItemRef
}) {}

export class NullableReferencedUpdateItem extends S.Class<NullableReferencedUpdateItem>("NullableReferencedUpdateItem")({
  /**
* Nullable entity reference for Item.
*/
"data": S.NullOr(ItemRef)
}) {}

export class ReferencedUpdateItemList extends S.Class<ReferencedUpdateItemList>("ReferencedUpdateItemList")({
  /**
* A list of Item entity refs.
*/
"data": S.Array(ItemRef)
}) {}

export class ReferencedServiceTask extends S.Class<ReferencedServiceTask>("ReferencedServiceTask")({
  /**
* Entity reference for ServiceTask.
*/
"data": ServiceTaskRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedEntrySourceList extends S.Class<ReferencedEntrySourceList>("ReferencedEntrySourceList")({
  /**
* A list of EntrySource entity refs.
*/
"data": S.Array(S.Union(ItemImpactRef,
ItemRef,
ServiceTaskRef,
ServiceRef,
ThirdPartyImpactRef)),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedEntrySource extends S.Class<ReferencedEntrySource>("ReferencedEntrySource")({
  /**
* Entity reference for EntrySource.
*/
"data": S.Union(ItemImpactRef,
ItemRef,
ServiceTaskRef,
ServiceRef,
ThirdPartyImpactRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateEntrySource extends S.Class<ReferencedUpdateEntrySource>("ReferencedUpdateEntrySource")({
  /**
* Entity reference for EntrySource.
*/
"data": S.Union(ItemImpactRef,
ItemRef,
ServiceTaskRef,
ServiceRef,
ThirdPartyImpactRef)
}) {}

export class ReferencedItemEstimate extends S.Class<ReferencedItemEstimate>("ReferencedItemEstimate")({
  /**
* Entity reference for ItemEstimate.
*/
"data": ItemEstimateRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemImpactEstimate extends S.Class<ReferencedItemImpactEstimate>("ReferencedItemImpactEstimate")({
  /**
* Entity reference for ItemImpactEstimate.
*/
"data": ItemImpactEstimateRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedEstimateLineList extends S.Class<ReferencedEstimateLineList>("ReferencedEstimateLineList")({
  /**
* A list of EstimateLine entity refs.
*/
"data": S.Array(S.Union(ItemEstimateRef,
ItemImpactEstimateRef,
ServiceTaskEstimateRef)),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedEstimateLine extends S.Class<ReferencedEstimateLine>("ReferencedEstimateLine")({
  /**
* Entity reference for EstimateLine.
*/
"data": S.Union(ItemEstimateRef,
ItemImpactEstimateRef,
ServiceTaskEstimateRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedServiceTaskEstimate extends S.Class<ReferencedServiceTaskEstimate>("ReferencedServiceTaskEstimate")({
  /**
* Entity reference for ServiceTaskEstimate.
*/
"data": ServiceTaskEstimateRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateEstimateLine extends S.Class<ReferencedUpdateEstimateLine>("ReferencedUpdateEstimateLine")({
  /**
* Entity reference for EstimateLine.
*/
"data": S.Union(ItemEstimateRef,
ItemImpactEstimateRef,
ServiceTaskEstimateRef)
}) {}

export class ReferencedEntrySourceMetadata extends S.Class<ReferencedEntrySourceMetadata>("ReferencedEntrySourceMetadata")({
  /**
* Entity reference for EntrySourceMetadata.
*/
"data": EntrySourceMetadataRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedEntryList extends S.Class<ReferencedEntryList>("ReferencedEntryList")({
  /**
* A list of Entry entity refs.
*/
"data": S.Array(EntryRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemAppraisalList extends S.Class<ReferencedItemAppraisalList>("ReferencedItemAppraisalList")({
  /**
* A list of ItemAppraisal entity refs.
*/
"data": S.Array(ItemAppraisalRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedItemAppraisal extends S.Class<NullableReferencedItemAppraisal>("NullableReferencedItemAppraisal")({
  /**
* Nullable entity reference for ItemAppraisal.
*/
"data": S.NullOr(ItemAppraisalRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAppraisalLineList extends S.Class<ReferencedAppraisalLineList>("ReferencedAppraisalLineList")({
  /**
* A list of AppraisalLine entity refs.
*/
"data": S.Array(ItemAppraisalRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateItemAppraisal extends S.Class<NullableReferencedUpdateItemAppraisal>("NullableReferencedUpdateItemAppraisal")({
  /**
* Nullable entity reference for ItemAppraisal.
*/
"data": S.NullOr(ItemAppraisalRef)
}) {}

export class NullableReferencedServiceType extends S.Class<NullableReferencedServiceType>("NullableReferencedServiceType")({
  /**
* Nullable entity reference for ServiceType.
*/
"data": S.NullOr(ServiceTypeRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedServiceTypeList extends S.Class<ReferencedServiceTypeList>("ReferencedServiceTypeList")({
  /**
* A list of ServiceType entity refs.
*/
"data": S.Array(ServiceTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateServiceType extends S.Class<NullableReferencedUpdateServiceType>("NullableReferencedUpdateServiceType")({
  /**
* Nullable entity reference for ServiceType.
*/
"data": S.NullOr(ServiceTypeRef)
}) {}

export class ReferencedPaymentLineList extends S.Class<ReferencedPaymentLineList>("ReferencedPaymentLineList")({
  /**
* A list of PaymentLine entity refs.
*/
"data": S.Array(S.Union(ItemPaymentRef,
ItemImpactPaymentRef,
ServiceTaskPaymentRef)),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedInvoiceLineList extends S.Class<ReferencedInvoiceLineList>("ReferencedInvoiceLineList")({
  /**
* A list of InvoiceLine entity refs.
*/
"data": S.Array(S.Union(ItemInvoiceRef,
ItemImpactInvoiceRef,
ServiceTaskInvoiceRef)),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedItemType extends S.Class<NullableReferencedItemType>("NullableReferencedItemType")({
  /**
* Nullable entity reference for ItemType.
*/
"data": S.NullOr(ItemTypeRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedDepreciationSchedule extends S.Class<ReferencedDepreciationSchedule>("ReferencedDepreciationSchedule")({
  /**
* Entity reference for DepreciationSchedule.
*/
"data": ItemTypeRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemTypeList extends S.Class<ReferencedItemTypeList>("ReferencedItemTypeList")({
  /**
* A list of ItemType entity refs.
*/
"data": S.Array(ItemTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemType extends S.Class<ReferencedItemType>("ReferencedItemType")({
  /**
* Entity reference for ItemType.
*/
"data": ItemTypeRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateItemType extends S.Class<NullableReferencedUpdateItemType>("NullableReferencedUpdateItemType")({
  /**
* Nullable entity reference for ItemType.
*/
"data": S.NullOr(ItemTypeRef)
}) {}

export class ReferencedBaseBucket extends S.Class<ReferencedBaseBucket>("ReferencedBaseBucket")({
  /**
* Entity reference for BaseBucket.
*/
"data": BucketRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBaseBucketList extends S.Class<ReferencedBaseBucketList>("ReferencedBaseBucketList")({
  /**
* A list of BaseBucket entity refs.
*/
"data": S.Array(BucketRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBucketList extends S.Class<ReferencedBucketList>("ReferencedBucketList")({
  /**
* A list of Bucket entity refs.
*/
"data": S.Array(BucketRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateBaseBucket extends S.Class<ReferencedUpdateBaseBucket>("ReferencedUpdateBaseBucket")({
  /**
* Entity reference for BaseBucket.
*/
"data": BucketRef
}) {}

export class NullableReferencedBaseSubBucket extends S.Class<NullableReferencedBaseSubBucket>("NullableReferencedBaseSubBucket")({
  /**
* Nullable entity reference for BaseSubBucket.
*/
"data": S.NullOr(SubBucketRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBaseSubBucketList extends S.Class<ReferencedBaseSubBucketList>("ReferencedBaseSubBucketList")({
  /**
* A list of BaseSubBucket entity refs.
*/
"data": S.Array(SubBucketRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedSubBucketList extends S.Class<ReferencedSubBucketList>("ReferencedSubBucketList")({
  /**
* A list of SubBucket entity refs.
*/
"data": S.Array(SubBucketRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateBaseSubBucket extends S.Class<NullableReferencedUpdateBaseSubBucket>("NullableReferencedUpdateBaseSubBucket")({
  /**
* Nullable entity reference for BaseSubBucket.
*/
"data": S.NullOr(SubBucketRef)
}) {}

export class ReferencedFundingSource extends S.Class<ReferencedFundingSource>("ReferencedFundingSource")({
  /**
* Entity reference for FundingSource.
*/
"data": ClaimRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedClaim extends S.Class<ReferencedClaim>("ReferencedClaim")({
  /**
* Entity reference for Claim.
*/
"data": ClaimRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateClaim extends S.Class<ReferencedUpdateClaim>("ReferencedUpdateClaim")({
  /**
* Entity reference for Claim.
*/
"data": ClaimRef
}) {}

export class ReferencedUpdateFundingSource extends S.Class<ReferencedUpdateFundingSource>("ReferencedUpdateFundingSource")({
  /**
* Entity reference for FundingSource.
*/
"data": ClaimRef
}) {}

export class ReferencedBaseBucketMetadata extends S.Class<ReferencedBaseBucketMetadata>("ReferencedBaseBucketMetadata")({
  /**
* Entity reference for BaseBucketMetadata.
*/
"data": BaseBucketMetadataRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBucketFundingList extends S.Class<ReferencedBucketFundingList>("ReferencedBucketFundingList")({
  /**
* A list of BucketFunding entity refs.
*/
"data": S.Array(BucketFundingRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBucketDefinition extends S.Class<ReferencedBucketDefinition>("ReferencedBucketDefinition")({
  /**
* Entity reference for BucketDefinition.
*/
"data": CoverageRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBucketDefinitionList extends S.Class<ReferencedBucketDefinitionList>("ReferencedBucketDefinitionList")({
  /**
* A list of BucketDefinition entity refs.
*/
"data": S.Array(CoverageRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedCoverage extends S.Class<ReferencedCoverage>("ReferencedCoverage")({
  /**
* Entity reference for Coverage.
*/
"data": CoverageRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedCoverageList extends S.Class<ReferencedCoverageList>("ReferencedCoverageList")({
  /**
* A list of Coverage entity refs.
*/
"data": S.Array(CoverageRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateCoverage extends S.Class<ReferencedUpdateCoverage>("ReferencedUpdateCoverage")({
  /**
* Entity reference for Coverage.
*/
"data": CoverageRef
}) {}

export class ReferencedUpdateBucketDefinition extends S.Class<ReferencedUpdateBucketDefinition>("ReferencedUpdateBucketDefinition")({
  /**
* Entity reference for BucketDefinition.
*/
"data": CoverageRef
}) {}

export class ReferencedUpdateCoverageList extends S.Class<ReferencedUpdateCoverageList>("ReferencedUpdateCoverageList")({
  /**
* A list of Coverage entity refs.
*/
"data": S.Array(CoverageRef)
}) {}

export class ReferencedDeductible extends S.Class<ReferencedDeductible>("ReferencedDeductible")({
  /**
* Entity reference for Deductible.
*/
"data": DeductibleRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedDeductibleList extends S.Class<ReferencedDeductibleList>("ReferencedDeductibleList")({
  /**
* A list of Deductible entity refs.
*/
"data": S.Array(DeductibleRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedDeductible extends S.Class<NullableReferencedDeductible>("NullableReferencedDeductible")({
  /**
* Nullable entity reference for Deductible.
*/
"data": S.NullOr(DeductibleRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateDeductible extends S.Class<NullableReferencedUpdateDeductible>("NullableReferencedUpdateDeductible")({
  /**
* Nullable entity reference for Deductible.
*/
"data": S.NullOr(DeductibleRef)
}) {}

export class ReferencedUpdateDeductible extends S.Class<ReferencedUpdateDeductible>("ReferencedUpdateDeductible")({
  /**
* Entity reference for Deductible.
*/
"data": DeductibleRef
}) {}

export class ReferencedClaimDeductible extends S.Class<ReferencedClaimDeductible>("ReferencedClaimDeductible")({
  /**
* Entity reference for ClaimDeductible.
*/
"data": ClaimDeductibleRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedClaimDeductibleList extends S.Class<ReferencedClaimDeductibleList>("ReferencedClaimDeductibleList")({
  /**
* A list of ClaimDeductible entity refs.
*/
"data": S.Array(ClaimDeductibleRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedClaimTarget extends S.Class<ReferencedClaimTarget>("ReferencedClaimTarget")({
  /**
* Entity reference for ClaimTarget.
*/
"data": PolicyTermRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedPolicyTerm extends S.Class<ReferencedPolicyTerm>("ReferencedPolicyTerm")({
  /**
* Entity reference for PolicyTerm.
*/
"data": PolicyTermRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedPolicyTermList extends S.Class<ReferencedPolicyTermList>("ReferencedPolicyTermList")({
  /**
* A list of PolicyTerm entity refs.
*/
"data": S.Array(PolicyTermRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdatePolicyTerm extends S.Class<ReferencedUpdatePolicyTerm>("ReferencedUpdatePolicyTerm")({
  /**
* Entity reference for PolicyTerm.
*/
"data": PolicyTermRef
}) {}

export class ReferencedUpdateClaimTarget extends S.Class<ReferencedUpdateClaimTarget>("ReferencedUpdateClaimTarget")({
  /**
* Entity reference for ClaimTarget.
*/
"data": PolicyTermRef
}) {}

export class ReferencedPolicy extends S.Class<ReferencedPolicy>("ReferencedPolicy")({
  /**
* Entity reference for Policy.
*/
"data": PolicyRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdatePolicy extends S.Class<ReferencedUpdatePolicy>("ReferencedUpdatePolicy")({
  /**
* Entity reference for Policy.
*/
"data": PolicyRef
}) {}

export class NullableReferencedPolicyTemplate extends S.Class<NullableReferencedPolicyTemplate>("NullableReferencedPolicyTemplate")({
  /**
* Nullable entity reference for PolicyTemplate.
*/
"data": S.NullOr(PolicyTemplateRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedPolicyTemplate extends S.Class<ReferencedPolicyTemplate>("ReferencedPolicyTemplate")({
  /**
* Entity reference for PolicyTemplate.
*/
"data": PolicyTemplateRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdatePolicyTemplate extends S.Class<NullableReferencedUpdatePolicyTemplate>("NullableReferencedUpdatePolicyTemplate")({
  /**
* Nullable entity reference for PolicyTemplate.
*/
"data": S.NullOr(PolicyTemplateRef)
}) {}

export class ReferencedSubBucketDefinitionList extends S.Class<ReferencedSubBucketDefinitionList>("ReferencedSubBucketDefinitionList")({
  /**
* A list of SubBucketDefinition entity refs.
*/
"data": S.Array(SubCoverageRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedSubBucketDefinition extends S.Class<ReferencedSubBucketDefinition>("ReferencedSubBucketDefinition")({
  /**
* Entity reference for SubBucketDefinition.
*/
"data": SubCoverageRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedSubCoverageList extends S.Class<ReferencedSubCoverageList>("ReferencedSubCoverageList")({
  /**
* A list of SubCoverage entity refs.
*/
"data": S.Array(SubCoverageRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateSubBucketDefinition extends S.Class<ReferencedUpdateSubBucketDefinition>("ReferencedUpdateSubBucketDefinition")({
  /**
* Entity reference for SubBucketDefinition.
*/
"data": SubCoverageRef
}) {}

export class ReferencedUpdateSubCoverageList extends S.Class<ReferencedUpdateSubCoverageList>("ReferencedUpdateSubCoverageList")({
  /**
* A list of SubCoverage entity refs.
*/
"data": S.Array(SubCoverageRef)
}) {}

export class NullableReferencedCoverageTemplate extends S.Class<NullableReferencedCoverageTemplate>("NullableReferencedCoverageTemplate")({
  /**
* Nullable entity reference for CoverageTemplate.
*/
"data": S.NullOr(CoverageTemplateRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedCoverageTemplate extends S.Class<ReferencedCoverageTemplate>("ReferencedCoverageTemplate")({
  /**
* Entity reference for CoverageTemplate.
*/
"data": CoverageTemplateRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedCoverageTemplateList extends S.Class<ReferencedCoverageTemplateList>("ReferencedCoverageTemplateList")({
  /**
* A list of CoverageTemplate entity refs.
*/
"data": S.Array(CoverageTemplateRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateCoverageTemplate extends S.Class<NullableReferencedUpdateCoverageTemplate>("NullableReferencedUpdateCoverageTemplate")({
  /**
* Nullable entity reference for CoverageTemplate.
*/
"data": S.NullOr(CoverageTemplateRef)
}) {}

export class NullableReferencedCoverageGroup extends S.Class<NullableReferencedCoverageGroup>("NullableReferencedCoverageGroup")({
  /**
* Nullable entity reference for CoverageGroup.
*/
"data": S.NullOr(CoverageGroupRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateCoverageGroup extends S.Class<NullableReferencedUpdateCoverageGroup>("NullableReferencedUpdateCoverageGroup")({
  /**
* Nullable entity reference for CoverageGroup.
*/
"data": S.NullOr(CoverageGroupRef)
}) {}

export class ReferencedPerilList extends S.Class<ReferencedPerilList>("ReferencedPerilList")({
  /**
* A list of Peril entity refs.
*/
"data": S.Array(PerilRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdatePerilList extends S.Class<ReferencedUpdatePerilList>("ReferencedUpdatePerilList")({
  /**
* A list of Peril entity refs.
*/
"data": S.Array(PerilRef)
}) {}

export class ReferencedEndorsementList extends S.Class<ReferencedEndorsementList>("ReferencedEndorsementList")({
  /**
* A list of Endorsement entity refs.
*/
"data": S.Array(EndorsementRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateEndorsementList extends S.Class<ReferencedUpdateEndorsementList>("ReferencedUpdateEndorsementList")({
  /**
* A list of Endorsement entity refs.
*/
"data": S.Array(EndorsementRef)
}) {}

export class NullableReferencedSubCoverageTemplate extends S.Class<NullableReferencedSubCoverageTemplate>("NullableReferencedSubCoverageTemplate")({
  /**
* Nullable entity reference for SubCoverageTemplate.
*/
"data": S.NullOr(SubCoverageTemplateRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedSubCoverageTemplateList extends S.Class<ReferencedSubCoverageTemplateList>("ReferencedSubCoverageTemplateList")({
  /**
* A list of SubCoverageTemplate entity refs.
*/
"data": S.Array(SubCoverageTemplateRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateSubCoverageTemplate extends S.Class<NullableReferencedUpdateSubCoverageTemplate>("NullableReferencedUpdateSubCoverageTemplate")({
  /**
* Nullable entity reference for SubCoverageTemplate.
*/
"data": S.NullOr(SubCoverageTemplateRef)
}) {}

export class ReferencedBaseSubBucketMetadata extends S.Class<ReferencedBaseSubBucketMetadata>("ReferencedBaseSubBucketMetadata")({
  /**
* Entity reference for BaseSubBucketMetadata.
*/
"data": BaseSubBucketMetadataRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedEndorsementTemplateList extends S.Class<ReferencedEndorsementTemplateList>("ReferencedEndorsementTemplateList")({
  /**
* A list of EndorsementTemplate entity refs.
*/
"data": S.Array(EndorsementTemplateRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedEndorsementTemplate extends S.Class<NullableReferencedEndorsementTemplate>("NullableReferencedEndorsementTemplate")({
  /**
* Nullable entity reference for EndorsementTemplate.
*/
"data": S.NullOr(EndorsementTemplateRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateEndorsementTemplate extends S.Class<NullableReferencedUpdateEndorsementTemplate>("NullableReferencedUpdateEndorsementTemplate")({
  /**
* Nullable entity reference for EndorsementTemplate.
*/
"data": S.NullOr(EndorsementTemplateRef)
}) {}

export class NullableReferencedCoverageGroupTemplate extends S.Class<NullableReferencedCoverageGroupTemplate>("NullableReferencedCoverageGroupTemplate")({
  /**
* Nullable entity reference for CoverageGroupTemplate.
*/
"data": S.NullOr(CoverageGroupTemplateRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedCoverageGroupTemplateList extends S.Class<ReferencedCoverageGroupTemplateList>("ReferencedCoverageGroupTemplateList")({
  /**
* A list of CoverageGroupTemplate entity refs.
*/
"data": S.Array(CoverageGroupTemplateRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class NullableReferencedUpdateCoverageGroupTemplate extends S.Class<NullableReferencedUpdateCoverageGroupTemplate>("NullableReferencedUpdateCoverageGroupTemplate")({
  /**
* Nullable entity reference for CoverageGroupTemplate.
*/
"data": S.NullOr(CoverageGroupTemplateRef)
}) {}

export class ReferencedDepreciationModifierList extends S.Class<ReferencedDepreciationModifierList>("ReferencedDepreciationModifierList")({
  /**
* A list of DepreciationModifier entity refs.
*/
"data": S.Array(DepreciationModifierRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedDepreciationOverrideList extends S.Class<ReferencedDepreciationOverrideList>("ReferencedDepreciationOverrideList")({
  /**
* A list of DepreciationOverride entity refs.
*/
"data": S.Array(DepreciationOverrideRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemTemplate extends S.Class<ReferencedItemTemplate>("ReferencedItemTemplate")({
  /**
* Entity reference for ItemTemplate.
*/
"data": ItemTemplateRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAssetAttributeClassList extends S.Class<ReferencedAssetAttributeClassList>("ReferencedAssetAttributeClassList")({
  /**
* A list of AssetAttributeClass entity refs.
*/
"data": S.Array(AssetAttributeClassRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAssetAttributeType extends S.Class<ReferencedAssetAttributeType>("ReferencedAssetAttributeType")({
  /**
* Entity reference for AssetAttributeType.
*/
"data": AssetAttributeTypeRef,
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedAssetAttributeTypeList extends S.Class<ReferencedAssetAttributeTypeList>("ReferencedAssetAttributeTypeList")({
  /**
* A list of AssetAttributeType entity refs.
*/
"data": S.Array(AssetAttributeTypeRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedIncidentClassList extends S.Class<ReferencedIncidentClassList>("ReferencedIncidentClassList")({
  /**
* A list of IncidentClass entity refs.
*/
"data": S.Array(IncidentClassRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemCategoryList extends S.Class<ReferencedItemCategoryList>("ReferencedItemCategoryList")({
  /**
* A list of ItemCategory entity refs.
*/
"data": S.Array(ItemCategoryRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedItemClassList extends S.Class<ReferencedItemClassList>("ReferencedItemClassList")({
  /**
* A list of ItemClass entity refs.
*/
"data": S.Array(ItemClassRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedServiceCategoryList extends S.Class<ReferencedServiceCategoryList>("ReferencedServiceCategoryList")({
  /**
* A list of ServiceCategory entity refs.
*/
"data": S.Array(ServiceCategoryRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedServiceClassList extends S.Class<ReferencedServiceClassList>("ReferencedServiceClassList")({
  /**
* A list of ServiceClass entity refs.
*/
"data": S.Array(ServiceClassRef),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedBaseEntityList extends S.Class<ReferencedBaseEntityList>("ReferencedBaseEntityList")({
  /**
* A list of BaseEntity entity refs.
*/
"data": S.Array(S.Union(ChangeOrderRef,
EstimateRef,
InvoiceRef,
PaymentRef,
AssetAppraisalRef,
AppraisalRef,
FundingRef,
IncidentReportRef,
PoliceReportRef,
ParamedicReportRef,
ContractRef,
RentRollRef,
PermitRef,
BlueprintRef,
DeclarationsPageRef,
PolicyJacketRef,
ScopeOfLossRef,
DeliveryPaperworkRef,
ProductSpecRef,
UserManualRef,
WarrantyRef,
DeedRef,
ItemChangeOrderRef,
ItemImpactChangeOrderRef,
ServiceTaskChangeOrderRef,
ItemEstimateRef,
ItemImpactEstimateRef,
ServiceTaskEstimateRef,
ItemInvoiceRef,
ItemImpactInvoiceRef,
ServiceTaskInvoiceRef,
ItemPaymentRef,
ItemImpactPaymentRef,
ServiceTaskPaymentRef,
ItemAppraisalRef,
ItemizableFinancialDocumentStatsRef,
ProviderRef,
CountryRef,
CurrencyRef,
DepreciationModifierRef,
DepreciationOverrideRef,
ItemTypeRef,
DisasterRef,
PerilRef,
AssetAttributeTypeItemTemplateRef,
CoverageGroupTemplateRef,
CoverageTemplateRef,
EndorsementTemplateRef,
ItemTemplateRef,
PolicyTemplateRef,
SpaceTypeItemTemplateRef,
SubCoverageTemplateRef,
SubmissionTrackTemplateRef,
AssetAttributeClassRef,
AssetAttributeTypeRef,
AssetTypeRef,
BucketClassRef,
BucketTypeRef,
DocumentClassRef,
DocumentTypeRef,
IncidentClassRef,
IncidentTypeRef,
ItemCategoryRef,
ItemClassRef,
ServiceCategoryRef,
ServiceClassRef,
ServiceTypeRef,
SpaceGroupTypeRef,
SpaceCategoryRef,
SpaceClassRef,
SpaceTypeRef,
AccountInviteRef,
AccountProviderContactRef,
UserRef,
AccountProviderRef,
AccountRef,
AddressRef,
DwellingRef,
AuthProfileRef,
BaseBucketMetadataRef,
EntryRef,
BucketRef,
SubBucketRef,
BaseSubBucketMetadataRef,
CoverageRef,
BucketFundingRef,
ClaimDeductibleRef,
PolicyTermRef,
ClaimRef,
CoverageGroupRef,
DeductibleRef,
EmailAddressRef,
EndorsementRef,
EntrySourceMediaRef,
EntrySourceMetadataRef,
ItemImpactRef,
ItemRef,
ServiceTaskRef,
ServiceRef,
ThirdPartyImpactRef,
FileProcessRef,
FileRef,
ProjectImpactRef,
IncidentImpactRef,
IncidentRef,
ItemMediaSuggestionRef,
ItemProductSuggestionRef,
MediaRef,
PhoneNumberRef,
PolicyRef,
ProjectMediaRef,
SpaceGroupRef,
SpaceRef,
SubCoverageRef,
ThirdPartyDwellingRef,
ThirdPartyIndividualRef,
UserAccountRoleRef)),
  /**
* Relevant links for the refs and full entities.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedThirdParty extends S.Class<ReferencedThirdParty>("ReferencedThirdParty")({
  /**
* Entity reference for ThirdParty.
*/
"data": S.Union(ThirdPartyDwellingRef,
ThirdPartyIndividualRef),
  /**
* Relevant links for the ref and full entity.
*/
"links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {}

export class ReferencedUpdateThirdParty extends S.Class<ReferencedUpdateThirdParty>("ReferencedUpdateThirdParty")({
  /**
* Entity reference for ThirdParty.
*/
"data": S.Union(ThirdPartyDwellingRef,
ThirdPartyIndividualRef)
}) {}

export class NullableReferencedUpsertEmailAddress extends S.Class<NullableReferencedUpsertEmailAddress>("NullableReferencedUpsertEmailAddress")({
  /**
* Nullable entity reference for EmailAddress.
*/
"data": S.NullOr(S.Union(CreateEmailAddressRef,
EmailAddressRef))
}) {}

export class NullableReferencedUpsertPhoneNumber extends S.Class<NullableReferencedUpsertPhoneNumber>("NullableReferencedUpsertPhoneNumber")({
  /**
* Nullable entity reference for PhoneNumber.
*/
"data": S.NullOr(S.Union(CreatePhoneNumberRef,
PhoneNumberRef))
}) {}

export class NullableReferencedUpsertAccount extends S.Class<NullableReferencedUpsertAccount>("NullableReferencedUpsertAccount")({
  /**
* Nullable entity reference for Account.
*/
"data": S.NullOr(S.Union(CreateAccountRef,
AccountRef))
}) {}

export class ReferencedUpsertAccount extends S.Class<ReferencedUpsertAccount>("ReferencedUpsertAccount")({
  /**
* Entity reference for Account.
*/
"data": S.Union(CreateAccountRef,
AccountRef)
}) {}

export class ReferencedUpsertUserAccountRoleList extends S.Class<ReferencedUpsertUserAccountRoleList>("ReferencedUpsertUserAccountRoleList")({
  /**
* A list of UserAccountRole entity refs.
*/
"data": S.Array(S.Union(CreateUserAccountRoleRef,
UserAccountRoleRef))
}) {}

export class ReferencedUpsertAccountProviderContactList extends S.Class<ReferencedUpsertAccountProviderContactList>("ReferencedUpsertAccountProviderContactList")({
  /**
* A list of AccountProviderContact entity refs.
*/
"data": S.Array(S.Union(CreateAccountProviderContactRef,
AccountProviderContactRef))
}) {}

export class ReferencedUpsertAccountProviderContact extends S.Class<ReferencedUpsertAccountProviderContact>("ReferencedUpsertAccountProviderContact")({
  /**
* Entity reference for AccountProviderContact.
*/
"data": S.Union(CreateAccountProviderContactRef,
AccountProviderContactRef)
}) {}

export class ReferencedUpsertIdentity extends S.Class<ReferencedUpsertIdentity>("ReferencedUpsertIdentity")({
  /**
* Entity reference for Identity.
*/
"data": S.Union(CreateAccountProviderContactRef,
CreateUserRef,
AccountProviderContactRef,
UserRef)
}) {}

export class NullableReferencedUpsertUser extends S.Class<NullableReferencedUpsertUser>("NullableReferencedUpsertUser")({
  /**
* Nullable entity reference for User.
*/
"data": S.NullOr(S.Union(CreateUserRef,
UserRef))
}) {}

export class ReferencedUpsertUser extends S.Class<ReferencedUpsertUser>("ReferencedUpsertUser")({
  /**
* Entity reference for User.
*/
"data": S.Union(CreateUserRef,
UserRef)
}) {}

export class ReferencedUpsertAccountProvider extends S.Class<ReferencedUpsertAccountProvider>("ReferencedUpsertAccountProvider")({
  /**
* Entity reference for AccountProvider.
*/
"data": S.Union(CreateAccountProviderRef,
AccountProviderRef)
}) {}

export class NullableReferencedUpsertAccountProvider extends S.Class<NullableReferencedUpsertAccountProvider>("NullableReferencedUpsertAccountProvider")({
  /**
* Nullable entity reference for AccountProvider.
*/
"data": S.NullOr(S.Union(CreateAccountProviderRef,
AccountProviderRef))
}) {}

export class NullableReferencedUpsertProvider extends S.Class<NullableReferencedUpsertProvider>("NullableReferencedUpsertProvider")({
  /**
* Nullable entity reference for Provider.
*/
"data": S.NullOr(S.Union(CreateProviderRef,
ProviderRef))
}) {}

export class ReferencedUpsertProvider extends S.Class<ReferencedUpsertProvider>("ReferencedUpsertProvider")({
  /**
* Entity reference for Provider.
*/
"data": S.Union(CreateProviderRef,
ProviderRef)
}) {}

export class ReferencedUpsertProjectList extends S.Class<ReferencedUpsertProjectList>("ReferencedUpsertProjectList")({
  /**
* A list of Project entity refs.
*/
"data": S.Array(S.Union(CreateIncidentRef,
IncidentRef))
}) {}

export class ReferencedUpsertProject extends S.Class<ReferencedUpsertProject>("ReferencedUpsertProject")({
  /**
* Entity reference for Project.
*/
"data": S.Union(CreateIncidentRef,
IncidentRef)
}) {}

export class NullableReferencedUpsertProject extends S.Class<NullableReferencedUpsertProject>("NullableReferencedUpsertProject")({
  /**
* Nullable entity reference for Project.
*/
"data": S.NullOr(S.Union(CreateIncidentRef,
IncidentRef))
}) {}

export class ReferencedUpsertAssetList extends S.Class<ReferencedUpsertAssetList>("ReferencedUpsertAssetList")({
  /**
* A list of Asset entity refs.
*/
"data": S.Array(S.Union(CreateDwellingRef,
DwellingRef))
}) {}

export class ReferencedUpsertAsset extends S.Class<ReferencedUpsertAsset>("ReferencedUpsertAsset")({
  /**
* Entity reference for Asset.
*/
"data": S.Union(CreateDwellingRef,
DwellingRef)
}) {}

export class NullableReferencedUpsertAsset extends S.Class<NullableReferencedUpsertAsset>("NullableReferencedUpsertAsset")({
  /**
* Nullable entity reference for Asset.
*/
"data": S.NullOr(S.Union(CreateDwellingRef,
DwellingRef))
}) {}

export class ReferencedUpsertCurrency extends S.Class<ReferencedUpsertCurrency>("ReferencedUpsertCurrency")({
  /**
* Entity reference for Currency.
*/
"data": S.Union(CreateCurrencyRef,
CurrencyRef)
}) {}

export class ReferencedUpsertProjectMediaList extends S.Class<ReferencedUpsertProjectMediaList>("ReferencedUpsertProjectMediaList")({
  /**
* A list of ProjectMedia entity refs.
*/
"data": S.Array(S.Union(CreateProjectMediaRef,
ProjectMediaRef))
}) {}

export class ReferencedUpsertProjectMedia extends S.Class<ReferencedUpsertProjectMedia>("ReferencedUpsertProjectMedia")({
  /**
* Entity reference for ProjectMedia.
*/
"data": S.Union(CreateProjectMediaRef,
ProjectMediaRef)
}) {}

export class ReferencedUpsertIncidentType extends S.Class<ReferencedUpsertIncidentType>("ReferencedUpsertIncidentType")({
  /**
* Entity reference for IncidentType.
*/
"data": S.Union(CreateIncidentTypeRef,
IncidentTypeRef)
}) {}

export class ReferencedUpsertIncidentTypeList extends S.Class<ReferencedUpsertIncidentTypeList>("ReferencedUpsertIncidentTypeList")({
  /**
* A list of IncidentType entity refs.
*/
"data": S.Array(S.Union(CreateIncidentTypeRef,
IncidentTypeRef))
}) {}

export class NullableReferencedUpsertDisaster extends S.Class<NullableReferencedUpsertDisaster>("NullableReferencedUpsertDisaster")({
  /**
* Nullable entity reference for Disaster.
*/
"data": S.NullOr(S.Union(CreateDisasterRef,
DisasterRef))
}) {}

export class ReferencedUpsertMedia extends S.Class<ReferencedUpsertMedia>("ReferencedUpsertMedia")({
  /**
* Entity reference for Media.
*/
"data": S.Union(CreateMediaRef,
MediaRef)
}) {}

export class ReferencedUpsertMediaList extends S.Class<ReferencedUpsertMediaList>("ReferencedUpsertMediaList")({
  /**
* A list of Media entity refs.
*/
"data": S.Array(S.Union(CreateMediaRef,
MediaRef))
}) {}

export class ReferencedUpsertFile extends S.Class<ReferencedUpsertFile>("ReferencedUpsertFile")({
  /**
* Entity reference for File.
*/
"data": S.Union(CreateFileRef,
FileRef)
}) {}

export class NullableReferencedUpsertFile extends S.Class<NullableReferencedUpsertFile>("NullableReferencedUpsertFile")({
  /**
* Nullable entity reference for File.
*/
"data": S.NullOr(S.Union(CreateFileRef,
FileRef))
}) {}

export class ReferencedUpsertSpaceList extends S.Class<ReferencedUpsertSpaceList>("ReferencedUpsertSpaceList")({
  /**
* A list of Space entity refs.
*/
"data": S.Array(S.Union(CreateSpaceRef,
SpaceRef))
}) {}

export class NullableReferencedUpsertSpace extends S.Class<NullableReferencedUpsertSpace>("NullableReferencedUpsertSpace")({
  /**
* Nullable entity reference for Space.
*/
"data": S.NullOr(S.Union(CreateSpaceRef,
SpaceRef))
}) {}

export class ReferencedUpsertSpace extends S.Class<ReferencedUpsertSpace>("ReferencedUpsertSpace")({
  /**
* Entity reference for Space.
*/
"data": S.Union(CreateSpaceRef,
SpaceRef)
}) {}

export class ReferencedUpsertEntrySourceMediaList extends S.Class<ReferencedUpsertEntrySourceMediaList>("ReferencedUpsertEntrySourceMediaList")({
  /**
* A list of EntrySourceMedia entity refs.
*/
"data": S.Array(S.Union(CreateEntrySourceMediaRef,
EntrySourceMediaRef))
}) {}

export class ReferencedUpsertFileProcessList extends S.Class<ReferencedUpsertFileProcessList>("ReferencedUpsertFileProcessList")({
  /**
* A list of FileProcess entity refs.
*/
"data": S.Array(S.Union(CreateFileProcessRef,
FileProcessRef))
}) {}

export class ReferencedUpsertChangeOrderList extends S.Class<ReferencedUpsertChangeOrderList>("ReferencedUpsertChangeOrderList")({
  /**
* A list of ChangeOrder entity refs.
*/
"data": S.Array(S.Union(CreateChangeOrderRef,
ChangeOrderRef))
}) {}

export class ReferencedUpsertChangeOrder extends S.Class<ReferencedUpsertChangeOrder>("ReferencedUpsertChangeOrder")({
  /**
* Entity reference for ChangeOrder.
*/
"data": S.Union(CreateChangeOrderRef,
ChangeOrderRef)
}) {}

export class ReferencedUpsertEstimate extends S.Class<ReferencedUpsertEstimate>("ReferencedUpsertEstimate")({
  /**
* Entity reference for Estimate.
*/
"data": S.Union(CreateEstimateRef,
EstimateRef)
}) {}

export class ReferencedUpsertEstimateList extends S.Class<ReferencedUpsertEstimateList>("ReferencedUpsertEstimateList")({
  /**
* A list of Estimate entity refs.
*/
"data": S.Array(S.Union(CreateEstimateRef,
EstimateRef))
}) {}

export class NullableReferencedUpsertEstimate extends S.Class<NullableReferencedUpsertEstimate>("NullableReferencedUpsertEstimate")({
  /**
* Nullable entity reference for Estimate.
*/
"data": S.NullOr(S.Union(CreateEstimateRef,
EstimateRef))
}) {}

export class ReferencedUpsertInvoiceList extends S.Class<ReferencedUpsertInvoiceList>("ReferencedUpsertInvoiceList")({
  /**
* A list of Invoice entity refs.
*/
"data": S.Array(S.Union(CreateInvoiceRef,
InvoiceRef))
}) {}

export class NullableReferencedUpsertInvoice extends S.Class<NullableReferencedUpsertInvoice>("NullableReferencedUpsertInvoice")({
  /**
* Nullable entity reference for Invoice.
*/
"data": S.NullOr(S.Union(CreateInvoiceRef,
InvoiceRef))
}) {}

export class ReferencedUpsertItemizableFinancialDocument extends S.Class<ReferencedUpsertItemizableFinancialDocument>("ReferencedUpsertItemizableFinancialDocument")({
  /**
* Entity reference for ItemizableFinancialDocument.
*/
"data": S.Union(CreateChangeOrderRef,
CreateEstimateRef,
CreateInvoiceRef,
CreatePaymentRef,
ChangeOrderRef,
EstimateRef,
InvoiceRef,
PaymentRef)
}) {}

export class ReferencedUpsertPaymentList extends S.Class<ReferencedUpsertPaymentList>("ReferencedUpsertPaymentList")({
  /**
* A list of Payment entity refs.
*/
"data": S.Array(S.Union(CreatePaymentRef,
PaymentRef))
}) {}

export class NullableReferencedUpsertPayment extends S.Class<NullableReferencedUpsertPayment>("NullableReferencedUpsertPayment")({
  /**
* Nullable entity reference for Payment.
*/
"data": S.NullOr(S.Union(CreatePaymentRef,
PaymentRef))
}) {}

export class ReferencedUpsertAssetAppraisalList extends S.Class<ReferencedUpsertAssetAppraisalList>("ReferencedUpsertAssetAppraisalList")({
  /**
* A list of AssetAppraisal entity refs.
*/
"data": S.Array(S.Union(CreateAssetAppraisalRef,
AssetAppraisalRef))
}) {}

export class NullableReferencedUpsertAssetAppraisal extends S.Class<NullableReferencedUpsertAssetAppraisal>("NullableReferencedUpsertAssetAppraisal")({
  /**
* Nullable entity reference for AssetAppraisal.
*/
"data": S.NullOr(S.Union(CreateAssetAppraisalRef,
AssetAppraisalRef))
}) {}

export class ReferencedUpsertAppraisal extends S.Class<ReferencedUpsertAppraisal>("ReferencedUpsertAppraisal")({
  /**
* Entity reference for Appraisal.
*/
"data": S.Union(CreateAppraisalRef,
AppraisalRef)
}) {}

export class ReferencedUpsertFundingList extends S.Class<ReferencedUpsertFundingList>("ReferencedUpsertFundingList")({
  /**
* A list of Funding entity refs.
*/
"data": S.Array(S.Union(CreateFundingRef,
FundingRef))
}) {}

export class ReferencedUpsertFunding extends S.Class<ReferencedUpsertFunding>("ReferencedUpsertFunding")({
  /**
* Entity reference for Funding.
*/
"data": S.Union(CreateFundingRef,
FundingRef)
}) {}

export class ReferencedUpsertDocumentList extends S.Class<ReferencedUpsertDocumentList>("ReferencedUpsertDocumentList")({
  /**
* A list of Document entity refs.
*/
"data": S.Array(S.Union(CreateChangeOrderRef,
CreateEstimateRef,
CreateInvoiceRef,
CreatePaymentRef,
CreateAssetAppraisalRef,
CreateAppraisalRef,
CreateFundingRef,
CreateIncidentReportRef,
CreatePoliceReportRef,
CreateParamedicReportRef,
CreateContractRef,
CreateRentRollRef,
CreatePermitRef,
CreateBlueprintRef,
CreateDeclarationsPageRef,
CreatePolicyJacketRef,
CreateScopeOfLossRef,
CreateDeliveryPaperworkRef,
CreateProductSpecRef,
CreateUserManualRef,
CreateWarrantyRef,
CreateDeedRef,
ChangeOrderRef,
EstimateRef,
InvoiceRef,
PaymentRef,
AssetAppraisalRef,
AppraisalRef,
FundingRef,
IncidentReportRef,
PoliceReportRef,
ParamedicReportRef,
ContractRef,
RentRollRef,
PermitRef,
BlueprintRef,
DeclarationsPageRef,
PolicyJacketRef,
ScopeOfLossRef,
DeliveryPaperworkRef,
ProductSpecRef,
UserManualRef,
WarrantyRef,
DeedRef))
}) {}

export class ReferencedUpsertAssetType extends S.Class<ReferencedUpsertAssetType>("ReferencedUpsertAssetType")({
  /**
* Entity reference for AssetType.
*/
"data": S.Union(CreateAssetTypeRef,
AssetTypeRef)
}) {}

export class ReferencedUpsertAssetTypeList extends S.Class<ReferencedUpsertAssetTypeList>("ReferencedUpsertAssetTypeList")({
  /**
* A list of AssetType entity refs.
*/
"data": S.Array(S.Union(CreateAssetTypeRef,
AssetTypeRef))
}) {}

export class ReferencedUpsertAddress extends S.Class<ReferencedUpsertAddress>("ReferencedUpsertAddress")({
  /**
* Entity reference for Address.
*/
"data": S.Union(CreateAddressRef,
AddressRef)
}) {}

export class ReferencedUpsertDocumentType extends S.Class<ReferencedUpsertDocumentType>("ReferencedUpsertDocumentType")({
  /**
* Entity reference for DocumentType.
*/
"data": S.Union(CreateDocumentTypeRef,
DocumentTypeRef)
}) {}

export class ReferencedUpsertDocumentTypeList extends S.Class<ReferencedUpsertDocumentTypeList>("ReferencedUpsertDocumentTypeList")({
  /**
* A list of DocumentType entity refs.
*/
"data": S.Array(S.Union(CreateDocumentTypeRef,
DocumentTypeRef))
}) {}

export class ReferencedUpsertDocumentClassList extends S.Class<ReferencedUpsertDocumentClassList>("ReferencedUpsertDocumentClassList")({
  /**
* A list of DocumentClass entity refs.
*/
"data": S.Array(S.Union(CreateDocumentClassRef,
DocumentClassRef))
}) {}

export class ReferencedUpsertSpaceType extends S.Class<ReferencedUpsertSpaceType>("ReferencedUpsertSpaceType")({
  /**
* Entity reference for SpaceType.
*/
"data": S.Union(CreateSpaceTypeRef,
SpaceTypeRef)
}) {}

export class ReferencedUpsertSpaceTypeList extends S.Class<ReferencedUpsertSpaceTypeList>("ReferencedUpsertSpaceTypeList")({
  /**
* A list of SpaceType entity refs.
*/
"data": S.Array(S.Union(CreateSpaceTypeRef,
SpaceTypeRef))
}) {}

export class ReferencedUpsertSpaceGroup extends S.Class<ReferencedUpsertSpaceGroup>("ReferencedUpsertSpaceGroup")({
  /**
* Entity reference for SpaceGroup.
*/
"data": S.Union(CreateSpaceGroupRef,
SpaceGroupRef)
}) {}

export class ReferencedUpsertSpaceClassList extends S.Class<ReferencedUpsertSpaceClassList>("ReferencedUpsertSpaceClassList")({
  /**
* A list of SpaceClass entity refs.
*/
"data": S.Array(S.Union(CreateSpaceClassRef,
SpaceClassRef))
}) {}

export class ReferencedUpsertSpaceGroupTypeList extends S.Class<ReferencedUpsertSpaceGroupTypeList>("ReferencedUpsertSpaceGroupTypeList")({
  /**
* A list of SpaceGroupType entity refs.
*/
"data": S.Array(S.Union(CreateSpaceGroupTypeRef,
SpaceGroupTypeRef))
}) {}

export class ReferencedUpsertSpaceCategoryList extends S.Class<ReferencedUpsertSpaceCategoryList>("ReferencedUpsertSpaceCategoryList")({
  /**
* A list of SpaceCategory entity refs.
*/
"data": S.Array(S.Union(CreateSpaceCategoryRef,
SpaceCategoryRef))
}) {}

export class ReferencedUpsertBucketTypeList extends S.Class<ReferencedUpsertBucketTypeList>("ReferencedUpsertBucketTypeList")({
  /**
* A list of BucketType entity refs.
*/
"data": S.Array(S.Union(CreateBucketTypeRef,
BucketTypeRef))
}) {}

export class NullableReferencedUpsertBucketType extends S.Class<NullableReferencedUpsertBucketType>("NullableReferencedUpsertBucketType")({
  /**
* Nullable entity reference for BucketType.
*/
"data": S.NullOr(S.Union(CreateBucketTypeRef,
BucketTypeRef))
}) {}

export class ReferencedUpsertBucketType extends S.Class<ReferencedUpsertBucketType>("ReferencedUpsertBucketType")({
  /**
* Entity reference for BucketType.
*/
"data": S.Union(CreateBucketTypeRef,
BucketTypeRef)
}) {}

export class ReferencedUpsertBucketClassList extends S.Class<ReferencedUpsertBucketClassList>("ReferencedUpsertBucketClassList")({
  /**
* A list of BucketClass entity refs.
*/
"data": S.Array(S.Union(CreateBucketClassRef,
BucketClassRef))
}) {}

export class ReferencedUpsertCountry extends S.Class<ReferencedUpsertCountry>("ReferencedUpsertCountry")({
  /**
* Entity reference for Country.
*/
"data": S.Union(CreateCountryRef,
CountryRef)
}) {}

export class ReferencedUpsertItemizableFinancialDocumentStats extends S.Class<ReferencedUpsertItemizableFinancialDocumentStats>("ReferencedUpsertItemizableFinancialDocumentStats")({
  /**
* Entity reference for ItemizableFinancialDocumentStats.
*/
"data": S.Union(CreateItemizableFinancialDocumentStatsRef,
ItemizableFinancialDocumentStatsRef)
}) {}

export class ReferencedUpsertService extends S.Class<ReferencedUpsertService>("ReferencedUpsertService")({
  /**
* Entity reference for Service.
*/
"data": S.Union(CreateServiceRef,
ServiceRef)
}) {}

export class NullableReferencedUpsertService extends S.Class<NullableReferencedUpsertService>("NullableReferencedUpsertService")({
  /**
* Nullable entity reference for Service.
*/
"data": S.NullOr(S.Union(CreateServiceRef,
ServiceRef))
}) {}

export class ReferencedUpsertChangeOrderLineList extends S.Class<ReferencedUpsertChangeOrderLineList>("ReferencedUpsertChangeOrderLineList")({
  /**
* A list of ChangeOrderLine entity refs.
*/
"data": S.Array(S.Union(CreateItemChangeOrderRef,
CreateItemImpactChangeOrderRef,
CreateServiceTaskChangeOrderRef,
ItemChangeOrderRef,
ItemImpactChangeOrderRef,
ServiceTaskChangeOrderRef))
}) {}

export class ReferencedUpsertChangeOrderLine extends S.Class<ReferencedUpsertChangeOrderLine>("ReferencedUpsertChangeOrderLine")({
  /**
* Entity reference for ChangeOrderLine.
*/
"data": S.Union(CreateItemChangeOrderRef,
CreateItemImpactChangeOrderRef,
CreateServiceTaskChangeOrderRef,
ItemChangeOrderRef,
ItemImpactChangeOrderRef,
ServiceTaskChangeOrderRef)
}) {}

export class NullableReferencedUpsertItemImpact extends S.Class<NullableReferencedUpsertItemImpact>("NullableReferencedUpsertItemImpact")({
  /**
* Nullable entity reference for ItemImpact.
*/
"data": S.NullOr(S.Union(CreateItemImpactRef,
ItemImpactRef))
}) {}

export class ReferencedUpsertItemImpactList extends S.Class<ReferencedUpsertItemImpactList>("ReferencedUpsertItemImpactList")({
  /**
* A list of ItemImpact entity refs.
*/
"data": S.Array(S.Union(CreateItemImpactRef,
ItemImpactRef))
}) {}

export class ReferencedUpsertItemImpact extends S.Class<ReferencedUpsertItemImpact>("ReferencedUpsertItemImpact")({
  /**
* Entity reference for ItemImpact.
*/
"data": S.Union(CreateItemImpactRef,
ItemImpactRef)
}) {}

export class ReferencedUpsertItem extends S.Class<ReferencedUpsertItem>("ReferencedUpsertItem")({
  /**
* Entity reference for Item.
*/
"data": S.Union(CreateItemRef,
ItemRef)
}) {}

export class NullableReferencedUpsertItem extends S.Class<NullableReferencedUpsertItem>("NullableReferencedUpsertItem")({
  /**
* Nullable entity reference for Item.
*/
"data": S.NullOr(S.Union(CreateItemRef,
ItemRef))
}) {}

export class ReferencedUpsertItemList extends S.Class<ReferencedUpsertItemList>("ReferencedUpsertItemList")({
  /**
* A list of Item entity refs.
*/
"data": S.Array(S.Union(CreateItemRef,
ItemRef))
}) {}

export class ReferencedUpsertServiceTask extends S.Class<ReferencedUpsertServiceTask>("ReferencedUpsertServiceTask")({
  /**
* Entity reference for ServiceTask.
*/
"data": S.Union(CreateServiceTaskRef,
ServiceTaskRef)
}) {}

export class ReferencedUpsertEntrySourceList extends S.Class<ReferencedUpsertEntrySourceList>("ReferencedUpsertEntrySourceList")({
  /**
* A list of EntrySource entity refs.
*/
"data": S.Array(S.Union(CreateItemImpactRef,
CreateItemRef,
CreateServiceTaskRef,
CreateServiceRef,
CreateThirdPartyImpactRef,
ItemImpactRef,
ItemRef,
ServiceTaskRef,
ServiceRef,
ThirdPartyImpactRef))
}) {}

export class ReferencedUpsertEntrySource extends S.Class<ReferencedUpsertEntrySource>("ReferencedUpsertEntrySource")({
  /**
* Entity reference for EntrySource.
*/
"data": S.Union(CreateItemImpactRef,
CreateItemRef,
CreateServiceTaskRef,
CreateServiceRef,
CreateThirdPartyImpactRef,
ItemImpactRef,
ItemRef,
ServiceTaskRef,
ServiceRef,
ThirdPartyImpactRef)
}) {}

export class ReferencedUpsertItemEstimate extends S.Class<ReferencedUpsertItemEstimate>("ReferencedUpsertItemEstimate")({
  /**
* Entity reference for ItemEstimate.
*/
"data": S.Union(CreateItemEstimateRef,
ItemEstimateRef)
}) {}

export class ReferencedUpsertItemImpactEstimate extends S.Class<ReferencedUpsertItemImpactEstimate>("ReferencedUpsertItemImpactEstimate")({
  /**
* Entity reference for ItemImpactEstimate.
*/
"data": S.Union(CreateItemImpactEstimateRef,
ItemImpactEstimateRef)
}) {}

export class ReferencedUpsertEstimateLineList extends S.Class<ReferencedUpsertEstimateLineList>("ReferencedUpsertEstimateLineList")({
  /**
* A list of EstimateLine entity refs.
*/
"data": S.Array(S.Union(CreateItemEstimateRef,
CreateItemImpactEstimateRef,
CreateServiceTaskEstimateRef,
ItemEstimateRef,
ItemImpactEstimateRef,
ServiceTaskEstimateRef))
}) {}

export class ReferencedUpsertEstimateLine extends S.Class<ReferencedUpsertEstimateLine>("ReferencedUpsertEstimateLine")({
  /**
* Entity reference for EstimateLine.
*/
"data": S.Union(CreateItemEstimateRef,
CreateItemImpactEstimateRef,
CreateServiceTaskEstimateRef,
ItemEstimateRef,
ItemImpactEstimateRef,
ServiceTaskEstimateRef)
}) {}

export class ReferencedUpsertServiceTaskEstimate extends S.Class<ReferencedUpsertServiceTaskEstimate>("ReferencedUpsertServiceTaskEstimate")({
  /**
* Entity reference for ServiceTaskEstimate.
*/
"data": S.Union(CreateServiceTaskEstimateRef,
ServiceTaskEstimateRef)
}) {}

export class ReferencedUpsertEntrySourceMetadata extends S.Class<ReferencedUpsertEntrySourceMetadata>("ReferencedUpsertEntrySourceMetadata")({
  /**
* Entity reference for EntrySourceMetadata.
*/
"data": S.Union(CreateEntrySourceMetadataRef,
EntrySourceMetadataRef)
}) {}

export class ReferencedUpsertEntryList extends S.Class<ReferencedUpsertEntryList>("ReferencedUpsertEntryList")({
  /**
* A list of Entry entity refs.
*/
"data": S.Array(S.Union(CreateEntryRef,
EntryRef))
}) {}

export class ReferencedUpsertItemAppraisalList extends S.Class<ReferencedUpsertItemAppraisalList>("ReferencedUpsertItemAppraisalList")({
  /**
* A list of ItemAppraisal entity refs.
*/
"data": S.Array(S.Union(CreateItemAppraisalRef,
ItemAppraisalRef))
}) {}

export class NullableReferencedUpsertItemAppraisal extends S.Class<NullableReferencedUpsertItemAppraisal>("NullableReferencedUpsertItemAppraisal")({
  /**
* Nullable entity reference for ItemAppraisal.
*/
"data": S.NullOr(S.Union(CreateItemAppraisalRef,
ItemAppraisalRef))
}) {}

export class ReferencedUpsertAppraisalLineList extends S.Class<ReferencedUpsertAppraisalLineList>("ReferencedUpsertAppraisalLineList")({
  /**
* A list of AppraisalLine entity refs.
*/
"data": S.Array(S.Union(CreateItemAppraisalRef,
ItemAppraisalRef))
}) {}

export class NullableReferencedUpsertServiceType extends S.Class<NullableReferencedUpsertServiceType>("NullableReferencedUpsertServiceType")({
  /**
* Nullable entity reference for ServiceType.
*/
"data": S.NullOr(S.Union(CreateServiceTypeRef,
ServiceTypeRef))
}) {}

export class ReferencedUpsertServiceTypeList extends S.Class<ReferencedUpsertServiceTypeList>("ReferencedUpsertServiceTypeList")({
  /**
* A list of ServiceType entity refs.
*/
"data": S.Array(S.Union(CreateServiceTypeRef,
ServiceTypeRef))
}) {}

export class ReferencedUpsertPaymentLineList extends S.Class<ReferencedUpsertPaymentLineList>("ReferencedUpsertPaymentLineList")({
  /**
* A list of PaymentLine entity refs.
*/
"data": S.Array(S.Union(CreateItemPaymentRef,
CreateItemImpactPaymentRef,
CreateServiceTaskPaymentRef,
ItemPaymentRef,
ItemImpactPaymentRef,
ServiceTaskPaymentRef))
}) {}

export class ReferencedUpsertInvoiceLineList extends S.Class<ReferencedUpsertInvoiceLineList>("ReferencedUpsertInvoiceLineList")({
  /**
* A list of InvoiceLine entity refs.
*/
"data": S.Array(S.Union(CreateItemInvoiceRef,
CreateItemImpactInvoiceRef,
CreateServiceTaskInvoiceRef,
ItemInvoiceRef,
ItemImpactInvoiceRef,
ServiceTaskInvoiceRef))
}) {}

export class NullableReferencedUpsertItemType extends S.Class<NullableReferencedUpsertItemType>("NullableReferencedUpsertItemType")({
  /**
* Nullable entity reference for ItemType.
*/
"data": S.NullOr(S.Union(CreateItemTypeRef,
ItemTypeRef))
}) {}

export class ReferencedUpsertDepreciationSchedule extends S.Class<ReferencedUpsertDepreciationSchedule>("ReferencedUpsertDepreciationSchedule")({
  /**
* Entity reference for DepreciationSchedule.
*/
"data": S.Union(CreateItemTypeRef,
ItemTypeRef)
}) {}

export class ReferencedUpsertItemTypeList extends S.Class<ReferencedUpsertItemTypeList>("ReferencedUpsertItemTypeList")({
  /**
* A list of ItemType entity refs.
*/
"data": S.Array(S.Union(CreateItemTypeRef,
ItemTypeRef))
}) {}

export class ReferencedUpsertItemType extends S.Class<ReferencedUpsertItemType>("ReferencedUpsertItemType")({
  /**
* Entity reference for ItemType.
*/
"data": S.Union(CreateItemTypeRef,
ItemTypeRef)
}) {}

export class ReferencedUpsertBaseBucket extends S.Class<ReferencedUpsertBaseBucket>("ReferencedUpsertBaseBucket")({
  /**
* Entity reference for BaseBucket.
*/
"data": S.Union(CreateBucketRef,
BucketRef)
}) {}

export class ReferencedUpsertBaseBucketList extends S.Class<ReferencedUpsertBaseBucketList>("ReferencedUpsertBaseBucketList")({
  /**
* A list of BaseBucket entity refs.
*/
"data": S.Array(S.Union(CreateBucketRef,
BucketRef))
}) {}

export class ReferencedUpsertBucketList extends S.Class<ReferencedUpsertBucketList>("ReferencedUpsertBucketList")({
  /**
* A list of Bucket entity refs.
*/
"data": S.Array(S.Union(CreateBucketRef,
BucketRef))
}) {}

export class NullableReferencedUpsertBaseSubBucket extends S.Class<NullableReferencedUpsertBaseSubBucket>("NullableReferencedUpsertBaseSubBucket")({
  /**
* Nullable entity reference for BaseSubBucket.
*/
"data": S.NullOr(S.Union(CreateSubBucketRef,
SubBucketRef))
}) {}

export class ReferencedUpsertBaseSubBucketList extends S.Class<ReferencedUpsertBaseSubBucketList>("ReferencedUpsertBaseSubBucketList")({
  /**
* A list of BaseSubBucket entity refs.
*/
"data": S.Array(S.Union(CreateSubBucketRef,
SubBucketRef))
}) {}

export class ReferencedUpsertSubBucketList extends S.Class<ReferencedUpsertSubBucketList>("ReferencedUpsertSubBucketList")({
  /**
* A list of SubBucket entity refs.
*/
"data": S.Array(S.Union(CreateSubBucketRef,
SubBucketRef))
}) {}

export class ReferencedUpsertFundingSource extends S.Class<ReferencedUpsertFundingSource>("ReferencedUpsertFundingSource")({
  /**
* Entity reference for FundingSource.
*/
"data": S.Union(CreateClaimRef,
ClaimRef)
}) {}

export class ReferencedUpsertClaim extends S.Class<ReferencedUpsertClaim>("ReferencedUpsertClaim")({
  /**
* Entity reference for Claim.
*/
"data": S.Union(CreateClaimRef,
ClaimRef)
}) {}

export class ReferencedUpsertBaseBucketMetadata extends S.Class<ReferencedUpsertBaseBucketMetadata>("ReferencedUpsertBaseBucketMetadata")({
  /**
* Entity reference for BaseBucketMetadata.
*/
"data": S.Union(CreateBaseBucketMetadataRef,
BaseBucketMetadataRef)
}) {}

export class ReferencedUpsertBucketFundingList extends S.Class<ReferencedUpsertBucketFundingList>("ReferencedUpsertBucketFundingList")({
  /**
* A list of BucketFunding entity refs.
*/
"data": S.Array(S.Union(CreateBucketFundingRef,
BucketFundingRef))
}) {}

export class ReferencedUpsertBucketDefinition extends S.Class<ReferencedUpsertBucketDefinition>("ReferencedUpsertBucketDefinition")({
  /**
* Entity reference for BucketDefinition.
*/
"data": S.Union(CreateCoverageRef,
CoverageRef)
}) {}

export class ReferencedUpsertBucketDefinitionList extends S.Class<ReferencedUpsertBucketDefinitionList>("ReferencedUpsertBucketDefinitionList")({
  /**
* A list of BucketDefinition entity refs.
*/
"data": S.Array(S.Union(CreateCoverageRef,
CoverageRef))
}) {}

export class ReferencedUpsertCoverage extends S.Class<ReferencedUpsertCoverage>("ReferencedUpsertCoverage")({
  /**
* Entity reference for Coverage.
*/
"data": S.Union(CreateCoverageRef,
CoverageRef)
}) {}

export class ReferencedUpsertCoverageList extends S.Class<ReferencedUpsertCoverageList>("ReferencedUpsertCoverageList")({
  /**
* A list of Coverage entity refs.
*/
"data": S.Array(S.Union(CreateCoverageRef,
CoverageRef))
}) {}

export class ReferencedUpsertDeductible extends S.Class<ReferencedUpsertDeductible>("ReferencedUpsertDeductible")({
  /**
* Entity reference for Deductible.
*/
"data": S.Union(CreateDeductibleRef,
DeductibleRef)
}) {}

export class ReferencedUpsertDeductibleList extends S.Class<ReferencedUpsertDeductibleList>("ReferencedUpsertDeductibleList")({
  /**
* A list of Deductible entity refs.
*/
"data": S.Array(S.Union(CreateDeductibleRef,
DeductibleRef))
}) {}

export class NullableReferencedUpsertDeductible extends S.Class<NullableReferencedUpsertDeductible>("NullableReferencedUpsertDeductible")({
  /**
* Nullable entity reference for Deductible.
*/
"data": S.NullOr(S.Union(CreateDeductibleRef,
DeductibleRef))
}) {}

export class ReferencedUpsertClaimDeductible extends S.Class<ReferencedUpsertClaimDeductible>("ReferencedUpsertClaimDeductible")({
  /**
* Entity reference for ClaimDeductible.
*/
"data": S.Union(CreateClaimDeductibleRef,
ClaimDeductibleRef)
}) {}

export class ReferencedUpsertClaimDeductibleList extends S.Class<ReferencedUpsertClaimDeductibleList>("ReferencedUpsertClaimDeductibleList")({
  /**
* A list of ClaimDeductible entity refs.
*/
"data": S.Array(S.Union(CreateClaimDeductibleRef,
ClaimDeductibleRef))
}) {}

export class ReferencedUpsertClaimTarget extends S.Class<ReferencedUpsertClaimTarget>("ReferencedUpsertClaimTarget")({
  /**
* Entity reference for ClaimTarget.
*/
"data": S.Union(CreatePolicyTermRef,
PolicyTermRef)
}) {}

export class ReferencedUpsertPolicyTerm extends S.Class<ReferencedUpsertPolicyTerm>("ReferencedUpsertPolicyTerm")({
  /**
* Entity reference for PolicyTerm.
*/
"data": S.Union(CreatePolicyTermRef,
PolicyTermRef)
}) {}

export class ReferencedUpsertPolicyTermList extends S.Class<ReferencedUpsertPolicyTermList>("ReferencedUpsertPolicyTermList")({
  /**
* A list of PolicyTerm entity refs.
*/
"data": S.Array(S.Union(CreatePolicyTermRef,
PolicyTermRef))
}) {}

export class ReferencedUpsertPolicy extends S.Class<ReferencedUpsertPolicy>("ReferencedUpsertPolicy")({
  /**
* Entity reference for Policy.
*/
"data": S.Union(CreatePolicyRef,
PolicyRef)
}) {}

export class NullableReferencedUpsertPolicyTemplate extends S.Class<NullableReferencedUpsertPolicyTemplate>("NullableReferencedUpsertPolicyTemplate")({
  /**
* Nullable entity reference for PolicyTemplate.
*/
"data": S.NullOr(S.Union(CreatePolicyTemplateRef,
PolicyTemplateRef))
}) {}

export class ReferencedUpsertPolicyTemplate extends S.Class<ReferencedUpsertPolicyTemplate>("ReferencedUpsertPolicyTemplate")({
  /**
* Entity reference for PolicyTemplate.
*/
"data": S.Union(CreatePolicyTemplateRef,
PolicyTemplateRef)
}) {}

export class ReferencedUpsertSubBucketDefinitionList extends S.Class<ReferencedUpsertSubBucketDefinitionList>("ReferencedUpsertSubBucketDefinitionList")({
  /**
* A list of SubBucketDefinition entity refs.
*/
"data": S.Array(S.Union(CreateSubCoverageRef,
SubCoverageRef))
}) {}

export class ReferencedUpsertSubBucketDefinition extends S.Class<ReferencedUpsertSubBucketDefinition>("ReferencedUpsertSubBucketDefinition")({
  /**
* Entity reference for SubBucketDefinition.
*/
"data": S.Union(CreateSubCoverageRef,
SubCoverageRef)
}) {}

export class ReferencedUpsertSubCoverageList extends S.Class<ReferencedUpsertSubCoverageList>("ReferencedUpsertSubCoverageList")({
  /**
* A list of SubCoverage entity refs.
*/
"data": S.Array(S.Union(CreateSubCoverageRef,
SubCoverageRef))
}) {}

export class ReferencedUpsertSubCoverage extends S.Class<ReferencedUpsertSubCoverage>("ReferencedUpsertSubCoverage")({
  /**
* Entity reference for SubCoverage.
*/
"data": S.Union(CreateSubCoverageRef,
SubCoverageRef)
}) {}

export class NullableReferencedUpsertCoverageTemplate extends S.Class<NullableReferencedUpsertCoverageTemplate>("NullableReferencedUpsertCoverageTemplate")({
  /**
* Nullable entity reference for CoverageTemplate.
*/
"data": S.NullOr(S.Union(CreateCoverageTemplateRef,
CoverageTemplateRef))
}) {}

export class ReferencedUpsertCoverageTemplate extends S.Class<ReferencedUpsertCoverageTemplate>("ReferencedUpsertCoverageTemplate")({
  /**
* Entity reference for CoverageTemplate.
*/
"data": S.Union(CreateCoverageTemplateRef,
CoverageTemplateRef)
}) {}

export class ReferencedUpsertCoverageTemplateList extends S.Class<ReferencedUpsertCoverageTemplateList>("ReferencedUpsertCoverageTemplateList")({
  /**
* A list of CoverageTemplate entity refs.
*/
"data": S.Array(S.Union(CreateCoverageTemplateRef,
CoverageTemplateRef))
}) {}

export class NullableReferencedUpsertCoverageGroup extends S.Class<NullableReferencedUpsertCoverageGroup>("NullableReferencedUpsertCoverageGroup")({
  /**
* Nullable entity reference for CoverageGroup.
*/
"data": S.NullOr(S.Union(CreateCoverageGroupRef,
CoverageGroupRef))
}) {}

export class ReferencedUpsertPerilList extends S.Class<ReferencedUpsertPerilList>("ReferencedUpsertPerilList")({
  /**
* A list of Peril entity refs.
*/
"data": S.Array(S.Union(CreatePerilRef,
PerilRef))
}) {}

export class ReferencedUpsertPeril extends S.Class<ReferencedUpsertPeril>("ReferencedUpsertPeril")({
  /**
* Entity reference for Peril.
*/
"data": S.Union(CreatePerilRef,
PerilRef)
}) {}

export class ReferencedUpsertEndorsementList extends S.Class<ReferencedUpsertEndorsementList>("ReferencedUpsertEndorsementList")({
  /**
* A list of Endorsement entity refs.
*/
"data": S.Array(S.Union(CreateEndorsementRef,
EndorsementRef))
}) {}

export class ReferencedUpsertEndorsement extends S.Class<ReferencedUpsertEndorsement>("ReferencedUpsertEndorsement")({
  /**
* Entity reference for Endorsement.
*/
"data": S.Union(CreateEndorsementRef,
EndorsementRef)
}) {}

export class NullableReferencedUpsertSubCoverageTemplate extends S.Class<NullableReferencedUpsertSubCoverageTemplate>("NullableReferencedUpsertSubCoverageTemplate")({
  /**
* Nullable entity reference for SubCoverageTemplate.
*/
"data": S.NullOr(S.Union(CreateSubCoverageTemplateRef,
SubCoverageTemplateRef))
}) {}

export class ReferencedUpsertSubCoverageTemplateList extends S.Class<ReferencedUpsertSubCoverageTemplateList>("ReferencedUpsertSubCoverageTemplateList")({
  /**
* A list of SubCoverageTemplate entity refs.
*/
"data": S.Array(S.Union(CreateSubCoverageTemplateRef,
SubCoverageTemplateRef))
}) {}

export class ReferencedUpsertBaseSubBucketMetadata extends S.Class<ReferencedUpsertBaseSubBucketMetadata>("ReferencedUpsertBaseSubBucketMetadata")({
  /**
* Entity reference for BaseSubBucketMetadata.
*/
"data": S.Union(CreateBaseSubBucketMetadataRef,
BaseSubBucketMetadataRef)
}) {}

export class ReferencedUpsertEndorsementTemplateList extends S.Class<ReferencedUpsertEndorsementTemplateList>("ReferencedUpsertEndorsementTemplateList")({
  /**
* A list of EndorsementTemplate entity refs.
*/
"data": S.Array(S.Union(CreateEndorsementTemplateRef,
EndorsementTemplateRef))
}) {}

export class NullableReferencedUpsertEndorsementTemplate extends S.Class<NullableReferencedUpsertEndorsementTemplate>("NullableReferencedUpsertEndorsementTemplate")({
  /**
* Nullable entity reference for EndorsementTemplate.
*/
"data": S.NullOr(S.Union(CreateEndorsementTemplateRef,
EndorsementTemplateRef))
}) {}

export class NullableReferencedUpsertCoverageGroupTemplate extends S.Class<NullableReferencedUpsertCoverageGroupTemplate>("NullableReferencedUpsertCoverageGroupTemplate")({
  /**
* Nullable entity reference for CoverageGroupTemplate.
*/
"data": S.NullOr(S.Union(CreateCoverageGroupTemplateRef,
CoverageGroupTemplateRef))
}) {}

export class ReferencedUpsertCoverageGroupTemplateList extends S.Class<ReferencedUpsertCoverageGroupTemplateList>("ReferencedUpsertCoverageGroupTemplateList")({
  /**
* A list of CoverageGroupTemplate entity refs.
*/
"data": S.Array(S.Union(CreateCoverageGroupTemplateRef,
CoverageGroupTemplateRef))
}) {}

export class ReferencedUpsertDepreciationModifierList extends S.Class<ReferencedUpsertDepreciationModifierList>("ReferencedUpsertDepreciationModifierList")({
  /**
* A list of DepreciationModifier entity refs.
*/
"data": S.Array(S.Union(CreateDepreciationModifierRef,
DepreciationModifierRef))
}) {}

export class ReferencedUpsertDepreciationOverrideList extends S.Class<ReferencedUpsertDepreciationOverrideList>("ReferencedUpsertDepreciationOverrideList")({
  /**
* A list of DepreciationOverride entity refs.
*/
"data": S.Array(S.Union(CreateDepreciationOverrideRef,
DepreciationOverrideRef))
}) {}

export class ReferencedUpsertItemTemplate extends S.Class<ReferencedUpsertItemTemplate>("ReferencedUpsertItemTemplate")({
  /**
* Entity reference for ItemTemplate.
*/
"data": S.Union(CreateItemTemplateRef,
ItemTemplateRef)
}) {}

export class ReferencedUpsertAssetAttributeClassList extends S.Class<ReferencedUpsertAssetAttributeClassList>("ReferencedUpsertAssetAttributeClassList")({
  /**
* A list of AssetAttributeClass entity refs.
*/
"data": S.Array(S.Union(CreateAssetAttributeClassRef,
AssetAttributeClassRef))
}) {}

export class ReferencedUpsertAssetAttributeType extends S.Class<ReferencedUpsertAssetAttributeType>("ReferencedUpsertAssetAttributeType")({
  /**
* Entity reference for AssetAttributeType.
*/
"data": S.Union(CreateAssetAttributeTypeRef,
AssetAttributeTypeRef)
}) {}

export class ReferencedUpsertAssetAttributeTypeList extends S.Class<ReferencedUpsertAssetAttributeTypeList>("ReferencedUpsertAssetAttributeTypeList")({
  /**
* A list of AssetAttributeType entity refs.
*/
"data": S.Array(S.Union(CreateAssetAttributeTypeRef,
AssetAttributeTypeRef))
}) {}

export class ReferencedUpsertIncidentClassList extends S.Class<ReferencedUpsertIncidentClassList>("ReferencedUpsertIncidentClassList")({
  /**
* A list of IncidentClass entity refs.
*/
"data": S.Array(S.Union(CreateIncidentClassRef,
IncidentClassRef))
}) {}

export class ReferencedUpsertItemCategoryList extends S.Class<ReferencedUpsertItemCategoryList>("ReferencedUpsertItemCategoryList")({
  /**
* A list of ItemCategory entity refs.
*/
"data": S.Array(S.Union(CreateItemCategoryRef,
ItemCategoryRef))
}) {}

export class ReferencedUpsertItemClassList extends S.Class<ReferencedUpsertItemClassList>("ReferencedUpsertItemClassList")({
  /**
* A list of ItemClass entity refs.
*/
"data": S.Array(S.Union(CreateItemClassRef,
ItemClassRef))
}) {}

export class ReferencedUpsertServiceCategoryList extends S.Class<ReferencedUpsertServiceCategoryList>("ReferencedUpsertServiceCategoryList")({
  /**
* A list of ServiceCategory entity refs.
*/
"data": S.Array(S.Union(CreateServiceCategoryRef,
ServiceCategoryRef))
}) {}

export class ReferencedUpsertServiceClassList extends S.Class<ReferencedUpsertServiceClassList>("ReferencedUpsertServiceClassList")({
  /**
* A list of ServiceClass entity refs.
*/
"data": S.Array(S.Union(CreateServiceClassRef,
ServiceClassRef))
}) {}

export class ReferencedUpsertBaseEntityList extends S.Class<ReferencedUpsertBaseEntityList>("ReferencedUpsertBaseEntityList")({
  /**
* A list of BaseEntity entity refs.
*/
"data": S.Array(S.Union(CreateChangeOrderRef,
CreateEstimateRef,
CreateInvoiceRef,
CreatePaymentRef,
CreateAssetAppraisalRef,
CreateAppraisalRef,
CreateFundingRef,
CreateIncidentReportRef,
CreatePoliceReportRef,
CreateParamedicReportRef,
CreateContractRef,
CreateRentRollRef,
CreatePermitRef,
CreateBlueprintRef,
CreateDeclarationsPageRef,
CreatePolicyJacketRef,
CreateScopeOfLossRef,
CreateDeliveryPaperworkRef,
CreateProductSpecRef,
CreateUserManualRef,
CreateWarrantyRef,
CreateDeedRef,
CreateItemChangeOrderRef,
CreateItemImpactChangeOrderRef,
CreateServiceTaskChangeOrderRef,
CreateItemEstimateRef,
CreateItemImpactEstimateRef,
CreateServiceTaskEstimateRef,
CreateItemInvoiceRef,
CreateItemImpactInvoiceRef,
CreateServiceTaskInvoiceRef,
CreateItemPaymentRef,
CreateItemImpactPaymentRef,
CreateServiceTaskPaymentRef,
CreateItemAppraisalRef,
CreateItemizableFinancialDocumentStatsRef,
CreateProviderRef,
CreateCountryRef,
CreateCurrencyRef,
CreateDepreciationModifierRef,
CreateDepreciationOverrideRef,
CreateItemTypeRef,
CreateDisasterRef,
CreatePerilRef,
CreateAssetAttributeTypeItemTemplateRef,
CreateCoverageGroupTemplateRef,
CreateCoverageTemplateRef,
CreateEndorsementTemplateRef,
CreateItemTemplateRef,
CreatePolicyTemplateRef,
CreateSpaceTypeItemTemplateRef,
CreateSubCoverageTemplateRef,
CreateSubmissionTrackTemplateRef,
CreateAssetAttributeClassRef,
CreateAssetAttributeTypeRef,
CreateAssetTypeRef,
CreateBucketClassRef,
CreateBucketTypeRef,
CreateDocumentClassRef,
CreateDocumentTypeRef,
CreateIncidentClassRef,
CreateIncidentTypeRef,
CreateItemCategoryRef,
CreateItemClassRef,
CreateServiceCategoryRef,
CreateServiceClassRef,
CreateServiceTypeRef,
CreateSpaceGroupTypeRef,
CreateSpaceCategoryRef,
CreateSpaceClassRef,
CreateSpaceTypeRef,
CreateAccountInviteRef,
CreateAccountProviderContactRef,
CreateUserRef,
CreateAccountProviderRef,
CreateAccountRef,
CreateAddressRef,
CreateDwellingRef,
CreateAuthProfileRef,
CreateBaseBucketMetadataRef,
CreateEntryRef,
CreateBucketRef,
CreateSubBucketRef,
CreateBaseSubBucketMetadataRef,
CreateCoverageRef,
CreateBucketFundingRef,
CreateClaimDeductibleRef,
CreatePolicyTermRef,
CreateClaimRef,
CreateCoverageGroupRef,
CreateDeductibleRef,
CreateEmailAddressRef,
CreateEndorsementRef,
CreateEntrySourceMediaRef,
CreateEntrySourceMetadataRef,
CreateItemImpactRef,
CreateItemRef,
CreateServiceTaskRef,
CreateServiceRef,
CreateThirdPartyImpactRef,
CreateFileProcessRef,
CreateFileRef,
CreateProjectImpactRef,
CreateIncidentImpactRef,
CreateIncidentRef,
CreateItemMediaSuggestionRef,
CreateItemProductSuggestionRef,
CreateMediaRef,
CreatePhoneNumberRef,
CreatePolicyRef,
CreateProjectMediaRef,
CreateSpaceGroupRef,
CreateSpaceRef,
CreateSubCoverageRef,
CreateThirdPartyDwellingRef,
CreateThirdPartyIndividualRef,
CreateUserAccountRoleRef,
ChangeOrderRef,
EstimateRef,
InvoiceRef,
PaymentRef,
AssetAppraisalRef,
AppraisalRef,
FundingRef,
IncidentReportRef,
PoliceReportRef,
ParamedicReportRef,
ContractRef,
RentRollRef,
PermitRef,
BlueprintRef,
DeclarationsPageRef,
PolicyJacketRef,
ScopeOfLossRef,
DeliveryPaperworkRef,
ProductSpecRef,
UserManualRef,
WarrantyRef,
DeedRef,
ItemChangeOrderRef,
ItemImpactChangeOrderRef,
ServiceTaskChangeOrderRef,
ItemEstimateRef,
ItemImpactEstimateRef,
ServiceTaskEstimateRef,
ItemInvoiceRef,
ItemImpactInvoiceRef,
ServiceTaskInvoiceRef,
ItemPaymentRef,
ItemImpactPaymentRef,
ServiceTaskPaymentRef,
ItemAppraisalRef,
ItemizableFinancialDocumentStatsRef,
ProviderRef,
CountryRef,
CurrencyRef,
DepreciationModifierRef,
DepreciationOverrideRef,
ItemTypeRef,
DisasterRef,
PerilRef,
AssetAttributeTypeItemTemplateRef,
CoverageGroupTemplateRef,
CoverageTemplateRef,
EndorsementTemplateRef,
ItemTemplateRef,
PolicyTemplateRef,
SpaceTypeItemTemplateRef,
SubCoverageTemplateRef,
SubmissionTrackTemplateRef,
AssetAttributeClassRef,
AssetAttributeTypeRef,
AssetTypeRef,
BucketClassRef,
BucketTypeRef,
DocumentClassRef,
DocumentTypeRef,
IncidentClassRef,
IncidentTypeRef,
ItemCategoryRef,
ItemClassRef,
ServiceCategoryRef,
ServiceClassRef,
ServiceTypeRef,
SpaceGroupTypeRef,
SpaceCategoryRef,
SpaceClassRef,
SpaceTypeRef,
AccountInviteRef,
AccountProviderContactRef,
UserRef,
AccountProviderRef,
AccountRef,
AddressRef,
DwellingRef,
AuthProfileRef,
BaseBucketMetadataRef,
EntryRef,
BucketRef,
SubBucketRef,
BaseSubBucketMetadataRef,
CoverageRef,
BucketFundingRef,
ClaimDeductibleRef,
PolicyTermRef,
ClaimRef,
CoverageGroupRef,
DeductibleRef,
EmailAddressRef,
EndorsementRef,
EntrySourceMediaRef,
EntrySourceMetadataRef,
ItemImpactRef,
ItemRef,
ServiceTaskRef,
ServiceRef,
ThirdPartyImpactRef,
FileProcessRef,
FileRef,
ProjectImpactRef,
IncidentImpactRef,
IncidentRef,
ItemMediaSuggestionRef,
ItemProductSuggestionRef,
MediaRef,
PhoneNumberRef,
PolicyRef,
ProjectMediaRef,
SpaceGroupRef,
SpaceRef,
SubCoverageRef,
ThirdPartyDwellingRef,
ThirdPartyIndividualRef,
UserAccountRoleRef))
}) {}

export class ReferencedUpsertThirdParty extends S.Class<ReferencedUpsertThirdParty>("ReferencedUpsertThirdParty")({
  /**
* Entity reference for ThirdParty.
*/
"data": S.Union(CreateThirdPartyDwellingRef,
CreateThirdPartyIndividualRef,
ThirdPartyDwellingRef,
ThirdPartyIndividualRef)
}) {}

export const PermissionsControllerCheckDeletePermissionsRequest = eraseSchemaReq(S.Union(JsonApiEntityReference,
JsonApiEntityReferenceList))
export type PermissionsControllerCheckDeletePermissionsRequest = typeof PermissionsControllerCheckDeletePermissionsRequest

export class TransloaditAssemblyOptionsResponseDto extends S.Class<TransloaditAssemblyOptionsResponseDto>("TransloaditAssemblyOptionsResponseDto")({
  "params": S.Union(TransloaditStoreFileAssemblyParams,
TransloaditAvatarAssemblyParams),
  /**
* HMAC-SHA384 signature (hex) over the exact JSON string of `params` (per Transloadit Signature Auth).
*/
"signature": S.String
}) {}

export class FilesCdnAccessResponseDto extends S.Class<FilesCdnAccessResponseDto>("FilesCdnAccessResponseDto")({
  /**
* Whether the request succeeded
*/
"ok": S.Boolean,
  /**
* Access scope for this user/account
*/
"scope": CdnScopeDto
}) {}

export class FilesCdnSignedUrlsDto extends S.Class<FilesCdnSignedUrlsDto>("FilesCdnSignedUrlsDto")({
  /**
* Default TTL applied to all items unless overridden per item. Must be between 60s (1m) and 86400s (24h).
*/
"defaultTtlSeconds": S.optionalWith(S.Number.pipe(S.greaterThanOrEqualTo(60), S.lessThanOrEqualTo(86400)), { nullable: true }),
  /**
* List of items (files) to generate signed URLs for.
*/
"items": S.Array(SignedUrlItemDto)
}) {}

export class FilesCdnSignedUrlsResponseDto extends S.Class<FilesCdnSignedUrlsResponseDto>("FilesCdnSignedUrlsResponseDto")({
  /**
* Indicates whether all signed URLs were generated successfully
*/
"ok": S.Boolean,
  /**
* Timestamp when this response was issued (ISO 8601)
*/
"issuedAt": S.String,
  /**
* Array of results (successes and/or failures)
*/
"results": S.Array(SignedUrlResultDto)
}) {}

export class AuthProfileRelationships extends S.Class<AuthProfileRelationships>("AuthProfileRelationships")({
  "user": S.optionalWith(ReferencedUser, { nullable: true })
}) {}

export class ThirdPartyRelationships extends S.Class<ThirdPartyRelationships>("ThirdPartyRelationships")({
  "project": S.optionalWith(ReferencedProject, { nullable: true })
}) {}

export class ThirdPartyIndividualRelationships extends S.Class<ThirdPartyIndividualRelationships>("ThirdPartyIndividualRelationships")({
  "project": S.optionalWith(ReferencedProject, { nullable: true })
}) {}

export class AccountRelationships extends S.Class<AccountRelationships>("AccountRelationships")({
  "owner": S.optionalWith(ReferencedUser, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  /**
* The user's roles across various accounts
*/
"userRoles": S.optionalWith(ReferencedUserAccountRoleList, { nullable: true }),
  "defaultCurrency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {}

export class IdentityRelationships extends S.Class<IdentityRelationships>("IdentityRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedPhoneNumber, { nullable: true })
}) {}

export class UserRelationships extends S.Class<UserRelationships>("UserRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedPhoneNumber, { nullable: true }),
  /**
* The user's default account to load
*/
"defaultAccount": S.optionalWith(NullableReferencedAccount, { nullable: true }),
  /**
* The user's roles across various accounts
*/
"accountRoles": S.optionalWith(ReferencedUserAccountRoleList, { nullable: true })
}) {}

export class AccountInviteRelationships extends S.Class<AccountInviteRelationships>("AccountInviteRelationships")({
  /**
* The account this invite is for.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "invitedBy": S.optionalWith(ReferencedUser, { nullable: true }),
  "acceptedBy": S.optionalWith(NullableReferencedUser, { nullable: true })
}) {}

export class UserAccountRoleRelationships extends S.Class<UserAccountRoleRelationships>("UserAccountRoleRelationships")({
  /**
* The user being granted permissions.
*/
"user": S.optionalWith(ReferencedUser, { nullable: true }),
  /**
* The account for which permissions are granted.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true })
}) {}

export class EmailAddressRelationships extends S.Class<EmailAddressRelationships>("EmailAddressRelationships")({
  "identity": S.optionalWith(ReferencedIdentity, { nullable: true })
}) {}

export class PhoneNumberRelationships extends S.Class<PhoneNumberRelationships>("PhoneNumberRelationships")({
  "identity": S.optionalWith(ReferencedIdentity, { nullable: true })
}) {}

export class AccountProviderContactRelationships extends S.Class<AccountProviderContactRelationships>("AccountProviderContactRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedPhoneNumber, { nullable: true }),
  "provider": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
  "user": S.optionalWith(NullableReferencedUser, { nullable: true })
}) {}

export class AccountProviderRelationships extends S.Class<AccountProviderRelationships>("AccountProviderRelationships")({
  /**
* The account this provider is attached to.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "provider": S.optionalWith(NullableReferencedProvider, { nullable: true })
}) {}

export class ProjectRelationships extends S.Class<ProjectRelationships>("ProjectRelationships")({
  /**
* The account that owns this project.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "mediaAttachments": S.optionalWith(ReferencedProjectMediaList, { nullable: true })
}) {}

export class DisasterRelationships extends S.Class<DisasterRelationships>("DisasterRelationships")({
  "incidentType": S.optionalWith(ReferencedIncidentType, { nullable: true })
}) {}

export class IncidentRelationships extends S.Class<IncidentRelationships>("IncidentRelationships")({
  /**
* The account that owns this project.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "mediaAttachments": S.optionalWith(ReferencedProjectMediaList, { nullable: true }),
  "type": S.optionalWith(ReferencedIncidentType, { nullable: true }),
  "disaster": S.optionalWith(NullableReferencedDisaster, { nullable: true })
}) {}

export class ProjectMediaRelationships extends S.Class<ProjectMediaRelationships>("ProjectMediaRelationships")({
  "media": S.optionalWith(ReferencedMedia, { nullable: true }),
  "project": S.optionalWith(ReferencedProject, { nullable: true })
}) {}

export class FileProcessRelationships extends S.Class<FileProcessRelationships>("FileProcessRelationships")({
  "file": S.optionalWith(ReferencedFile, { nullable: true })
}) {}

export class ProjectImpactRelationships extends S.Class<ProjectImpactRelationships>("ProjectImpactRelationships")({
  "asset": S.optionalWith(ReferencedAsset, { nullable: true }),
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true })
}) {}

export class MediaRelationships extends S.Class<MediaRelationships>("MediaRelationships")({
  /**
* The account's UUID
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(ReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projectAssignments": S.optionalWith(ReferencedProjectMediaList, { nullable: true }),
  "entrySourceAnnotations": S.optionalWith(ReferencedEntrySourceMediaList, { nullable: true })
}) {}

export class ItemizableFinancialDocumentStatsRelationships extends S.Class<ItemizableFinancialDocumentStatsRelationships>("ItemizableFinancialDocumentStatsRelationships")({
  "object": S.optionalWith(ReferencedItemizableFinancialDocument, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(ReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class FileRelationships extends S.Class<FileRelationships>("FileRelationships")({
  /**
* ID for the account to which this file belongs.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "processes": S.optionalWith(ReferencedFileProcessList, { nullable: true }),
  "media": S.optionalWith(ReferencedMediaList, { nullable: true }),
  "documents": S.optionalWith(ReferencedDocumentList, { nullable: true }),
  "addedBy": S.optionalWith(ReferencedUser, { nullable: true })
}) {}

export class AssetRelationships extends S.Class<AssetRelationships>("AssetRelationships")({
  "assetType": S.optionalWith(ReferencedAssetType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedAssetAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedAssetAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedAssetAppraisal, { nullable: true })
}) {}

export class PerilRelationships extends S.Class<PerilRelationships>("PerilRelationships")({
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class IncidentClassRelationships extends S.Class<IncidentClassRelationships>("IncidentClassRelationships")({
  "types": S.optionalWith(ReferencedIncidentTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class ServiceTypeRelationships extends S.Class<ServiceTypeRelationships>("ServiceTypeRelationships")({
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class DwellingRelationships extends S.Class<DwellingRelationships>("DwellingRelationships")({
  "assetType": S.optionalWith(ReferencedAssetType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedAssetAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedAssetAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedAssetAppraisal, { nullable: true }),
  "address": S.optionalWith(ReferencedAddress, { nullable: true })
}) {}

export class AssetAppraisalRelationships extends S.Class<AssetAppraisalRelationships>("AssetAppraisalRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
  "asset": S.optionalWith(ReferencedAsset, { nullable: true })
}) {}

export class DocumentRelationships extends S.Class<DocumentRelationships>("DocumentRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class IncidentReportRelationships extends S.Class<IncidentReportRelationships>("IncidentReportRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class PoliceReportRelationships extends S.Class<PoliceReportRelationships>("PoliceReportRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class ParamedicReportRelationships extends S.Class<ParamedicReportRelationships>("ParamedicReportRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class ContractRelationships extends S.Class<ContractRelationships>("ContractRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class RentRollRelationships extends S.Class<RentRollRelationships>("RentRollRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class PermitRelationships extends S.Class<PermitRelationships>("PermitRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class BlueprintRelationships extends S.Class<BlueprintRelationships>("BlueprintRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class DeclarationsPageRelationships extends S.Class<DeclarationsPageRelationships>("DeclarationsPageRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class PolicyJacketRelationships extends S.Class<PolicyJacketRelationships>("PolicyJacketRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class ScopeOfLossRelationships extends S.Class<ScopeOfLossRelationships>("ScopeOfLossRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class DeliveryPaperworkRelationships extends S.Class<DeliveryPaperworkRelationships>("DeliveryPaperworkRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class ProductSpecRelationships extends S.Class<ProductSpecRelationships>("ProductSpecRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class UserManualRelationships extends S.Class<UserManualRelationships>("UserManualRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class WarrantyRelationships extends S.Class<WarrantyRelationships>("WarrantyRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class DeedRelationships extends S.Class<DeedRelationships>("DeedRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {}

export class FinancialDocumentRelationships extends S.Class<FinancialDocumentRelationships>("FinancialDocumentRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {}

export class DocumentClassRelationships extends S.Class<DocumentClassRelationships>("DocumentClassRelationships")({
  "types": S.optionalWith(ReferencedDocumentTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class DocumentTypeRelationships extends S.Class<DocumentTypeRelationships>("DocumentTypeRelationships")({
  "classes": S.optionalWith(ReferencedDocumentClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class SpaceGroupRelationships extends S.Class<SpaceGroupRelationships>("SpaceGroupRelationships")({
  "type": S.optionalWith(ReferencedSpaceType, { nullable: true }),
  "asset": S.optionalWith(ReferencedAsset, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true })
}) {}

export class SpaceRelationships extends S.Class<SpaceRelationships>("SpaceRelationships")({
  "type": S.optionalWith(ReferencedSpaceType, { nullable: true }),
  "group": S.optionalWith(ReferencedSpaceGroup, { nullable: true }),
  /**
* The asset to which this space belongs.
*/
"asset": S.optionalWith(ReferencedAsset, { nullable: true })
}) {}

export class SpaceTypeRelationships extends S.Class<SpaceTypeRelationships>("SpaceTypeRelationships")({
  "classes": S.optionalWith(ReferencedSpaceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedSpaceGroupTypeList, { nullable: true })
}) {}

export class SpaceCategoryRelationships extends S.Class<SpaceCategoryRelationships>("SpaceCategoryRelationships")({
  "classes": S.optionalWith(ReferencedSpaceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedSpaceGroupTypeList, { nullable: true })
}) {}

export class SpaceClassRelationships extends S.Class<SpaceClassRelationships>("SpaceClassRelationships")({
  "categories": S.optionalWith(ReferencedSpaceCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedSpaceTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedSpaceGroupTypeList, { nullable: true })
}) {}

export class SpaceGroupTypeRelationships extends S.Class<SpaceGroupTypeRelationships>("SpaceGroupTypeRelationships")({
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedBucketTypeList, { nullable: true })
}) {}

export class BucketClassRelationships extends S.Class<BucketClassRelationships>("BucketClassRelationships")({
  "types": S.optionalWith(ReferencedBucketTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class BucketTypeRelationships extends S.Class<BucketTypeRelationships>("BucketTypeRelationships")({
  "classes": S.optionalWith(ReferencedBucketClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class AddressRelationships extends S.Class<AddressRelationships>("AddressRelationships")({
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "country": S.optionalWith(ReferencedCountry, { nullable: true })
}) {}

export class ThirdPartyDwellingRelationships extends S.Class<ThirdPartyDwellingRelationships>("ThirdPartyDwellingRelationships")({
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "country": S.optionalWith(ReferencedCountry, { nullable: true })
}) {}

export class ItemizableFinancialDocumentRelationships extends S.Class<ItemizableFinancialDocumentRelationships>("ItemizableFinancialDocumentRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true })
}) {}

export class ItemImpactPaymentRelationships extends S.Class<ItemImpactPaymentRelationships>("ItemImpactPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedPayment, { nullable: true }),
  "subject": S.optionalWith(ReferencedItemImpact, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ItemImpactInvoiceRelationships extends S.Class<ItemImpactInvoiceRelationships>("ItemImpactInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedInvoice, { nullable: true }),
  "subject": S.optionalWith(ReferencedItemImpact, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ItemImpactEstimateRelationships extends S.Class<ItemImpactEstimateRelationships>("ItemImpactEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedEstimate, { nullable: true }),
  "subject": S.optionalWith(ReferencedItemImpact, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ItemAppraisalRelationships extends S.Class<ItemAppraisalRelationships>("ItemAppraisalRelationships")({
  "appraisal": S.optionalWith(ReferencedAppraisal, { nullable: true }),
  "subject": S.optionalWith(ReferencedItem, { nullable: true })
}) {}

export class ItemInvoiceRelationships extends S.Class<ItemInvoiceRelationships>("ItemInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedInvoice, { nullable: true }),
  "subject": S.optionalWith(ReferencedItem, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ItemPaymentRelationships extends S.Class<ItemPaymentRelationships>("ItemPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedPayment, { nullable: true }),
  "subject": S.optionalWith(ReferencedItem, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ItemEstimateRelationships extends S.Class<ItemEstimateRelationships>("ItemEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedEstimate, { nullable: true }),
  "subject": S.optionalWith(ReferencedItem, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ItemProductSuggestionRelationships extends S.Class<ItemProductSuggestionRelationships>("ItemProductSuggestionRelationships")({
  "item": S.optionalWith(ReferencedItem, { nullable: true })
}) {}

export class ServiceTaskPaymentRelationships extends S.Class<ServiceTaskPaymentRelationships>("ServiceTaskPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedPayment, { nullable: true }),
  "subject": S.optionalWith(ReferencedServiceTask, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ServiceTaskInvoiceRelationships extends S.Class<ServiceTaskInvoiceRelationships>("ServiceTaskInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedInvoice, { nullable: true }),
  "subject": S.optionalWith(ReferencedServiceTask, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ServiceTaskEstimateRelationships extends S.Class<ServiceTaskEstimateRelationships>("ServiceTaskEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedEstimate, { nullable: true }),
  "subject": S.optionalWith(ReferencedServiceTask, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class ChangeOrderRelationships extends S.Class<ChangeOrderRelationships>("ChangeOrderRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true }),
  /**
* Estimate that the ChangeOrder applies to.
*/
"estimate": S.optionalWith(ReferencedEstimate, { nullable: true }),
  /**
* AccountProvider for the ChangeOrder. Computed based on .estimate.vendor.
*/
"vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
  /**
* Service for the ChangeOrder. Computed based on .estimate.service.
*/
"service": S.optionalWith(ReferencedService, { nullable: true }),
  "lines": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedEntrySourceList, { nullable: true })
}) {}

export class EntrySourceMetadataRelationships extends S.Class<EntrySourceMetadataRelationships>("EntrySourceMetadataRelationships")({
  "object": S.optionalWith(ReferencedEntrySource, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "project": S.optionalWith(NullableReferencedProject, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {}

export class AppraisalLineRelationships extends S.Class<AppraisalLineRelationships>("AppraisalLineRelationships")({
  "appraisal": S.optionalWith(ReferencedAppraisal, { nullable: true }),
  "subject": S.optionalWith(ReferencedEntrySource, { nullable: true })
}) {}

export class InvoiceLineRelationships extends S.Class<InvoiceLineRelationships>("InvoiceLineRelationships")({
  "invoice": S.optionalWith(NullableReferencedInvoice, { nullable: true }),
  "subject": S.optionalWith(ReferencedEntrySource, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class PaymentLineRelationships extends S.Class<PaymentLineRelationships>("PaymentLineRelationships")({
  "payment": S.optionalWith(NullableReferencedPayment, { nullable: true }),
  "subject": S.optionalWith(ReferencedEntrySource, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class EstimateLineRelationships extends S.Class<EstimateLineRelationships>("EstimateLineRelationships")({
  "estimate": S.optionalWith(NullableReferencedEstimate, { nullable: true }),
  "subject": S.optionalWith(ReferencedEntrySource, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {}

export class EntrySourceMediaRelationships extends S.Class<EntrySourceMediaRelationships>("EntrySourceMediaRelationships")({
  "entrySource": S.optionalWith(ReferencedEntrySource, { nullable: true }),
  "media": S.optionalWith(ReferencedMedia, { nullable: true })
}) {}

export class ItemChangeOrderRelationships extends S.Class<ItemChangeOrderRelationships>("ItemChangeOrderRelationships")({
  "estimateLine": S.optionalWith(ReferencedItemEstimate, { nullable: true }),
  "changeOrder": S.optionalWith(ReferencedChangeOrder, { nullable: true }),
  "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedService, { nullable: true }),
  "subject": S.optionalWith(ReferencedItem, { nullable: true })
}) {}

export class ItemImpactChangeOrderRelationships extends S.Class<ItemImpactChangeOrderRelationships>("ItemImpactChangeOrderRelationships")({
  "estimateLine": S.optionalWith(ReferencedItemImpactEstimate, { nullable: true }),
  "changeOrder": S.optionalWith(ReferencedChangeOrder, { nullable: true }),
  "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedService, { nullable: true }),
  "subject": S.optionalWith(ReferencedItemImpact, { nullable: true })
}) {}

export class EstimateRelationships extends S.Class<EstimateRelationships>("EstimateRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "lines": S.optionalWith(ReferencedEstimateLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedEntrySourceList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true })
}) {}

export class ChangeOrderLineRelationships extends S.Class<ChangeOrderLineRelationships>("ChangeOrderLineRelationships")({
  "estimateLine": S.optionalWith(ReferencedEstimateLine, { nullable: true }),
  "changeOrder": S.optionalWith(ReferencedChangeOrder, { nullable: true }),
  "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedService, { nullable: true }),
  "subject": S.optionalWith(ReferencedEntrySource, { nullable: true })
}) {}

export class ServiceTaskChangeOrderRelationships extends S.Class<ServiceTaskChangeOrderRelationships>("ServiceTaskChangeOrderRelationships")({
  "estimateLine": S.optionalWith(ReferencedServiceTaskEstimate, { nullable: true }),
  "changeOrder": S.optionalWith(ReferencedChangeOrder, { nullable: true }),
  "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedService, { nullable: true }),
  "subject": S.optionalWith(ReferencedServiceTask, { nullable: true })
}) {}

export class EntrySourceRelationships extends S.Class<EntrySourceRelationships>("EntrySourceRelationships")({
  "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true })
}) {}

export class ServiceTaskRelationships extends S.Class<ServiceTaskRelationships>("ServiceTaskRelationships")({
  "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "service": S.optionalWith(ReferencedService, { nullable: true }),
  "payments": S.optionalWith(ReferencedPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true })
}) {}

export class PaymentRelationships extends S.Class<PaymentRelationships>("PaymentRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "lines": S.optionalWith(ReferencedPaymentLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedEntrySourceList, { nullable: true })
}) {}

export class ServiceRelationships extends S.Class<ServiceRelationships>("ServiceRelationships")({
  "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  /**
* What type of service is being provided.
*/
"type": S.optionalWith(NullableReferencedServiceType, { nullable: true }),
  "payments": S.optionalWith(ReferencedPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true }),
  "paidLineItems": S.optionalWith(ReferencedPaymentLineList, { nullable: true }),
  "invoicedLineItems": S.optionalWith(ReferencedInvoiceLineList, { nullable: true }),
  "estimatedLineItems": S.optionalWith(ReferencedEstimateLineList, { nullable: true })
}) {}

export class InvoiceRelationships extends S.Class<InvoiceRelationships>("InvoiceRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedService, { nullable: true }),
  "lines": S.optionalWith(ReferencedInvoiceLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedEntrySourceList, { nullable: true })
}) {}

export class ItemImpactRelationships extends S.Class<ItemImpactRelationships>("ItemImpactRelationships")({
  "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "item": S.optionalWith(ReferencedItem, { nullable: true }),
  "replacement": S.optionalWith(NullableReferencedItem, { nullable: true }),
  "payments": S.optionalWith(ReferencedPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true }),
  "itemType": S.optionalWith(NullableReferencedItemType, { nullable: true })
}) {}

export class ItemRelationships extends S.Class<ItemRelationships>("ItemRelationships")({
  "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "type": S.optionalWith(NullableReferencedItemType, { nullable: true }),
  "asset": S.optionalWith(NullableReferencedAsset, { nullable: true }),
  "space": S.optionalWith(NullableReferencedSpace, { nullable: true }),
  "replaces": S.optionalWith(NullableReferencedItemImpact, { nullable: true }),
  "payments": S.optionalWith(ReferencedPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true }),
  "impacts": S.optionalWith(ReferencedItemImpactList, { nullable: true })
}) {}

export class ItemMediaSuggestionRelationships extends S.Class<ItemMediaSuggestionRelationships>("ItemMediaSuggestionRelationships")({
  "media": S.optionalWith(ReferencedMedia, { nullable: true }),
  "item": S.optionalWith(NullableReferencedItem, { nullable: true }),
  "existing_items": S.optionalWith(ReferencedItemList, { nullable: true }),
  "type": S.optionalWith(NullableReferencedItemType, { nullable: true }),
  "asset": S.optionalWith(NullableReferencedAsset, { nullable: true }),
  "space": S.optionalWith(NullableReferencedSpace, { nullable: true })
}) {}

export class DepreciationModifierRelationships extends S.Class<DepreciationModifierRelationships>("DepreciationModifierRelationships")({
  "schedule": S.optionalWith(ReferencedDepreciationSchedule, { nullable: true })
}) {}

export class DepreciationOverrideRelationships extends S.Class<DepreciationOverrideRelationships>("DepreciationOverrideRelationships")({
  "schedule": S.optionalWith(ReferencedDepreciationSchedule, { nullable: true })
}) {}

export class ItemTemplateRelationships extends S.Class<ItemTemplateRelationships>("ItemTemplateRelationships")({
  "itemType": S.optionalWith(ReferencedItemType, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class BaseSubBucketMetadataRelationships extends S.Class<BaseSubBucketMetadataRelationships>("BaseSubBucketMetadataRelationships")({
  "object": S.optionalWith(ReferencedBaseBucket, { nullable: true })
}) {}

export class BaseBucketMetadataRelationships extends S.Class<BaseBucketMetadataRelationships>("BaseBucketMetadataRelationships")({
  "object": S.optionalWith(ReferencedBaseBucket, { nullable: true })
}) {}

export class FundingSourceRelationships extends S.Class<FundingSourceRelationships>("FundingSourceRelationships")({
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "buckets": S.optionalWith(ReferencedBaseBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedFundingList, { nullable: true }),
  "contacts": S.optionalWith(ReferencedAccountProviderContactList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {}

export class EntryRelationships extends S.Class<EntryRelationships>("EntryRelationships")({
  "source": S.optionalWith(ReferencedEntrySource, { nullable: true }),
  "bucket": S.optionalWith(ReferencedBaseBucket, { nullable: true }),
  "subBucket": S.optionalWith(NullableReferencedBaseSubBucket, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {}

export class BucketFundingRelationships extends S.Class<BucketFundingRelationships>("BucketFundingRelationships")({
  "funding": S.optionalWith(ReferencedFunding, { nullable: true }),
  "bucket": S.optionalWith(ReferencedBaseBucket, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {}

export class BaseBucketRelationships extends S.Class<BaseBucketRelationships>("BaseBucketRelationships")({
  "type": S.optionalWith(NullableReferencedBucketType, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
  "metadata": S.optionalWith(ReferencedBaseBucketMetadata, { nullable: true }),
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "subBuckets": S.optionalWith(ReferencedBaseSubBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedBucketFundingList, { nullable: true })
}) {}

export class FundingRelationships extends S.Class<FundingRelationships>("FundingRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "source": S.optionalWith(ReferencedFundingSource, { nullable: true }),
  "allocations": S.optionalWith(ReferencedBucketFundingList, { nullable: true })
}) {}

export class SubBucketDefinitionRelationships extends S.Class<SubBucketDefinitionRelationships>("SubBucketDefinitionRelationships")({
  "parent": S.optionalWith(ReferencedBucketDefinition, { nullable: true }),
  "buckets": S.optionalWith(ReferencedSubBucketList, { nullable: true })
}) {}

export class ClaimTargetRelationships extends S.Class<ClaimTargetRelationships>("ClaimTargetRelationships")({
  "provider": S.optionalWith(ReferencedProvider, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "deductibles": S.optionalWith(ReferencedDeductibleList, { nullable: true }),
  "bucketDefinitions": S.optionalWith(ReferencedBucketDefinitionList, { nullable: true })
}) {}

export class BucketRelationships extends S.Class<BucketRelationships>("BucketRelationships")({
  "type": S.optionalWith(NullableReferencedBucketType, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
  "metadata": S.optionalWith(ReferencedBaseBucketMetadata, { nullable: true }),
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "subBuckets": S.optionalWith(ReferencedBaseSubBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedBucketFundingList, { nullable: true }),
  "definition": S.optionalWith(ReferencedBucketDefinition, { nullable: true }),
  "deductible": S.optionalWith(ReferencedDeductible, { nullable: true }),
  "claimDeductible": S.optionalWith(ReferencedClaimDeductible, { nullable: true })
}) {}

export class ClaimRelationships extends S.Class<ClaimRelationships>("ClaimRelationships")({
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "buckets": S.optionalWith(ReferencedBaseBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedFundingList, { nullable: true }),
  "contacts": S.optionalWith(ReferencedAccountProviderContactList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "target": S.optionalWith(ReferencedClaimTarget, { nullable: true }),
  "provider": S.optionalWith(ReferencedProvider, { nullable: true }),
  "deductibles": S.optionalWith(ReferencedDeductibleList, { nullable: true })
}) {}

export class DeductibleRelationships extends S.Class<DeductibleRelationships>("DeductibleRelationships")({
  "claimTarget": S.optionalWith(ReferencedClaimTarget, { nullable: true }),
  "bucketDefinitions": S.optionalWith(ReferencedBucketDefinitionList, { nullable: true }),
  "claimDeductibles": S.optionalWith(ReferencedClaimDeductibleList, { nullable: true })
}) {}

export class ClaimDeductibleRelationships extends S.Class<ClaimDeductibleRelationships>("ClaimDeductibleRelationships")({
  "context": S.optionalWith(ReferencedDeductible, { nullable: true }),
  "claim": S.optionalWith(ReferencedClaim, { nullable: true }),
  "target": S.optionalWith(ReferencedClaimTarget, { nullable: true }),
  "buckets": S.optionalWith(ReferencedBucketList, { nullable: true })
}) {}

export class PolicyTermRelationships extends S.Class<PolicyTermRelationships>("PolicyTermRelationships")({
  "provider": S.optionalWith(ReferencedProvider, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "deductibles": S.optionalWith(ReferencedDeductibleList, { nullable: true }),
  "bucketDefinitions": S.optionalWith(ReferencedBucketDefinitionList, { nullable: true }),
  "policy": S.optionalWith(ReferencedPolicy, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedPolicyTemplate, { nullable: true })
}) {}

export class PolicyRelationships extends S.Class<PolicyRelationships>("PolicyRelationships")({
  "provider": S.optionalWith(ReferencedProvider, { nullable: true }),
  "template": S.optionalWith(NullableReferencedPolicyTemplate, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "terms": S.optionalWith(ReferencedPolicyTermList, { nullable: true })
}) {}

export class SubmissionTrackTemplateRelationships extends S.Class<SubmissionTrackTemplateRelationships>("SubmissionTrackTemplateRelationships")({
  "policyTemplate": S.optionalWith(ReferencedPolicyTemplate, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedBucketTypeList, { nullable: true })
}) {}

export class BucketDefinitionRelationships extends S.Class<BucketDefinitionRelationships>("BucketDefinitionRelationships")({
  "basis": S.optionalWith(ReferencedClaimTarget, { nullable: true }),
  "bucketType": S.optionalWith(NullableReferencedBucketType, { nullable: true }),
  "deductible": S.optionalWith(NullableReferencedDeductible, { nullable: true }),
  "subBucketDefinitions": S.optionalWith(ReferencedSubBucketDefinitionList, { nullable: true }),
  "buckets": S.optionalWith(ReferencedBucketList, { nullable: true })
}) {}

export class CoverageGroupTemplateRelationships extends S.Class<CoverageGroupTemplateRelationships>("CoverageGroupTemplateRelationships")({
  "coverageTemplates": S.optionalWith(ReferencedCoverageTemplateList, { nullable: true })
}) {}

export class IncidentImpactRelationships extends S.Class<IncidentImpactRelationships>("IncidentImpactRelationships")({
  "asset": S.optionalWith(ReferencedAsset, { nullable: true }),
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "perils": S.optionalWith(ReferencedPerilList, { nullable: true })
}) {}

export class CoverageRelationships extends S.Class<CoverageRelationships>("CoverageRelationships")({
  "basis": S.optionalWith(ReferencedPolicyTerm, { nullable: true }),
  "bucketType": S.optionalWith(NullableReferencedBucketType, { nullable: true }),
  "deductible": S.optionalWith(NullableReferencedDeductible, { nullable: true }),
  "subBucketDefinitions": S.optionalWith(ReferencedSubBucketDefinitionList, { nullable: true }),
  "buckets": S.optionalWith(ReferencedBucketList, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedCoverageTemplate, { nullable: true }),
  "group": S.optionalWith(NullableReferencedCoverageGroup, { nullable: true }),
  "perils": S.optionalWith(ReferencedPerilList, { nullable: true }),
  "endorsements": S.optionalWith(ReferencedEndorsementList, { nullable: true })
}) {}

export class SubCoverageRelationships extends S.Class<SubCoverageRelationships>("SubCoverageRelationships")({
  "parent": S.optionalWith(ReferencedCoverage, { nullable: true }),
  "buckets": S.optionalWith(ReferencedSubBucketList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedSubCoverageTemplate, { nullable: true }),
  "endorsements": S.optionalWith(ReferencedEndorsementList, { nullable: true })
}) {}

export class EndorsementTemplateRelationships extends S.Class<EndorsementTemplateRelationships>("EndorsementTemplateRelationships")({
  "perils": S.optionalWith(ReferencedPerilList, { nullable: true }),
  "coverageTemplates": S.optionalWith(ReferencedCoverageTemplateList, { nullable: true }),
  "subCoverageTemplatess": S.optionalWith(ReferencedSubCoverageTemplateList, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedBucketTypeList, { nullable: true })
}) {}

export class SubBucketRelationships extends S.Class<SubBucketRelationships>("SubBucketRelationships")({
  "parent": S.optionalWith(ReferencedBaseBucket, { nullable: true }),
  "metadata": S.optionalWith(ReferencedBaseSubBucketMetadata, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "definition": S.optionalWith(ReferencedSubBucketDefinition, { nullable: true })
}) {}

export class BaseSubBucketRelationships extends S.Class<BaseSubBucketRelationships>("BaseSubBucketRelationships")({
  "parent": S.optionalWith(ReferencedBaseBucket, { nullable: true }),
  "metadata": S.optionalWith(ReferencedBaseSubBucketMetadata, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedProject, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true })
}) {}

export class SubCoverageTemplateRelationships extends S.Class<SubCoverageTemplateRelationships>("SubCoverageTemplateRelationships")({
  "coverageTemplate": S.optionalWith(ReferencedCoverageTemplate, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedEndorsementTemplateList, { nullable: true })
}) {}

export class EndorsementRelationships extends S.Class<EndorsementRelationships>("EndorsementRelationships")({
  "policyTerm": S.optionalWith(ReferencedPolicyTerm, { nullable: true }),
  "template": S.optionalWith(NullableReferencedEndorsementTemplate, { nullable: true }),
  "coverages": S.optionalWith(ReferencedCoverageList, { nullable: true }),
  "subCoverages": S.optionalWith(ReferencedSubCoverageList, { nullable: true }),
  "perils": S.optionalWith(ReferencedPerilList, { nullable: true })
}) {}

export class CoverageTemplateRelationships extends S.Class<CoverageTemplateRelationships>("CoverageTemplateRelationships")({
  "group": S.optionalWith(NullableReferencedCoverageGroupTemplate, { nullable: true }),
  "perils": S.optionalWith(ReferencedPerilList, { nullable: true }),
  "bucketType": S.optionalWith(ReferencedBucketType, { nullable: true }),
  "subCoverageTemplates": S.optionalWith(ReferencedSubCoverageTemplateList, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedEndorsementTemplateList, { nullable: true })
}) {}

export class CoverageGroupRelationships extends S.Class<CoverageGroupRelationships>("CoverageGroupRelationships")({
  "policyTerm": S.optionalWith(ReferencedPolicyTerm, { nullable: true }),
  "template": S.optionalWith(NullableReferencedCoverageGroupTemplate, { nullable: true })
}) {}

export class PolicyTemplateRelationships extends S.Class<PolicyTemplateRelationships>("PolicyTemplateRelationships")({
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
  "coverageGroupTemplates": S.optionalWith(ReferencedCoverageGroupTemplateList, { nullable: true }),
  "coverageTemplates": S.optionalWith(ReferencedCoverageTemplateList, { nullable: true }),
  "subCoverageTemplates": S.optionalWith(ReferencedSubCoverageTemplateList, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedEndorsementTemplateList, { nullable: true }),
  "perils": S.optionalWith(ReferencedPerilList, { nullable: true })
}) {}

export class DepreciationScheduleRelationships extends S.Class<DepreciationScheduleRelationships>("DepreciationScheduleRelationships")({
  "depreciationModifiers": S.optionalWith(ReferencedDepreciationModifierList, { nullable: true }),
  "depreciationOverrides": S.optionalWith(ReferencedDepreciationOverrideList, { nullable: true })
}) {}

export class SpaceTypeItemTemplateRelationships extends S.Class<SpaceTypeItemTemplateRelationships>("SpaceTypeItemTemplateRelationships")({
  "spaceType": S.optionalWith(ReferencedSpaceType, { nullable: true }),
  "itemTemplate": S.optionalWith(ReferencedItemTemplate, { nullable: true })
}) {}

export class AssetAttributeTypeRelationships extends S.Class<AssetAttributeTypeRelationships>("AssetAttributeTypeRelationships")({
  "classes": S.optionalWith(ReferencedAssetAttributeClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class AssetAttributeTypeItemTemplateRelationships extends S.Class<AssetAttributeTypeItemTemplateRelationships>("AssetAttributeTypeItemTemplateRelationships")({
  "assetAttributeType": S.optionalWith(ReferencedAssetAttributeType, { nullable: true }),
  "itemTemplate": S.optionalWith(ReferencedItemTemplate, { nullable: true })
}) {}

export class AssetAttributeClassRelationships extends S.Class<AssetAttributeClassRelationships>("AssetAttributeClassRelationships")({
  "types": S.optionalWith(ReferencedAssetAttributeTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class IncidentTypeRelationships extends S.Class<IncidentTypeRelationships>("IncidentTypeRelationships")({
  "classes": S.optionalWith(ReferencedIncidentClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
  "perils": S.optionalWith(ReferencedPerilList, { nullable: true })
}) {}

export class ItemClassRelationships extends S.Class<ItemClassRelationships>("ItemClassRelationships")({
  "categories": S.optionalWith(ReferencedItemCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedItemTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class ItemTypeRelationships extends S.Class<ItemTypeRelationships>("ItemTypeRelationships")({
  "depreciationModifiers": S.optionalWith(ReferencedDepreciationModifierList, { nullable: true }),
  "depreciationOverrides": S.optionalWith(ReferencedDepreciationOverrideList, { nullable: true }),
  "classes": S.optionalWith(ReferencedItemClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class ItemCategoryRelationships extends S.Class<ItemCategoryRelationships>("ItemCategoryRelationships")({
  "classes": S.optionalWith(ReferencedItemClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class ServiceClassRelationships extends S.Class<ServiceClassRelationships>("ServiceClassRelationships")({
  "categories": S.optionalWith(ReferencedServiceCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedServiceTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class ServiceCategoryRelationships extends S.Class<ServiceCategoryRelationships>("ServiceCategoryRelationships")({
  "classes": S.optionalWith(ReferencedServiceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {}

export class AppraisalRelationships extends S.Class<AppraisalRelationships>("AppraisalRelationships")({
  "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
  "lines": S.optionalWith(ReferencedAppraisalLineList, { nullable: true }),
  "subjects": S.optionalWith(ReferencedBaseEntityList, { nullable: true })
}) {}

export class ThirdPartyImpactRelationships extends S.Class<ThirdPartyImpactRelationships>("ThirdPartyImpactRelationships")({
  "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
  "thirdParty": S.optionalWith(ReferencedThirdParty, { nullable: true })
}) {}

export class CreateIdentityRelationships extends S.Class<CreateIdentityRelationships>("CreateIdentityRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true })
}) {}

export class UpdateIdentityRelationships extends S.Class<UpdateIdentityRelationships>("UpdateIdentityRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true })
}) {}

export class UpdateUserRelationships extends S.Class<UpdateUserRelationships>("UpdateUserRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true }),
  /**
* The user's default account to load
*/
"defaultAccount": S.optionalWith(NullableReferencedUpsertAccount, { nullable: true }),
  /**
* The user's roles across various accounts
*/
"accountRoles": S.optionalWith(ReferencedUpsertUserAccountRoleList, { nullable: true })
}) {}

export class CreateUserRelationships extends S.Class<CreateUserRelationships>("CreateUserRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true }),
  /**
* The user's default account to load
*/
"defaultAccount": S.optionalWith(NullableReferencedUpsertAccount, { nullable: true }),
  /**
* The user's roles across various accounts
*/
"accountRoles": S.optionalWith(ReferencedUpsertUserAccountRoleList, { nullable: true })
}) {}

export const FundingSourceControllerPostFundingSourceContactsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAccountProviderContact,
ReferencedUpsertAccountProviderContactList))
export type FundingSourceControllerPostFundingSourceContactsRefRequest = typeof FundingSourceControllerPostFundingSourceContactsRefRequest

export const FundingSourceControllerDeleteFundingSourceContactsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAccountProviderContact,
ReferencedUpsertAccountProviderContactList))
export type FundingSourceControllerDeleteFundingSourceContactsRefRequest = typeof FundingSourceControllerDeleteFundingSourceContactsRefRequest

export const ClaimControllerPostClaimContactsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAccountProviderContact,
ReferencedUpsertAccountProviderContactList))
export type ClaimControllerPostClaimContactsRefRequest = typeof ClaimControllerPostClaimContactsRefRequest

export const ClaimControllerDeleteClaimContactsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAccountProviderContact,
ReferencedUpsertAccountProviderContactList))
export type ClaimControllerDeleteClaimContactsRefRequest = typeof ClaimControllerDeleteClaimContactsRefRequest

export class CreateEmailAddressRelationships extends S.Class<CreateEmailAddressRelationships>("CreateEmailAddressRelationships")({
  "identity": ReferencedUpsertIdentity
}) {}

export class UpdateEmailAddressRelationships extends S.Class<UpdateEmailAddressRelationships>("UpdateEmailAddressRelationships")({
  "identity": S.optionalWith(ReferencedUpsertIdentity, { nullable: true })
}) {}

export class CreatePhoneNumberRelationships extends S.Class<CreatePhoneNumberRelationships>("CreatePhoneNumberRelationships")({
  "identity": ReferencedUpsertIdentity
}) {}

export class UpdatePhoneNumberRelationships extends S.Class<UpdatePhoneNumberRelationships>("UpdatePhoneNumberRelationships")({
  "identity": S.optionalWith(ReferencedUpsertIdentity, { nullable: true })
}) {}

export class CreateAccountInviteRelationships extends S.Class<CreateAccountInviteRelationships>("CreateAccountInviteRelationships")({
  /**
* The account this invite is for.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "invitedBy": S.optionalWith(ReferencedUpsertUser, { nullable: true }),
  "acceptedBy": S.optionalWith(NullableReferencedUpsertUser, { nullable: true })
}) {}

export class UpdateAccountInviteRelationships extends S.Class<UpdateAccountInviteRelationships>("UpdateAccountInviteRelationships")({
  /**
* The account this invite is for.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "invitedBy": S.optionalWith(ReferencedUpsertUser, { nullable: true }),
  "acceptedBy": S.optionalWith(NullableReferencedUpsertUser, { nullable: true })
}) {}

export class CreateAuthProfileRelationships extends S.Class<CreateAuthProfileRelationships>("CreateAuthProfileRelationships")({
  "user": ReferencedUpsertUser
}) {}

export class UpdateAuthProfileRelationships extends S.Class<UpdateAuthProfileRelationships>("UpdateAuthProfileRelationships")({
  "user": S.optionalWith(ReferencedUpsertUser, { nullable: true })
}) {}

export class CreateUserAccountRoleRelationships extends S.Class<CreateUserAccountRoleRelationships>("CreateUserAccountRoleRelationships")({
  /**
* The user being granted permissions.
*/
"user": ReferencedUpsertUser,
  /**
* The account for which permissions are granted.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true })
}) {}

export class UpdateUserAccountRoleRelationships extends S.Class<UpdateUserAccountRoleRelationships>("UpdateUserAccountRoleRelationships")({
  /**
* The user being granted permissions.
*/
"user": S.optionalWith(ReferencedUpsertUser, { nullable: true }),
  /**
* The account for which permissions are granted.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true })
}) {}

export class CreateAccountProviderContactRelationships extends S.Class<CreateAccountProviderContactRelationships>("CreateAccountProviderContactRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true }),
  "provider": ReferencedUpsertAccountProvider,
  "user": S.optionalWith(NullableReferencedUpsertUser, { nullable: true })
}) {}

export class UpdateAccountProviderContactRelationships extends S.Class<UpdateAccountProviderContactRelationships>("UpdateAccountProviderContactRelationships")({
  "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
  "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true }),
  "provider": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "user": S.optionalWith(NullableReferencedUpsertUser, { nullable: true })
}) {}

export class CreateAccountProviderRelationships extends S.Class<CreateAccountProviderRelationships>("CreateAccountProviderRelationships")({
  /**
* The account this provider is attached to.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "provider": S.optionalWith(NullableReferencedUpsertProvider, { nullable: true })
}) {}

export class UpdateAccountProviderRelationships extends S.Class<UpdateAccountProviderRelationships>("UpdateAccountProviderRelationships")({
  /**
* The account this provider is attached to.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "provider": S.optionalWith(NullableReferencedUpsertProvider, { nullable: true })
}) {}

export class CreateThirdPartyRelationships extends S.Class<CreateThirdPartyRelationships>("CreateThirdPartyRelationships")({
  "project": ReferencedUpsertProject
}) {}

export class UpdateThirdPartyRelationships extends S.Class<UpdateThirdPartyRelationships>("UpdateThirdPartyRelationships")({
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true })
}) {}

export class CreateThirdPartyIndividualRelationships extends S.Class<CreateThirdPartyIndividualRelationships>("CreateThirdPartyIndividualRelationships")({
  "project": ReferencedUpsertProject
}) {}

export class UpdateThirdPartyIndividualRelationships extends S.Class<UpdateThirdPartyIndividualRelationships>("UpdateThirdPartyIndividualRelationships")({
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true })
}) {}

export const FileControllerPostFileProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type FileControllerPostFileProjectsRefRequest = typeof FileControllerPostFileProjectsRefRequest

export const FileControllerDeleteFileProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type FileControllerDeleteFileProjectsRefRequest = typeof FileControllerDeleteFileProjectsRefRequest

export const WarrantyControllerPostWarrantyProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type WarrantyControllerPostWarrantyProjectsRefRequest = typeof WarrantyControllerPostWarrantyProjectsRefRequest

export const WarrantyControllerDeleteWarrantyProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type WarrantyControllerDeleteWarrantyProjectsRefRequest = typeof WarrantyControllerDeleteWarrantyProjectsRefRequest

export const UserManualControllerPostUserManualProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type UserManualControllerPostUserManualProjectsRefRequest = typeof UserManualControllerPostUserManualProjectsRefRequest

export const UserManualControllerDeleteUserManualProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type UserManualControllerDeleteUserManualProjectsRefRequest = typeof UserManualControllerDeleteUserManualProjectsRefRequest

export const ScopeOfLossControllerPostScopeOfLossProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ScopeOfLossControllerPostScopeOfLossProjectsRefRequest = typeof ScopeOfLossControllerPostScopeOfLossProjectsRefRequest

export const ScopeOfLossControllerDeleteScopeOfLossProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ScopeOfLossControllerDeleteScopeOfLossProjectsRefRequest = typeof ScopeOfLossControllerDeleteScopeOfLossProjectsRefRequest

export const RentRollControllerPostRentRollProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type RentRollControllerPostRentRollProjectsRefRequest = typeof RentRollControllerPostRentRollProjectsRefRequest

export const RentRollControllerDeleteRentRollProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type RentRollControllerDeleteRentRollProjectsRefRequest = typeof RentRollControllerDeleteRentRollProjectsRefRequest

export const ProductSpecControllerPostProductSpecProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ProductSpecControllerPostProductSpecProjectsRefRequest = typeof ProductSpecControllerPostProductSpecProjectsRefRequest

export const ProductSpecControllerDeleteProductSpecProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ProductSpecControllerDeleteProductSpecProjectsRefRequest = typeof ProductSpecControllerDeleteProductSpecProjectsRefRequest

export const PolicyJacketControllerPostPolicyJacketProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type PolicyJacketControllerPostPolicyJacketProjectsRefRequest = typeof PolicyJacketControllerPostPolicyJacketProjectsRefRequest

export const PolicyJacketControllerDeletePolicyJacketProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type PolicyJacketControllerDeletePolicyJacketProjectsRefRequest = typeof PolicyJacketControllerDeletePolicyJacketProjectsRefRequest

export const PoliceReportControllerPostPoliceReportProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type PoliceReportControllerPostPoliceReportProjectsRefRequest = typeof PoliceReportControllerPostPoliceReportProjectsRefRequest

export const PoliceReportControllerDeletePoliceReportProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type PoliceReportControllerDeletePoliceReportProjectsRefRequest = typeof PoliceReportControllerDeletePoliceReportProjectsRefRequest

export const PermitControllerPostPermitProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type PermitControllerPostPermitProjectsRefRequest = typeof PermitControllerPostPermitProjectsRefRequest

export const PermitControllerDeletePermitProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type PermitControllerDeletePermitProjectsRefRequest = typeof PermitControllerDeletePermitProjectsRefRequest

export const PaymentControllerPostPaymentProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type PaymentControllerPostPaymentProjectsRefRequest = typeof PaymentControllerPostPaymentProjectsRefRequest

export const PaymentControllerDeletePaymentProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type PaymentControllerDeletePaymentProjectsRefRequest = typeof PaymentControllerDeletePaymentProjectsRefRequest

export const ParamedicReportControllerPostParamedicReportProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ParamedicReportControllerPostParamedicReportProjectsRefRequest = typeof ParamedicReportControllerPostParamedicReportProjectsRefRequest

export const ParamedicReportControllerDeleteParamedicReportProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ParamedicReportControllerDeleteParamedicReportProjectsRefRequest = typeof ParamedicReportControllerDeleteParamedicReportProjectsRefRequest

export const InvoiceControllerPostInvoiceProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type InvoiceControllerPostInvoiceProjectsRefRequest = typeof InvoiceControllerPostInvoiceProjectsRefRequest

export const InvoiceControllerDeleteInvoiceProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type InvoiceControllerDeleteInvoiceProjectsRefRequest = typeof InvoiceControllerDeleteInvoiceProjectsRefRequest

export const IncidentReportControllerPostIncidentReportProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type IncidentReportControllerPostIncidentReportProjectsRefRequest = typeof IncidentReportControllerPostIncidentReportProjectsRefRequest

export const IncidentReportControllerDeleteIncidentReportProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type IncidentReportControllerDeleteIncidentReportProjectsRefRequest = typeof IncidentReportControllerDeleteIncidentReportProjectsRefRequest

export const FundingControllerPostFundingProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type FundingControllerPostFundingProjectsRefRequest = typeof FundingControllerPostFundingProjectsRefRequest

export const FundingControllerDeleteFundingProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type FundingControllerDeleteFundingProjectsRefRequest = typeof FundingControllerDeleteFundingProjectsRefRequest

export const EstimateControllerPostEstimateProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type EstimateControllerPostEstimateProjectsRefRequest = typeof EstimateControllerPostEstimateProjectsRefRequest

export const EstimateControllerDeleteEstimateProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type EstimateControllerDeleteEstimateProjectsRefRequest = typeof EstimateControllerDeleteEstimateProjectsRefRequest

export const DocumentControllerPostDocumentProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type DocumentControllerPostDocumentProjectsRefRequest = typeof DocumentControllerPostDocumentProjectsRefRequest

export const DocumentControllerDeleteDocumentProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type DocumentControllerDeleteDocumentProjectsRefRequest = typeof DocumentControllerDeleteDocumentProjectsRefRequest

export const DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRefRequest = typeof DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRefRequest

export const DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRefRequest = typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRefRequest

export const DeedControllerPostDeedProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type DeedControllerPostDeedProjectsRefRequest = typeof DeedControllerPostDeedProjectsRefRequest

export const DeedControllerDeleteDeedProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type DeedControllerDeleteDeedProjectsRefRequest = typeof DeedControllerDeleteDeedProjectsRefRequest

export const DeclarationsPageControllerPostDeclarationsPageProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type DeclarationsPageControllerPostDeclarationsPageProjectsRefRequest = typeof DeclarationsPageControllerPostDeclarationsPageProjectsRefRequest

export const DeclarationsPageControllerDeleteDeclarationsPageProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type DeclarationsPageControllerDeleteDeclarationsPageProjectsRefRequest = typeof DeclarationsPageControllerDeleteDeclarationsPageProjectsRefRequest

export const ContractControllerPostContractProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ContractControllerPostContractProjectsRefRequest = typeof ContractControllerPostContractProjectsRefRequest

export const ContractControllerDeleteContractProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ContractControllerDeleteContractProjectsRefRequest = typeof ContractControllerDeleteContractProjectsRefRequest

export const ChangeOrderControllerPostChangeOrderProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ChangeOrderControllerPostChangeOrderProjectsRefRequest = typeof ChangeOrderControllerPostChangeOrderProjectsRefRequest

export const ChangeOrderControllerDeleteChangeOrderProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type ChangeOrderControllerDeleteChangeOrderProjectsRefRequest = typeof ChangeOrderControllerDeleteChangeOrderProjectsRefRequest

export const BlueprintControllerPostBlueprintProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type BlueprintControllerPostBlueprintProjectsRefRequest = typeof BlueprintControllerPostBlueprintProjectsRefRequest

export const BlueprintControllerDeleteBlueprintProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type BlueprintControllerDeleteBlueprintProjectsRefRequest = typeof BlueprintControllerDeleteBlueprintProjectsRefRequest

export const AssetAppraisalControllerPostAssetAppraisalProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type AssetAppraisalControllerPostAssetAppraisalProjectsRefRequest = typeof AssetAppraisalControllerPostAssetAppraisalProjectsRefRequest

export const AssetAppraisalControllerDeleteAssetAppraisalProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type AssetAppraisalControllerDeleteAssetAppraisalProjectsRefRequest = typeof AssetAppraisalControllerDeleteAssetAppraisalProjectsRefRequest

export const AppraisalControllerPostAppraisalProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type AppraisalControllerPostAppraisalProjectsRefRequest = typeof AppraisalControllerPostAppraisalProjectsRefRequest

export const AppraisalControllerDeleteAppraisalProjectsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProject,
ReferencedUpsertProjectList))
export type AppraisalControllerDeleteAppraisalProjectsRefRequest = typeof AppraisalControllerDeleteAppraisalProjectsRefRequest

export const PolicyControllerPostPolicyAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PolicyControllerPostPolicyAssetsRefRequest = typeof PolicyControllerPostPolicyAssetsRefRequest

export const PolicyControllerDeletePolicyAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PolicyControllerDeletePolicyAssetsRefRequest = typeof PolicyControllerDeletePolicyAssetsRefRequest

export const PolicyTermControllerPostPolicyTermAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PolicyTermControllerPostPolicyTermAssetsRefRequest = typeof PolicyTermControllerPostPolicyTermAssetsRefRequest

export const PolicyTermControllerDeletePolicyTermAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PolicyTermControllerDeletePolicyTermAssetsRefRequest = typeof PolicyTermControllerDeletePolicyTermAssetsRefRequest

export const MediaControllerPostMediaAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type MediaControllerPostMediaAssetsRefRequest = typeof MediaControllerPostMediaAssetsRefRequest

export const MediaControllerDeleteMediaAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type MediaControllerDeleteMediaAssetsRefRequest = typeof MediaControllerDeleteMediaAssetsRefRequest

export const FileControllerPostFileAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type FileControllerPostFileAssetsRefRequest = typeof FileControllerPostFileAssetsRefRequest

export const FileControllerDeleteFileAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type FileControllerDeleteFileAssetsRefRequest = typeof FileControllerDeleteFileAssetsRefRequest

export const CoverageControllerPostCoverageAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type CoverageControllerPostCoverageAssetsRefRequest = typeof CoverageControllerPostCoverageAssetsRefRequest

export const CoverageControllerDeleteCoverageAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type CoverageControllerDeleteCoverageAssetsRefRequest = typeof CoverageControllerDeleteCoverageAssetsRefRequest

export const WarrantyControllerPostWarrantyAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type WarrantyControllerPostWarrantyAssetsRefRequest = typeof WarrantyControllerPostWarrantyAssetsRefRequest

export const WarrantyControllerDeleteWarrantyAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type WarrantyControllerDeleteWarrantyAssetsRefRequest = typeof WarrantyControllerDeleteWarrantyAssetsRefRequest

export const UserManualControllerPostUserManualAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type UserManualControllerPostUserManualAssetsRefRequest = typeof UserManualControllerPostUserManualAssetsRefRequest

export const UserManualControllerDeleteUserManualAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type UserManualControllerDeleteUserManualAssetsRefRequest = typeof UserManualControllerDeleteUserManualAssetsRefRequest

export const ScopeOfLossControllerPostScopeOfLossAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ScopeOfLossControllerPostScopeOfLossAssetsRefRequest = typeof ScopeOfLossControllerPostScopeOfLossAssetsRefRequest

export const ScopeOfLossControllerDeleteScopeOfLossAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ScopeOfLossControllerDeleteScopeOfLossAssetsRefRequest = typeof ScopeOfLossControllerDeleteScopeOfLossAssetsRefRequest

export const RentRollControllerPostRentRollAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type RentRollControllerPostRentRollAssetsRefRequest = typeof RentRollControllerPostRentRollAssetsRefRequest

export const RentRollControllerDeleteRentRollAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type RentRollControllerDeleteRentRollAssetsRefRequest = typeof RentRollControllerDeleteRentRollAssetsRefRequest

export const ProductSpecControllerPostProductSpecAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ProductSpecControllerPostProductSpecAssetsRefRequest = typeof ProductSpecControllerPostProductSpecAssetsRefRequest

export const ProductSpecControllerDeleteProductSpecAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ProductSpecControllerDeleteProductSpecAssetsRefRequest = typeof ProductSpecControllerDeleteProductSpecAssetsRefRequest

export const PolicyJacketControllerPostPolicyJacketAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PolicyJacketControllerPostPolicyJacketAssetsRefRequest = typeof PolicyJacketControllerPostPolicyJacketAssetsRefRequest

export const PolicyJacketControllerDeletePolicyJacketAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PolicyJacketControllerDeletePolicyJacketAssetsRefRequest = typeof PolicyJacketControllerDeletePolicyJacketAssetsRefRequest

export const PoliceReportControllerPostPoliceReportAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PoliceReportControllerPostPoliceReportAssetsRefRequest = typeof PoliceReportControllerPostPoliceReportAssetsRefRequest

export const PoliceReportControllerDeletePoliceReportAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PoliceReportControllerDeletePoliceReportAssetsRefRequest = typeof PoliceReportControllerDeletePoliceReportAssetsRefRequest

export const PermitControllerPostPermitAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PermitControllerPostPermitAssetsRefRequest = typeof PermitControllerPostPermitAssetsRefRequest

export const PermitControllerDeletePermitAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PermitControllerDeletePermitAssetsRefRequest = typeof PermitControllerDeletePermitAssetsRefRequest

export const PaymentControllerPostPaymentAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PaymentControllerPostPaymentAssetsRefRequest = typeof PaymentControllerPostPaymentAssetsRefRequest

export const PaymentControllerDeletePaymentAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type PaymentControllerDeletePaymentAssetsRefRequest = typeof PaymentControllerDeletePaymentAssetsRefRequest

export const ParamedicReportControllerPostParamedicReportAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ParamedicReportControllerPostParamedicReportAssetsRefRequest = typeof ParamedicReportControllerPostParamedicReportAssetsRefRequest

export const ParamedicReportControllerDeleteParamedicReportAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ParamedicReportControllerDeleteParamedicReportAssetsRefRequest = typeof ParamedicReportControllerDeleteParamedicReportAssetsRefRequest

export const InvoiceControllerPostInvoiceAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type InvoiceControllerPostInvoiceAssetsRefRequest = typeof InvoiceControllerPostInvoiceAssetsRefRequest

export const InvoiceControllerDeleteInvoiceAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type InvoiceControllerDeleteInvoiceAssetsRefRequest = typeof InvoiceControllerDeleteInvoiceAssetsRefRequest

export const IncidentReportControllerPostIncidentReportAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type IncidentReportControllerPostIncidentReportAssetsRefRequest = typeof IncidentReportControllerPostIncidentReportAssetsRefRequest

export const IncidentReportControllerDeleteIncidentReportAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type IncidentReportControllerDeleteIncidentReportAssetsRefRequest = typeof IncidentReportControllerDeleteIncidentReportAssetsRefRequest

export const FundingControllerPostFundingAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type FundingControllerPostFundingAssetsRefRequest = typeof FundingControllerPostFundingAssetsRefRequest

export const FundingControllerDeleteFundingAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type FundingControllerDeleteFundingAssetsRefRequest = typeof FundingControllerDeleteFundingAssetsRefRequest

export const EstimateControllerPostEstimateAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type EstimateControllerPostEstimateAssetsRefRequest = typeof EstimateControllerPostEstimateAssetsRefRequest

export const EstimateControllerDeleteEstimateAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type EstimateControllerDeleteEstimateAssetsRefRequest = typeof EstimateControllerDeleteEstimateAssetsRefRequest

export const DocumentControllerPostDocumentAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type DocumentControllerPostDocumentAssetsRefRequest = typeof DocumentControllerPostDocumentAssetsRefRequest

export const DocumentControllerDeleteDocumentAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type DocumentControllerDeleteDocumentAssetsRefRequest = typeof DocumentControllerDeleteDocumentAssetsRefRequest

export const DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRefRequest = typeof DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRefRequest

export const DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRefRequest = typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRefRequest

export const DeedControllerPostDeedAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type DeedControllerPostDeedAssetsRefRequest = typeof DeedControllerPostDeedAssetsRefRequest

export const DeedControllerDeleteDeedAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type DeedControllerDeleteDeedAssetsRefRequest = typeof DeedControllerDeleteDeedAssetsRefRequest

export const DeclarationsPageControllerPostDeclarationsPageAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type DeclarationsPageControllerPostDeclarationsPageAssetsRefRequest = typeof DeclarationsPageControllerPostDeclarationsPageAssetsRefRequest

export const DeclarationsPageControllerDeleteDeclarationsPageAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type DeclarationsPageControllerDeleteDeclarationsPageAssetsRefRequest = typeof DeclarationsPageControllerDeleteDeclarationsPageAssetsRefRequest

export const ContractControllerPostContractAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ContractControllerPostContractAssetsRefRequest = typeof ContractControllerPostContractAssetsRefRequest

export const ContractControllerDeleteContractAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ContractControllerDeleteContractAssetsRefRequest = typeof ContractControllerDeleteContractAssetsRefRequest

export const ChangeOrderControllerPostChangeOrderAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ChangeOrderControllerPostChangeOrderAssetsRefRequest = typeof ChangeOrderControllerPostChangeOrderAssetsRefRequest

export const ChangeOrderControllerDeleteChangeOrderAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type ChangeOrderControllerDeleteChangeOrderAssetsRefRequest = typeof ChangeOrderControllerDeleteChangeOrderAssetsRefRequest

export const BlueprintControllerPostBlueprintAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type BlueprintControllerPostBlueprintAssetsRefRequest = typeof BlueprintControllerPostBlueprintAssetsRefRequest

export const BlueprintControllerDeleteBlueprintAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type BlueprintControllerDeleteBlueprintAssetsRefRequest = typeof BlueprintControllerDeleteBlueprintAssetsRefRequest

export const AssetAppraisalControllerPostAssetAppraisalAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type AssetAppraisalControllerPostAssetAppraisalAssetsRefRequest = typeof AssetAppraisalControllerPostAssetAppraisalAssetsRefRequest

export const AssetAppraisalControllerDeleteAssetAppraisalAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type AssetAppraisalControllerDeleteAssetAppraisalAssetsRefRequest = typeof AssetAppraisalControllerDeleteAssetAppraisalAssetsRefRequest

export const AppraisalControllerPostAppraisalAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type AppraisalControllerPostAppraisalAssetsRefRequest = typeof AppraisalControllerPostAppraisalAssetsRefRequest

export const AppraisalControllerDeleteAppraisalAssetsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertAsset,
ReferencedUpsertAssetList))
export type AppraisalControllerDeleteAppraisalAssetsRefRequest = typeof AppraisalControllerDeleteAppraisalAssetsRefRequest

export class CreateAccountRelationships extends S.Class<CreateAccountRelationships>("CreateAccountRelationships")({
  "owner": ReferencedUpsertUser,
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  /**
* The user's roles across various accounts
*/
"userRoles": S.optionalWith(ReferencedUpsertUserAccountRoleList, { nullable: true }),
  "defaultCurrency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class UpdateAccountRelationships extends S.Class<UpdateAccountRelationships>("UpdateAccountRelationships")({
  "owner": S.optionalWith(ReferencedUpsertUser, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  /**
* The user's roles across various accounts
*/
"userRoles": S.optionalWith(ReferencedUpsertUserAccountRoleList, { nullable: true }),
  "defaultCurrency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class CreateProjectRelationships extends S.Class<CreateProjectRelationships>("CreateProjectRelationships")({
  /**
* The account that owns this project.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "mediaAttachments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true })
}) {}

export class UpdateProjectRelationships extends S.Class<UpdateProjectRelationships>("UpdateProjectRelationships")({
  /**
* The account that owns this project.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "mediaAttachments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true })
}) {}

export const ProjectControllerPostProjectMediaAttachmentsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProjectMedia,
ReferencedUpsertProjectMediaList))
export type ProjectControllerPostProjectMediaAttachmentsRefRequest = typeof ProjectControllerPostProjectMediaAttachmentsRefRequest

export const ProjectControllerDeleteProjectMediaAttachmentsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProjectMedia,
ReferencedUpsertProjectMediaList))
export type ProjectControllerDeleteProjectMediaAttachmentsRefRequest = typeof ProjectControllerDeleteProjectMediaAttachmentsRefRequest

export const MediaControllerPostMediaProjectAssignmentsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProjectMedia,
ReferencedUpsertProjectMediaList))
export type MediaControllerPostMediaProjectAssignmentsRefRequest = typeof MediaControllerPostMediaProjectAssignmentsRefRequest

export const MediaControllerDeleteMediaProjectAssignmentsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProjectMedia,
ReferencedUpsertProjectMediaList))
export type MediaControllerDeleteMediaProjectAssignmentsRefRequest = typeof MediaControllerDeleteMediaProjectAssignmentsRefRequest

export const IncidentControllerPostIncidentMediaAttachmentsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProjectMedia,
ReferencedUpsertProjectMediaList))
export type IncidentControllerPostIncidentMediaAttachmentsRefRequest = typeof IncidentControllerPostIncidentMediaAttachmentsRefRequest

export const IncidentControllerDeleteIncidentMediaAttachmentsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertProjectMedia,
ReferencedUpsertProjectMediaList))
export type IncidentControllerDeleteIncidentMediaAttachmentsRefRequest = typeof IncidentControllerDeleteIncidentMediaAttachmentsRefRequest

export class CreateDisasterRelationships extends S.Class<CreateDisasterRelationships>("CreateDisasterRelationships")({
  "incidentType": S.optionalWith(ReferencedUpsertIncidentType, { nullable: true })
}) {}

export class UpdateDisasterRelationships extends S.Class<UpdateDisasterRelationships>("UpdateDisasterRelationships")({
  "incidentType": S.optionalWith(ReferencedUpsertIncidentType, { nullable: true })
}) {}

export class CreateIncidentRelationships extends S.Class<CreateIncidentRelationships>("CreateIncidentRelationships")({
  /**
* The account that owns this project.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "mediaAttachments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true }),
  "type": ReferencedUpsertIncidentType,
  "disaster": S.optionalWith(NullableReferencedUpsertDisaster, { nullable: true })
}) {}

export class UpdateIncidentRelationships extends S.Class<UpdateIncidentRelationships>("UpdateIncidentRelationships")({
  /**
* The account that owns this project.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "mediaAttachments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true }),
  "type": S.optionalWith(ReferencedUpsertIncidentType, { nullable: true }),
  "disaster": S.optionalWith(NullableReferencedUpsertDisaster, { nullable: true })
}) {}

export class CreateProjectMediaRelationships extends S.Class<CreateProjectMediaRelationships>("CreateProjectMediaRelationships")({
  "media": ReferencedUpsertMedia,
  "project": ReferencedUpsertProject
}) {}

export class UpdateProjectMediaRelationships extends S.Class<UpdateProjectMediaRelationships>("UpdateProjectMediaRelationships")({
  "media": S.optionalWith(ReferencedUpsertMedia, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true })
}) {}

export class CreateFileProcessRelationships extends S.Class<CreateFileProcessRelationships>("CreateFileProcessRelationships")({
  "file": S.optionalWith(ReferencedUpsertFile, { nullable: true })
}) {}

export class UpdateFileProcessRelationships extends S.Class<UpdateFileProcessRelationships>("UpdateFileProcessRelationships")({
  "file": S.optionalWith(ReferencedUpsertFile, { nullable: true })
}) {}

export class CreateProjectImpactRelationships extends S.Class<CreateProjectImpactRelationships>("CreateProjectImpactRelationships")({
  "asset": ReferencedUpsertAsset,
  "project": ReferencedUpsertProject,
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true })
}) {}

export class UpdateProjectImpactRelationships extends S.Class<UpdateProjectImpactRelationships>("UpdateProjectImpactRelationships")({
  "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true })
}) {}

export const SpaceGroupControllerPostSpaceGroupSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type SpaceGroupControllerPostSpaceGroupSpacesRefRequest = typeof SpaceGroupControllerPostSpaceGroupSpacesRefRequest

export const SpaceGroupControllerDeleteSpaceGroupSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type SpaceGroupControllerDeleteSpaceGroupSpacesRefRequest = typeof SpaceGroupControllerDeleteSpaceGroupSpacesRefRequest

export const ProjectImpactControllerPostProjectImpactSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ProjectImpactControllerPostProjectImpactSpacesRefRequest = typeof ProjectImpactControllerPostProjectImpactSpacesRefRequest

export const ProjectImpactControllerDeleteProjectImpactSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ProjectImpactControllerDeleteProjectImpactSpacesRefRequest = typeof ProjectImpactControllerDeleteProjectImpactSpacesRefRequest

export const MediaControllerPostMediaSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type MediaControllerPostMediaSpacesRefRequest = typeof MediaControllerPostMediaSpacesRefRequest

export const MediaControllerDeleteMediaSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type MediaControllerDeleteMediaSpacesRefRequest = typeof MediaControllerDeleteMediaSpacesRefRequest

export const IncidentImpactControllerPostIncidentImpactSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type IncidentImpactControllerPostIncidentImpactSpacesRefRequest = typeof IncidentImpactControllerPostIncidentImpactSpacesRefRequest

export const IncidentImpactControllerDeleteIncidentImpactSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type IncidentImpactControllerDeleteIncidentImpactSpacesRefRequest = typeof IncidentImpactControllerDeleteIncidentImpactSpacesRefRequest

export const WarrantyControllerPostWarrantySpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type WarrantyControllerPostWarrantySpacesRefRequest = typeof WarrantyControllerPostWarrantySpacesRefRequest

export const WarrantyControllerDeleteWarrantySpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type WarrantyControllerDeleteWarrantySpacesRefRequest = typeof WarrantyControllerDeleteWarrantySpacesRefRequest

export const UserManualControllerPostUserManualSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type UserManualControllerPostUserManualSpacesRefRequest = typeof UserManualControllerPostUserManualSpacesRefRequest

export const UserManualControllerDeleteUserManualSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type UserManualControllerDeleteUserManualSpacesRefRequest = typeof UserManualControllerDeleteUserManualSpacesRefRequest

export const ScopeOfLossControllerPostScopeOfLossSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ScopeOfLossControllerPostScopeOfLossSpacesRefRequest = typeof ScopeOfLossControllerPostScopeOfLossSpacesRefRequest

export const ScopeOfLossControllerDeleteScopeOfLossSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ScopeOfLossControllerDeleteScopeOfLossSpacesRefRequest = typeof ScopeOfLossControllerDeleteScopeOfLossSpacesRefRequest

export const RentRollControllerPostRentRollSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type RentRollControllerPostRentRollSpacesRefRequest = typeof RentRollControllerPostRentRollSpacesRefRequest

export const RentRollControllerDeleteRentRollSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type RentRollControllerDeleteRentRollSpacesRefRequest = typeof RentRollControllerDeleteRentRollSpacesRefRequest

export const ProductSpecControllerPostProductSpecSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ProductSpecControllerPostProductSpecSpacesRefRequest = typeof ProductSpecControllerPostProductSpecSpacesRefRequest

export const ProductSpecControllerDeleteProductSpecSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ProductSpecControllerDeleteProductSpecSpacesRefRequest = typeof ProductSpecControllerDeleteProductSpecSpacesRefRequest

export const PolicyJacketControllerPostPolicyJacketSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type PolicyJacketControllerPostPolicyJacketSpacesRefRequest = typeof PolicyJacketControllerPostPolicyJacketSpacesRefRequest

export const PolicyJacketControllerDeletePolicyJacketSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type PolicyJacketControllerDeletePolicyJacketSpacesRefRequest = typeof PolicyJacketControllerDeletePolicyJacketSpacesRefRequest

export const PoliceReportControllerPostPoliceReportSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type PoliceReportControllerPostPoliceReportSpacesRefRequest = typeof PoliceReportControllerPostPoliceReportSpacesRefRequest

export const PoliceReportControllerDeletePoliceReportSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type PoliceReportControllerDeletePoliceReportSpacesRefRequest = typeof PoliceReportControllerDeletePoliceReportSpacesRefRequest

export const PermitControllerPostPermitSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type PermitControllerPostPermitSpacesRefRequest = typeof PermitControllerPostPermitSpacesRefRequest

export const PermitControllerDeletePermitSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type PermitControllerDeletePermitSpacesRefRequest = typeof PermitControllerDeletePermitSpacesRefRequest

export const PaymentControllerPostPaymentSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type PaymentControllerPostPaymentSpacesRefRequest = typeof PaymentControllerPostPaymentSpacesRefRequest

export const PaymentControllerDeletePaymentSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type PaymentControllerDeletePaymentSpacesRefRequest = typeof PaymentControllerDeletePaymentSpacesRefRequest

export const ParamedicReportControllerPostParamedicReportSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ParamedicReportControllerPostParamedicReportSpacesRefRequest = typeof ParamedicReportControllerPostParamedicReportSpacesRefRequest

export const ParamedicReportControllerDeleteParamedicReportSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ParamedicReportControllerDeleteParamedicReportSpacesRefRequest = typeof ParamedicReportControllerDeleteParamedicReportSpacesRefRequest

export const InvoiceControllerPostInvoiceSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type InvoiceControllerPostInvoiceSpacesRefRequest = typeof InvoiceControllerPostInvoiceSpacesRefRequest

export const InvoiceControllerDeleteInvoiceSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type InvoiceControllerDeleteInvoiceSpacesRefRequest = typeof InvoiceControllerDeleteInvoiceSpacesRefRequest

export const IncidentReportControllerPostIncidentReportSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type IncidentReportControllerPostIncidentReportSpacesRefRequest = typeof IncidentReportControllerPostIncidentReportSpacesRefRequest

export const IncidentReportControllerDeleteIncidentReportSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type IncidentReportControllerDeleteIncidentReportSpacesRefRequest = typeof IncidentReportControllerDeleteIncidentReportSpacesRefRequest

export const FundingControllerPostFundingSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type FundingControllerPostFundingSpacesRefRequest = typeof FundingControllerPostFundingSpacesRefRequest

export const FundingControllerDeleteFundingSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type FundingControllerDeleteFundingSpacesRefRequest = typeof FundingControllerDeleteFundingSpacesRefRequest

export const EstimateControllerPostEstimateSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type EstimateControllerPostEstimateSpacesRefRequest = typeof EstimateControllerPostEstimateSpacesRefRequest

export const EstimateControllerDeleteEstimateSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type EstimateControllerDeleteEstimateSpacesRefRequest = typeof EstimateControllerDeleteEstimateSpacesRefRequest

export const DocumentControllerPostDocumentSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type DocumentControllerPostDocumentSpacesRefRequest = typeof DocumentControllerPostDocumentSpacesRefRequest

export const DocumentControllerDeleteDocumentSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type DocumentControllerDeleteDocumentSpacesRefRequest = typeof DocumentControllerDeleteDocumentSpacesRefRequest

export const DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRefRequest = typeof DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRefRequest

export const DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRefRequest = typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRefRequest

export const DeedControllerPostDeedSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type DeedControllerPostDeedSpacesRefRequest = typeof DeedControllerPostDeedSpacesRefRequest

export const DeedControllerDeleteDeedSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type DeedControllerDeleteDeedSpacesRefRequest = typeof DeedControllerDeleteDeedSpacesRefRequest

export const DeclarationsPageControllerPostDeclarationsPageSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type DeclarationsPageControllerPostDeclarationsPageSpacesRefRequest = typeof DeclarationsPageControllerPostDeclarationsPageSpacesRefRequest

export const DeclarationsPageControllerDeleteDeclarationsPageSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type DeclarationsPageControllerDeleteDeclarationsPageSpacesRefRequest = typeof DeclarationsPageControllerDeleteDeclarationsPageSpacesRefRequest

export const ContractControllerPostContractSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ContractControllerPostContractSpacesRefRequest = typeof ContractControllerPostContractSpacesRefRequest

export const ContractControllerDeleteContractSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ContractControllerDeleteContractSpacesRefRequest = typeof ContractControllerDeleteContractSpacesRefRequest

export const ChangeOrderControllerPostChangeOrderSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ChangeOrderControllerPostChangeOrderSpacesRefRequest = typeof ChangeOrderControllerPostChangeOrderSpacesRefRequest

export const ChangeOrderControllerDeleteChangeOrderSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type ChangeOrderControllerDeleteChangeOrderSpacesRefRequest = typeof ChangeOrderControllerDeleteChangeOrderSpacesRefRequest

export const BlueprintControllerPostBlueprintSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type BlueprintControllerPostBlueprintSpacesRefRequest = typeof BlueprintControllerPostBlueprintSpacesRefRequest

export const BlueprintControllerDeleteBlueprintSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type BlueprintControllerDeleteBlueprintSpacesRefRequest = typeof BlueprintControllerDeleteBlueprintSpacesRefRequest

export const AssetAppraisalControllerPostAssetAppraisalSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type AssetAppraisalControllerPostAssetAppraisalSpacesRefRequest = typeof AssetAppraisalControllerPostAssetAppraisalSpacesRefRequest

export const AssetAppraisalControllerDeleteAssetAppraisalSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type AssetAppraisalControllerDeleteAssetAppraisalSpacesRefRequest = typeof AssetAppraisalControllerDeleteAssetAppraisalSpacesRefRequest

export const AppraisalControllerPostAppraisalSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type AppraisalControllerPostAppraisalSpacesRefRequest = typeof AppraisalControllerPostAppraisalSpacesRefRequest

export const AppraisalControllerDeleteAppraisalSpacesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSpace,
ReferencedUpsertSpaceList))
export type AppraisalControllerDeleteAppraisalSpacesRefRequest = typeof AppraisalControllerDeleteAppraisalSpacesRefRequest

export class CreateMediaRelationships extends S.Class<CreateMediaRelationships>("CreateMediaRelationships")({
  /**
* The account's UUID
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": ReferencedUpsertFile,
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projectAssignments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true }),
  "entrySourceAnnotations": S.optionalWith(ReferencedUpsertEntrySourceMediaList, { nullable: true })
}) {}

export class UpdateMediaRelationships extends S.Class<UpdateMediaRelationships>("UpdateMediaRelationships")({
  /**
* The account's UUID
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(ReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projectAssignments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true }),
  "entrySourceAnnotations": S.optionalWith(ReferencedUpsertEntrySourceMediaList, { nullable: true })
}) {}

export class CreateItemizableFinancialDocumentStatsRelationships extends S.Class<CreateItemizableFinancialDocumentStatsRelationships>("CreateItemizableFinancialDocumentStatsRelationships")({
  "object": S.optionalWith(ReferencedUpsertItemizableFinancialDocument, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(ReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateItemizableFinancialDocumentStatsRelationships extends S.Class<UpdateItemizableFinancialDocumentStatsRelationships>("UpdateItemizableFinancialDocumentStatsRelationships")({
  "object": S.optionalWith(ReferencedUpsertItemizableFinancialDocument, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(ReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateFileRelationships extends S.Class<CreateFileRelationships>("CreateFileRelationships")({
  /**
* ID for the account to which this file belongs.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "processes": S.optionalWith(ReferencedUpsertFileProcessList, { nullable: true }),
  "media": S.optionalWith(ReferencedUpsertMediaList, { nullable: true }),
  "documents": S.optionalWith(ReferencedUpsertDocumentList, { nullable: true }),
  "addedBy": S.optionalWith(ReferencedUpsertUser, { nullable: true })
}) {}

export class UpdateFileRelationships extends S.Class<UpdateFileRelationships>("UpdateFileRelationships")({
  /**
* ID for the account to which this file belongs.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "processes": S.optionalWith(ReferencedUpsertFileProcessList, { nullable: true }),
  "media": S.optionalWith(ReferencedUpsertMediaList, { nullable: true }),
  "documents": S.optionalWith(ReferencedUpsertDocumentList, { nullable: true }),
  "addedBy": S.optionalWith(ReferencedUpsertUser, { nullable: true })
}) {}

export class CreateAssetRelationships extends S.Class<CreateAssetRelationships>("CreateAssetRelationships")({
  "assetType": ReferencedUpsertAssetType,
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertAssetAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true })
}) {}

export class UpdateAssetRelationships extends S.Class<UpdateAssetRelationships>("UpdateAssetRelationships")({
  "assetType": S.optionalWith(ReferencedUpsertAssetType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertAssetAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true })
}) {}

export class CreatePerilRelationships extends S.Class<CreatePerilRelationships>("CreatePerilRelationships")({
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdatePerilRelationships extends S.Class<UpdatePerilRelationships>("UpdatePerilRelationships")({
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateIncidentClassRelationships extends S.Class<CreateIncidentClassRelationships>("CreateIncidentClassRelationships")({
  "types": S.optionalWith(ReferencedUpsertIncidentTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateIncidentClassRelationships extends S.Class<UpdateIncidentClassRelationships>("UpdateIncidentClassRelationships")({
  "types": S.optionalWith(ReferencedUpsertIncidentTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateServiceTypeRelationships extends S.Class<CreateServiceTypeRelationships>("CreateServiceTypeRelationships")({
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateServiceTypeRelationships extends S.Class<UpdateServiceTypeRelationships>("UpdateServiceTypeRelationships")({
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateDwellingRelationships extends S.Class<CreateDwellingRelationships>("CreateDwellingRelationships")({
  "assetType": ReferencedUpsertAssetType,
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertAssetAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
  "address": ReferencedUpsertAddress
}) {}

export class UpdateDwellingRelationships extends S.Class<UpdateDwellingRelationships>("UpdateDwellingRelationships")({
  "assetType": S.optionalWith(ReferencedUpsertAssetType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertAssetAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
  "address": S.optionalWith(ReferencedUpsertAddress, { nullable: true })
}) {}

export class CreateAssetAppraisalRelationships extends S.Class<CreateAssetAppraisalRelationships>("CreateAssetAppraisalRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "asset": ReferencedUpsertAsset
}) {}

export class UpdateAssetAppraisalRelationships extends S.Class<UpdateAssetAppraisalRelationships>("UpdateAssetAppraisalRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true })
}) {}

export class CreateDocumentRelationships extends S.Class<CreateDocumentRelationships>("CreateDocumentRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateDocumentRelationships extends S.Class<UpdateDocumentRelationships>("UpdateDocumentRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateIncidentReportRelationships extends S.Class<CreateIncidentReportRelationships>("CreateIncidentReportRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateIncidentReportRelationships extends S.Class<UpdateIncidentReportRelationships>("UpdateIncidentReportRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreatePoliceReportRelationships extends S.Class<CreatePoliceReportRelationships>("CreatePoliceReportRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdatePoliceReportRelationships extends S.Class<UpdatePoliceReportRelationships>("UpdatePoliceReportRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateParamedicReportRelationships extends S.Class<CreateParamedicReportRelationships>("CreateParamedicReportRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateParamedicReportRelationships extends S.Class<UpdateParamedicReportRelationships>("UpdateParamedicReportRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateContractRelationships extends S.Class<CreateContractRelationships>("CreateContractRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateContractRelationships extends S.Class<UpdateContractRelationships>("UpdateContractRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateRentRollRelationships extends S.Class<CreateRentRollRelationships>("CreateRentRollRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateRentRollRelationships extends S.Class<UpdateRentRollRelationships>("UpdateRentRollRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreatePermitRelationships extends S.Class<CreatePermitRelationships>("CreatePermitRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdatePermitRelationships extends S.Class<UpdatePermitRelationships>("UpdatePermitRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateBlueprintRelationships extends S.Class<CreateBlueprintRelationships>("CreateBlueprintRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateBlueprintRelationships extends S.Class<UpdateBlueprintRelationships>("UpdateBlueprintRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateDeclarationsPageRelationships extends S.Class<CreateDeclarationsPageRelationships>("CreateDeclarationsPageRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateDeclarationsPageRelationships extends S.Class<UpdateDeclarationsPageRelationships>("UpdateDeclarationsPageRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreatePolicyJacketRelationships extends S.Class<CreatePolicyJacketRelationships>("CreatePolicyJacketRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdatePolicyJacketRelationships extends S.Class<UpdatePolicyJacketRelationships>("UpdatePolicyJacketRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateScopeOfLossRelationships extends S.Class<CreateScopeOfLossRelationships>("CreateScopeOfLossRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateScopeOfLossRelationships extends S.Class<UpdateScopeOfLossRelationships>("UpdateScopeOfLossRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateDeliveryPaperworkRelationships extends S.Class<CreateDeliveryPaperworkRelationships>("CreateDeliveryPaperworkRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateDeliveryPaperworkRelationships extends S.Class<UpdateDeliveryPaperworkRelationships>("UpdateDeliveryPaperworkRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateProductSpecRelationships extends S.Class<CreateProductSpecRelationships>("CreateProductSpecRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateProductSpecRelationships extends S.Class<UpdateProductSpecRelationships>("UpdateProductSpecRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateUserManualRelationships extends S.Class<CreateUserManualRelationships>("CreateUserManualRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateUserManualRelationships extends S.Class<UpdateUserManualRelationships>("UpdateUserManualRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateWarrantyRelationships extends S.Class<CreateWarrantyRelationships>("CreateWarrantyRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateWarrantyRelationships extends S.Class<UpdateWarrantyRelationships>("UpdateWarrantyRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateDeedRelationships extends S.Class<CreateDeedRelationships>("CreateDeedRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class UpdateDeedRelationships extends S.Class<UpdateDeedRelationships>("UpdateDeedRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {}

export class CreateFinancialDocumentRelationships extends S.Class<CreateFinancialDocumentRelationships>("CreateFinancialDocumentRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class UpdateFinancialDocumentRelationships extends S.Class<UpdateFinancialDocumentRelationships>("UpdateFinancialDocumentRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class CreateDocumentClassRelationships extends S.Class<CreateDocumentClassRelationships>("CreateDocumentClassRelationships")({
  "types": S.optionalWith(ReferencedUpsertDocumentTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateDocumentClassRelationships extends S.Class<UpdateDocumentClassRelationships>("UpdateDocumentClassRelationships")({
  "types": S.optionalWith(ReferencedUpsertDocumentTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateDocumentTypeRelationships extends S.Class<CreateDocumentTypeRelationships>("CreateDocumentTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertDocumentClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateDocumentTypeRelationships extends S.Class<UpdateDocumentTypeRelationships>("UpdateDocumentTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertDocumentClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateSpaceGroupRelationships extends S.Class<CreateSpaceGroupRelationships>("CreateSpaceGroupRelationships")({
  "type": ReferencedUpsertSpaceType,
  "asset": ReferencedUpsertAsset,
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true })
}) {}

export class UpdateSpaceGroupRelationships extends S.Class<UpdateSpaceGroupRelationships>("UpdateSpaceGroupRelationships")({
  "type": S.optionalWith(ReferencedUpsertSpaceType, { nullable: true }),
  "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true })
}) {}

export class CreateSpaceRelationships extends S.Class<CreateSpaceRelationships>("CreateSpaceRelationships")({
  "type": ReferencedUpsertSpaceType,
  "group": ReferencedUpsertSpaceGroup,
  /**
* The asset to which this space belongs.
*/
"asset": ReferencedUpsertAsset
}) {}

export class UpdateSpaceRelationships extends S.Class<UpdateSpaceRelationships>("UpdateSpaceRelationships")({
  "type": S.optionalWith(ReferencedUpsertSpaceType, { nullable: true }),
  "group": S.optionalWith(ReferencedUpsertSpaceGroup, { nullable: true }),
  /**
* The asset to which this space belongs.
*/
"asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true })
}) {}

export class CreateSpaceTypeRelationships extends S.Class<CreateSpaceTypeRelationships>("CreateSpaceTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertSpaceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedUpsertSpaceGroupTypeList, { nullable: true })
}) {}

export class UpdateSpaceTypeRelationships extends S.Class<UpdateSpaceTypeRelationships>("UpdateSpaceTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertSpaceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedUpsertSpaceGroupTypeList, { nullable: true })
}) {}

export class CreateSpaceCategoryRelationships extends S.Class<CreateSpaceCategoryRelationships>("CreateSpaceCategoryRelationships")({
  "classes": S.optionalWith(ReferencedUpsertSpaceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedUpsertSpaceGroupTypeList, { nullable: true })
}) {}

export class UpdateSpaceCategoryRelationships extends S.Class<UpdateSpaceCategoryRelationships>("UpdateSpaceCategoryRelationships")({
  "classes": S.optionalWith(ReferencedUpsertSpaceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedUpsertSpaceGroupTypeList, { nullable: true })
}) {}

export class CreateSpaceClassRelationships extends S.Class<CreateSpaceClassRelationships>("CreateSpaceClassRelationships")({
  "categories": S.optionalWith(ReferencedUpsertSpaceCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedUpsertSpaceTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedUpsertSpaceGroupTypeList, { nullable: true })
}) {}

export class UpdateSpaceClassRelationships extends S.Class<UpdateSpaceClassRelationships>("UpdateSpaceClassRelationships")({
  "categories": S.optionalWith(ReferencedUpsertSpaceCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedUpsertSpaceTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "groupTypes": S.optionalWith(ReferencedUpsertSpaceGroupTypeList, { nullable: true })
}) {}

export class CreateSpaceGroupTypeRelationships extends S.Class<CreateSpaceGroupTypeRelationships>("CreateSpaceGroupTypeRelationships")({
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {}

export class UpdateSpaceGroupTypeRelationships extends S.Class<UpdateSpaceGroupTypeRelationships>("UpdateSpaceGroupTypeRelationships")({
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {}

export class CreateBucketClassRelationships extends S.Class<CreateBucketClassRelationships>("CreateBucketClassRelationships")({
  "types": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateBucketClassRelationships extends S.Class<UpdateBucketClassRelationships>("UpdateBucketClassRelationships")({
  "types": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateBucketTypeRelationships extends S.Class<CreateBucketTypeRelationships>("CreateBucketTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertBucketClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateBucketTypeRelationships extends S.Class<UpdateBucketTypeRelationships>("UpdateBucketTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertBucketClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateAddressRelationships extends S.Class<CreateAddressRelationships>("CreateAddressRelationships")({
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "country": ReferencedUpsertCountry
}) {}

export class UpdateAddressRelationships extends S.Class<UpdateAddressRelationships>("UpdateAddressRelationships")({
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "country": S.optionalWith(ReferencedUpsertCountry, { nullable: true })
}) {}

export class CreateThirdPartyDwellingRelationships extends S.Class<CreateThirdPartyDwellingRelationships>("CreateThirdPartyDwellingRelationships")({
  "project": ReferencedUpsertProject,
  "country": ReferencedUpsertCountry
}) {}

export class UpdateThirdPartyDwellingRelationships extends S.Class<UpdateThirdPartyDwellingRelationships>("UpdateThirdPartyDwellingRelationships")({
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "country": S.optionalWith(ReferencedUpsertCountry, { nullable: true })
}) {}

export class CreateItemizableFinancialDocumentRelationships extends S.Class<CreateItemizableFinancialDocumentRelationships>("CreateItemizableFinancialDocumentRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true })
}) {}

export class UpdateItemizableFinancialDocumentRelationships extends S.Class<UpdateItemizableFinancialDocumentRelationships>("UpdateItemizableFinancialDocumentRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true })
}) {}

export const EstimateLineControllerPostEstimateLineChangeOrdersRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertChangeOrderLine,
ReferencedUpsertChangeOrderLineList))
export type EstimateLineControllerPostEstimateLineChangeOrdersRefRequest = typeof EstimateLineControllerPostEstimateLineChangeOrdersRefRequest

export const EstimateLineControllerDeleteEstimateLineChangeOrdersRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertChangeOrderLine,
ReferencedUpsertChangeOrderLineList))
export type EstimateLineControllerDeleteEstimateLineChangeOrdersRefRequest = typeof EstimateLineControllerDeleteEstimateLineChangeOrdersRefRequest

export class CreateItemImpactPaymentRelationships extends S.Class<CreateItemImpactPaymentRelationships>("CreateItemImpactPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
  "subject": ReferencedUpsertItemImpact,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateItemImpactPaymentRelationships extends S.Class<UpdateItemImpactPaymentRelationships>("UpdateItemImpactPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateItemImpactInvoiceRelationships extends S.Class<CreateItemImpactInvoiceRelationships>("CreateItemImpactInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
  "subject": ReferencedUpsertItemImpact,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateItemImpactInvoiceRelationships extends S.Class<UpdateItemImpactInvoiceRelationships>("UpdateItemImpactInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateItemImpactEstimateRelationships extends S.Class<CreateItemImpactEstimateRelationships>("CreateItemImpactEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
  "subject": ReferencedUpsertItemImpact,
  "changeOrders": ReferencedUpsertChangeOrderLineList,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateItemImpactEstimateRelationships extends S.Class<UpdateItemImpactEstimateRelationships>("UpdateItemImpactEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateItemAppraisalRelationships extends S.Class<CreateItemAppraisalRelationships>("CreateItemAppraisalRelationships")({
  "appraisal": ReferencedUpsertAppraisal,
  "subject": ReferencedUpsertItem
}) {}

export class UpdateItemAppraisalRelationships extends S.Class<UpdateItemAppraisalRelationships>("UpdateItemAppraisalRelationships")({
  "appraisal": S.optionalWith(ReferencedUpsertAppraisal, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true })
}) {}

export class CreateItemInvoiceRelationships extends S.Class<CreateItemInvoiceRelationships>("CreateItemInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
  "subject": ReferencedUpsertItem,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateItemInvoiceRelationships extends S.Class<UpdateItemInvoiceRelationships>("UpdateItemInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateItemPaymentRelationships extends S.Class<CreateItemPaymentRelationships>("CreateItemPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
  "subject": ReferencedUpsertItem,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateItemPaymentRelationships extends S.Class<UpdateItemPaymentRelationships>("UpdateItemPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateItemEstimateRelationships extends S.Class<CreateItemEstimateRelationships>("CreateItemEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
  "subject": ReferencedUpsertItem,
  "changeOrders": ReferencedUpsertChangeOrderLineList,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateItemEstimateRelationships extends S.Class<UpdateItemEstimateRelationships>("UpdateItemEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateItemProductSuggestionRelationships extends S.Class<CreateItemProductSuggestionRelationships>("CreateItemProductSuggestionRelationships")({
  "item": ReferencedUpsertItem
}) {}

export class UpdateItemProductSuggestionRelationships extends S.Class<UpdateItemProductSuggestionRelationships>("UpdateItemProductSuggestionRelationships")({
  "item": S.optionalWith(ReferencedUpsertItem, { nullable: true })
}) {}

export const ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertItem,
ReferencedUpsertItemList))
export type ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefRequest = typeof ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefRequest

export const ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertItem,
ReferencedUpsertItemList))
export type ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRefRequest = typeof ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRefRequest

export class CreateServiceTaskPaymentRelationships extends S.Class<CreateServiceTaskPaymentRelationships>("CreateServiceTaskPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
  "subject": ReferencedUpsertServiceTask,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateServiceTaskPaymentRelationships extends S.Class<UpdateServiceTaskPaymentRelationships>("UpdateServiceTaskPaymentRelationships")({
  "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateServiceTaskInvoiceRelationships extends S.Class<CreateServiceTaskInvoiceRelationships>("CreateServiceTaskInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
  "subject": ReferencedUpsertServiceTask,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateServiceTaskInvoiceRelationships extends S.Class<UpdateServiceTaskInvoiceRelationships>("UpdateServiceTaskInvoiceRelationships")({
  "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateServiceTaskEstimateRelationships extends S.Class<CreateServiceTaskEstimateRelationships>("CreateServiceTaskEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
  "subject": ReferencedUpsertServiceTask,
  "changeOrders": ReferencedUpsertChangeOrderLineList,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateServiceTaskEstimateRelationships extends S.Class<UpdateServiceTaskEstimateRelationships>("UpdateServiceTaskEstimateRelationships")({
  "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateChangeOrderRelationships extends S.Class<CreateChangeOrderRelationships>("CreateChangeOrderRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
  /**
* Estimate that the ChangeOrder applies to.
*/
"estimate": ReferencedUpsertEstimate,
  /**
* AccountProvider for the ChangeOrder. Computed based on .estimate.vendor.
*/
"vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  /**
* Service for the ChangeOrder. Computed based on .estimate.service.
*/
"service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {}

export class UpdateChangeOrderRelationships extends S.Class<UpdateChangeOrderRelationships>("UpdateChangeOrderRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
  /**
* Estimate that the ChangeOrder applies to.
*/
"estimate": S.optionalWith(ReferencedUpsertEstimate, { nullable: true }),
  /**
* AccountProvider for the ChangeOrder. Computed based on .estimate.vendor.
*/
"vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  /**
* Service for the ChangeOrder. Computed based on .estimate.service.
*/
"service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {}

export class CreateEntrySourceMetadataRelationships extends S.Class<CreateEntrySourceMetadataRelationships>("CreateEntrySourceMetadataRelationships")({
  "object": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class UpdateEntrySourceMetadataRelationships extends S.Class<UpdateEntrySourceMetadataRelationships>("UpdateEntrySourceMetadataRelationships")({
  "object": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class CreateAppraisalLineRelationships extends S.Class<CreateAppraisalLineRelationships>("CreateAppraisalLineRelationships")({
  "appraisal": ReferencedUpsertAppraisal,
  "subject": ReferencedUpsertEntrySource
}) {}

export class UpdateAppraisalLineRelationships extends S.Class<UpdateAppraisalLineRelationships>("UpdateAppraisalLineRelationships")({
  "appraisal": S.optionalWith(ReferencedUpsertAppraisal, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true })
}) {}

export class CreateInvoiceLineRelationships extends S.Class<CreateInvoiceLineRelationships>("CreateInvoiceLineRelationships")({
  "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
  "subject": ReferencedUpsertEntrySource,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateInvoiceLineRelationships extends S.Class<UpdateInvoiceLineRelationships>("UpdateInvoiceLineRelationships")({
  "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreatePaymentLineRelationships extends S.Class<CreatePaymentLineRelationships>("CreatePaymentLineRelationships")({
  "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
  "subject": ReferencedUpsertEntrySource,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdatePaymentLineRelationships extends S.Class<UpdatePaymentLineRelationships>("UpdatePaymentLineRelationships")({
  "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateEstimateLineRelationships extends S.Class<CreateEstimateLineRelationships>("CreateEstimateLineRelationships")({
  "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
  "subject": ReferencedUpsertEntrySource,
  "changeOrders": ReferencedUpsertChangeOrderLineList,
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class UpdateEstimateLineRelationships extends S.Class<UpdateEstimateLineRelationships>("UpdateEstimateLineRelationships")({
  "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {}

export class CreateEntrySourceMediaRelationships extends S.Class<CreateEntrySourceMediaRelationships>("CreateEntrySourceMediaRelationships")({
  "entrySource": ReferencedUpsertEntrySource,
  "media": ReferencedUpsertMedia
}) {}

export class UpdateEntrySourceMediaRelationships extends S.Class<UpdateEntrySourceMediaRelationships>("UpdateEntrySourceMediaRelationships")({
  "entrySource": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
  "media": S.optionalWith(ReferencedUpsertMedia, { nullable: true })
}) {}

export class CreateItemChangeOrderRelationships extends S.Class<CreateItemChangeOrderRelationships>("CreateItemChangeOrderRelationships")({
  "estimateLine": ReferencedUpsertItemEstimate,
  "changeOrder": ReferencedUpsertChangeOrder,
  "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true })
}) {}

export class UpdateItemChangeOrderRelationships extends S.Class<UpdateItemChangeOrderRelationships>("UpdateItemChangeOrderRelationships")({
  "estimateLine": S.optionalWith(ReferencedUpsertItemEstimate, { nullable: true }),
  "changeOrder": S.optionalWith(ReferencedUpsertChangeOrder, { nullable: true }),
  "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true })
}) {}

export class CreateItemImpactChangeOrderRelationships extends S.Class<CreateItemImpactChangeOrderRelationships>("CreateItemImpactChangeOrderRelationships")({
  "estimateLine": ReferencedUpsertItemImpactEstimate,
  "changeOrder": ReferencedUpsertChangeOrder,
  "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true })
}) {}

export class UpdateItemImpactChangeOrderRelationships extends S.Class<UpdateItemImpactChangeOrderRelationships>("UpdateItemImpactChangeOrderRelationships")({
  "estimateLine": S.optionalWith(ReferencedUpsertItemImpactEstimate, { nullable: true }),
  "changeOrder": S.optionalWith(ReferencedUpsertChangeOrder, { nullable: true }),
  "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true })
}) {}

export class CreateEstimateRelationships extends S.Class<CreateEstimateRelationships>("CreateEstimateRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertEstimateLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true })
}) {}

export class UpdateEstimateRelationships extends S.Class<UpdateEstimateRelationships>("UpdateEstimateRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertEstimateLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true })
}) {}

export class CreateChangeOrderLineRelationships extends S.Class<CreateChangeOrderLineRelationships>("CreateChangeOrderLineRelationships")({
  "estimateLine": ReferencedUpsertEstimateLine,
  "changeOrder": ReferencedUpsertChangeOrder,
  "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true })
}) {}

export class UpdateChangeOrderLineRelationships extends S.Class<UpdateChangeOrderLineRelationships>("UpdateChangeOrderLineRelationships")({
  "estimateLine": S.optionalWith(ReferencedUpsertEstimateLine, { nullable: true }),
  "changeOrder": S.optionalWith(ReferencedUpsertChangeOrder, { nullable: true }),
  "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true })
}) {}

export class CreateServiceTaskChangeOrderRelationships extends S.Class<CreateServiceTaskChangeOrderRelationships>("CreateServiceTaskChangeOrderRelationships")({
  "estimateLine": ReferencedUpsertServiceTaskEstimate,
  "changeOrder": ReferencedUpsertChangeOrder,
  "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true })
}) {}

export class UpdateServiceTaskChangeOrderRelationships extends S.Class<UpdateServiceTaskChangeOrderRelationships>("UpdateServiceTaskChangeOrderRelationships")({
  "estimateLine": S.optionalWith(ReferencedUpsertServiceTaskEstimate, { nullable: true }),
  "changeOrder": S.optionalWith(ReferencedUpsertChangeOrder, { nullable: true }),
  "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true })
}) {}

export class CreateEntrySourceRelationships extends S.Class<CreateEntrySourceRelationships>("CreateEntrySourceRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true })
}) {}

export class UpdateEntrySourceRelationships extends S.Class<UpdateEntrySourceRelationships>("UpdateEntrySourceRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true })
}) {}

export class CreateServiceTaskRelationships extends S.Class<CreateServiceTaskRelationships>("CreateServiceTaskRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "service": ReferencedUpsertService,
  "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true })
}) {}

export class UpdateServiceTaskRelationships extends S.Class<UpdateServiceTaskRelationships>("UpdateServiceTaskRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
  "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true })
}) {}

export class CreatePaymentRelationships extends S.Class<CreatePaymentRelationships>("CreatePaymentRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertPaymentLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {}

export class UpdatePaymentRelationships extends S.Class<UpdatePaymentRelationships>("UpdatePaymentRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertPaymentLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {}

export class CreateServiceRelationships extends S.Class<CreateServiceRelationships>("CreateServiceRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  /**
* What type of service is being provided.
*/
"type": S.optionalWith(NullableReferencedUpsertServiceType, { nullable: true }),
  "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
  "paidLineItems": S.optionalWith(ReferencedUpsertPaymentLineList, { nullable: true }),
  "invoicedLineItems": S.optionalWith(ReferencedUpsertInvoiceLineList, { nullable: true }),
  "estimatedLineItems": S.optionalWith(ReferencedUpsertEstimateLineList, { nullable: true })
}) {}

export class UpdateServiceRelationships extends S.Class<UpdateServiceRelationships>("UpdateServiceRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  /**
* What type of service is being provided.
*/
"type": S.optionalWith(NullableReferencedUpsertServiceType, { nullable: true }),
  "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
  "paidLineItems": S.optionalWith(ReferencedUpsertPaymentLineList, { nullable: true }),
  "invoicedLineItems": S.optionalWith(ReferencedUpsertInvoiceLineList, { nullable: true }),
  "estimatedLineItems": S.optionalWith(ReferencedUpsertEstimateLineList, { nullable: true })
}) {}

export class CreateInvoiceRelationships extends S.Class<CreateInvoiceRelationships>("CreateInvoiceRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertInvoiceLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {}

export class UpdateInvoiceRelationships extends S.Class<UpdateInvoiceRelationships>("UpdateInvoiceRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertInvoiceLineList, { nullable: true }),
  "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {}

export class CreateItemImpactRelationships extends S.Class<CreateItemImpactRelationships>("CreateItemImpactRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "item": ReferencedUpsertItem,
  "replacement": S.optionalWith(NullableReferencedUpsertItem, { nullable: true }),
  "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
  "itemType": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true })
}) {}

export class UpdateItemImpactRelationships extends S.Class<UpdateItemImpactRelationships>("UpdateItemImpactRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "item": S.optionalWith(ReferencedUpsertItem, { nullable: true }),
  "replacement": S.optionalWith(NullableReferencedUpsertItem, { nullable: true }),
  "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
  "itemType": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true })
}) {}

export class CreateItemRelationships extends S.Class<CreateItemRelationships>("CreateItemRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "type": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true }),
  "asset": S.optionalWith(NullableReferencedUpsertAsset, { nullable: true }),
  "space": S.optionalWith(NullableReferencedUpsertSpace, { nullable: true }),
  "replaces": S.optionalWith(NullableReferencedUpsertItemImpact, { nullable: true }),
  "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
  "impacts": S.optionalWith(ReferencedUpsertItemImpactList, { nullable: true })
}) {}

export class UpdateItemRelationships extends S.Class<UpdateItemRelationships>("UpdateItemRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "type": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true }),
  "asset": S.optionalWith(NullableReferencedUpsertAsset, { nullable: true }),
  "space": S.optionalWith(NullableReferencedUpsertSpace, { nullable: true }),
  "replaces": S.optionalWith(NullableReferencedUpsertItemImpact, { nullable: true }),
  "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
  "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
  "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
  "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
  "impacts": S.optionalWith(ReferencedUpsertItemImpactList, { nullable: true })
}) {}

export class CreateItemMediaSuggestionRelationships extends S.Class<CreateItemMediaSuggestionRelationships>("CreateItemMediaSuggestionRelationships")({
  "media": ReferencedUpsertMedia,
  "item": S.optionalWith(NullableReferencedUpsertItem, { nullable: true }),
  "existing_items": ReferencedUpsertItemList,
  "type": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true }),
  "asset": S.optionalWith(NullableReferencedUpsertAsset, { nullable: true }),
  "space": S.optionalWith(NullableReferencedUpsertSpace, { nullable: true })
}) {}

export class UpdateItemMediaSuggestionRelationships extends S.Class<UpdateItemMediaSuggestionRelationships>("UpdateItemMediaSuggestionRelationships")({
  "media": S.optionalWith(ReferencedUpsertMedia, { nullable: true }),
  "item": S.optionalWith(NullableReferencedUpsertItem, { nullable: true }),
  "existing_items": S.optionalWith(ReferencedUpsertItemList, { nullable: true }),
  "type": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true }),
  "asset": S.optionalWith(NullableReferencedUpsertAsset, { nullable: true }),
  "space": S.optionalWith(NullableReferencedUpsertSpace, { nullable: true })
}) {}

export class CreateDepreciationModifierRelationships extends S.Class<CreateDepreciationModifierRelationships>("CreateDepreciationModifierRelationships")({
  "schedule": S.optionalWith(ReferencedUpsertDepreciationSchedule, { nullable: true })
}) {}

export class UpdateDepreciationModifierRelationships extends S.Class<UpdateDepreciationModifierRelationships>("UpdateDepreciationModifierRelationships")({
  "schedule": S.optionalWith(ReferencedUpsertDepreciationSchedule, { nullable: true })
}) {}

export class CreateDepreciationOverrideRelationships extends S.Class<CreateDepreciationOverrideRelationships>("CreateDepreciationOverrideRelationships")({
  "schedule": S.optionalWith(ReferencedUpsertDepreciationSchedule, { nullable: true })
}) {}

export class UpdateDepreciationOverrideRelationships extends S.Class<UpdateDepreciationOverrideRelationships>("UpdateDepreciationOverrideRelationships")({
  "schedule": S.optionalWith(ReferencedUpsertDepreciationSchedule, { nullable: true })
}) {}

export class CreateItemTemplateRelationships extends S.Class<CreateItemTemplateRelationships>("CreateItemTemplateRelationships")({
  "itemType": S.optionalWith(ReferencedUpsertItemType, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateItemTemplateRelationships extends S.Class<UpdateItemTemplateRelationships>("UpdateItemTemplateRelationships")({
  "itemType": S.optionalWith(ReferencedUpsertItemType, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateBaseSubBucketMetadataRelationships extends S.Class<CreateBaseSubBucketMetadataRelationships>("CreateBaseSubBucketMetadataRelationships")({
  "object": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true })
}) {}

export class UpdateBaseSubBucketMetadataRelationships extends S.Class<UpdateBaseSubBucketMetadataRelationships>("UpdateBaseSubBucketMetadataRelationships")({
  "object": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true })
}) {}

export class CreateBaseBucketMetadataRelationships extends S.Class<CreateBaseBucketMetadataRelationships>("CreateBaseBucketMetadataRelationships")({
  "object": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true })
}) {}

export class UpdateBaseBucketMetadataRelationships extends S.Class<UpdateBaseBucketMetadataRelationships>("UpdateBaseBucketMetadataRelationships")({
  "object": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true })
}) {}

export class CreateFundingSourceRelationships extends S.Class<CreateFundingSourceRelationships>("CreateFundingSourceRelationships")({
  "project": ReferencedUpsertProject,
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBaseBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedUpsertFundingList, { nullable: true }),
  "contacts": S.optionalWith(ReferencedUpsertAccountProviderContactList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class UpdateFundingSourceRelationships extends S.Class<UpdateFundingSourceRelationships>("UpdateFundingSourceRelationships")({
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBaseBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedUpsertFundingList, { nullable: true }),
  "contacts": S.optionalWith(ReferencedUpsertAccountProviderContactList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class CreateEntryRelationships extends S.Class<CreateEntryRelationships>("CreateEntryRelationships")({
  "source": ReferencedUpsertEntrySource,
  "bucket": ReferencedUpsertBaseBucket,
  "subBucket": S.optionalWith(NullableReferencedUpsertBaseSubBucket, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class UpdateEntryRelationships extends S.Class<UpdateEntryRelationships>("UpdateEntryRelationships")({
  "source": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
  "bucket": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true }),
  "subBucket": S.optionalWith(NullableReferencedUpsertBaseSubBucket, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class CreateBucketFundingRelationships extends S.Class<CreateBucketFundingRelationships>("CreateBucketFundingRelationships")({
  "funding": ReferencedUpsertFunding,
  "bucket": ReferencedUpsertBaseBucket,
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class UpdateBucketFundingRelationships extends S.Class<UpdateBucketFundingRelationships>("UpdateBucketFundingRelationships")({
  "funding": S.optionalWith(ReferencedUpsertFunding, { nullable: true }),
  "bucket": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {}

export class CreateBaseBucketRelationships extends S.Class<CreateBaseBucketRelationships>("CreateBaseBucketRelationships")({
  "type": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
  "fundingSource": ReferencedUpsertFundingSource,
  "metadata": S.optionalWith(ReferencedUpsertBaseBucketMetadata, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "subBuckets": S.optionalWith(ReferencedUpsertBaseSubBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true })
}) {}

export class UpdateBaseBucketRelationships extends S.Class<UpdateBaseBucketRelationships>("UpdateBaseBucketRelationships")({
  "type": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "metadata": S.optionalWith(ReferencedUpsertBaseBucketMetadata, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "subBuckets": S.optionalWith(ReferencedUpsertBaseSubBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true })
}) {}

export class CreateFundingRelationships extends S.Class<CreateFundingRelationships>("CreateFundingRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "source": ReferencedUpsertFundingSource,
  "allocations": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true })
}) {}

export class UpdateFundingRelationships extends S.Class<UpdateFundingRelationships>("UpdateFundingRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "source": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "allocations": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true })
}) {}

export class CreateSubBucketDefinitionRelationships extends S.Class<CreateSubBucketDefinitionRelationships>("CreateSubBucketDefinitionRelationships")({
  "parent": ReferencedUpsertBucketDefinition,
  "buckets": S.optionalWith(ReferencedUpsertSubBucketList, { nullable: true })
}) {}

export class UpdateSubBucketDefinitionRelationships extends S.Class<UpdateSubBucketDefinitionRelationships>("UpdateSubBucketDefinitionRelationships")({
  "parent": S.optionalWith(ReferencedUpsertBucketDefinition, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertSubBucketList, { nullable: true })
}) {}

export const EndorsementControllerPostEndorsementCoveragesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertCoverage,
ReferencedUpsertCoverageList))
export type EndorsementControllerPostEndorsementCoveragesRefRequest = typeof EndorsementControllerPostEndorsementCoveragesRefRequest

export const EndorsementControllerDeleteEndorsementCoveragesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertCoverage,
ReferencedUpsertCoverageList))
export type EndorsementControllerDeleteEndorsementCoveragesRefRequest = typeof EndorsementControllerDeleteEndorsementCoveragesRefRequest

export class CreateClaimTargetRelationships extends S.Class<CreateClaimTargetRelationships>("CreateClaimTargetRelationships")({
  "provider": ReferencedUpsertProvider,
  "currency": ReferencedUpsertCurrency,
  "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true }),
  "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true })
}) {}

export class UpdateClaimTargetRelationships extends S.Class<UpdateClaimTargetRelationships>("UpdateClaimTargetRelationships")({
  "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true }),
  "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true })
}) {}

export class CreateBucketRelationships extends S.Class<CreateBucketRelationships>("CreateBucketRelationships")({
  "type": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
  "fundingSource": ReferencedUpsertFundingSource,
  "metadata": S.optionalWith(ReferencedUpsertBaseBucketMetadata, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "subBuckets": S.optionalWith(ReferencedUpsertBaseSubBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true }),
  "definition": ReferencedUpsertBucketDefinition,
  "deductible": S.optionalWith(ReferencedUpsertDeductible, { nullable: true }),
  "claimDeductible": S.optionalWith(ReferencedUpsertClaimDeductible, { nullable: true })
}) {}

export class UpdateBucketRelationships extends S.Class<UpdateBucketRelationships>("UpdateBucketRelationships")({
  "type": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "metadata": S.optionalWith(ReferencedUpsertBaseBucketMetadata, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "subBuckets": S.optionalWith(ReferencedUpsertBaseSubBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true }),
  "definition": S.optionalWith(ReferencedUpsertBucketDefinition, { nullable: true }),
  "deductible": S.optionalWith(ReferencedUpsertDeductible, { nullable: true }),
  "claimDeductible": S.optionalWith(ReferencedUpsertClaimDeductible, { nullable: true })
}) {}

export class CreateClaimRelationships extends S.Class<CreateClaimRelationships>("CreateClaimRelationships")({
  "project": ReferencedUpsertProject,
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBaseBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedUpsertFundingList, { nullable: true }),
  "contacts": S.optionalWith(ReferencedUpsertAccountProviderContactList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "target": ReferencedUpsertClaimTarget,
  "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
  "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true })
}) {}

export class UpdateClaimRelationships extends S.Class<UpdateClaimRelationships>("UpdateClaimRelationships")({
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBaseBucketList, { nullable: true }),
  "fundings": S.optionalWith(ReferencedUpsertFundingList, { nullable: true }),
  "contacts": S.optionalWith(ReferencedUpsertAccountProviderContactList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "target": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
  "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
  "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true })
}) {}

export class CreateDeductibleRelationships extends S.Class<CreateDeductibleRelationships>("CreateDeductibleRelationships")({
  "claimTarget": ReferencedUpsertClaimTarget,
  "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true }),
  "claimDeductibles": S.optionalWith(ReferencedUpsertClaimDeductibleList, { nullable: true })
}) {}

export class UpdateDeductibleRelationships extends S.Class<UpdateDeductibleRelationships>("UpdateDeductibleRelationships")({
  "claimTarget": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
  "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true }),
  "claimDeductibles": S.optionalWith(ReferencedUpsertClaimDeductibleList, { nullable: true })
}) {}

export class CreateClaimDeductibleRelationships extends S.Class<CreateClaimDeductibleRelationships>("CreateClaimDeductibleRelationships")({
  "context": ReferencedUpsertDeductible,
  "claim": ReferencedUpsertClaim,
  "target": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true })
}) {}

export class UpdateClaimDeductibleRelationships extends S.Class<UpdateClaimDeductibleRelationships>("UpdateClaimDeductibleRelationships")({
  "context": S.optionalWith(ReferencedUpsertDeductible, { nullable: true }),
  "claim": S.optionalWith(ReferencedUpsertClaim, { nullable: true }),
  "target": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true })
}) {}

export class CreatePolicyTermRelationships extends S.Class<CreatePolicyTermRelationships>("CreatePolicyTermRelationships")({
  "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true }),
  "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true }),
  "policy": ReferencedUpsertPolicy,
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertPolicyTemplate, { nullable: true })
}) {}

export class UpdatePolicyTermRelationships extends S.Class<UpdatePolicyTermRelationships>("UpdatePolicyTermRelationships")({
  "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true }),
  "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true }),
  "policy": S.optionalWith(ReferencedUpsertPolicy, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertPolicyTemplate, { nullable: true })
}) {}

export class CreatePolicyRelationships extends S.Class<CreatePolicyRelationships>("CreatePolicyRelationships")({
  "provider": ReferencedUpsertProvider,
  "template": S.optionalWith(NullableReferencedUpsertPolicyTemplate, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "assets": ReferencedUpsertAssetList,
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "terms": S.optionalWith(ReferencedUpsertPolicyTermList, { nullable: true })
}) {}

export class UpdatePolicyRelationships extends S.Class<UpdatePolicyRelationships>("UpdatePolicyRelationships")({
  "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertPolicyTemplate, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "terms": S.optionalWith(ReferencedUpsertPolicyTermList, { nullable: true })
}) {}

export class CreateSubmissionTrackTemplateRelationships extends S.Class<CreateSubmissionTrackTemplateRelationships>("CreateSubmissionTrackTemplateRelationships")({
  "policyTemplate": S.optionalWith(ReferencedUpsertPolicyTemplate, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {}

export class UpdateSubmissionTrackTemplateRelationships extends S.Class<UpdateSubmissionTrackTemplateRelationships>("UpdateSubmissionTrackTemplateRelationships")({
  "policyTemplate": S.optionalWith(ReferencedUpsertPolicyTemplate, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {}

export class CreateBucketDefinitionRelationships extends S.Class<CreateBucketDefinitionRelationships>("CreateBucketDefinitionRelationships")({
  "basis": ReferencedUpsertClaimTarget,
  "bucketType": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
  "deductible": S.optionalWith(NullableReferencedUpsertDeductible, { nullable: true }),
  "subBucketDefinitions": S.optionalWith(ReferencedUpsertSubBucketDefinitionList, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true })
}) {}

export class UpdateBucketDefinitionRelationships extends S.Class<UpdateBucketDefinitionRelationships>("UpdateBucketDefinitionRelationships")({
  "basis": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
  "bucketType": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
  "deductible": S.optionalWith(NullableReferencedUpsertDeductible, { nullable: true }),
  "subBucketDefinitions": S.optionalWith(ReferencedUpsertSubBucketDefinitionList, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true })
}) {}

export const EndorsementControllerPostEndorsementSubCoveragesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSubCoverage,
ReferencedUpsertSubCoverageList))
export type EndorsementControllerPostEndorsementSubCoveragesRefRequest = typeof EndorsementControllerPostEndorsementSubCoveragesRefRequest

export const EndorsementControllerDeleteEndorsementSubCoveragesRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertSubCoverage,
ReferencedUpsertSubCoverageList))
export type EndorsementControllerDeleteEndorsementSubCoveragesRefRequest = typeof EndorsementControllerDeleteEndorsementSubCoveragesRefRequest

export class CreateCoverageGroupTemplateRelationships extends S.Class<CreateCoverageGroupTemplateRelationships>("CreateCoverageGroupTemplateRelationships")({
  "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true })
}) {}

export class UpdateCoverageGroupTemplateRelationships extends S.Class<UpdateCoverageGroupTemplateRelationships>("UpdateCoverageGroupTemplateRelationships")({
  "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true })
}) {}

export class CreateIncidentImpactRelationships extends S.Class<CreateIncidentImpactRelationships>("CreateIncidentImpactRelationships")({
  "asset": ReferencedUpsertAsset,
  "project": ReferencedUpsertProject,
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "perils": ReferencedUpsertPerilList
}) {}

export class UpdateIncidentImpactRelationships extends S.Class<UpdateIncidentImpactRelationships>("UpdateIncidentImpactRelationships")({
  "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {}

export const IncidentImpactControllerPostIncidentImpactPerilsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertPeril,
ReferencedUpsertPerilList))
export type IncidentImpactControllerPostIncidentImpactPerilsRefRequest = typeof IncidentImpactControllerPostIncidentImpactPerilsRefRequest

export const IncidentImpactControllerDeleteIncidentImpactPerilsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertPeril,
ReferencedUpsertPerilList))
export type IncidentImpactControllerDeleteIncidentImpactPerilsRefRequest = typeof IncidentImpactControllerDeleteIncidentImpactPerilsRefRequest

export const EndorsementControllerPostEndorsementPerilsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertPeril,
ReferencedUpsertPerilList))
export type EndorsementControllerPostEndorsementPerilsRefRequest = typeof EndorsementControllerPostEndorsementPerilsRefRequest

export const EndorsementControllerDeleteEndorsementPerilsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertPeril,
ReferencedUpsertPerilList))
export type EndorsementControllerDeleteEndorsementPerilsRefRequest = typeof EndorsementControllerDeleteEndorsementPerilsRefRequest

export const CoverageControllerPostCoveragePerilsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertPeril,
ReferencedUpsertPerilList))
export type CoverageControllerPostCoveragePerilsRefRequest = typeof CoverageControllerPostCoveragePerilsRefRequest

export const CoverageControllerDeleteCoveragePerilsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertPeril,
ReferencedUpsertPerilList))
export type CoverageControllerDeleteCoveragePerilsRefRequest = typeof CoverageControllerDeleteCoveragePerilsRefRequest

export class CreateCoverageRelationships extends S.Class<CreateCoverageRelationships>("CreateCoverageRelationships")({
  "basis": ReferencedUpsertPolicyTerm,
  "bucketType": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
  "deductible": S.optionalWith(NullableReferencedUpsertDeductible, { nullable: true }),
  "subBucketDefinitions": S.optionalWith(ReferencedUpsertSubBucketDefinitionList, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertCoverageTemplate, { nullable: true }),
  "group": S.optionalWith(NullableReferencedUpsertCoverageGroup, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
  "endorsements": S.optionalWith(ReferencedUpsertEndorsementList, { nullable: true })
}) {}

export class UpdateCoverageRelationships extends S.Class<UpdateCoverageRelationships>("UpdateCoverageRelationships")({
  "basis": S.optionalWith(ReferencedUpsertPolicyTerm, { nullable: true }),
  "bucketType": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
  "deductible": S.optionalWith(NullableReferencedUpsertDeductible, { nullable: true }),
  "subBucketDefinitions": S.optionalWith(ReferencedUpsertSubBucketDefinitionList, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertCoverageTemplate, { nullable: true }),
  "group": S.optionalWith(NullableReferencedUpsertCoverageGroup, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
  "endorsements": S.optionalWith(ReferencedUpsertEndorsementList, { nullable: true })
}) {}

export const SubCoverageControllerPostSubCoverageEndorsementsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertEndorsement,
ReferencedUpsertEndorsementList))
export type SubCoverageControllerPostSubCoverageEndorsementsRefRequest = typeof SubCoverageControllerPostSubCoverageEndorsementsRefRequest

export const SubCoverageControllerDeleteSubCoverageEndorsementsRefRequest = eraseSchemaReq(S.Union(ReferencedUpsertEndorsement,
ReferencedUpsertEndorsementList))
export type SubCoverageControllerDeleteSubCoverageEndorsementsRefRequest = typeof SubCoverageControllerDeleteSubCoverageEndorsementsRefRequest

export class CreateSubCoverageRelationships extends S.Class<CreateSubCoverageRelationships>("CreateSubCoverageRelationships")({
  "parent": ReferencedUpsertCoverage,
  "buckets": S.optionalWith(ReferencedUpsertSubBucketList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertSubCoverageTemplate, { nullable: true }),
  "endorsements": S.optionalWith(ReferencedUpsertEndorsementList, { nullable: true })
}) {}

export class UpdateSubCoverageRelationships extends S.Class<UpdateSubCoverageRelationships>("UpdateSubCoverageRelationships")({
  "parent": S.optionalWith(ReferencedUpsertCoverage, { nullable: true }),
  "buckets": S.optionalWith(ReferencedUpsertSubBucketList, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertSubCoverageTemplate, { nullable: true }),
  "endorsements": S.optionalWith(ReferencedUpsertEndorsementList, { nullable: true })
}) {}

export class CreateEndorsementTemplateRelationships extends S.Class<CreateEndorsementTemplateRelationships>("CreateEndorsementTemplateRelationships")({
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
  "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true }),
  "subCoverageTemplatess": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {}

export class UpdateEndorsementTemplateRelationships extends S.Class<UpdateEndorsementTemplateRelationships>("UpdateEndorsementTemplateRelationships")({
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
  "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true }),
  "subCoverageTemplatess": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
  "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {}

export class CreateSubBucketRelationships extends S.Class<CreateSubBucketRelationships>("CreateSubBucketRelationships")({
  "parent": ReferencedUpsertBaseBucket,
  "metadata": S.optionalWith(ReferencedUpsertBaseSubBucketMetadata, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "definition": ReferencedUpsertSubBucketDefinition
}) {}

export class UpdateSubBucketRelationships extends S.Class<UpdateSubBucketRelationships>("UpdateSubBucketRelationships")({
  "parent": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true }),
  "metadata": S.optionalWith(ReferencedUpsertBaseSubBucketMetadata, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "definition": S.optionalWith(ReferencedUpsertSubBucketDefinition, { nullable: true })
}) {}

export class CreateBaseSubBucketRelationships extends S.Class<CreateBaseSubBucketRelationships>("CreateBaseSubBucketRelationships")({
  "parent": ReferencedUpsertBaseBucket,
  "metadata": S.optionalWith(ReferencedUpsertBaseSubBucketMetadata, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true })
}) {}

export class UpdateBaseSubBucketRelationships extends S.Class<UpdateBaseSubBucketRelationships>("UpdateBaseSubBucketRelationships")({
  "parent": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true }),
  "metadata": S.optionalWith(ReferencedUpsertBaseSubBucketMetadata, { nullable: true }),
  "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
  "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true })
}) {}

export class CreateSubCoverageTemplateRelationships extends S.Class<CreateSubCoverageTemplateRelationships>("CreateSubCoverageTemplateRelationships")({
  "coverageTemplate": S.optionalWith(ReferencedUpsertCoverageTemplate, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true })
}) {}

export class UpdateSubCoverageTemplateRelationships extends S.Class<UpdateSubCoverageTemplateRelationships>("UpdateSubCoverageTemplateRelationships")({
  "coverageTemplate": S.optionalWith(ReferencedUpsertCoverageTemplate, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true })
}) {}

export class CreateEndorsementRelationships extends S.Class<CreateEndorsementRelationships>("CreateEndorsementRelationships")({
  "policyTerm": ReferencedUpsertPolicyTerm,
  "template": S.optionalWith(NullableReferencedUpsertEndorsementTemplate, { nullable: true }),
  "coverages": S.optionalWith(ReferencedUpsertCoverageList, { nullable: true }),
  "subCoverages": S.optionalWith(ReferencedUpsertSubCoverageList, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {}

export class UpdateEndorsementRelationships extends S.Class<UpdateEndorsementRelationships>("UpdateEndorsementRelationships")({
  "policyTerm": S.optionalWith(ReferencedUpsertPolicyTerm, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertEndorsementTemplate, { nullable: true }),
  "coverages": S.optionalWith(ReferencedUpsertCoverageList, { nullable: true }),
  "subCoverages": S.optionalWith(ReferencedUpsertSubCoverageList, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {}

export class CreateCoverageTemplateRelationships extends S.Class<CreateCoverageTemplateRelationships>("CreateCoverageTemplateRelationships")({
  "group": S.optionalWith(NullableReferencedUpsertCoverageGroupTemplate, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
  "bucketType": S.optionalWith(ReferencedUpsertBucketType, { nullable: true }),
  "subCoverageTemplates": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true })
}) {}

export class UpdateCoverageTemplateRelationships extends S.Class<UpdateCoverageTemplateRelationships>("UpdateCoverageTemplateRelationships")({
  "group": S.optionalWith(NullableReferencedUpsertCoverageGroupTemplate, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
  "bucketType": S.optionalWith(ReferencedUpsertBucketType, { nullable: true }),
  "subCoverageTemplates": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true })
}) {}

export class CreateCoverageGroupRelationships extends S.Class<CreateCoverageGroupRelationships>("CreateCoverageGroupRelationships")({
  "policyTerm": ReferencedUpsertPolicyTerm,
  "template": S.optionalWith(NullableReferencedUpsertCoverageGroupTemplate, { nullable: true })
}) {}

export class UpdateCoverageGroupRelationships extends S.Class<UpdateCoverageGroupRelationships>("UpdateCoverageGroupRelationships")({
  "policyTerm": S.optionalWith(ReferencedUpsertPolicyTerm, { nullable: true }),
  "template": S.optionalWith(NullableReferencedUpsertCoverageGroupTemplate, { nullable: true })
}) {}

export class CreatePolicyTemplateRelationships extends S.Class<CreatePolicyTemplateRelationships>("CreatePolicyTemplateRelationships")({
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "coverageGroupTemplates": S.optionalWith(ReferencedUpsertCoverageGroupTemplateList, { nullable: true }),
  "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true }),
  "subCoverageTemplates": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {}

export class UpdatePolicyTemplateRelationships extends S.Class<UpdatePolicyTemplateRelationships>("UpdatePolicyTemplateRelationships")({
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "coverageGroupTemplates": S.optionalWith(ReferencedUpsertCoverageGroupTemplateList, { nullable: true }),
  "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true }),
  "subCoverageTemplates": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
  "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {}

export class CreateDepreciationScheduleRelationships extends S.Class<CreateDepreciationScheduleRelationships>("CreateDepreciationScheduleRelationships")({
  "depreciationModifiers": S.optionalWith(ReferencedUpsertDepreciationModifierList, { nullable: true }),
  "depreciationOverrides": S.optionalWith(ReferencedUpsertDepreciationOverrideList, { nullable: true })
}) {}

export class UpdateDepreciationScheduleRelationships extends S.Class<UpdateDepreciationScheduleRelationships>("UpdateDepreciationScheduleRelationships")({
  "depreciationModifiers": S.optionalWith(ReferencedUpsertDepreciationModifierList, { nullable: true }),
  "depreciationOverrides": S.optionalWith(ReferencedUpsertDepreciationOverrideList, { nullable: true })
}) {}

export class CreateSpaceTypeItemTemplateRelationships extends S.Class<CreateSpaceTypeItemTemplateRelationships>("CreateSpaceTypeItemTemplateRelationships")({
  "spaceType": S.optionalWith(ReferencedUpsertSpaceType, { nullable: true }),
  "itemTemplate": S.optionalWith(ReferencedUpsertItemTemplate, { nullable: true })
}) {}

export class UpdateSpaceTypeItemTemplateRelationships extends S.Class<UpdateSpaceTypeItemTemplateRelationships>("UpdateSpaceTypeItemTemplateRelationships")({
  "spaceType": S.optionalWith(ReferencedUpsertSpaceType, { nullable: true }),
  "itemTemplate": S.optionalWith(ReferencedUpsertItemTemplate, { nullable: true })
}) {}

export class CreateAssetAttributeTypeRelationships extends S.Class<CreateAssetAttributeTypeRelationships>("CreateAssetAttributeTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertAssetAttributeClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateAssetAttributeTypeRelationships extends S.Class<UpdateAssetAttributeTypeRelationships>("UpdateAssetAttributeTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertAssetAttributeClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateAssetAttributeTypeItemTemplateRelationships extends S.Class<CreateAssetAttributeTypeItemTemplateRelationships>("CreateAssetAttributeTypeItemTemplateRelationships")({
  "assetAttributeType": S.optionalWith(ReferencedUpsertAssetAttributeType, { nullable: true }),
  "itemTemplate": S.optionalWith(ReferencedUpsertItemTemplate, { nullable: true })
}) {}

export class UpdateAssetAttributeTypeItemTemplateRelationships extends S.Class<UpdateAssetAttributeTypeItemTemplateRelationships>("UpdateAssetAttributeTypeItemTemplateRelationships")({
  "assetAttributeType": S.optionalWith(ReferencedUpsertAssetAttributeType, { nullable: true }),
  "itemTemplate": S.optionalWith(ReferencedUpsertItemTemplate, { nullable: true })
}) {}

export class CreateAssetAttributeClassRelationships extends S.Class<CreateAssetAttributeClassRelationships>("CreateAssetAttributeClassRelationships")({
  "types": S.optionalWith(ReferencedUpsertAssetAttributeTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateAssetAttributeClassRelationships extends S.Class<UpdateAssetAttributeClassRelationships>("UpdateAssetAttributeClassRelationships")({
  "types": S.optionalWith(ReferencedUpsertAssetAttributeTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateIncidentTypeRelationships extends S.Class<CreateIncidentTypeRelationships>("CreateIncidentTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertIncidentClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {}

export class UpdateIncidentTypeRelationships extends S.Class<UpdateIncidentTypeRelationships>("UpdateIncidentTypeRelationships")({
  "classes": S.optionalWith(ReferencedUpsertIncidentClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
  "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {}

export class CreateItemClassRelationships extends S.Class<CreateItemClassRelationships>("CreateItemClassRelationships")({
  "categories": S.optionalWith(ReferencedUpsertItemCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedUpsertItemTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateItemClassRelationships extends S.Class<UpdateItemClassRelationships>("UpdateItemClassRelationships")({
  "categories": S.optionalWith(ReferencedUpsertItemCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedUpsertItemTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateItemTypeRelationships extends S.Class<CreateItemTypeRelationships>("CreateItemTypeRelationships")({
  "depreciationModifiers": S.optionalWith(ReferencedUpsertDepreciationModifierList, { nullable: true }),
  "depreciationOverrides": S.optionalWith(ReferencedUpsertDepreciationOverrideList, { nullable: true }),
  "classes": S.optionalWith(ReferencedUpsertItemClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateItemTypeRelationships extends S.Class<UpdateItemTypeRelationships>("UpdateItemTypeRelationships")({
  "depreciationModifiers": S.optionalWith(ReferencedUpsertDepreciationModifierList, { nullable: true }),
  "depreciationOverrides": S.optionalWith(ReferencedUpsertDepreciationOverrideList, { nullable: true }),
  "classes": S.optionalWith(ReferencedUpsertItemClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateItemCategoryRelationships extends S.Class<CreateItemCategoryRelationships>("CreateItemCategoryRelationships")({
  "classes": S.optionalWith(ReferencedUpsertItemClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateItemCategoryRelationships extends S.Class<UpdateItemCategoryRelationships>("UpdateItemCategoryRelationships")({
  "classes": S.optionalWith(ReferencedUpsertItemClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateServiceClassRelationships extends S.Class<CreateServiceClassRelationships>("CreateServiceClassRelationships")({
  "categories": S.optionalWith(ReferencedUpsertServiceCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedUpsertServiceTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateServiceClassRelationships extends S.Class<UpdateServiceClassRelationships>("UpdateServiceClassRelationships")({
  "categories": S.optionalWith(ReferencedUpsertServiceCategoryList, { nullable: true }),
  "types": S.optionalWith(ReferencedUpsertServiceTypeList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateServiceCategoryRelationships extends S.Class<CreateServiceCategoryRelationships>("CreateServiceCategoryRelationships")({
  "classes": S.optionalWith(ReferencedUpsertServiceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class UpdateServiceCategoryRelationships extends S.Class<UpdateServiceCategoryRelationships>("UpdateServiceCategoryRelationships")({
  "classes": S.optionalWith(ReferencedUpsertServiceClassList, { nullable: true }),
  "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {}

export class CreateAppraisalRelationships extends S.Class<CreateAppraisalRelationships>("CreateAppraisalRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertAppraisalLineList, { nullable: true }),
  "subjects": S.optionalWith(ReferencedUpsertBaseEntityList, { nullable: true })
}) {}

export class UpdateAppraisalRelationships extends S.Class<UpdateAppraisalRelationships>("UpdateAppraisalRelationships")({
  "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
  "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
  "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
  "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
  "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
  "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
  "lines": S.optionalWith(ReferencedUpsertAppraisalLineList, { nullable: true }),
  "subjects": S.optionalWith(ReferencedUpsertBaseEntityList, { nullable: true })
}) {}

export class CreateThirdPartyImpactRelationships extends S.Class<CreateThirdPartyImpactRelationships>("CreateThirdPartyImpactRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "thirdParty": ReferencedUpsertThirdParty
}) {}

export class UpdateThirdPartyImpactRelationships extends S.Class<UpdateThirdPartyImpactRelationships>("UpdateThirdPartyImpactRelationships")({
  "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
  /**
* The project to which this entry source belongs.
*/
"project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
  /**
* The account that owns this entry source.
*/
"account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
  /**
* What currency the amounts for this EntrySource are in.
*/
"currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
  "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
  "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
  "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
  "thirdParty": S.optionalWith(ReferencedUpsertThirdParty, { nullable: true })
}) {}

export class AuthProfileData extends S.Class<AuthProfileData>("AuthProfileData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AuthProfileDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AuthProfileAttributes, { nullable: true }),
  "relationships": S.optionalWith(AuthProfileRelationships, { nullable: true })
}) {}

export class ThirdPartyData extends S.Class<ThirdPartyData>("ThirdPartyData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ThirdPartyDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "relationships": S.optionalWith(ThirdPartyRelationships, { nullable: true })
}) {}

export class ThirdPartyIndividualData extends S.Class<ThirdPartyIndividualData>("ThirdPartyIndividualData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ThirdPartyIndividualDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ThirdPartyIndividualAttributes, { nullable: true }),
  "relationships": S.optionalWith(ThirdPartyIndividualRelationships, { nullable: true })
}) {}

export class AccountData extends S.Class<AccountData>("AccountData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AccountDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
  "relationships": S.optionalWith(AccountRelationships, { nullable: true })
}) {}

export class IdentityData extends S.Class<IdentityData>("IdentityData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IdentityDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(IdentityAttributes, { nullable: true }),
  "relationships": S.optionalWith(IdentityRelationships, { nullable: true })
}) {}

export class UserData extends S.Class<UserData>("UserData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UserDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(UserAttributes, { nullable: true }),
  "relationships": S.optionalWith(UserRelationships, { nullable: true })
}) {}

export class AccountInviteData extends S.Class<AccountInviteData>("AccountInviteData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AccountInviteDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AccountInviteAttributes, { nullable: true }),
  "relationships": S.optionalWith(AccountInviteRelationships, { nullable: true })
}) {}

export class UserAccountRoleData extends S.Class<UserAccountRoleData>("UserAccountRoleData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UserAccountRoleDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(UserAccountRoleAttributes, { nullable: true }),
  "relationships": S.optionalWith(UserAccountRoleRelationships, { nullable: true })
}) {}

export class EmailAddressData extends S.Class<EmailAddressData>("EmailAddressData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EmailAddressDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EmailAddressAttributes, { nullable: true }),
  "relationships": S.optionalWith(EmailAddressRelationships, { nullable: true })
}) {}

export class PhoneNumberData extends S.Class<PhoneNumberData>("PhoneNumberData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PhoneNumberDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PhoneNumberAttributes, { nullable: true }),
  "relationships": S.optionalWith(PhoneNumberRelationships, { nullable: true })
}) {}

export class AccountProviderContactData extends S.Class<AccountProviderContactData>("AccountProviderContactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AccountProviderContactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AccountProviderContactAttributes, { nullable: true }),
  "relationships": S.optionalWith(AccountProviderContactRelationships, { nullable: true })
}) {}

export class AccountProviderData extends S.Class<AccountProviderData>("AccountProviderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AccountProviderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AccountProviderAttributes, { nullable: true }),
  "relationships": S.optionalWith(AccountProviderRelationships, { nullable: true })
}) {}

export class ProjectData extends S.Class<ProjectData>("ProjectData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProjectDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ProjectAttributes, { nullable: true }),
  "relationships": S.optionalWith(ProjectRelationships, { nullable: true })
}) {}

export class DisasterData extends S.Class<DisasterData>("DisasterData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DisasterDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DisasterAttributes, { nullable: true }),
  "relationships": S.optionalWith(DisasterRelationships, { nullable: true })
}) {}

export class IncidentData extends S.Class<IncidentData>("IncidentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(IncidentAttributes, { nullable: true }),
  "relationships": S.optionalWith(IncidentRelationships, { nullable: true })
}) {}

export class ProjectMediaData extends S.Class<ProjectMediaData>("ProjectMediaData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProjectMediaDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ProjectMediaAttributes, { nullable: true }),
  "relationships": S.optionalWith(ProjectMediaRelationships, { nullable: true })
}) {}

export class FileProcessData extends S.Class<FileProcessData>("FileProcessData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": FileProcessDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(FileProcessAttributes, { nullable: true }),
  "relationships": S.optionalWith(FileProcessRelationships, { nullable: true })
}) {}

export class ProjectImpactData extends S.Class<ProjectImpactData>("ProjectImpactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProjectImpactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ProjectImpactAttributes, { nullable: true }),
  "relationships": S.optionalWith(ProjectImpactRelationships, { nullable: true })
}) {}

export class MediaData extends S.Class<MediaData>("MediaData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": MediaDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(MediaAttributes, { nullable: true }),
  "relationships": S.optionalWith(MediaRelationships, { nullable: true })
}) {}

export class ItemizableFinancialDocumentStatsData extends S.Class<ItemizableFinancialDocumentStatsData>("ItemizableFinancialDocumentStatsData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemizableFinancialDocumentStatsDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemizableFinancialDocumentStatsAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemizableFinancialDocumentStatsRelationships, { nullable: true })
}) {}

export class FileData extends S.Class<FileData>("FileData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": FileDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(FileAttributes, { nullable: true }),
  "relationships": S.optionalWith(FileRelationships, { nullable: true })
}) {}

export class AssetData extends S.Class<AssetData>("AssetData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AssetAttributes, { nullable: true }),
  "relationships": S.optionalWith(AssetRelationships, { nullable: true })
}) {}

export class PerilData extends S.Class<PerilData>("PerilData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PerilDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PerilAttributes, { nullable: true }),
  "relationships": S.optionalWith(PerilRelationships, { nullable: true })
}) {}

export class IncidentClassData extends S.Class<IncidentClassData>("IncidentClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(IncidentClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(IncidentClassRelationships, { nullable: true })
}) {}

export class ServiceTypeData extends S.Class<ServiceTypeData>("ServiceTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceTypeRelationships, { nullable: true })
}) {}

export class DwellingData extends S.Class<DwellingData>("DwellingData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DwellingDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DwellingAttributes, { nullable: true }),
  "relationships": S.optionalWith(DwellingRelationships, { nullable: true })
}) {}

export class AssetAppraisalData extends S.Class<AssetAppraisalData>("AssetAppraisalData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetAppraisalDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AssetAppraisalAttributes, { nullable: true }),
  "relationships": S.optionalWith(AssetAppraisalRelationships, { nullable: true })
}) {}

export class DocumentData extends S.Class<DocumentData>("DocumentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DocumentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DocumentAttributes, { nullable: true }),
  "relationships": S.optionalWith(DocumentRelationships, { nullable: true })
}) {}

export class IncidentReportData extends S.Class<IncidentReportData>("IncidentReportData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentReportDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(IncidentReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(IncidentReportRelationships, { nullable: true })
}) {}

export class PoliceReportData extends S.Class<PoliceReportData>("PoliceReportData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PoliceReportDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PoliceReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(PoliceReportRelationships, { nullable: true })
}) {}

export class ParamedicReportData extends S.Class<ParamedicReportData>("ParamedicReportData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ParamedicReportDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ParamedicReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(ParamedicReportRelationships, { nullable: true })
}) {}

export class ContractData extends S.Class<ContractData>("ContractData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ContractDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ContractAttributes, { nullable: true }),
  "relationships": S.optionalWith(ContractRelationships, { nullable: true })
}) {}

export class RentRollData extends S.Class<RentRollData>("RentRollData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": RentRollDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(RentRollAttributes, { nullable: true }),
  "relationships": S.optionalWith(RentRollRelationships, { nullable: true })
}) {}

export class PermitData extends S.Class<PermitData>("PermitData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PermitDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PermitAttributes, { nullable: true }),
  "relationships": S.optionalWith(PermitRelationships, { nullable: true })
}) {}

export class BlueprintData extends S.Class<BlueprintData>("BlueprintData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BlueprintDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
  "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {}

export class DeclarationsPageData extends S.Class<DeclarationsPageData>("DeclarationsPageData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DeclarationsPageDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DeclarationsPageAttributes, { nullable: true }),
  "relationships": S.optionalWith(DeclarationsPageRelationships, { nullable: true })
}) {}

export class PolicyJacketData extends S.Class<PolicyJacketData>("PolicyJacketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PolicyJacketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PolicyJacketAttributes, { nullable: true }),
  "relationships": S.optionalWith(PolicyJacketRelationships, { nullable: true })
}) {}

export class ScopeOfLossData extends S.Class<ScopeOfLossData>("ScopeOfLossData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ScopeOfLossDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ScopeOfLossAttributes, { nullable: true }),
  "relationships": S.optionalWith(ScopeOfLossRelationships, { nullable: true })
}) {}

export class DeliveryPaperworkData extends S.Class<DeliveryPaperworkData>("DeliveryPaperworkData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DeliveryPaperworkDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DeliveryPaperworkAttributes, { nullable: true }),
  "relationships": S.optionalWith(DeliveryPaperworkRelationships, { nullable: true })
}) {}

export class ProductSpecData extends S.Class<ProductSpecData>("ProductSpecData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ProductSpecDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ProductSpecAttributes, { nullable: true }),
  "relationships": S.optionalWith(ProductSpecRelationships, { nullable: true })
}) {}

export class UserManualData extends S.Class<UserManualData>("UserManualData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UserManualDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(UserManualAttributes, { nullable: true }),
  "relationships": S.optionalWith(UserManualRelationships, { nullable: true })
}) {}

export class WarrantyData extends S.Class<WarrantyData>("WarrantyData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": WarrantyDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(WarrantyAttributes, { nullable: true }),
  "relationships": S.optionalWith(WarrantyRelationships, { nullable: true })
}) {}

export class DeedData extends S.Class<DeedData>("DeedData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DeedDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DeedAttributes, { nullable: true }),
  "relationships": S.optionalWith(DeedRelationships, { nullable: true })
}) {}

export class FinancialDocumentData extends S.Class<FinancialDocumentData>("FinancialDocumentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": FinancialDocumentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(FinancialDocumentAttributes, { nullable: true }),
  "relationships": S.optionalWith(FinancialDocumentRelationships, { nullable: true })
}) {}

export class DocumentClassData extends S.Class<DocumentClassData>("DocumentClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DocumentClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DocumentClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(DocumentClassRelationships, { nullable: true })
}) {}

export class DocumentTypeData extends S.Class<DocumentTypeData>("DocumentTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DocumentTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DocumentTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(DocumentTypeRelationships, { nullable: true })
}) {}

export class SpaceGroupData extends S.Class<SpaceGroupData>("SpaceGroupData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceGroupDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SpaceGroupAttributes, { nullable: true }),
  "relationships": S.optionalWith(SpaceGroupRelationships, { nullable: true })
}) {}

export class SpaceData extends S.Class<SpaceData>("SpaceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SpaceAttributes, { nullable: true }),
  "relationships": S.optionalWith(SpaceRelationships, { nullable: true })
}) {}

export class SpaceTypeData extends S.Class<SpaceTypeData>("SpaceTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SpaceTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(SpaceTypeRelationships, { nullable: true })
}) {}

export class SpaceCategoryData extends S.Class<SpaceCategoryData>("SpaceCategoryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceCategoryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SpaceCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(SpaceCategoryRelationships, { nullable: true })
}) {}

export class SpaceClassData extends S.Class<SpaceClassData>("SpaceClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SpaceClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(SpaceClassRelationships, { nullable: true })
}) {}

export class SpaceGroupTypeData extends S.Class<SpaceGroupTypeData>("SpaceGroupTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceGroupTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SpaceGroupTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(SpaceGroupTypeRelationships, { nullable: true })
}) {}

export class BucketClassData extends S.Class<BucketClassData>("BucketClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BucketClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(BucketClassRelationships, { nullable: true })
}) {}

export class BucketTypeData extends S.Class<BucketTypeData>("BucketTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BucketTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(BucketTypeRelationships, { nullable: true })
}) {}

export class AddressData extends S.Class<AddressData>("AddressData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AddressDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AddressAttributes, { nullable: true }),
  "relationships": S.optionalWith(AddressRelationships, { nullable: true })
}) {}

export class ThirdPartyDwellingData extends S.Class<ThirdPartyDwellingData>("ThirdPartyDwellingData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ThirdPartyDwellingDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ThirdPartyDwellingAttributes, { nullable: true }),
  "relationships": S.optionalWith(ThirdPartyDwellingRelationships, { nullable: true })
}) {}

export class ItemizableFinancialDocumentData extends S.Class<ItemizableFinancialDocumentData>("ItemizableFinancialDocumentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemizableFinancialDocumentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemizableFinancialDocumentAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemizableFinancialDocumentRelationships, { nullable: true })
}) {}

export class ItemImpactPaymentData extends S.Class<ItemImpactPaymentData>("ItemImpactPaymentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactPaymentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemImpactPaymentAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemImpactPaymentRelationships, { nullable: true })
}) {}

export class ItemImpactInvoiceData extends S.Class<ItemImpactInvoiceData>("ItemImpactInvoiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactInvoiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemImpactInvoiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemImpactInvoiceRelationships, { nullable: true })
}) {}

export class ItemImpactEstimateData extends S.Class<ItemImpactEstimateData>("ItemImpactEstimateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactEstimateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemImpactEstimateAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemImpactEstimateRelationships, { nullable: true })
}) {}

export class ItemAppraisalData extends S.Class<ItemAppraisalData>("ItemAppraisalData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemAppraisalDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemAppraisalAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemAppraisalRelationships, { nullable: true })
}) {}

export class ItemInvoiceData extends S.Class<ItemInvoiceData>("ItemInvoiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemInvoiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemInvoiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemInvoiceRelationships, { nullable: true })
}) {}

export class ItemPaymentData extends S.Class<ItemPaymentData>("ItemPaymentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemPaymentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemPaymentAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemPaymentRelationships, { nullable: true })
}) {}

export class ItemEstimateData extends S.Class<ItemEstimateData>("ItemEstimateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemEstimateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemEstimateAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemEstimateRelationships, { nullable: true })
}) {}

export class ItemProductSuggestionData extends S.Class<ItemProductSuggestionData>("ItemProductSuggestionData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemProductSuggestionDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemProductSuggestionAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemProductSuggestionRelationships, { nullable: true })
}) {}

export class ServiceTaskPaymentData extends S.Class<ServiceTaskPaymentData>("ServiceTaskPaymentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskPaymentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceTaskPaymentAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceTaskPaymentRelationships, { nullable: true })
}) {}

export class ServiceTaskInvoiceData extends S.Class<ServiceTaskInvoiceData>("ServiceTaskInvoiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskInvoiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceTaskInvoiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceTaskInvoiceRelationships, { nullable: true })
}) {}

export class ServiceTaskEstimateData extends S.Class<ServiceTaskEstimateData>("ServiceTaskEstimateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskEstimateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceTaskEstimateAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceTaskEstimateRelationships, { nullable: true })
}) {}

export class ChangeOrderData extends S.Class<ChangeOrderData>("ChangeOrderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ChangeOrderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
  "relationships": S.optionalWith(ChangeOrderRelationships, { nullable: true })
}) {}

export class EntrySourceMetadataData extends S.Class<EntrySourceMetadataData>("EntrySourceMetadataData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EntrySourceMetadataDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EntrySourceMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(EntrySourceMetadataRelationships, { nullable: true })
}) {}

export class AppraisalLineData extends S.Class<AppraisalLineData>("AppraisalLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AppraisalLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AppraisalLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(AppraisalLineRelationships, { nullable: true })
}) {}

export class InvoiceLineData extends S.Class<InvoiceLineData>("InvoiceLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": InvoiceLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(InvoiceLineRelationships, { nullable: true })
}) {}

export class PaymentLineData extends S.Class<PaymentLineData>("PaymentLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PaymentLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PaymentLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(PaymentLineRelationships, { nullable: true })
}) {}

export class EstimateLineData extends S.Class<EstimateLineData>("EstimateLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EstimateLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EstimateLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(EstimateLineRelationships, { nullable: true })
}) {}

export class EntrySourceMediaData extends S.Class<EntrySourceMediaData>("EntrySourceMediaData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EntrySourceMediaDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EntrySourceMediaAttributes, { nullable: true }),
  "relationships": S.optionalWith(EntrySourceMediaRelationships, { nullable: true })
}) {}

export class ItemChangeOrderData extends S.Class<ItemChangeOrderData>("ItemChangeOrderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemChangeOrderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemChangeOrderAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemChangeOrderRelationships, { nullable: true })
}) {}

export class ItemImpactChangeOrderData extends S.Class<ItemImpactChangeOrderData>("ItemImpactChangeOrderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactChangeOrderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemImpactChangeOrderAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemImpactChangeOrderRelationships, { nullable: true })
}) {}

export class EstimateData extends S.Class<EstimateData>("EstimateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EstimateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EstimateAttributes, { nullable: true }),
  "relationships": S.optionalWith(EstimateRelationships, { nullable: true })
}) {}

export class ChangeOrderLineData extends S.Class<ChangeOrderLineData>("ChangeOrderLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ChangeOrderLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ChangeOrderLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(ChangeOrderLineRelationships, { nullable: true })
}) {}

export class ServiceTaskChangeOrderData extends S.Class<ServiceTaskChangeOrderData>("ServiceTaskChangeOrderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskChangeOrderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceTaskChangeOrderAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceTaskChangeOrderRelationships, { nullable: true })
}) {}

export class EntrySourceData extends S.Class<EntrySourceData>("EntrySourceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EntrySourceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EntrySourceAttributes, { nullable: true }),
  "relationships": S.optionalWith(EntrySourceRelationships, { nullable: true })
}) {}

export class ServiceTaskData extends S.Class<ServiceTaskData>("ServiceTaskData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceTaskDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceTaskAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceTaskRelationships, { nullable: true })
}) {}

export class PaymentData extends S.Class<PaymentData>("PaymentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PaymentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PaymentAttributes, { nullable: true }),
  "relationships": S.optionalWith(PaymentRelationships, { nullable: true })
}) {}

export class ServiceData extends S.Class<ServiceData>("ServiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceRelationships, { nullable: true })
}) {}

export class InvoiceData extends S.Class<InvoiceData>("InvoiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": InvoiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(InvoiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(InvoiceRelationships, { nullable: true })
}) {}

export class ItemImpactData extends S.Class<ItemImpactData>("ItemImpactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemImpactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemImpactAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemImpactRelationships, { nullable: true })
}) {}

export class ItemData extends S.Class<ItemData>("ItemData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemRelationships, { nullable: true })
}) {}

export class ItemMediaSuggestionData extends S.Class<ItemMediaSuggestionData>("ItemMediaSuggestionData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemMediaSuggestionDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemMediaSuggestionAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemMediaSuggestionRelationships, { nullable: true })
}) {}

export class DepreciationModifierData extends S.Class<DepreciationModifierData>("DepreciationModifierData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DepreciationModifierDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DepreciationModifierAttributes, { nullable: true }),
  "relationships": S.optionalWith(DepreciationModifierRelationships, { nullable: true })
}) {}

export class DepreciationOverrideData extends S.Class<DepreciationOverrideData>("DepreciationOverrideData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DepreciationOverrideDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DepreciationOverrideAttributes, { nullable: true }),
  "relationships": S.optionalWith(DepreciationOverrideRelationships, { nullable: true })
}) {}

export class ItemTemplateData extends S.Class<ItemTemplateData>("ItemTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemTemplateRelationships, { nullable: true })
}) {}

export class BaseSubBucketMetadataData extends S.Class<BaseSubBucketMetadataData>("BaseSubBucketMetadataData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BaseSubBucketMetadataDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BaseSubBucketMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(BaseSubBucketMetadataRelationships, { nullable: true })
}) {}

export class BaseBucketMetadataData extends S.Class<BaseBucketMetadataData>("BaseBucketMetadataData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BaseBucketMetadataDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BaseBucketMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(BaseBucketMetadataRelationships, { nullable: true })
}) {}

export class FundingSourceData extends S.Class<FundingSourceData>("FundingSourceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": FundingSourceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(FundingSourceAttributes, { nullable: true }),
  "relationships": S.optionalWith(FundingSourceRelationships, { nullable: true })
}) {}

export class EntryData extends S.Class<EntryData>("EntryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EntryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EntryAttributes, { nullable: true }),
  "relationships": S.optionalWith(EntryRelationships, { nullable: true })
}) {}

export class BucketFundingData extends S.Class<BucketFundingData>("BucketFundingData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketFundingDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BucketFundingAttributes, { nullable: true }),
  "relationships": S.optionalWith(BucketFundingRelationships, { nullable: true })
}) {}

export class BaseBucketData extends S.Class<BaseBucketData>("BaseBucketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BaseBucketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BaseBucketAttributes, { nullable: true }),
  "relationships": S.optionalWith(BaseBucketRelationships, { nullable: true })
}) {}

export class FundingData extends S.Class<FundingData>("FundingData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": FundingDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(FundingAttributes, { nullable: true }),
  "relationships": S.optionalWith(FundingRelationships, { nullable: true })
}) {}

export class SubBucketDefinitionData extends S.Class<SubBucketDefinitionData>("SubBucketDefinitionData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubBucketDefinitionDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SubBucketDefinitionAttributes, { nullable: true }),
  "relationships": S.optionalWith(SubBucketDefinitionRelationships, { nullable: true })
}) {}

export class ClaimTargetData extends S.Class<ClaimTargetData>("ClaimTargetData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ClaimTargetDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ClaimTargetAttributes, { nullable: true }),
  "relationships": S.optionalWith(ClaimTargetRelationships, { nullable: true })
}) {}

export class BucketData extends S.Class<BucketData>("BucketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BucketAttributes, { nullable: true }),
  "relationships": S.optionalWith(BucketRelationships, { nullable: true })
}) {}

export class ClaimData extends S.Class<ClaimData>("ClaimData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ClaimDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ClaimAttributes, { nullable: true }),
  "relationships": S.optionalWith(ClaimRelationships, { nullable: true })
}) {}

export class DeductibleData extends S.Class<DeductibleData>("DeductibleData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DeductibleDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DeductibleAttributes, { nullable: true }),
  "relationships": S.optionalWith(DeductibleRelationships, { nullable: true })
}) {}

export class ClaimDeductibleData extends S.Class<ClaimDeductibleData>("ClaimDeductibleData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ClaimDeductibleDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ClaimDeductibleAttributes, { nullable: true }),
  "relationships": S.optionalWith(ClaimDeductibleRelationships, { nullable: true })
}) {}

export class PolicyTermData extends S.Class<PolicyTermData>("PolicyTermData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PolicyTermDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PolicyTermAttributes, { nullable: true }),
  "relationships": S.optionalWith(PolicyTermRelationships, { nullable: true })
}) {}

export class PolicyData extends S.Class<PolicyData>("PolicyData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PolicyDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PolicyAttributes, { nullable: true }),
  "relationships": S.optionalWith(PolicyRelationships, { nullable: true })
}) {}

export class SubmissionTrackTemplateData extends S.Class<SubmissionTrackTemplateData>("SubmissionTrackTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubmissionTrackTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SubmissionTrackTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(SubmissionTrackTemplateRelationships, { nullable: true })
}) {}

export class BucketDefinitionData extends S.Class<BucketDefinitionData>("BucketDefinitionData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BucketDefinitionDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BucketDefinitionAttributes, { nullable: true }),
  "relationships": S.optionalWith(BucketDefinitionRelationships, { nullable: true })
}) {}

export class CoverageGroupTemplateData extends S.Class<CoverageGroupTemplateData>("CoverageGroupTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CoverageGroupTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(CoverageGroupTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CoverageGroupTemplateRelationships, { nullable: true })
}) {}

export class IncidentImpactData extends S.Class<IncidentImpactData>("IncidentImpactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentImpactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(IncidentImpactAttributes, { nullable: true }),
  "relationships": S.optionalWith(IncidentImpactRelationships, { nullable: true })
}) {}

export class CoverageData extends S.Class<CoverageData>("CoverageData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CoverageDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(CoverageAttributes, { nullable: true }),
  "relationships": S.optionalWith(CoverageRelationships, { nullable: true })
}) {}

export class SubCoverageData extends S.Class<SubCoverageData>("SubCoverageData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubCoverageDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SubCoverageAttributes, { nullable: true }),
  "relationships": S.optionalWith(SubCoverageRelationships, { nullable: true })
}) {}

export class EndorsementTemplateData extends S.Class<EndorsementTemplateData>("EndorsementTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EndorsementTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EndorsementTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(EndorsementTemplateRelationships, { nullable: true })
}) {}

export class SubBucketData extends S.Class<SubBucketData>("SubBucketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubBucketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SubBucketAttributes, { nullable: true }),
  "relationships": S.optionalWith(SubBucketRelationships, { nullable: true })
}) {}

export class BaseSubBucketData extends S.Class<BaseSubBucketData>("BaseSubBucketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": BaseSubBucketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(BaseSubBucketAttributes, { nullable: true }),
  "relationships": S.optionalWith(BaseSubBucketRelationships, { nullable: true })
}) {}

export class SubCoverageTemplateData extends S.Class<SubCoverageTemplateData>("SubCoverageTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SubCoverageTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SubCoverageTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(SubCoverageTemplateRelationships, { nullable: true })
}) {}

export class EndorsementData extends S.Class<EndorsementData>("EndorsementData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": EndorsementDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(EndorsementAttributes, { nullable: true }),
  "relationships": S.optionalWith(EndorsementRelationships, { nullable: true })
}) {}

export class CoverageTemplateData extends S.Class<CoverageTemplateData>("CoverageTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CoverageTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(CoverageTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CoverageTemplateRelationships, { nullable: true })
}) {}

export class CoverageGroupData extends S.Class<CoverageGroupData>("CoverageGroupData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": CoverageGroupDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "relationships": S.optionalWith(CoverageGroupRelationships, { nullable: true })
}) {}

export class PolicyTemplateData extends S.Class<PolicyTemplateData>("PolicyTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": PolicyTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(PolicyTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(PolicyTemplateRelationships, { nullable: true })
}) {}

export class DepreciationScheduleData extends S.Class<DepreciationScheduleData>("DepreciationScheduleData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": DepreciationScheduleDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(DepreciationScheduleAttributes, { nullable: true }),
  "relationships": S.optionalWith(DepreciationScheduleRelationships, { nullable: true })
}) {}

export class SpaceTypeItemTemplateData extends S.Class<SpaceTypeItemTemplateData>("SpaceTypeItemTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": SpaceTypeItemTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(SpaceTypeItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(SpaceTypeItemTemplateRelationships, { nullable: true })
}) {}

export class AssetAttributeTypeData extends S.Class<AssetAttributeTypeData>("AssetAttributeTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetAttributeTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AssetAttributeTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(AssetAttributeTypeRelationships, { nullable: true })
}) {}

export class AssetAttributeTypeItemTemplateData extends S.Class<AssetAttributeTypeItemTemplateData>("AssetAttributeTypeItemTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetAttributeTypeItemTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AssetAttributeTypeItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(AssetAttributeTypeItemTemplateRelationships, { nullable: true })
}) {}

export class AssetAttributeClassData extends S.Class<AssetAttributeClassData>("AssetAttributeClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AssetAttributeClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AssetAttributeClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(AssetAttributeClassRelationships, { nullable: true })
}) {}

export class IncidentTypeData extends S.Class<IncidentTypeData>("IncidentTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": IncidentTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(IncidentTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(IncidentTypeRelationships, { nullable: true })
}) {}

export class ItemClassData extends S.Class<ItemClassData>("ItemClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemClassRelationships, { nullable: true })
}) {}

export class ItemTypeData extends S.Class<ItemTypeData>("ItemTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemTypeRelationships, { nullable: true })
}) {}

export class ItemCategoryData extends S.Class<ItemCategoryData>("ItemCategoryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ItemCategoryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ItemCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(ItemCategoryRelationships, { nullable: true })
}) {}

export class ServiceClassData extends S.Class<ServiceClassData>("ServiceClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceClassRelationships, { nullable: true })
}) {}

export class ServiceCategoryData extends S.Class<ServiceCategoryData>("ServiceCategoryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ServiceCategoryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ServiceCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(ServiceCategoryRelationships, { nullable: true })
}) {}

export class AppraisalData extends S.Class<AppraisalData>("AppraisalData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": AppraisalDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(AppraisalAttributes, { nullable: true }),
  "relationships": S.optionalWith(AppraisalRelationships, { nullable: true })
}) {}

export class ThirdPartyImpactData extends S.Class<ThirdPartyImpactData>("ThirdPartyImpactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": ThirdPartyImpactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true }),
  "attributes": S.optionalWith(ThirdPartyImpactAttributes, { nullable: true }),
  "relationships": S.optionalWith(ThirdPartyImpactRelationships, { nullable: true })
}) {}

export class CreateIdentityData extends S.Class<CreateIdentityData>("CreateIdentityData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIdentityDataType,
  "attributes": S.optionalWith(CreateIdentityAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateIdentityRelationships, { nullable: true })
}) {}

export class UpdateIdentityData extends S.Class<UpdateIdentityData>("UpdateIdentityData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateIdentityDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateIdentityAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateIdentityRelationships, { nullable: true })
}) {}

export class UpdateUserData extends S.Class<UpdateUserData>("UpdateUserData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateUserDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateUserAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateUserRelationships, { nullable: true })
}) {}

export class CreateUserData extends S.Class<CreateUserData>("CreateUserData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateUserDataType,
  "attributes": S.optionalWith(CreateUserAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateUserRelationships, { nullable: true })
}) {}

export class CreateEmailAddressData extends S.Class<CreateEmailAddressData>("CreateEmailAddressData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEmailAddressDataType,
  "attributes": CreateEmailAddressAttributes,
  "relationships": CreateEmailAddressRelationships
}) {}

export class UpdateEmailAddressData extends S.Class<UpdateEmailAddressData>("UpdateEmailAddressData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEmailAddressDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEmailAddressAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEmailAddressRelationships, { nullable: true })
}) {}

export class CreatePhoneNumberData extends S.Class<CreatePhoneNumberData>("CreatePhoneNumberData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePhoneNumberDataType,
  "attributes": CreatePhoneNumberAttributes,
  "relationships": CreatePhoneNumberRelationships
}) {}

export class UpdatePhoneNumberData extends S.Class<UpdatePhoneNumberData>("UpdatePhoneNumberData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePhoneNumberDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePhoneNumberAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePhoneNumberRelationships, { nullable: true })
}) {}

export class CreateAccountInviteData extends S.Class<CreateAccountInviteData>("CreateAccountInviteData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAccountInviteDataType,
  "attributes": CreateAccountInviteAttributes,
  "relationships": S.optionalWith(CreateAccountInviteRelationships, { nullable: true })
}) {}

export class UpdateAccountInviteData extends S.Class<UpdateAccountInviteData>("UpdateAccountInviteData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAccountInviteDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAccountInviteAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAccountInviteRelationships, { nullable: true })
}) {}

export class CreateAuthProfileData extends S.Class<CreateAuthProfileData>("CreateAuthProfileData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAuthProfileDataType,
  "attributes": CreateAuthProfileAttributes,
  "relationships": CreateAuthProfileRelationships
}) {}

export class UpdateAuthProfileData extends S.Class<UpdateAuthProfileData>("UpdateAuthProfileData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAuthProfileDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAuthProfileAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAuthProfileRelationships, { nullable: true })
}) {}

export class CreateUserAccountRoleData extends S.Class<CreateUserAccountRoleData>("CreateUserAccountRoleData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateUserAccountRoleDataType,
  "attributes": CreateUserAccountRoleAttributes,
  "relationships": CreateUserAccountRoleRelationships
}) {}

export class UpdateUserAccountRoleData extends S.Class<UpdateUserAccountRoleData>("UpdateUserAccountRoleData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateUserAccountRoleDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateUserAccountRoleAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateUserAccountRoleRelationships, { nullable: true })
}) {}

export class CreateAccountProviderContactData extends S.Class<CreateAccountProviderContactData>("CreateAccountProviderContactData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAccountProviderContactDataType,
  "attributes": S.optionalWith(CreateAccountProviderContactAttributes, { nullable: true }),
  "relationships": CreateAccountProviderContactRelationships
}) {}

export class UpdateAccountProviderContactData extends S.Class<UpdateAccountProviderContactData>("UpdateAccountProviderContactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAccountProviderContactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAccountProviderContactAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAccountProviderContactRelationships, { nullable: true })
}) {}

export class CreateAccountProviderData extends S.Class<CreateAccountProviderData>("CreateAccountProviderData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAccountProviderDataType,
  "attributes": S.optionalWith(CreateAccountProviderAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateAccountProviderRelationships, { nullable: true })
}) {}

export class UpdateAccountProviderData extends S.Class<UpdateAccountProviderData>("UpdateAccountProviderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAccountProviderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAccountProviderAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAccountProviderRelationships, { nullable: true })
}) {}

export class CreateThirdPartyData extends S.Class<CreateThirdPartyData>("CreateThirdPartyData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateThirdPartyDataType,
  "relationships": CreateThirdPartyRelationships
}) {}

export class UpdateThirdPartyData extends S.Class<UpdateThirdPartyData>("UpdateThirdPartyData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateThirdPartyDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "relationships": S.optionalWith(UpdateThirdPartyRelationships, { nullable: true })
}) {}

export class CreateThirdPartyIndividualData extends S.Class<CreateThirdPartyIndividualData>("CreateThirdPartyIndividualData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateThirdPartyIndividualDataType,
  "attributes": CreateThirdPartyIndividualAttributes,
  "relationships": CreateThirdPartyIndividualRelationships
}) {}

export class UpdateThirdPartyIndividualData extends S.Class<UpdateThirdPartyIndividualData>("UpdateThirdPartyIndividualData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateThirdPartyIndividualDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateThirdPartyIndividualAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateThirdPartyIndividualRelationships, { nullable: true })
}) {}

export class CreateAccountData extends S.Class<CreateAccountData>("CreateAccountData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAccountDataType,
  "attributes": CreateAccountAttributes,
  "relationships": CreateAccountRelationships
}) {}

export class UpdateAccountData extends S.Class<UpdateAccountData>("UpdateAccountData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAccountDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAccountAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAccountRelationships, { nullable: true })
}) {}

export class CreateProjectData extends S.Class<CreateProjectData>("CreateProjectData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProjectDataType,
  "attributes": CreateProjectAttributes,
  "relationships": S.optionalWith(CreateProjectRelationships, { nullable: true })
}) {}

export class UpdateProjectData extends S.Class<UpdateProjectData>("UpdateProjectData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateProjectDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateProjectAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateProjectRelationships, { nullable: true })
}) {}

export class CreateDisasterData extends S.Class<CreateDisasterData>("CreateDisasterData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDisasterDataType,
  "attributes": S.optionalWith(CreateDisasterAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDisasterRelationships, { nullable: true })
}) {}

export class UpdateDisasterData extends S.Class<UpdateDisasterData>("UpdateDisasterData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDisasterDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDisasterAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDisasterRelationships, { nullable: true })
}) {}

export class CreateIncidentData extends S.Class<CreateIncidentData>("CreateIncidentData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentDataType,
  "attributes": CreateIncidentAttributes,
  "relationships": CreateIncidentRelationships
}) {}

export class UpdateIncidentData extends S.Class<UpdateIncidentData>("UpdateIncidentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateIncidentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateIncidentAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateIncidentRelationships, { nullable: true })
}) {}

export class CreateProjectMediaData extends S.Class<CreateProjectMediaData>("CreateProjectMediaData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProjectMediaDataType,
  "attributes": S.optionalWith(CreateProjectMediaAttributes, { nullable: true }),
  "relationships": CreateProjectMediaRelationships
}) {}

export class UpdateProjectMediaData extends S.Class<UpdateProjectMediaData>("UpdateProjectMediaData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateProjectMediaDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateProjectMediaAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateProjectMediaRelationships, { nullable: true })
}) {}

export class CreateFileProcessData extends S.Class<CreateFileProcessData>("CreateFileProcessData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateFileProcessDataType,
  "attributes": S.optionalWith(CreateFileProcessAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateFileProcessRelationships, { nullable: true })
}) {}

export class UpdateFileProcessData extends S.Class<UpdateFileProcessData>("UpdateFileProcessData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateFileProcessDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateFileProcessAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateFileProcessRelationships, { nullable: true })
}) {}

export class CreateProjectImpactData extends S.Class<CreateProjectImpactData>("CreateProjectImpactData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProjectImpactDataType,
  "attributes": S.optionalWith(CreateProjectImpactAttributes, { nullable: true }),
  "relationships": CreateProjectImpactRelationships
}) {}

export class UpdateProjectImpactData extends S.Class<UpdateProjectImpactData>("UpdateProjectImpactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateProjectImpactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateProjectImpactAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateProjectImpactRelationships, { nullable: true })
}) {}

export class CreateMediaData extends S.Class<CreateMediaData>("CreateMediaData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateMediaDataType,
  "attributes": S.optionalWith(CreateMediaAttributes, { nullable: true }),
  "relationships": CreateMediaRelationships
}) {}

export class UpdateMediaData extends S.Class<UpdateMediaData>("UpdateMediaData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateMediaDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateMediaAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateMediaRelationships, { nullable: true })
}) {}

export class CreateItemizableFinancialDocumentStatsData extends S.Class<CreateItemizableFinancialDocumentStatsData>("CreateItemizableFinancialDocumentStatsData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemizableFinancialDocumentStatsDataType,
  "attributes": S.optionalWith(CreateItemizableFinancialDocumentStatsAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateItemizableFinancialDocumentStatsRelationships, { nullable: true })
}) {}

export class UpdateItemizableFinancialDocumentStatsData extends S.Class<UpdateItemizableFinancialDocumentStatsData>("UpdateItemizableFinancialDocumentStatsData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemizableFinancialDocumentStatsDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemizableFinancialDocumentStatsAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemizableFinancialDocumentStatsRelationships, { nullable: true })
}) {}

export class CreateFileData extends S.Class<CreateFileData>("CreateFileData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateFileDataType,
  "attributes": CreateFileAttributes,
  "relationships": S.optionalWith(CreateFileRelationships, { nullable: true })
}) {}

export class UpdateFileData extends S.Class<UpdateFileData>("UpdateFileData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateFileDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateFileAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateFileRelationships, { nullable: true })
}) {}

export class CreateAssetData extends S.Class<CreateAssetData>("CreateAssetData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetDataType,
  "attributes": S.optionalWith(CreateAssetAttributes, { nullable: true }),
  "relationships": CreateAssetRelationships
}) {}

export class UpdateAssetData extends S.Class<UpdateAssetData>("UpdateAssetData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAssetDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAssetAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAssetRelationships, { nullable: true })
}) {}

export class CreatePerilData extends S.Class<CreatePerilData>("CreatePerilData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePerilDataType,
  "attributes": S.optionalWith(CreatePerilAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreatePerilRelationships, { nullable: true })
}) {}

export class UpdatePerilData extends S.Class<UpdatePerilData>("UpdatePerilData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePerilDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePerilAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePerilRelationships, { nullable: true })
}) {}

export class CreateIncidentClassData extends S.Class<CreateIncidentClassData>("CreateIncidentClassData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentClassDataType,
  "attributes": S.optionalWith(CreateIncidentClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateIncidentClassRelationships, { nullable: true })
}) {}

export class UpdateIncidentClassData extends S.Class<UpdateIncidentClassData>("UpdateIncidentClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateIncidentClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateIncidentClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateIncidentClassRelationships, { nullable: true })
}) {}

export class CreateServiceTypeData extends S.Class<CreateServiceTypeData>("CreateServiceTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTypeDataType,
  "attributes": S.optionalWith(CreateServiceTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateServiceTypeRelationships, { nullable: true })
}) {}

export class UpdateServiceTypeData extends S.Class<UpdateServiceTypeData>("UpdateServiceTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceTypeRelationships, { nullable: true })
}) {}

export class CreateDwellingData extends S.Class<CreateDwellingData>("CreateDwellingData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDwellingDataType,
  "attributes": S.optionalWith(CreateDwellingAttributes, { nullable: true }),
  "relationships": CreateDwellingRelationships
}) {}

export class UpdateDwellingData extends S.Class<UpdateDwellingData>("UpdateDwellingData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDwellingDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDwellingAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDwellingRelationships, { nullable: true })
}) {}

export class CreateAssetAppraisalData extends S.Class<CreateAssetAppraisalData>("CreateAssetAppraisalData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetAppraisalDataType,
  "attributes": CreateAssetAppraisalAttributes,
  "relationships": CreateAssetAppraisalRelationships
}) {}

export class UpdateAssetAppraisalData extends S.Class<UpdateAssetAppraisalData>("UpdateAssetAppraisalData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAssetAppraisalDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAssetAppraisalAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAssetAppraisalRelationships, { nullable: true })
}) {}

export class CreateDocumentData extends S.Class<CreateDocumentData>("CreateDocumentData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDocumentDataType,
  "attributes": S.optionalWith(CreateDocumentAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDocumentRelationships, { nullable: true })
}) {}

export class UpdateDocumentData extends S.Class<UpdateDocumentData>("UpdateDocumentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDocumentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDocumentAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDocumentRelationships, { nullable: true })
}) {}

export class CreateIncidentReportData extends S.Class<CreateIncidentReportData>("CreateIncidentReportData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentReportDataType,
  "attributes": S.optionalWith(CreateIncidentReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateIncidentReportRelationships, { nullable: true })
}) {}

export class UpdateIncidentReportData extends S.Class<UpdateIncidentReportData>("UpdateIncidentReportData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateIncidentReportDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateIncidentReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateIncidentReportRelationships, { nullable: true })
}) {}

export class CreatePoliceReportData extends S.Class<CreatePoliceReportData>("CreatePoliceReportData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePoliceReportDataType,
  "attributes": S.optionalWith(CreatePoliceReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreatePoliceReportRelationships, { nullable: true })
}) {}

export class UpdatePoliceReportData extends S.Class<UpdatePoliceReportData>("UpdatePoliceReportData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePoliceReportDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePoliceReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePoliceReportRelationships, { nullable: true })
}) {}

export class CreateParamedicReportData extends S.Class<CreateParamedicReportData>("CreateParamedicReportData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateParamedicReportDataType,
  "attributes": S.optionalWith(CreateParamedicReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateParamedicReportRelationships, { nullable: true })
}) {}

export class UpdateParamedicReportData extends S.Class<UpdateParamedicReportData>("UpdateParamedicReportData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateParamedicReportDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateParamedicReportAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateParamedicReportRelationships, { nullable: true })
}) {}

export class CreateContractData extends S.Class<CreateContractData>("CreateContractData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateContractDataType,
  "attributes": S.optionalWith(CreateContractAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateContractRelationships, { nullable: true })
}) {}

export class UpdateContractData extends S.Class<UpdateContractData>("UpdateContractData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateContractDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateContractAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateContractRelationships, { nullable: true })
}) {}

export class CreateRentRollData extends S.Class<CreateRentRollData>("CreateRentRollData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateRentRollDataType,
  "attributes": S.optionalWith(CreateRentRollAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateRentRollRelationships, { nullable: true })
}) {}

export class UpdateRentRollData extends S.Class<UpdateRentRollData>("UpdateRentRollData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateRentRollDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateRentRollAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateRentRollRelationships, { nullable: true })
}) {}

export class CreatePermitData extends S.Class<CreatePermitData>("CreatePermitData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePermitDataType,
  "attributes": S.optionalWith(CreatePermitAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreatePermitRelationships, { nullable: true })
}) {}

export class UpdatePermitData extends S.Class<UpdatePermitData>("UpdatePermitData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePermitDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePermitAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePermitRelationships, { nullable: true })
}) {}

export class CreateBlueprintData extends S.Class<CreateBlueprintData>("CreateBlueprintData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBlueprintDataType,
  "attributes": S.optionalWith(CreateBlueprintAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {}

export class UpdateBlueprintData extends S.Class<UpdateBlueprintData>("UpdateBlueprintData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBlueprintDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBlueprintAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {}

export class CreateDeclarationsPageData extends S.Class<CreateDeclarationsPageData>("CreateDeclarationsPageData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDeclarationsPageDataType,
  "attributes": S.optionalWith(CreateDeclarationsPageAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDeclarationsPageRelationships, { nullable: true })
}) {}

export class UpdateDeclarationsPageData extends S.Class<UpdateDeclarationsPageData>("UpdateDeclarationsPageData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDeclarationsPageDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDeclarationsPageAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDeclarationsPageRelationships, { nullable: true })
}) {}

export class CreatePolicyJacketData extends S.Class<CreatePolicyJacketData>("CreatePolicyJacketData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePolicyJacketDataType,
  "attributes": S.optionalWith(CreatePolicyJacketAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreatePolicyJacketRelationships, { nullable: true })
}) {}

export class UpdatePolicyJacketData extends S.Class<UpdatePolicyJacketData>("UpdatePolicyJacketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePolicyJacketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePolicyJacketAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePolicyJacketRelationships, { nullable: true })
}) {}

export class CreateScopeOfLossData extends S.Class<CreateScopeOfLossData>("CreateScopeOfLossData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateScopeOfLossDataType,
  "attributes": S.optionalWith(CreateScopeOfLossAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateScopeOfLossRelationships, { nullable: true })
}) {}

export class UpdateScopeOfLossData extends S.Class<UpdateScopeOfLossData>("UpdateScopeOfLossData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateScopeOfLossDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateScopeOfLossAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateScopeOfLossRelationships, { nullable: true })
}) {}

export class CreateDeliveryPaperworkData extends S.Class<CreateDeliveryPaperworkData>("CreateDeliveryPaperworkData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDeliveryPaperworkDataType,
  "attributes": S.optionalWith(CreateDeliveryPaperworkAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDeliveryPaperworkRelationships, { nullable: true })
}) {}

export class UpdateDeliveryPaperworkData extends S.Class<UpdateDeliveryPaperworkData>("UpdateDeliveryPaperworkData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDeliveryPaperworkDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDeliveryPaperworkAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDeliveryPaperworkRelationships, { nullable: true })
}) {}

export class CreateProductSpecData extends S.Class<CreateProductSpecData>("CreateProductSpecData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateProductSpecDataType,
  "attributes": S.optionalWith(CreateProductSpecAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateProductSpecRelationships, { nullable: true })
}) {}

export class UpdateProductSpecData extends S.Class<UpdateProductSpecData>("UpdateProductSpecData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateProductSpecDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateProductSpecAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateProductSpecRelationships, { nullable: true })
}) {}

export class CreateUserManualData extends S.Class<CreateUserManualData>("CreateUserManualData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateUserManualDataType,
  "attributes": S.optionalWith(CreateUserManualAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateUserManualRelationships, { nullable: true })
}) {}

export class UpdateUserManualData extends S.Class<UpdateUserManualData>("UpdateUserManualData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateUserManualDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateUserManualAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateUserManualRelationships, { nullable: true })
}) {}

export class CreateWarrantyData extends S.Class<CreateWarrantyData>("CreateWarrantyData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateWarrantyDataType,
  "attributes": S.optionalWith(CreateWarrantyAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateWarrantyRelationships, { nullable: true })
}) {}

export class UpdateWarrantyData extends S.Class<UpdateWarrantyData>("UpdateWarrantyData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateWarrantyDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateWarrantyAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateWarrantyRelationships, { nullable: true })
}) {}

export class CreateDeedData extends S.Class<CreateDeedData>("CreateDeedData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDeedDataType,
  "attributes": S.optionalWith(CreateDeedAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDeedRelationships, { nullable: true })
}) {}

export class UpdateDeedData extends S.Class<UpdateDeedData>("UpdateDeedData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDeedDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDeedAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDeedRelationships, { nullable: true })
}) {}

export class CreateFinancialDocumentData extends S.Class<CreateFinancialDocumentData>("CreateFinancialDocumentData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateFinancialDocumentDataType,
  "attributes": CreateFinancialDocumentAttributes,
  "relationships": S.optionalWith(CreateFinancialDocumentRelationships, { nullable: true })
}) {}

export class UpdateFinancialDocumentData extends S.Class<UpdateFinancialDocumentData>("UpdateFinancialDocumentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateFinancialDocumentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateFinancialDocumentAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateFinancialDocumentRelationships, { nullable: true })
}) {}

export class CreateDocumentClassData extends S.Class<CreateDocumentClassData>("CreateDocumentClassData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDocumentClassDataType,
  "attributes": S.optionalWith(CreateDocumentClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDocumentClassRelationships, { nullable: true })
}) {}

export class UpdateDocumentClassData extends S.Class<UpdateDocumentClassData>("UpdateDocumentClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDocumentClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDocumentClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDocumentClassRelationships, { nullable: true })
}) {}

export class CreateDocumentTypeData extends S.Class<CreateDocumentTypeData>("CreateDocumentTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDocumentTypeDataType,
  "attributes": S.optionalWith(CreateDocumentTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDocumentTypeRelationships, { nullable: true })
}) {}

export class UpdateDocumentTypeData extends S.Class<UpdateDocumentTypeData>("UpdateDocumentTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDocumentTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDocumentTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDocumentTypeRelationships, { nullable: true })
}) {}

export class CreateSpaceGroupData extends S.Class<CreateSpaceGroupData>("CreateSpaceGroupData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceGroupDataType,
  "attributes": S.optionalWith(CreateSpaceGroupAttributes, { nullable: true }),
  "relationships": CreateSpaceGroupRelationships
}) {}

export class UpdateSpaceGroupData extends S.Class<UpdateSpaceGroupData>("UpdateSpaceGroupData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSpaceGroupDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSpaceGroupAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSpaceGroupRelationships, { nullable: true })
}) {}

export class CreateSpaceData extends S.Class<CreateSpaceData>("CreateSpaceData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceDataType,
  "attributes": S.optionalWith(CreateSpaceAttributes, { nullable: true }),
  "relationships": CreateSpaceRelationships
}) {}

export class UpdateSpaceData extends S.Class<UpdateSpaceData>("UpdateSpaceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSpaceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSpaceAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSpaceRelationships, { nullable: true })
}) {}

export class CreateSpaceTypeData extends S.Class<CreateSpaceTypeData>("CreateSpaceTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceTypeDataType,
  "attributes": S.optionalWith(CreateSpaceTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateSpaceTypeRelationships, { nullable: true })
}) {}

export class UpdateSpaceTypeData extends S.Class<UpdateSpaceTypeData>("UpdateSpaceTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSpaceTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSpaceTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSpaceTypeRelationships, { nullable: true })
}) {}

export class CreateSpaceCategoryData extends S.Class<CreateSpaceCategoryData>("CreateSpaceCategoryData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceCategoryDataType,
  "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateSpaceCategoryRelationships, { nullable: true })
}) {}

export class UpdateSpaceCategoryData extends S.Class<UpdateSpaceCategoryData>("UpdateSpaceCategoryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSpaceCategoryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSpaceCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSpaceCategoryRelationships, { nullable: true })
}) {}

export class CreateSpaceClassData extends S.Class<CreateSpaceClassData>("CreateSpaceClassData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceClassDataType,
  "attributes": S.optionalWith(CreateSpaceClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateSpaceClassRelationships, { nullable: true })
}) {}

export class UpdateSpaceClassData extends S.Class<UpdateSpaceClassData>("UpdateSpaceClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSpaceClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSpaceClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSpaceClassRelationships, { nullable: true })
}) {}

export class CreateSpaceGroupTypeData extends S.Class<CreateSpaceGroupTypeData>("CreateSpaceGroupTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceGroupTypeDataType,
  "attributes": S.optionalWith(CreateSpaceGroupTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateSpaceGroupTypeRelationships, { nullable: true })
}) {}

export class UpdateSpaceGroupTypeData extends S.Class<UpdateSpaceGroupTypeData>("UpdateSpaceGroupTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSpaceGroupTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSpaceGroupTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSpaceGroupTypeRelationships, { nullable: true })
}) {}

export class CreateBucketClassData extends S.Class<CreateBucketClassData>("CreateBucketClassData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketClassDataType,
  "attributes": S.optionalWith(CreateBucketClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateBucketClassRelationships, { nullable: true })
}) {}

export class UpdateBucketClassData extends S.Class<UpdateBucketClassData>("UpdateBucketClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBucketClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBucketClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBucketClassRelationships, { nullable: true })
}) {}

export class CreateBucketTypeData extends S.Class<CreateBucketTypeData>("CreateBucketTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketTypeDataType,
  "attributes": S.optionalWith(CreateBucketTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateBucketTypeRelationships, { nullable: true })
}) {}

export class UpdateBucketTypeData extends S.Class<UpdateBucketTypeData>("UpdateBucketTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBucketTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBucketTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBucketTypeRelationships, { nullable: true })
}) {}

export class CreateAddressData extends S.Class<CreateAddressData>("CreateAddressData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAddressDataType,
  "attributes": CreateAddressAttributes,
  "relationships": CreateAddressRelationships
}) {}

export class UpdateAddressData extends S.Class<UpdateAddressData>("UpdateAddressData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAddressDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAddressAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAddressRelationships, { nullable: true })
}) {}

export class CreateThirdPartyDwellingData extends S.Class<CreateThirdPartyDwellingData>("CreateThirdPartyDwellingData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateThirdPartyDwellingDataType,
  "attributes": CreateThirdPartyDwellingAttributes,
  "relationships": CreateThirdPartyDwellingRelationships
}) {}

export class UpdateThirdPartyDwellingData extends S.Class<UpdateThirdPartyDwellingData>("UpdateThirdPartyDwellingData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateThirdPartyDwellingDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateThirdPartyDwellingAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateThirdPartyDwellingRelationships, { nullable: true })
}) {}

export class CreateItemizableFinancialDocumentData extends S.Class<CreateItemizableFinancialDocumentData>("CreateItemizableFinancialDocumentData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemizableFinancialDocumentDataType,
  "attributes": CreateItemizableFinancialDocumentAttributes,
  "relationships": S.optionalWith(CreateItemizableFinancialDocumentRelationships, { nullable: true })
}) {}

export class UpdateItemizableFinancialDocumentData extends S.Class<UpdateItemizableFinancialDocumentData>("UpdateItemizableFinancialDocumentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemizableFinancialDocumentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemizableFinancialDocumentAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemizableFinancialDocumentRelationships, { nullable: true })
}) {}

export class CreateItemImpactPaymentData extends S.Class<CreateItemImpactPaymentData>("CreateItemImpactPaymentData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactPaymentDataType,
  "attributes": CreateItemImpactPaymentAttributes,
  "relationships": CreateItemImpactPaymentRelationships
}) {}

export class UpdateItemImpactPaymentData extends S.Class<UpdateItemImpactPaymentData>("UpdateItemImpactPaymentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemImpactPaymentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemImpactPaymentAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemImpactPaymentRelationships, { nullable: true })
}) {}

export class CreateItemImpactInvoiceData extends S.Class<CreateItemImpactInvoiceData>("CreateItemImpactInvoiceData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactInvoiceDataType,
  "attributes": CreateItemImpactInvoiceAttributes,
  "relationships": CreateItemImpactInvoiceRelationships
}) {}

export class UpdateItemImpactInvoiceData extends S.Class<UpdateItemImpactInvoiceData>("UpdateItemImpactInvoiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemImpactInvoiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemImpactInvoiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemImpactInvoiceRelationships, { nullable: true })
}) {}

export class CreateItemImpactEstimateData extends S.Class<CreateItemImpactEstimateData>("CreateItemImpactEstimateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactEstimateDataType,
  "attributes": CreateItemImpactEstimateAttributes,
  "relationships": CreateItemImpactEstimateRelationships
}) {}

export class UpdateItemImpactEstimateData extends S.Class<UpdateItemImpactEstimateData>("UpdateItemImpactEstimateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemImpactEstimateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemImpactEstimateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemImpactEstimateRelationships, { nullable: true })
}) {}

export class CreateItemAppraisalData extends S.Class<CreateItemAppraisalData>("CreateItemAppraisalData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemAppraisalDataType,
  "attributes": S.optionalWith(CreateItemAppraisalAttributes, { nullable: true }),
  "relationships": CreateItemAppraisalRelationships
}) {}

export class UpdateItemAppraisalData extends S.Class<UpdateItemAppraisalData>("UpdateItemAppraisalData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemAppraisalDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemAppraisalAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemAppraisalRelationships, { nullable: true })
}) {}

export class CreateItemInvoiceData extends S.Class<CreateItemInvoiceData>("CreateItemInvoiceData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemInvoiceDataType,
  "attributes": CreateItemInvoiceAttributes,
  "relationships": CreateItemInvoiceRelationships
}) {}

export class UpdateItemInvoiceData extends S.Class<UpdateItemInvoiceData>("UpdateItemInvoiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemInvoiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemInvoiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemInvoiceRelationships, { nullable: true })
}) {}

export class CreateItemPaymentData extends S.Class<CreateItemPaymentData>("CreateItemPaymentData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemPaymentDataType,
  "attributes": CreateItemPaymentAttributes,
  "relationships": CreateItemPaymentRelationships
}) {}

export class UpdateItemPaymentData extends S.Class<UpdateItemPaymentData>("UpdateItemPaymentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemPaymentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemPaymentAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemPaymentRelationships, { nullable: true })
}) {}

export class CreateItemEstimateData extends S.Class<CreateItemEstimateData>("CreateItemEstimateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemEstimateDataType,
  "attributes": CreateItemEstimateAttributes,
  "relationships": CreateItemEstimateRelationships
}) {}

export class UpdateItemEstimateData extends S.Class<UpdateItemEstimateData>("UpdateItemEstimateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemEstimateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemEstimateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemEstimateRelationships, { nullable: true })
}) {}

export class CreateItemProductSuggestionData extends S.Class<CreateItemProductSuggestionData>("CreateItemProductSuggestionData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemProductSuggestionDataType,
  "attributes": CreateItemProductSuggestionAttributes,
  "relationships": CreateItemProductSuggestionRelationships
}) {}

export class UpdateItemProductSuggestionData extends S.Class<UpdateItemProductSuggestionData>("UpdateItemProductSuggestionData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemProductSuggestionDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemProductSuggestionAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemProductSuggestionRelationships, { nullable: true })
}) {}

export class CreateServiceTaskPaymentData extends S.Class<CreateServiceTaskPaymentData>("CreateServiceTaskPaymentData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskPaymentDataType,
  "attributes": CreateServiceTaskPaymentAttributes,
  "relationships": CreateServiceTaskPaymentRelationships
}) {}

export class UpdateServiceTaskPaymentData extends S.Class<UpdateServiceTaskPaymentData>("UpdateServiceTaskPaymentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceTaskPaymentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceTaskPaymentAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceTaskPaymentRelationships, { nullable: true })
}) {}

export class CreateServiceTaskInvoiceData extends S.Class<CreateServiceTaskInvoiceData>("CreateServiceTaskInvoiceData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskInvoiceDataType,
  "attributes": CreateServiceTaskInvoiceAttributes,
  "relationships": CreateServiceTaskInvoiceRelationships
}) {}

export class UpdateServiceTaskInvoiceData extends S.Class<UpdateServiceTaskInvoiceData>("UpdateServiceTaskInvoiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceTaskInvoiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceTaskInvoiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceTaskInvoiceRelationships, { nullable: true })
}) {}

export class CreateServiceTaskEstimateData extends S.Class<CreateServiceTaskEstimateData>("CreateServiceTaskEstimateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskEstimateDataType,
  "attributes": CreateServiceTaskEstimateAttributes,
  "relationships": CreateServiceTaskEstimateRelationships
}) {}

export class UpdateServiceTaskEstimateData extends S.Class<UpdateServiceTaskEstimateData>("UpdateServiceTaskEstimateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceTaskEstimateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceTaskEstimateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceTaskEstimateRelationships, { nullable: true })
}) {}

export class CreateChangeOrderData extends S.Class<CreateChangeOrderData>("CreateChangeOrderData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateChangeOrderDataType,
  "attributes": CreateChangeOrderAttributes,
  "relationships": CreateChangeOrderRelationships
}) {}

export class UpdateChangeOrderData extends S.Class<UpdateChangeOrderData>("UpdateChangeOrderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateChangeOrderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateChangeOrderAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateChangeOrderRelationships, { nullable: true })
}) {}

export class CreateEntrySourceMetadataData extends S.Class<CreateEntrySourceMetadataData>("CreateEntrySourceMetadataData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEntrySourceMetadataDataType,
  "attributes": S.optionalWith(CreateEntrySourceMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateEntrySourceMetadataRelationships, { nullable: true })
}) {}

export class UpdateEntrySourceMetadataData extends S.Class<UpdateEntrySourceMetadataData>("UpdateEntrySourceMetadataData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEntrySourceMetadataDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEntrySourceMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEntrySourceMetadataRelationships, { nullable: true })
}) {}

export class CreateAppraisalLineData extends S.Class<CreateAppraisalLineData>("CreateAppraisalLineData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAppraisalLineDataType,
  "attributes": S.optionalWith(CreateAppraisalLineAttributes, { nullable: true }),
  "relationships": CreateAppraisalLineRelationships
}) {}

export class UpdateAppraisalLineData extends S.Class<UpdateAppraisalLineData>("UpdateAppraisalLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAppraisalLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAppraisalLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAppraisalLineRelationships, { nullable: true })
}) {}

export class CreateInvoiceLineData extends S.Class<CreateInvoiceLineData>("CreateInvoiceLineData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateInvoiceLineDataType,
  "attributes": CreateInvoiceLineAttributes,
  "relationships": CreateInvoiceLineRelationships
}) {}

export class UpdateInvoiceLineData extends S.Class<UpdateInvoiceLineData>("UpdateInvoiceLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateInvoiceLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateInvoiceLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateInvoiceLineRelationships, { nullable: true })
}) {}

export class CreatePaymentLineData extends S.Class<CreatePaymentLineData>("CreatePaymentLineData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePaymentLineDataType,
  "attributes": CreatePaymentLineAttributes,
  "relationships": CreatePaymentLineRelationships
}) {}

export class UpdatePaymentLineData extends S.Class<UpdatePaymentLineData>("UpdatePaymentLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePaymentLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePaymentLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePaymentLineRelationships, { nullable: true })
}) {}

export class CreateEstimateLineData extends S.Class<CreateEstimateLineData>("CreateEstimateLineData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEstimateLineDataType,
  "attributes": CreateEstimateLineAttributes,
  "relationships": CreateEstimateLineRelationships
}) {}

export class UpdateEstimateLineData extends S.Class<UpdateEstimateLineData>("UpdateEstimateLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEstimateLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEstimateLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEstimateLineRelationships, { nullable: true })
}) {}

export class CreateEntrySourceMediaData extends S.Class<CreateEntrySourceMediaData>("CreateEntrySourceMediaData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEntrySourceMediaDataType,
  "attributes": S.optionalWith(CreateEntrySourceMediaAttributes, { nullable: true }),
  "relationships": CreateEntrySourceMediaRelationships
}) {}

export class UpdateEntrySourceMediaData extends S.Class<UpdateEntrySourceMediaData>("UpdateEntrySourceMediaData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEntrySourceMediaDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEntrySourceMediaAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEntrySourceMediaRelationships, { nullable: true })
}) {}

export class CreateItemChangeOrderData extends S.Class<CreateItemChangeOrderData>("CreateItemChangeOrderData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemChangeOrderDataType,
  "attributes": CreateItemChangeOrderAttributes,
  "relationships": CreateItemChangeOrderRelationships
}) {}

export class UpdateItemChangeOrderData extends S.Class<UpdateItemChangeOrderData>("UpdateItemChangeOrderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemChangeOrderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemChangeOrderAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemChangeOrderRelationships, { nullable: true })
}) {}

export class CreateItemImpactChangeOrderData extends S.Class<CreateItemImpactChangeOrderData>("CreateItemImpactChangeOrderData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactChangeOrderDataType,
  "attributes": CreateItemImpactChangeOrderAttributes,
  "relationships": CreateItemImpactChangeOrderRelationships
}) {}

export class UpdateItemImpactChangeOrderData extends S.Class<UpdateItemImpactChangeOrderData>("UpdateItemImpactChangeOrderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemImpactChangeOrderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemImpactChangeOrderAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemImpactChangeOrderRelationships, { nullable: true })
}) {}

export class CreateEstimateData extends S.Class<CreateEstimateData>("CreateEstimateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEstimateDataType,
  "attributes": CreateEstimateAttributes,
  "relationships": S.optionalWith(CreateEstimateRelationships, { nullable: true })
}) {}

export class UpdateEstimateData extends S.Class<UpdateEstimateData>("UpdateEstimateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEstimateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEstimateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEstimateRelationships, { nullable: true })
}) {}

export class CreateChangeOrderLineData extends S.Class<CreateChangeOrderLineData>("CreateChangeOrderLineData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateChangeOrderLineDataType,
  "attributes": CreateChangeOrderLineAttributes,
  "relationships": CreateChangeOrderLineRelationships
}) {}

export class UpdateChangeOrderLineData extends S.Class<UpdateChangeOrderLineData>("UpdateChangeOrderLineData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateChangeOrderLineDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateChangeOrderLineAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateChangeOrderLineRelationships, { nullable: true })
}) {}

export class CreateServiceTaskChangeOrderData extends S.Class<CreateServiceTaskChangeOrderData>("CreateServiceTaskChangeOrderData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskChangeOrderDataType,
  "attributes": CreateServiceTaskChangeOrderAttributes,
  "relationships": CreateServiceTaskChangeOrderRelationships
}) {}

export class UpdateServiceTaskChangeOrderData extends S.Class<UpdateServiceTaskChangeOrderData>("UpdateServiceTaskChangeOrderData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceTaskChangeOrderDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceTaskChangeOrderAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceTaskChangeOrderRelationships, { nullable: true })
}) {}

export class CreateEntrySourceData extends S.Class<CreateEntrySourceData>("CreateEntrySourceData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEntrySourceDataType,
  "attributes": CreateEntrySourceAttributes,
  "relationships": S.optionalWith(CreateEntrySourceRelationships, { nullable: true })
}) {}

export class UpdateEntrySourceData extends S.Class<UpdateEntrySourceData>("UpdateEntrySourceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEntrySourceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEntrySourceAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEntrySourceRelationships, { nullable: true })
}) {}

export class CreateServiceTaskData extends S.Class<CreateServiceTaskData>("CreateServiceTaskData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceTaskDataType,
  "attributes": CreateServiceTaskAttributes,
  "relationships": CreateServiceTaskRelationships
}) {}

export class UpdateServiceTaskData extends S.Class<UpdateServiceTaskData>("UpdateServiceTaskData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceTaskDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceTaskAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceTaskRelationships, { nullable: true })
}) {}

export class CreatePaymentData extends S.Class<CreatePaymentData>("CreatePaymentData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePaymentDataType,
  "attributes": CreatePaymentAttributes,
  "relationships": S.optionalWith(CreatePaymentRelationships, { nullable: true })
}) {}

export class UpdatePaymentData extends S.Class<UpdatePaymentData>("UpdatePaymentData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePaymentDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePaymentAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePaymentRelationships, { nullable: true })
}) {}

export class CreateServiceData extends S.Class<CreateServiceData>("CreateServiceData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceDataType,
  "attributes": CreateServiceAttributes,
  "relationships": S.optionalWith(CreateServiceRelationships, { nullable: true })
}) {}

export class UpdateServiceData extends S.Class<UpdateServiceData>("UpdateServiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceRelationships, { nullable: true })
}) {}

export class CreateInvoiceData extends S.Class<CreateInvoiceData>("CreateInvoiceData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateInvoiceDataType,
  "attributes": CreateInvoiceAttributes,
  "relationships": S.optionalWith(CreateInvoiceRelationships, { nullable: true })
}) {}

export class UpdateInvoiceData extends S.Class<UpdateInvoiceData>("UpdateInvoiceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateInvoiceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateInvoiceAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateInvoiceRelationships, { nullable: true })
}) {}

export class CreateItemImpactData extends S.Class<CreateItemImpactData>("CreateItemImpactData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemImpactDataType,
  "attributes": S.optionalWith(CreateItemImpactAttributes, { nullable: true }),
  "relationships": CreateItemImpactRelationships
}) {}

export class UpdateItemImpactData extends S.Class<UpdateItemImpactData>("UpdateItemImpactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemImpactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemImpactAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemImpactRelationships, { nullable: true })
}) {}

export class CreateItemData extends S.Class<CreateItemData>("CreateItemData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemDataType,
  "attributes": CreateItemAttributes,
  "relationships": S.optionalWith(CreateItemRelationships, { nullable: true })
}) {}

export class UpdateItemData extends S.Class<UpdateItemData>("UpdateItemData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemRelationships, { nullable: true })
}) {}

export class CreateItemMediaSuggestionData extends S.Class<CreateItemMediaSuggestionData>("CreateItemMediaSuggestionData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemMediaSuggestionDataType,
  "attributes": CreateItemMediaSuggestionAttributes,
  "relationships": CreateItemMediaSuggestionRelationships
}) {}

export class UpdateItemMediaSuggestionData extends S.Class<UpdateItemMediaSuggestionData>("UpdateItemMediaSuggestionData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemMediaSuggestionDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemMediaSuggestionAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemMediaSuggestionRelationships, { nullable: true })
}) {}

export class CreateDepreciationModifierData extends S.Class<CreateDepreciationModifierData>("CreateDepreciationModifierData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDepreciationModifierDataType,
  "attributes": S.optionalWith(CreateDepreciationModifierAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDepreciationModifierRelationships, { nullable: true })
}) {}

export class UpdateDepreciationModifierData extends S.Class<UpdateDepreciationModifierData>("UpdateDepreciationModifierData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDepreciationModifierDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDepreciationModifierAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDepreciationModifierRelationships, { nullable: true })
}) {}

export class CreateDepreciationOverrideData extends S.Class<CreateDepreciationOverrideData>("CreateDepreciationOverrideData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDepreciationOverrideDataType,
  "attributes": S.optionalWith(CreateDepreciationOverrideAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDepreciationOverrideRelationships, { nullable: true })
}) {}

export class UpdateDepreciationOverrideData extends S.Class<UpdateDepreciationOverrideData>("UpdateDepreciationOverrideData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDepreciationOverrideDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDepreciationOverrideAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDepreciationOverrideRelationships, { nullable: true })
}) {}

export class CreateItemTemplateData extends S.Class<CreateItemTemplateData>("CreateItemTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemTemplateDataType,
  "attributes": S.optionalWith(CreateItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateItemTemplateRelationships, { nullable: true })
}) {}

export class UpdateItemTemplateData extends S.Class<UpdateItemTemplateData>("UpdateItemTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemTemplateRelationships, { nullable: true })
}) {}

export class CreateBaseSubBucketMetadataData extends S.Class<CreateBaseSubBucketMetadataData>("CreateBaseSubBucketMetadataData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBaseSubBucketMetadataDataType,
  "attributes": S.optionalWith(CreateBaseSubBucketMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateBaseSubBucketMetadataRelationships, { nullable: true })
}) {}

export class UpdateBaseSubBucketMetadataData extends S.Class<UpdateBaseSubBucketMetadataData>("UpdateBaseSubBucketMetadataData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBaseSubBucketMetadataDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBaseSubBucketMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBaseSubBucketMetadataRelationships, { nullable: true })
}) {}

export class CreateBaseBucketMetadataData extends S.Class<CreateBaseBucketMetadataData>("CreateBaseBucketMetadataData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBaseBucketMetadataDataType,
  "attributes": S.optionalWith(CreateBaseBucketMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateBaseBucketMetadataRelationships, { nullable: true })
}) {}

export class UpdateBaseBucketMetadataData extends S.Class<UpdateBaseBucketMetadataData>("UpdateBaseBucketMetadataData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBaseBucketMetadataDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBaseBucketMetadataAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBaseBucketMetadataRelationships, { nullable: true })
}) {}

export class CreateFundingSourceData extends S.Class<CreateFundingSourceData>("CreateFundingSourceData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateFundingSourceDataType,
  "attributes": CreateFundingSourceAttributes,
  "relationships": CreateFundingSourceRelationships
}) {}

export class UpdateFundingSourceData extends S.Class<UpdateFundingSourceData>("UpdateFundingSourceData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateFundingSourceDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateFundingSourceAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateFundingSourceRelationships, { nullable: true })
}) {}

export class CreateEntryData extends S.Class<CreateEntryData>("CreateEntryData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEntryDataType,
  "attributes": S.optionalWith(CreateEntryAttributes, { nullable: true }),
  "relationships": CreateEntryRelationships
}) {}

export class UpdateEntryData extends S.Class<UpdateEntryData>("UpdateEntryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEntryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEntryAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEntryRelationships, { nullable: true })
}) {}

export class CreateBucketFundingData extends S.Class<CreateBucketFundingData>("CreateBucketFundingData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketFundingDataType,
  "attributes": CreateBucketFundingAttributes,
  "relationships": CreateBucketFundingRelationships
}) {}

export class UpdateBucketFundingData extends S.Class<UpdateBucketFundingData>("UpdateBucketFundingData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBucketFundingDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBucketFundingAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBucketFundingRelationships, { nullable: true })
}) {}

export class CreateBaseBucketData extends S.Class<CreateBaseBucketData>("CreateBaseBucketData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBaseBucketDataType,
  "attributes": CreateBaseBucketAttributes,
  "relationships": CreateBaseBucketRelationships
}) {}

export class UpdateBaseBucketData extends S.Class<UpdateBaseBucketData>("UpdateBaseBucketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBaseBucketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBaseBucketAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBaseBucketRelationships, { nullable: true })
}) {}

export class CreateFundingData extends S.Class<CreateFundingData>("CreateFundingData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateFundingDataType,
  "attributes": S.optionalWith(CreateFundingAttributes, { nullable: true }),
  "relationships": CreateFundingRelationships
}) {}

export class UpdateFundingData extends S.Class<UpdateFundingData>("UpdateFundingData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateFundingDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateFundingAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateFundingRelationships, { nullable: true })
}) {}

export class CreateSubBucketDefinitionData extends S.Class<CreateSubBucketDefinitionData>("CreateSubBucketDefinitionData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubBucketDefinitionDataType,
  "attributes": CreateSubBucketDefinitionAttributes,
  "relationships": CreateSubBucketDefinitionRelationships
}) {}

export class UpdateSubBucketDefinitionData extends S.Class<UpdateSubBucketDefinitionData>("UpdateSubBucketDefinitionData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSubBucketDefinitionDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSubBucketDefinitionAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSubBucketDefinitionRelationships, { nullable: true })
}) {}

export class CreateClaimTargetData extends S.Class<CreateClaimTargetData>("CreateClaimTargetData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateClaimTargetDataType,
  "attributes": CreateClaimTargetAttributes,
  "relationships": CreateClaimTargetRelationships
}) {}

export class UpdateClaimTargetData extends S.Class<UpdateClaimTargetData>("UpdateClaimTargetData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateClaimTargetDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateClaimTargetAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateClaimTargetRelationships, { nullable: true })
}) {}

export class CreateBucketData extends S.Class<CreateBucketData>("CreateBucketData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketDataType,
  "attributes": S.optionalWith(CreateBucketAttributes, { nullable: true }),
  "relationships": CreateBucketRelationships
}) {}

export class UpdateBucketData extends S.Class<UpdateBucketData>("UpdateBucketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBucketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBucketAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBucketRelationships, { nullable: true })
}) {}

export class CreateClaimData extends S.Class<CreateClaimData>("CreateClaimData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateClaimDataType,
  "attributes": S.optionalWith(CreateClaimAttributes, { nullable: true }),
  "relationships": CreateClaimRelationships
}) {}

export class UpdateClaimData extends S.Class<UpdateClaimData>("UpdateClaimData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateClaimDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateClaimAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateClaimRelationships, { nullable: true })
}) {}

export class CreateDeductibleData extends S.Class<CreateDeductibleData>("CreateDeductibleData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDeductibleDataType,
  "attributes": CreateDeductibleAttributes,
  "relationships": CreateDeductibleRelationships
}) {}

export class UpdateDeductibleData extends S.Class<UpdateDeductibleData>("UpdateDeductibleData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDeductibleDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDeductibleAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDeductibleRelationships, { nullable: true })
}) {}

export class CreateClaimDeductibleData extends S.Class<CreateClaimDeductibleData>("CreateClaimDeductibleData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateClaimDeductibleDataType,
  "attributes": S.optionalWith(CreateClaimDeductibleAttributes, { nullable: true }),
  "relationships": CreateClaimDeductibleRelationships
}) {}

export class UpdateClaimDeductibleData extends S.Class<UpdateClaimDeductibleData>("UpdateClaimDeductibleData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateClaimDeductibleDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateClaimDeductibleAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateClaimDeductibleRelationships, { nullable: true })
}) {}

export class CreatePolicyTermData extends S.Class<CreatePolicyTermData>("CreatePolicyTermData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePolicyTermDataType,
  "attributes": CreatePolicyTermAttributes,
  "relationships": CreatePolicyTermRelationships
}) {}

export class UpdatePolicyTermData extends S.Class<UpdatePolicyTermData>("UpdatePolicyTermData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePolicyTermDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePolicyTermAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePolicyTermRelationships, { nullable: true })
}) {}

export class CreatePolicyData extends S.Class<CreatePolicyData>("CreatePolicyData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePolicyDataType,
  "attributes": S.optionalWith(CreatePolicyAttributes, { nullable: true }),
  "relationships": CreatePolicyRelationships
}) {}

export class UpdatePolicyData extends S.Class<UpdatePolicyData>("UpdatePolicyData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePolicyDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePolicyAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePolicyRelationships, { nullable: true })
}) {}

export class CreateSubmissionTrackTemplateData extends S.Class<CreateSubmissionTrackTemplateData>("CreateSubmissionTrackTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubmissionTrackTemplateDataType,
  "attributes": S.optionalWith(CreateSubmissionTrackTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateSubmissionTrackTemplateRelationships, { nullable: true })
}) {}

export class UpdateSubmissionTrackTemplateData extends S.Class<UpdateSubmissionTrackTemplateData>("UpdateSubmissionTrackTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSubmissionTrackTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSubmissionTrackTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSubmissionTrackTemplateRelationships, { nullable: true })
}) {}

export class CreateBucketDefinitionData extends S.Class<CreateBucketDefinitionData>("CreateBucketDefinitionData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBucketDefinitionDataType,
  "attributes": CreateBucketDefinitionAttributes,
  "relationships": CreateBucketDefinitionRelationships
}) {}

export class UpdateBucketDefinitionData extends S.Class<UpdateBucketDefinitionData>("UpdateBucketDefinitionData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBucketDefinitionDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBucketDefinitionAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBucketDefinitionRelationships, { nullable: true })
}) {}

export class CreateCoverageGroupTemplateData extends S.Class<CreateCoverageGroupTemplateData>("CreateCoverageGroupTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCoverageGroupTemplateDataType,
  "attributes": S.optionalWith(CreateCoverageGroupTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateCoverageGroupTemplateRelationships, { nullable: true })
}) {}

export class UpdateCoverageGroupTemplateData extends S.Class<UpdateCoverageGroupTemplateData>("UpdateCoverageGroupTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateCoverageGroupTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateCoverageGroupTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateCoverageGroupTemplateRelationships, { nullable: true })
}) {}

export class CreateIncidentImpactData extends S.Class<CreateIncidentImpactData>("CreateIncidentImpactData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentImpactDataType,
  "attributes": S.optionalWith(CreateIncidentImpactAttributes, { nullable: true }),
  "relationships": CreateIncidentImpactRelationships
}) {}

export class UpdateIncidentImpactData extends S.Class<UpdateIncidentImpactData>("UpdateIncidentImpactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateIncidentImpactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateIncidentImpactAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateIncidentImpactRelationships, { nullable: true })
}) {}

export class CreateCoverageData extends S.Class<CreateCoverageData>("CreateCoverageData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCoverageDataType,
  "attributes": CreateCoverageAttributes,
  "relationships": CreateCoverageRelationships
}) {}

export class UpdateCoverageData extends S.Class<UpdateCoverageData>("UpdateCoverageData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateCoverageDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateCoverageAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateCoverageRelationships, { nullable: true })
}) {}

export class CreateSubCoverageData extends S.Class<CreateSubCoverageData>("CreateSubCoverageData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubCoverageDataType,
  "attributes": CreateSubCoverageAttributes,
  "relationships": CreateSubCoverageRelationships
}) {}

export class UpdateSubCoverageData extends S.Class<UpdateSubCoverageData>("UpdateSubCoverageData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSubCoverageDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSubCoverageAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSubCoverageRelationships, { nullable: true })
}) {}

export class CreateEndorsementTemplateData extends S.Class<CreateEndorsementTemplateData>("CreateEndorsementTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEndorsementTemplateDataType,
  "attributes": S.optionalWith(CreateEndorsementTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateEndorsementTemplateRelationships, { nullable: true })
}) {}

export class UpdateEndorsementTemplateData extends S.Class<UpdateEndorsementTemplateData>("UpdateEndorsementTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEndorsementTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEndorsementTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEndorsementTemplateRelationships, { nullable: true })
}) {}

export class CreateSubBucketData extends S.Class<CreateSubBucketData>("CreateSubBucketData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubBucketDataType,
  "attributes": S.optionalWith(CreateSubBucketAttributes, { nullable: true }),
  "relationships": CreateSubBucketRelationships
}) {}

export class UpdateSubBucketData extends S.Class<UpdateSubBucketData>("UpdateSubBucketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSubBucketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSubBucketAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSubBucketRelationships, { nullable: true })
}) {}

export class CreateBaseSubBucketData extends S.Class<CreateBaseSubBucketData>("CreateBaseSubBucketData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateBaseSubBucketDataType,
  "attributes": CreateBaseSubBucketAttributes,
  "relationships": CreateBaseSubBucketRelationships
}) {}

export class UpdateBaseSubBucketData extends S.Class<UpdateBaseSubBucketData>("UpdateBaseSubBucketData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateBaseSubBucketDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateBaseSubBucketAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateBaseSubBucketRelationships, { nullable: true })
}) {}

export class CreateSubCoverageTemplateData extends S.Class<CreateSubCoverageTemplateData>("CreateSubCoverageTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSubCoverageTemplateDataType,
  "attributes": S.optionalWith(CreateSubCoverageTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateSubCoverageTemplateRelationships, { nullable: true })
}) {}

export class UpdateSubCoverageTemplateData extends S.Class<UpdateSubCoverageTemplateData>("UpdateSubCoverageTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSubCoverageTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSubCoverageTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSubCoverageTemplateRelationships, { nullable: true })
}) {}

export class CreateEndorsementData extends S.Class<CreateEndorsementData>("CreateEndorsementData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateEndorsementDataType,
  "attributes": CreateEndorsementAttributes,
  "relationships": CreateEndorsementRelationships
}) {}

export class UpdateEndorsementData extends S.Class<UpdateEndorsementData>("UpdateEndorsementData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateEndorsementDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateEndorsementAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateEndorsementRelationships, { nullable: true })
}) {}

export class CreateCoverageTemplateData extends S.Class<CreateCoverageTemplateData>("CreateCoverageTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCoverageTemplateDataType,
  "attributes": S.optionalWith(CreateCoverageTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateCoverageTemplateRelationships, { nullable: true })
}) {}

export class UpdateCoverageTemplateData extends S.Class<UpdateCoverageTemplateData>("UpdateCoverageTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateCoverageTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateCoverageTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateCoverageTemplateRelationships, { nullable: true })
}) {}

export class CreateCoverageGroupData extends S.Class<CreateCoverageGroupData>("CreateCoverageGroupData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateCoverageGroupDataType,
  "relationships": CreateCoverageGroupRelationships
}) {}

export class UpdateCoverageGroupData extends S.Class<UpdateCoverageGroupData>("UpdateCoverageGroupData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateCoverageGroupDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "relationships": S.optionalWith(UpdateCoverageGroupRelationships, { nullable: true })
}) {}

export class CreatePolicyTemplateData extends S.Class<CreatePolicyTemplateData>("CreatePolicyTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreatePolicyTemplateDataType,
  "attributes": S.optionalWith(CreatePolicyTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreatePolicyTemplateRelationships, { nullable: true })
}) {}

export class UpdatePolicyTemplateData extends S.Class<UpdatePolicyTemplateData>("UpdatePolicyTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdatePolicyTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdatePolicyTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdatePolicyTemplateRelationships, { nullable: true })
}) {}

export class CreateDepreciationScheduleData extends S.Class<CreateDepreciationScheduleData>("CreateDepreciationScheduleData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateDepreciationScheduleDataType,
  "attributes": S.optionalWith(CreateDepreciationScheduleAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateDepreciationScheduleRelationships, { nullable: true })
}) {}

export class UpdateDepreciationScheduleData extends S.Class<UpdateDepreciationScheduleData>("UpdateDepreciationScheduleData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateDepreciationScheduleDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateDepreciationScheduleAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateDepreciationScheduleRelationships, { nullable: true })
}) {}

export class CreateSpaceTypeItemTemplateData extends S.Class<CreateSpaceTypeItemTemplateData>("CreateSpaceTypeItemTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateSpaceTypeItemTemplateDataType,
  "attributes": S.optionalWith(CreateSpaceTypeItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateSpaceTypeItemTemplateRelationships, { nullable: true })
}) {}

export class UpdateSpaceTypeItemTemplateData extends S.Class<UpdateSpaceTypeItemTemplateData>("UpdateSpaceTypeItemTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateSpaceTypeItemTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateSpaceTypeItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateSpaceTypeItemTemplateRelationships, { nullable: true })
}) {}

export class CreateAssetAttributeTypeData extends S.Class<CreateAssetAttributeTypeData>("CreateAssetAttributeTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetAttributeTypeDataType,
  "attributes": S.optionalWith(CreateAssetAttributeTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateAssetAttributeTypeRelationships, { nullable: true })
}) {}

export class UpdateAssetAttributeTypeData extends S.Class<UpdateAssetAttributeTypeData>("UpdateAssetAttributeTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAssetAttributeTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAssetAttributeTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAssetAttributeTypeRelationships, { nullable: true })
}) {}

export class CreateAssetAttributeTypeItemTemplateData extends S.Class<CreateAssetAttributeTypeItemTemplateData>("CreateAssetAttributeTypeItemTemplateData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetAttributeTypeItemTemplateDataType,
  "attributes": S.optionalWith(CreateAssetAttributeTypeItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateAssetAttributeTypeItemTemplateRelationships, { nullable: true })
}) {}

export class UpdateAssetAttributeTypeItemTemplateData extends S.Class<UpdateAssetAttributeTypeItemTemplateData>("UpdateAssetAttributeTypeItemTemplateData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAssetAttributeTypeItemTemplateDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAssetAttributeTypeItemTemplateAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAssetAttributeTypeItemTemplateRelationships, { nullable: true })
}) {}

export class CreateAssetAttributeClassData extends S.Class<CreateAssetAttributeClassData>("CreateAssetAttributeClassData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAssetAttributeClassDataType,
  "attributes": S.optionalWith(CreateAssetAttributeClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateAssetAttributeClassRelationships, { nullable: true })
}) {}

export class UpdateAssetAttributeClassData extends S.Class<UpdateAssetAttributeClassData>("UpdateAssetAttributeClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAssetAttributeClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAssetAttributeClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAssetAttributeClassRelationships, { nullable: true })
}) {}

export class CreateIncidentTypeData extends S.Class<CreateIncidentTypeData>("CreateIncidentTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateIncidentTypeDataType,
  "attributes": S.optionalWith(CreateIncidentTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateIncidentTypeRelationships, { nullable: true })
}) {}

export class UpdateIncidentTypeData extends S.Class<UpdateIncidentTypeData>("UpdateIncidentTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateIncidentTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateIncidentTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateIncidentTypeRelationships, { nullable: true })
}) {}

export class CreateItemClassData extends S.Class<CreateItemClassData>("CreateItemClassData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemClassDataType,
  "attributes": S.optionalWith(CreateItemClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateItemClassRelationships, { nullable: true })
}) {}

export class UpdateItemClassData extends S.Class<UpdateItemClassData>("UpdateItemClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemClassRelationships, { nullable: true })
}) {}

export class CreateItemTypeData extends S.Class<CreateItemTypeData>("CreateItemTypeData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemTypeDataType,
  "attributes": S.optionalWith(CreateItemTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateItemTypeRelationships, { nullable: true })
}) {}

export class UpdateItemTypeData extends S.Class<UpdateItemTypeData>("UpdateItemTypeData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemTypeDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemTypeAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemTypeRelationships, { nullable: true })
}) {}

export class CreateItemCategoryData extends S.Class<CreateItemCategoryData>("CreateItemCategoryData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateItemCategoryDataType,
  "attributes": S.optionalWith(CreateItemCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateItemCategoryRelationships, { nullable: true })
}) {}

export class UpdateItemCategoryData extends S.Class<UpdateItemCategoryData>("UpdateItemCategoryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateItemCategoryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateItemCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateItemCategoryRelationships, { nullable: true })
}) {}

export class CreateServiceClassData extends S.Class<CreateServiceClassData>("CreateServiceClassData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceClassDataType,
  "attributes": S.optionalWith(CreateServiceClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateServiceClassRelationships, { nullable: true })
}) {}

export class UpdateServiceClassData extends S.Class<UpdateServiceClassData>("UpdateServiceClassData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceClassDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceClassAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceClassRelationships, { nullable: true })
}) {}

export class CreateServiceCategoryData extends S.Class<CreateServiceCategoryData>("CreateServiceCategoryData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateServiceCategoryDataType,
  "attributes": S.optionalWith(CreateServiceCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(CreateServiceCategoryRelationships, { nullable: true })
}) {}

export class UpdateServiceCategoryData extends S.Class<UpdateServiceCategoryData>("UpdateServiceCategoryData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateServiceCategoryDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateServiceCategoryAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateServiceCategoryRelationships, { nullable: true })
}) {}

export class CreateAppraisalData extends S.Class<CreateAppraisalData>("CreateAppraisalData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateAppraisalDataType,
  "attributes": CreateAppraisalAttributes,
  "relationships": S.optionalWith(CreateAppraisalRelationships, { nullable: true })
}) {}

export class UpdateAppraisalData extends S.Class<UpdateAppraisalData>("UpdateAppraisalData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateAppraisalDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateAppraisalAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateAppraisalRelationships, { nullable: true })
}) {}

export class CreateThirdPartyImpactData extends S.Class<CreateThirdPartyImpactData>("CreateThirdPartyImpactData")({
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the referenced entity.
*/
"type": CreateThirdPartyImpactDataType,
  "attributes": CreateThirdPartyImpactAttributes,
  "relationships": CreateThirdPartyImpactRelationships
}) {}

export class UpdateThirdPartyImpactData extends S.Class<UpdateThirdPartyImpactData>("UpdateThirdPartyImpactData")({
  /**
* Entity id
*/
"id": S.String,
  /**
* The type of the referenced entity.
*/
"type": UpdateThirdPartyImpactDataType,
  /**
* Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
*/
"lid": S.optionalWith(S.String, { nullable: true }),
  /**
* Metadata for the entity
*/
"meta": S.optionalWith(EntityMetadata, { nullable: true }),
  "attributes": S.optionalWith(UpdateThirdPartyImpactAttributes, { nullable: true }),
  "relationships": S.optionalWith(UpdateThirdPartyImpactRelationships, { nullable: true })
}) {}

/**
* Any includable entity.
*/
export const JsonApiIncludedItem = eraseSchemaReq(S.Union(UserData,
EmailAddressData,
IdentityData,
AccountProviderContactData,
PhoneNumberData,
AccountProviderData,
AccountData,
ProjectData,
IncidentData,
ProjectMediaData,
MediaData,
FileData,
AssetData,
DwellingData,
AssetTypeData,
AssetAppraisalData,
DocumentTypeData,
DocumentClassData,
SpaceData,
SpaceTypeData,
SpaceClassData,
SpaceCategoryData,
SpaceGroupTypeData,
BucketTypeData,
BucketClassData,
SpaceGroupData,
CurrencyData,
AddressData,
CountryData,
FileProcessData,
DocumentData,
ChangeOrderData,
ItemizableFinancialDocumentStatsData,
ItemizableFinancialDocumentData,
EstimateData,
ServiceData,
EntrySourceMetadataData,
EntrySourceData,
ItemImpactData,
EntryData,
BaseBucketData,
BucketData,
FundingSourceData,
ClaimData,
FundingData,
BucketFundingData,
ClaimTargetData,
PolicyTermData,
ProviderData,
DeductibleData,
BucketDefinitionData,
CoverageData,
SubBucketDefinitionData,
SubCoverageData,
SubBucketData,
BaseSubBucketMetadataData,
SubCoverageTemplateData,
CoverageTemplateData,
CoverageGroupTemplateData,
PerilData,
EndorsementTemplateData,
EndorsementData,
CoverageGroupData,
ClaimDeductibleData,
PolicyData,
PolicyTemplateData,
BaseBucketMetadataData,
BaseSubBucketData,
ItemAppraisalData,
AppraisalData,
AppraisalLineData,
BaseEntityData,
InvoiceData,
InvoiceLineData,
ItemInvoiceData,
ItemData,
ItemTypeData,
DepreciationModifierData,
DepreciationScheduleData,
DepreciationOverrideData,
ItemClassData,
ItemCategoryData,
PaymentData,
PaymentLineData,
ItemPaymentData,
ItemImpactPaymentData,
ServiceTaskPaymentData,
ServiceTaskData,
ItemImpactInvoiceData,
ServiceTaskInvoiceData,
IncidentReportData,
PoliceReportData,
ParamedicReportData,
ContractData,
RentRollData,
PermitData,
BlueprintData,
DeclarationsPageData,
PolicyJacketData,
ScopeOfLossData,
DeliveryPaperworkData,
ProductSpecData,
UserManualData,
WarrantyData,
DeedData,
ItemChangeOrderData,
ItemEstimateData,
ChangeOrderLineData,
ItemImpactChangeOrderData,
ItemImpactEstimateData,
ServiceTaskChangeOrderData,
ServiceTaskEstimateData,
EstimateLineData,
DisasterData,
IncidentTypeData,
IncidentClassData,
AssetAttributeTypeItemTemplateData,
AssetAttributeTypeData,
AssetAttributeClassData,
ItemTemplateData,
SpaceTypeItemTemplateData,
SubmissionTrackTemplateData,
ServiceCategoryData,
ServiceClassData,
ServiceTypeData,
AccountInviteData,
AuthProfileData,
EntrySourceMediaData,
ThirdPartyImpactData,
ThirdPartyData,
ThirdPartyDwellingData,
ThirdPartyIndividualData,
ProjectImpactData,
IncidentImpactData,
ItemMediaSuggestionData,
ItemProductSuggestionData,
UserAccountRoleData,
FinancialDocumentData))
export type JsonApiIncludedItem = typeof JsonApiIncludedItem

/**
* Any includable entity for upserts.
*/
export const JsonApiUpsertIncludedItem = eraseSchemaReq(S.Union(CreateUserData,
UpdateUserData,
CreateEmailAddressData,
UpdateEmailAddressData,
CreateIdentityData,
UpdateIdentityData,
CreateAccountProviderContactData,
UpdateAccountProviderContactData,
CreatePhoneNumberData,
UpdatePhoneNumberData,
CreateAccountProviderData,
UpdateAccountProviderData,
CreateAccountData,
UpdateAccountData,
CreateProjectData,
UpdateProjectData,
CreateIncidentData,
UpdateIncidentData,
CreateProjectMediaData,
UpdateProjectMediaData,
CreateMediaData,
UpdateMediaData,
CreateFileData,
UpdateFileData,
CreateAssetData,
UpdateAssetData,
CreateDwellingData,
UpdateDwellingData,
CreateAssetTypeData,
UpdateAssetTypeData,
CreateAssetAppraisalData,
UpdateAssetAppraisalData,
CreateDocumentTypeData,
UpdateDocumentTypeData,
CreateDocumentClassData,
UpdateDocumentClassData,
CreateSpaceData,
UpdateSpaceData,
CreateSpaceTypeData,
UpdateSpaceTypeData,
CreateSpaceClassData,
UpdateSpaceClassData,
CreateSpaceCategoryData,
UpdateSpaceCategoryData,
CreateSpaceGroupTypeData,
UpdateSpaceGroupTypeData,
CreateBucketTypeData,
UpdateBucketTypeData,
CreateBucketClassData,
UpdateBucketClassData,
CreateSpaceGroupData,
UpdateSpaceGroupData,
CreateCurrencyData,
UpdateCurrencyData,
CreateAddressData,
UpdateAddressData,
CreateCountryData,
UpdateCountryData,
CreateFileProcessData,
UpdateFileProcessData,
CreateDocumentData,
UpdateDocumentData,
CreateChangeOrderData,
UpdateChangeOrderData,
CreateItemizableFinancialDocumentStatsData,
UpdateItemizableFinancialDocumentStatsData,
CreateItemizableFinancialDocumentData,
UpdateItemizableFinancialDocumentData,
CreateEstimateData,
UpdateEstimateData,
CreateServiceData,
UpdateServiceData,
CreateEntrySourceMetadataData,
UpdateEntrySourceMetadataData,
CreateEntrySourceData,
UpdateEntrySourceData,
CreateItemImpactData,
UpdateItemImpactData,
CreateEntryData,
UpdateEntryData,
CreateBaseBucketData,
UpdateBaseBucketData,
CreateBucketData,
UpdateBucketData,
CreateFundingSourceData,
UpdateFundingSourceData,
CreateClaimData,
UpdateClaimData,
CreateFundingData,
UpdateFundingData,
CreateBucketFundingData,
UpdateBucketFundingData,
CreateClaimTargetData,
UpdateClaimTargetData,
CreatePolicyTermData,
UpdatePolicyTermData,
CreateProviderData,
UpdateProviderData,
CreateDeductibleData,
UpdateDeductibleData,
CreateBucketDefinitionData,
UpdateBucketDefinitionData,
CreateCoverageData,
UpdateCoverageData,
CreateSubBucketDefinitionData,
UpdateSubBucketDefinitionData,
CreateSubCoverageData,
UpdateSubCoverageData,
CreateSubBucketData,
UpdateSubBucketData,
CreateBaseSubBucketMetadataData,
UpdateBaseSubBucketMetadataData,
CreateSubCoverageTemplateData,
UpdateSubCoverageTemplateData,
CreateCoverageTemplateData,
UpdateCoverageTemplateData,
CreateCoverageGroupTemplateData,
UpdateCoverageGroupTemplateData,
CreatePerilData,
UpdatePerilData,
CreateEndorsementTemplateData,
UpdateEndorsementTemplateData,
CreateEndorsementData,
UpdateEndorsementData,
CreateCoverageGroupData,
UpdateCoverageGroupData,
CreateClaimDeductibleData,
UpdateClaimDeductibleData,
CreatePolicyData,
UpdatePolicyData,
CreatePolicyTemplateData,
UpdatePolicyTemplateData,
CreateBaseBucketMetadataData,
UpdateBaseBucketMetadataData,
CreateBaseSubBucketData,
UpdateBaseSubBucketData,
CreateItemAppraisalData,
UpdateItemAppraisalData,
CreateAppraisalData,
UpdateAppraisalData,
CreateAppraisalLineData,
UpdateAppraisalLineData,
CreateBaseEntityData,
UpdateBaseEntityData,
CreateInvoiceData,
UpdateInvoiceData,
CreateInvoiceLineData,
UpdateInvoiceLineData,
CreateItemInvoiceData,
UpdateItemInvoiceData,
CreateItemData,
UpdateItemData,
CreateItemTypeData,
UpdateItemTypeData,
CreateDepreciationModifierData,
UpdateDepreciationModifierData,
CreateDepreciationScheduleData,
UpdateDepreciationScheduleData,
CreateDepreciationOverrideData,
UpdateDepreciationOverrideData,
CreateItemClassData,
UpdateItemClassData,
CreateItemCategoryData,
UpdateItemCategoryData,
CreatePaymentData,
UpdatePaymentData,
CreatePaymentLineData,
UpdatePaymentLineData,
CreateItemPaymentData,
UpdateItemPaymentData,
CreateItemImpactPaymentData,
UpdateItemImpactPaymentData,
CreateServiceTaskPaymentData,
UpdateServiceTaskPaymentData,
CreateServiceTaskData,
UpdateServiceTaskData,
CreateItemImpactInvoiceData,
UpdateItemImpactInvoiceData,
CreateServiceTaskInvoiceData,
UpdateServiceTaskInvoiceData,
CreateIncidentReportData,
UpdateIncidentReportData,
CreatePoliceReportData,
UpdatePoliceReportData,
CreateParamedicReportData,
UpdateParamedicReportData,
CreateContractData,
UpdateContractData,
CreateRentRollData,
UpdateRentRollData,
CreatePermitData,
UpdatePermitData,
CreateBlueprintData,
UpdateBlueprintData,
CreateDeclarationsPageData,
UpdateDeclarationsPageData,
CreatePolicyJacketData,
UpdatePolicyJacketData,
CreateScopeOfLossData,
UpdateScopeOfLossData,
CreateDeliveryPaperworkData,
UpdateDeliveryPaperworkData,
CreateProductSpecData,
UpdateProductSpecData,
CreateUserManualData,
UpdateUserManualData,
CreateWarrantyData,
UpdateWarrantyData,
CreateDeedData,
UpdateDeedData,
CreateItemChangeOrderData,
UpdateItemChangeOrderData,
CreateItemEstimateData,
UpdateItemEstimateData,
CreateChangeOrderLineData,
UpdateChangeOrderLineData,
CreateItemImpactChangeOrderData,
UpdateItemImpactChangeOrderData,
CreateItemImpactEstimateData,
UpdateItemImpactEstimateData,
CreateServiceTaskChangeOrderData,
UpdateServiceTaskChangeOrderData,
CreateServiceTaskEstimateData,
UpdateServiceTaskEstimateData,
CreateEstimateLineData,
UpdateEstimateLineData,
CreateDisasterData,
UpdateDisasterData,
CreateIncidentTypeData,
UpdateIncidentTypeData,
CreateIncidentClassData,
UpdateIncidentClassData,
CreateAssetAttributeTypeItemTemplateData,
UpdateAssetAttributeTypeItemTemplateData,
CreateAssetAttributeTypeData,
UpdateAssetAttributeTypeData,
CreateAssetAttributeClassData,
UpdateAssetAttributeClassData,
CreateItemTemplateData,
UpdateItemTemplateData,
CreateSpaceTypeItemTemplateData,
UpdateSpaceTypeItemTemplateData,
CreateSubmissionTrackTemplateData,
UpdateSubmissionTrackTemplateData,
CreateServiceCategoryData,
UpdateServiceCategoryData,
CreateServiceClassData,
UpdateServiceClassData,
CreateServiceTypeData,
UpdateServiceTypeData,
CreateAccountInviteData,
UpdateAccountInviteData,
CreateAuthProfileData,
UpdateAuthProfileData,
CreateEntrySourceMediaData,
UpdateEntrySourceMediaData,
CreateThirdPartyImpactData,
UpdateThirdPartyImpactData,
CreateThirdPartyData,
UpdateThirdPartyData,
CreateThirdPartyDwellingData,
UpdateThirdPartyDwellingData,
CreateThirdPartyIndividualData,
UpdateThirdPartyIndividualData,
CreateProjectImpactData,
UpdateProjectImpactData,
CreateIncidentImpactData,
UpdateIncidentImpactData,
CreateItemMediaSuggestionData,
UpdateItemMediaSuggestionData,
CreateItemProductSuggestionData,
UpdateItemProductSuggestionData,
CreateUserAccountRoleData,
UpdateUserAccountRoleData,
CreateFinancialDocumentData,
UpdateFinancialDocumentData))
export type JsonApiUpsertIncludedItem = typeof JsonApiUpsertIncludedItem

export class Account extends S.Class<Account>("Account")({
  /**
* Account data.
*/
"data": AccountData,
  /**
* An array of entity data objects accessible from Account.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class User extends S.Class<User>("User")({
  /**
* User data.
*/
"data": UserData,
  /**
* An array of entity data objects accessible from User.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableEmailAddress extends S.Class<NullableEmailAddress>("NullableEmailAddress")({
  /**
* EmailAddress data.
*/
"data": S.NullOr(EmailAddressData),
  /**
* An array of entity data objects accessible from EmailAddress.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class NullablePhoneNumber extends S.Class<NullablePhoneNumber>("NullablePhoneNumber")({
  /**
* PhoneNumber data.
*/
"data": S.NullOr(PhoneNumberData),
  /**
* An array of entity data objects accessible from PhoneNumber.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class NullableAccount extends S.Class<NullableAccount>("NullableAccount")({
  /**
* Account data.
*/
"data": S.NullOr(AccountData),
  /**
* An array of entity data objects accessible from Account.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class UserAccountRoleList extends S.Class<UserAccountRoleList>("UserAccountRoleList")({
  /**
* A list of UserAccountRole data.
*/
"data": S.Array(UserAccountRoleData),
  /**
* An array of entity data objects accessible from UserAccountRole.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class UserAccountRole extends S.Class<UserAccountRole>("UserAccountRole")({
  /**
* UserAccountRole data.
*/
"data": UserAccountRoleData,
  /**
* An array of entity data objects accessible from UserAccountRole.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ThirdPartyList extends S.Class<ThirdPartyList>("ThirdPartyList")({
  /**
* A list of ThirdParty data.
*/
"data": S.Array(S.Union(ThirdPartyDwellingData,
ThirdPartyIndividualData)),
  /**
* An array of entity data objects accessible from ThirdParty.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ThirdParty extends S.Class<ThirdParty>("ThirdParty")({
  /**
* ThirdParty data.
*/
"data": S.Union(ThirdPartyDwellingData,
ThirdPartyIndividualData),
  /**
* An array of entity data objects accessible from ThirdParty.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Project extends S.Class<Project>("Project")({
  /**
* Project data.
*/
"data": IncidentData,
  /**
* An array of entity data objects accessible from Project.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ThirdPartyIndividualList extends S.Class<ThirdPartyIndividualList>("ThirdPartyIndividualList")({
  /**
* A list of ThirdPartyIndividual data.
*/
"data": S.Array(ThirdPartyIndividualData),
  /**
* An array of entity data objects accessible from ThirdPartyIndividual.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ThirdPartyIndividual extends S.Class<ThirdPartyIndividual>("ThirdPartyIndividual")({
  /**
* ThirdPartyIndividual data.
*/
"data": ThirdPartyIndividualData,
  /**
* An array of entity data objects accessible from ThirdPartyIndividual.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ThirdPartyImpactList extends S.Class<ThirdPartyImpactList>("ThirdPartyImpactList")({
  /**
* A list of ThirdPartyImpact data.
*/
"data": S.Array(ThirdPartyImpactData),
  /**
* An array of entity data objects accessible from ThirdPartyImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ThirdPartyImpact extends S.Class<ThirdPartyImpact>("ThirdPartyImpact")({
  /**
* ThirdPartyImpact data.
*/
"data": ThirdPartyImpactData,
  /**
* An array of entity data objects accessible from ThirdPartyImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class EntrySourceMetadata extends S.Class<EntrySourceMetadata>("EntrySourceMetadata")({
  /**
* EntrySourceMetadata data.
*/
"data": EntrySourceMetadataData,
  /**
* An array of entity data objects accessible from EntrySourceMetadata.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableProject extends S.Class<NullableProject>("NullableProject")({
  /**
* Project data.
*/
"data": S.NullOr(IncidentData),
  /**
* An array of entity data objects accessible from Project.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class Currency extends S.Class<Currency>("Currency")({
  /**
* Currency data.
*/
"data": CurrencyData,
  /**
* An array of entity data objects accessible from Currency.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class EntryList extends S.Class<EntryList>("EntryList")({
  /**
* A list of Entry data.
*/
"data": S.Array(EntryData),
  /**
* An array of entity data objects accessible from Entry.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemAppraisalList extends S.Class<ItemAppraisalList>("ItemAppraisalList")({
  /**
* A list of ItemAppraisal data.
*/
"data": S.Array(ItemAppraisalData),
  /**
* An array of entity data objects accessible from ItemAppraisal.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class NullableItemAppraisal extends S.Class<NullableItemAppraisal>("NullableItemAppraisal")({
  /**
* ItemAppraisal data.
*/
"data": S.NullOr(ItemAppraisalData),
  /**
* An array of entity data objects accessible from ItemAppraisal.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class ThirdPartyDwellingList extends S.Class<ThirdPartyDwellingList>("ThirdPartyDwellingList")({
  /**
* A list of ThirdPartyDwelling data.
*/
"data": S.Array(ThirdPartyDwellingData),
  /**
* An array of entity data objects accessible from ThirdPartyDwelling.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ThirdPartyDwelling extends S.Class<ThirdPartyDwelling>("ThirdPartyDwelling")({
  /**
* ThirdPartyDwelling data.
*/
"data": ThirdPartyDwellingData,
  /**
* An array of entity data objects accessible from ThirdPartyDwelling.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Country extends S.Class<Country>("Country")({
  /**
* Country data.
*/
"data": CountryData,
  /**
* An array of entity data objects accessible from Country.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SubCoverageList extends S.Class<SubCoverageList>("SubCoverageList")({
  /**
* A list of SubCoverage data.
*/
"data": S.Array(SubCoverageData),
  /**
* An array of entity data objects accessible from SubCoverage.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SubCoverage extends S.Class<SubCoverage>("SubCoverage")({
  /**
* SubCoverage data.
*/
"data": SubCoverageData,
  /**
* An array of entity data objects accessible from SubCoverage.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Coverage extends S.Class<Coverage>("Coverage")({
  /**
* Coverage data.
*/
"data": CoverageData,
  /**
* An array of entity data objects accessible from Coverage.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SubBucketList extends S.Class<SubBucketList>("SubBucketList")({
  /**
* A list of SubBucket data.
*/
"data": S.Array(SubBucketData),
  /**
* An array of entity data objects accessible from SubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class NullableSubCoverageTemplate extends S.Class<NullableSubCoverageTemplate>("NullableSubCoverageTemplate")({
  /**
* SubCoverageTemplate data.
*/
"data": S.NullOr(SubCoverageTemplateData),
  /**
* An array of entity data objects accessible from SubCoverageTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class EndorsementList extends S.Class<EndorsementList>("EndorsementList")({
  /**
* A list of Endorsement data.
*/
"data": S.Array(EndorsementData),
  /**
* An array of entity data objects accessible from Endorsement.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SubBucket extends S.Class<SubBucket>("SubBucket")({
  /**
* SubBucket data.
*/
"data": SubBucketData,
  /**
* An array of entity data objects accessible from SubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BaseBucket extends S.Class<BaseBucket>("BaseBucket")({
  /**
* BaseBucket data.
*/
"data": BucketData,
  /**
* An array of entity data objects accessible from BaseBucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BaseSubBucketMetadata extends S.Class<BaseSubBucketMetadata>("BaseSubBucketMetadata")({
  /**
* BaseSubBucketMetadata data.
*/
"data": BaseSubBucketMetadataData,
  /**
* An array of entity data objects accessible from BaseSubBucketMetadata.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class FundingSource extends S.Class<FundingSource>("FundingSource")({
  /**
* FundingSource data.
*/
"data": ClaimData,
  /**
* An array of entity data objects accessible from FundingSource.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SubBucketDefinition extends S.Class<SubBucketDefinition>("SubBucketDefinition")({
  /**
* SubBucketDefinition data.
*/
"data": SubCoverageData,
  /**
* An array of entity data objects accessible from SubBucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SubBucketDefinitionList extends S.Class<SubBucketDefinitionList>("SubBucketDefinitionList")({
  /**
* A list of SubBucketDefinition data.
*/
"data": S.Array(SubCoverageData),
  /**
* An array of entity data objects accessible from SubBucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BucketDefinition extends S.Class<BucketDefinition>("BucketDefinition")({
  /**
* BucketDefinition data.
*/
"data": CoverageData,
  /**
* An array of entity data objects accessible from BucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SpaceList extends S.Class<SpaceList>("SpaceList")({
  /**
* A list of Space data.
*/
"data": S.Array(SpaceData),
  /**
* An array of entity data objects accessible from Space.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Space extends S.Class<Space>("Space")({
  /**
* Space data.
*/
"data": SpaceData,
  /**
* An array of entity data objects accessible from Space.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SpaceType extends S.Class<SpaceType>("SpaceType")({
  /**
* SpaceType data.
*/
"data": SpaceTypeData,
  /**
* An array of entity data objects accessible from SpaceType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SpaceGroup extends S.Class<SpaceGroup>("SpaceGroup")({
  /**
* SpaceGroup data.
*/
"data": SpaceGroupData,
  /**
* An array of entity data objects accessible from SpaceGroup.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Asset extends S.Class<Asset>("Asset")({
  /**
* Asset data.
*/
"data": DwellingData,
  /**
* An array of entity data objects accessible from Asset.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SpaceGroupList extends S.Class<SpaceGroupList>("SpaceGroupList")({
  /**
* A list of SpaceGroup data.
*/
"data": S.Array(SpaceGroupData),
  /**
* An array of entity data objects accessible from SpaceGroup.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ServiceList extends S.Class<ServiceList>("ServiceList")({
  /**
* A list of Service data.
*/
"data": S.Array(ServiceData),
  /**
* An array of entity data objects accessible from Service.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Service extends S.Class<Service>("Service")({
  /**
* Service data.
*/
"data": ServiceData,
  /**
* An array of entity data objects accessible from Service.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableServiceType extends S.Class<NullableServiceType>("NullableServiceType")({
  /**
* ServiceType data.
*/
"data": S.NullOr(ServiceTypeData),
  /**
* An array of entity data objects accessible from ServiceType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class PaymentList extends S.Class<PaymentList>("PaymentList")({
  /**
* A list of Payment data.
*/
"data": S.Array(PaymentData),
  /**
* An array of entity data objects accessible from Payment.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class InvoiceList extends S.Class<InvoiceList>("InvoiceList")({
  /**
* A list of Invoice data.
*/
"data": S.Array(InvoiceData),
  /**
* An array of entity data objects accessible from Invoice.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class EstimateList extends S.Class<EstimateList>("EstimateList")({
  /**
* A list of Estimate data.
*/
"data": S.Array(EstimateData),
  /**
* An array of entity data objects accessible from Estimate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ChangeOrderList extends S.Class<ChangeOrderList>("ChangeOrderList")({
  /**
* A list of ChangeOrder data.
*/
"data": S.Array(ChangeOrderData),
  /**
* An array of entity data objects accessible from ChangeOrder.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class PaymentLineList extends S.Class<PaymentLineList>("PaymentLineList")({
  /**
* A list of PaymentLine data.
*/
"data": S.Array(S.Union(ItemPaymentData,
ItemImpactPaymentData,
ServiceTaskPaymentData)),
  /**
* An array of entity data objects accessible from PaymentLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class InvoiceLineList extends S.Class<InvoiceLineList>("InvoiceLineList")({
  /**
* A list of InvoiceLine data.
*/
"data": S.Array(S.Union(ItemInvoiceData,
ItemImpactInvoiceData,
ServiceTaskInvoiceData)),
  /**
* An array of entity data objects accessible from InvoiceLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class EstimateLineList extends S.Class<EstimateLineList>("EstimateLineList")({
  /**
* A list of EstimateLine data.
*/
"data": S.Array(S.Union(ItemEstimateData,
ItemImpactEstimateData,
ServiceTaskEstimateData)),
  /**
* An array of entity data objects accessible from EstimateLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ServiceTaskList extends S.Class<ServiceTaskList>("ServiceTaskList")({
  /**
* A list of ServiceTask data.
*/
"data": S.Array(ServiceTaskData),
  /**
* An array of entity data objects accessible from ServiceTask.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ServiceTask extends S.Class<ServiceTask>("ServiceTask")({
  /**
* ServiceTask data.
*/
"data": ServiceTaskData,
  /**
* An array of entity data objects accessible from ServiceTask.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ProjectList extends S.Class<ProjectList>("ProjectList")({
  /**
* A list of Project data.
*/
"data": S.Array(IncidentData),
  /**
* An array of entity data objects accessible from Project.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ProjectMediaList extends S.Class<ProjectMediaList>("ProjectMediaList")({
  /**
* A list of ProjectMedia data.
*/
"data": S.Array(ProjectMediaData),
  /**
* An array of entity data objects accessible from ProjectMedia.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ProjectMedia extends S.Class<ProjectMedia>("ProjectMedia")({
  /**
* ProjectMedia data.
*/
"data": ProjectMediaData,
  /**
* An array of entity data objects accessible from ProjectMedia.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Media extends S.Class<Media>("Media")({
  /**
* Media data.
*/
"data": MediaData,
  /**
* An array of entity data objects accessible from Media.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ProjectImpactList extends S.Class<ProjectImpactList>("ProjectImpactList")({
  /**
* A list of ProjectImpact data.
*/
"data": S.Array(ProjectImpactData),
  /**
* An array of entity data objects accessible from ProjectImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ProjectImpact extends S.Class<ProjectImpact>("ProjectImpact")({
  /**
* ProjectImpact data.
*/
"data": ProjectImpactData,
  /**
* An array of entity data objects accessible from ProjectImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class PolicyList extends S.Class<PolicyList>("PolicyList")({
  /**
* A list of Policy data.
*/
"data": S.Array(PolicyData),
  /**
* An array of entity data objects accessible from Policy.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Policy extends S.Class<Policy>("Policy")({
  /**
* Policy data.
*/
"data": PolicyData,
  /**
* An array of entity data objects accessible from Policy.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Provider extends S.Class<Provider>("Provider")({
  /**
* Provider data.
*/
"data": ProviderData,
  /**
* An array of entity data objects accessible from Provider.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullablePolicyTemplate extends S.Class<NullablePolicyTemplate>("NullablePolicyTemplate")({
  /**
* PolicyTemplate data.
*/
"data": S.NullOr(PolicyTemplateData),
  /**
* An array of entity data objects accessible from PolicyTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class AssetList extends S.Class<AssetList>("AssetList")({
  /**
* A list of Asset data.
*/
"data": S.Array(DwellingData),
  /**
* An array of entity data objects accessible from Asset.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class PolicyTermList extends S.Class<PolicyTermList>("PolicyTermList")({
  /**
* A list of PolicyTerm data.
*/
"data": S.Array(PolicyTermData),
  /**
* An array of entity data objects accessible from PolicyTerm.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class PolicyTerm extends S.Class<PolicyTerm>("PolicyTerm")({
  /**
* PolicyTerm data.
*/
"data": PolicyTermData,
  /**
* An array of entity data objects accessible from PolicyTerm.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DeductibleList extends S.Class<DeductibleList>("DeductibleList")({
  /**
* A list of Deductible data.
*/
"data": S.Array(DeductibleData),
  /**
* An array of entity data objects accessible from Deductible.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BucketDefinitionList extends S.Class<BucketDefinitionList>("BucketDefinitionList")({
  /**
* A list of BucketDefinition data.
*/
"data": S.Array(CoverageData),
  /**
* An array of entity data objects accessible from BucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class PhoneNumberList extends S.Class<PhoneNumberList>("PhoneNumberList")({
  /**
* A list of PhoneNumber data.
*/
"data": S.Array(PhoneNumberData),
  /**
* An array of entity data objects accessible from PhoneNumber.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class PhoneNumber extends S.Class<PhoneNumber>("PhoneNumber")({
  /**
* PhoneNumber data.
*/
"data": PhoneNumberData,
  /**
* An array of entity data objects accessible from PhoneNumber.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Identity extends S.Class<Identity>("Identity")({
  /**
* Identity data.
*/
"data": S.Union(AccountProviderContactData,
UserData),
  /**
* An array of entity data objects accessible from Identity.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class MediaList extends S.Class<MediaList>("MediaList")({
  /**
* A list of Media data.
*/
"data": S.Array(MediaData),
  /**
* An array of entity data objects accessible from Media.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class File extends S.Class<File>("File")({
  /**
* File data.
*/
"data": FileData,
  /**
* An array of entity data objects accessible from File.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class EntrySourceMediaList extends S.Class<EntrySourceMediaList>("EntrySourceMediaList")({
  /**
* A list of EntrySourceMedia data.
*/
"data": S.Array(EntrySourceMediaData),
  /**
* An array of entity data objects accessible from EntrySourceMedia.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemList extends S.Class<ItemList>("ItemList")({
  /**
* A list of Item data.
*/
"data": S.Array(ItemData),
  /**
* An array of entity data objects accessible from Item.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Item extends S.Class<Item>("Item")({
  /**
* Item data.
*/
"data": ItemData,
  /**
* An array of entity data objects accessible from Item.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableItemType extends S.Class<NullableItemType>("NullableItemType")({
  /**
* ItemType data.
*/
"data": S.NullOr(ItemTypeData),
  /**
* An array of entity data objects accessible from ItemType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class NullableAsset extends S.Class<NullableAsset>("NullableAsset")({
  /**
* Asset data.
*/
"data": S.NullOr(DwellingData),
  /**
* An array of entity data objects accessible from Asset.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class NullableSpace extends S.Class<NullableSpace>("NullableSpace")({
  /**
* Space data.
*/
"data": S.NullOr(SpaceData),
  /**
* An array of entity data objects accessible from Space.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class NullableItemImpact extends S.Class<NullableItemImpact>("NullableItemImpact")({
  /**
* ItemImpact data.
*/
"data": S.NullOr(ItemImpactData),
  /**
* An array of entity data objects accessible from ItemImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class ItemImpactList extends S.Class<ItemImpactList>("ItemImpactList")({
  /**
* A list of ItemImpact data.
*/
"data": S.Array(ItemImpactData),
  /**
* An array of entity data objects accessible from ItemImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemProductSuggestionList extends S.Class<ItemProductSuggestionList>("ItemProductSuggestionList")({
  /**
* A list of ItemProductSuggestion data.
*/
"data": S.Array(ItemProductSuggestionData),
  /**
* An array of entity data objects accessible from ItemProductSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemProductSuggestion extends S.Class<ItemProductSuggestion>("ItemProductSuggestion")({
  /**
* ItemProductSuggestion data.
*/
"data": ItemProductSuggestionData,
  /**
* An array of entity data objects accessible from ItemProductSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ItemMediaSuggestionList extends S.Class<ItemMediaSuggestionList>("ItemMediaSuggestionList")({
  /**
* A list of ItemMediaSuggestion data.
*/
"data": S.Array(ItemMediaSuggestionData),
  /**
* An array of entity data objects accessible from ItemMediaSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemMediaSuggestion extends S.Class<ItemMediaSuggestion>("ItemMediaSuggestion")({
  /**
* ItemMediaSuggestion data.
*/
"data": ItemMediaSuggestionData,
  /**
* An array of entity data objects accessible from ItemMediaSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableItem extends S.Class<NullableItem>("NullableItem")({
  /**
* Item data.
*/
"data": S.NullOr(ItemData),
  /**
* An array of entity data objects accessible from Item.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class ItemImpact extends S.Class<ItemImpact>("ItemImpact")({
  /**
* ItemImpact data.
*/
"data": ItemImpactData,
  /**
* An array of entity data objects accessible from ItemImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class IncidentList extends S.Class<IncidentList>("IncidentList")({
  /**
* A list of Incident data.
*/
"data": S.Array(IncidentData),
  /**
* An array of entity data objects accessible from Incident.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Incident extends S.Class<Incident>("Incident")({
  /**
* Incident data.
*/
"data": IncidentData,
  /**
* An array of entity data objects accessible from Incident.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class IncidentType extends S.Class<IncidentType>("IncidentType")({
  /**
* IncidentType data.
*/
"data": IncidentTypeData,
  /**
* An array of entity data objects accessible from IncidentType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableDisaster extends S.Class<NullableDisaster>("NullableDisaster")({
  /**
* Disaster data.
*/
"data": S.NullOr(DisasterData),
  /**
* An array of entity data objects accessible from Disaster.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class IncidentImpactList extends S.Class<IncidentImpactList>("IncidentImpactList")({
  /**
* A list of IncidentImpact data.
*/
"data": S.Array(IncidentImpactData),
  /**
* An array of entity data objects accessible from IncidentImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class IncidentImpact extends S.Class<IncidentImpact>("IncidentImpact")({
  /**
* IncidentImpact data.
*/
"data": IncidentImpactData,
  /**
* An array of entity data objects accessible from IncidentImpact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class PerilList extends S.Class<PerilList>("PerilList")({
  /**
* A list of Peril data.
*/
"data": S.Array(PerilData),
  /**
* An array of entity data objects accessible from Peril.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class FundingSourceList extends S.Class<FundingSourceList>("FundingSourceList")({
  /**
* A list of FundingSource data.
*/
"data": S.Array(ClaimData),
  /**
* An array of entity data objects accessible from FundingSource.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BaseBucketList extends S.Class<BaseBucketList>("BaseBucketList")({
  /**
* A list of BaseBucket data.
*/
"data": S.Array(BucketData),
  /**
* An array of entity data objects accessible from BaseBucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class FundingList extends S.Class<FundingList>("FundingList")({
  /**
* A list of Funding data.
*/
"data": S.Array(FundingData),
  /**
* An array of entity data objects accessible from Funding.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AccountProviderContactList extends S.Class<AccountProviderContactList>("AccountProviderContactList")({
  /**
* A list of AccountProviderContact data.
*/
"data": S.Array(AccountProviderContactData),
  /**
* An array of entity data objects accessible from AccountProviderContact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class FileList extends S.Class<FileList>("FileList")({
  /**
* A list of File data.
*/
"data": S.Array(FileData),
  /**
* An array of entity data objects accessible from File.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class FileProcessList extends S.Class<FileProcessList>("FileProcessList")({
  /**
* A list of FileProcess data.
*/
"data": S.Array(FileProcessData),
  /**
* An array of entity data objects accessible from FileProcess.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class DocumentList extends S.Class<DocumentList>("DocumentList")({
  /**
* A list of Document data.
*/
"data": S.Array(S.Union(ChangeOrderData,
EstimateData,
InvoiceData,
PaymentData,
AssetAppraisalData,
AppraisalData,
FundingData,
IncidentReportData,
PoliceReportData,
ParamedicReportData,
ContractData,
RentRollData,
PermitData,
BlueprintData,
DeclarationsPageData,
PolicyJacketData,
ScopeOfLossData,
DeliveryPaperworkData,
ProductSpecData,
UserManualData,
WarrantyData,
DeedData)),
  /**
* An array of entity data objects accessible from Document.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class FileProcess extends S.Class<FileProcess>("FileProcess")({
  /**
* FileProcess data.
*/
"data": FileProcessData,
  /**
* An array of entity data objects accessible from FileProcess.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Entry extends S.Class<Entry>("Entry")({
  /**
* Entry data.
*/
"data": EntryData,
  /**
* An array of entity data objects accessible from Entry.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class EntrySource extends S.Class<EntrySource>("EntrySource")({
  /**
* EntrySource data.
*/
"data": S.Union(ItemImpactData,
ItemData,
ServiceTaskData,
ServiceData,
ThirdPartyImpactData),
  /**
* An array of entity data objects accessible from EntrySource.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableBaseSubBucket extends S.Class<NullableBaseSubBucket>("NullableBaseSubBucket")({
  /**
* BaseSubBucket data.
*/
"data": S.NullOr(SubBucketData),
  /**
* An array of entity data objects accessible from BaseSubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class EntrySourceList extends S.Class<EntrySourceList>("EntrySourceList")({
  /**
* A list of EntrySource data.
*/
"data": S.Array(S.Union(ItemImpactData,
ItemData,
ServiceTaskData,
ServiceData,
ThirdPartyImpactData)),
  /**
* An array of entity data objects accessible from EntrySource.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class EntrySourceMetadataList extends S.Class<EntrySourceMetadataList>("EntrySourceMetadataList")({
  /**
* A list of EntrySourceMetadata data.
*/
"data": S.Array(EntrySourceMetadataData),
  /**
* An array of entity data objects accessible from EntrySourceMetadata.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class EntrySourceMedia extends S.Class<EntrySourceMedia>("EntrySourceMedia")({
  /**
* EntrySourceMedia data.
*/
"data": EntrySourceMediaData,
  /**
* An array of entity data objects accessible from EntrySourceMedia.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Endorsement extends S.Class<Endorsement>("Endorsement")({
  /**
* Endorsement data.
*/
"data": EndorsementData,
  /**
* An array of entity data objects accessible from Endorsement.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableEndorsementTemplate extends S.Class<NullableEndorsementTemplate>("NullableEndorsementTemplate")({
  /**
* EndorsementTemplate data.
*/
"data": S.NullOr(EndorsementTemplateData),
  /**
* An array of entity data objects accessible from EndorsementTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class CoverageList extends S.Class<CoverageList>("CoverageList")({
  /**
* A list of Coverage data.
*/
"data": S.Array(CoverageData),
  /**
* An array of entity data objects accessible from Coverage.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class EmailAddressList extends S.Class<EmailAddressList>("EmailAddressList")({
  /**
* A list of EmailAddress data.
*/
"data": S.Array(EmailAddressData),
  /**
* An array of entity data objects accessible from EmailAddress.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class EmailAddress extends S.Class<EmailAddress>("EmailAddress")({
  /**
* EmailAddress data.
*/
"data": EmailAddressData,
  /**
* An array of entity data objects accessible from EmailAddress.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DwellingList extends S.Class<DwellingList>("DwellingList")({
  /**
* A list of Dwelling data.
*/
"data": S.Array(DwellingData),
  /**
* An array of entity data objects accessible from Dwelling.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Dwelling extends S.Class<Dwelling>("Dwelling")({
  /**
* Dwelling data.
*/
"data": DwellingData,
  /**
* An array of entity data objects accessible from Dwelling.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AssetType extends S.Class<AssetType>("AssetType")({
  /**
* AssetType data.
*/
"data": AssetTypeData,
  /**
* An array of entity data objects accessible from AssetType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AssetAppraisalList extends S.Class<AssetAppraisalList>("AssetAppraisalList")({
  /**
* A list of AssetAppraisal data.
*/
"data": S.Array(AssetAppraisalData),
  /**
* An array of entity data objects accessible from AssetAppraisal.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class NullableAssetAppraisal extends S.Class<NullableAssetAppraisal>("NullableAssetAppraisal")({
  /**
* AssetAppraisal data.
*/
"data": S.NullOr(AssetAppraisalData),
  /**
* An array of entity data objects accessible from AssetAppraisal.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class Address extends S.Class<Address>("Address")({
  /**
* Address data.
*/
"data": AddressData,
  /**
* An array of entity data objects accessible from Address.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Deductible extends S.Class<Deductible>("Deductible")({
  /**
* Deductible data.
*/
"data": DeductibleData,
  /**
* An array of entity data objects accessible from Deductible.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ClaimTarget extends S.Class<ClaimTarget>("ClaimTarget")({
  /**
* ClaimTarget data.
*/
"data": PolicyTermData,
  /**
* An array of entity data objects accessible from ClaimTarget.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ClaimDeductibleList extends S.Class<ClaimDeductibleList>("ClaimDeductibleList")({
  /**
* A list of ClaimDeductible data.
*/
"data": S.Array(ClaimDeductibleData),
  /**
* An array of entity data objects accessible from ClaimDeductible.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class NullableBucketType extends S.Class<NullableBucketType>("NullableBucketType")({
  /**
* BucketType data.
*/
"data": S.NullOr(BucketTypeData),
  /**
* An array of entity data objects accessible from BucketType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class NullableDeductible extends S.Class<NullableDeductible>("NullableDeductible")({
  /**
* Deductible data.
*/
"data": S.NullOr(DeductibleData),
  /**
* An array of entity data objects accessible from Deductible.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class BucketList extends S.Class<BucketList>("BucketList")({
  /**
* A list of Bucket data.
*/
"data": S.Array(BucketData),
  /**
* An array of entity data objects accessible from Bucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class NullableCoverageTemplate extends S.Class<NullableCoverageTemplate>("NullableCoverageTemplate")({
  /**
* CoverageTemplate data.
*/
"data": S.NullOr(CoverageTemplateData),
  /**
* An array of entity data objects accessible from CoverageTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class NullableCoverageGroup extends S.Class<NullableCoverageGroup>("NullableCoverageGroup")({
  /**
* CoverageGroup data.
*/
"data": S.NullOr(CoverageGroupData),
  /**
* An array of entity data objects accessible from CoverageGroup.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class CoverageGroupList extends S.Class<CoverageGroupList>("CoverageGroupList")({
  /**
* A list of CoverageGroup data.
*/
"data": S.Array(CoverageGroupData),
  /**
* An array of entity data objects accessible from CoverageGroup.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class CoverageGroup extends S.Class<CoverageGroup>("CoverageGroup")({
  /**
* CoverageGroup data.
*/
"data": CoverageGroupData,
  /**
* An array of entity data objects accessible from CoverageGroup.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableCoverageGroupTemplate extends S.Class<NullableCoverageGroupTemplate>("NullableCoverageGroupTemplate")({
  /**
* CoverageGroupTemplate data.
*/
"data": S.NullOr(CoverageGroupTemplateData),
  /**
* An array of entity data objects accessible from CoverageGroupTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class ClaimList extends S.Class<ClaimList>("ClaimList")({
  /**
* A list of Claim data.
*/
"data": S.Array(ClaimData),
  /**
* An array of entity data objects accessible from Claim.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Claim extends S.Class<Claim>("Claim")({
  /**
* Claim data.
*/
"data": ClaimData,
  /**
* An array of entity data objects accessible from Claim.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ClaimDeductible extends S.Class<ClaimDeductible>("ClaimDeductible")({
  /**
* ClaimDeductible data.
*/
"data": ClaimDeductibleData,
  /**
* An array of entity data objects accessible from ClaimDeductible.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Bucket extends S.Class<Bucket>("Bucket")({
  /**
* Bucket data.
*/
"data": BucketData,
  /**
* An array of entity data objects accessible from Bucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BaseBucketMetadata extends S.Class<BaseBucketMetadata>("BaseBucketMetadata")({
  /**
* BaseBucketMetadata data.
*/
"data": BaseBucketMetadataData,
  /**
* An array of entity data objects accessible from BaseBucketMetadata.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BaseSubBucketList extends S.Class<BaseSubBucketList>("BaseSubBucketList")({
  /**
* A list of BaseSubBucket data.
*/
"data": S.Array(SubBucketData),
  /**
* An array of entity data objects accessible from BaseSubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BucketFundingList extends S.Class<BucketFundingList>("BucketFundingList")({
  /**
* A list of BucketFunding data.
*/
"data": S.Array(BucketFundingData),
  /**
* An array of entity data objects accessible from BucketFunding.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BucketFunding extends S.Class<BucketFunding>("BucketFunding")({
  /**
* BucketFunding data.
*/
"data": BucketFundingData,
  /**
* An array of entity data objects accessible from BucketFunding.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Funding extends S.Class<Funding>("Funding")({
  /**
* Funding data.
*/
"data": FundingData,
  /**
* An array of entity data objects accessible from Funding.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BaseSubBucket extends S.Class<BaseSubBucket>("BaseSubBucket")({
  /**
* BaseSubBucket data.
*/
"data": SubBucketData,
  /**
* An array of entity data objects accessible from BaseSubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BaseSubBucketMetadataList extends S.Class<BaseSubBucketMetadataList>("BaseSubBucketMetadataList")({
  /**
* A list of BaseSubBucketMetadata data.
*/
"data": S.Array(BaseSubBucketMetadataData),
  /**
* An array of entity data objects accessible from BaseSubBucketMetadata.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BaseBucketMetadataList extends S.Class<BaseBucketMetadataList>("BaseBucketMetadataList")({
  /**
* A list of BaseBucketMetadata data.
*/
"data": S.Array(BaseBucketMetadataData),
  /**
* An array of entity data objects accessible from BaseBucketMetadata.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AddressList extends S.Class<AddressList>("AddressList")({
  /**
* A list of Address data.
*/
"data": S.Array(AddressData),
  /**
* An array of entity data objects accessible from Address.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AccountProviderList extends S.Class<AccountProviderList>("AccountProviderList")({
  /**
* A list of AccountProvider data.
*/
"data": S.Array(AccountProviderData),
  /**
* An array of entity data objects accessible from AccountProvider.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AccountProvider extends S.Class<AccountProvider>("AccountProvider")({
  /**
* AccountProvider data.
*/
"data": AccountProviderData,
  /**
* An array of entity data objects accessible from AccountProvider.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableProvider extends S.Class<NullableProvider>("NullableProvider")({
  /**
* Provider data.
*/
"data": S.NullOr(ProviderData),
  /**
* An array of entity data objects accessible from Provider.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class AccountProviderContact extends S.Class<AccountProviderContact>("AccountProviderContact")({
  /**
* AccountProviderContact data.
*/
"data": AccountProviderContactData,
  /**
* An array of entity data objects accessible from AccountProviderContact.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableUser extends S.Class<NullableUser>("NullableUser")({
  /**
* User data.
*/
"data": S.NullOr(UserData),
  /**
* An array of entity data objects accessible from User.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class AccountInviteList extends S.Class<AccountInviteList>("AccountInviteList")({
  /**
* A list of AccountInvite data.
*/
"data": S.Array(AccountInviteData),
  /**
* An array of entity data objects accessible from AccountInvite.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AccountInvite extends S.Class<AccountInvite>("AccountInvite")({
  /**
* AccountInvite data.
*/
"data": AccountInviteData,
  /**
* An array of entity data objects accessible from AccountInvite.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SpaceTypeList extends S.Class<SpaceTypeList>("SpaceTypeList")({
  /**
* A list of SpaceType data.
*/
"data": S.Array(SpaceTypeData),
  /**
* An array of entity data objects accessible from SpaceType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SpaceClassList extends S.Class<SpaceClassList>("SpaceClassList")({
  /**
* A list of SpaceClass data.
*/
"data": S.Array(SpaceClassData),
  /**
* An array of entity data objects accessible from SpaceClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AssetTypeList extends S.Class<AssetTypeList>("AssetTypeList")({
  /**
* A list of AssetType data.
*/
"data": S.Array(AssetTypeData),
  /**
* An array of entity data objects accessible from AssetType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SpaceGroupTypeList extends S.Class<SpaceGroupTypeList>("SpaceGroupTypeList")({
  /**
* A list of SpaceGroupType data.
*/
"data": S.Array(SpaceGroupTypeData),
  /**
* An array of entity data objects accessible from SpaceGroupType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SpaceGroupType extends S.Class<SpaceGroupType>("SpaceGroupType")({
  /**
* SpaceGroupType data.
*/
"data": SpaceGroupTypeData,
  /**
* An array of entity data objects accessible from SpaceGroupType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BucketTypeList extends S.Class<BucketTypeList>("BucketTypeList")({
  /**
* A list of BucketType data.
*/
"data": S.Array(BucketTypeData),
  /**
* An array of entity data objects accessible from BucketType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SpaceClass extends S.Class<SpaceClass>("SpaceClass")({
  /**
* SpaceClass data.
*/
"data": SpaceClassData,
  /**
* An array of entity data objects accessible from SpaceClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SpaceCategoryList extends S.Class<SpaceCategoryList>("SpaceCategoryList")({
  /**
* A list of SpaceCategory data.
*/
"data": S.Array(SpaceCategoryData),
  /**
* An array of entity data objects accessible from SpaceCategory.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SpaceCategory extends S.Class<SpaceCategory>("SpaceCategory")({
  /**
* SpaceCategory data.
*/
"data": SpaceCategoryData,
  /**
* An array of entity data objects accessible from SpaceCategory.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ServiceTypeList extends S.Class<ServiceTypeList>("ServiceTypeList")({
  /**
* A list of ServiceType data.
*/
"data": S.Array(ServiceTypeData),
  /**
* An array of entity data objects accessible from ServiceType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ServiceType extends S.Class<ServiceType>("ServiceType")({
  /**
* ServiceType data.
*/
"data": ServiceTypeData,
  /**
* An array of entity data objects accessible from ServiceType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ServiceClassList extends S.Class<ServiceClassList>("ServiceClassList")({
  /**
* A list of ServiceClass data.
*/
"data": S.Array(ServiceClassData),
  /**
* An array of entity data objects accessible from ServiceClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ServiceClass extends S.Class<ServiceClass>("ServiceClass")({
  /**
* ServiceClass data.
*/
"data": ServiceClassData,
  /**
* An array of entity data objects accessible from ServiceClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ServiceCategoryList extends S.Class<ServiceCategoryList>("ServiceCategoryList")({
  /**
* A list of ServiceCategory data.
*/
"data": S.Array(ServiceCategoryData),
  /**
* An array of entity data objects accessible from ServiceCategory.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ServiceCategory extends S.Class<ServiceCategory>("ServiceCategory")({
  /**
* ServiceCategory data.
*/
"data": ServiceCategoryData,
  /**
* An array of entity data objects accessible from ServiceCategory.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ItemTypeList extends S.Class<ItemTypeList>("ItemTypeList")({
  /**
* A list of ItemType data.
*/
"data": S.Array(ItemTypeData),
  /**
* An array of entity data objects accessible from ItemType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemType extends S.Class<ItemType>("ItemType")({
  /**
* ItemType data.
*/
"data": ItemTypeData,
  /**
* An array of entity data objects accessible from ItemType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DepreciationModifierList extends S.Class<DepreciationModifierList>("DepreciationModifierList")({
  /**
* A list of DepreciationModifier data.
*/
"data": S.Array(DepreciationModifierData),
  /**
* An array of entity data objects accessible from DepreciationModifier.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class DepreciationOverrideList extends S.Class<DepreciationOverrideList>("DepreciationOverrideList")({
  /**
* A list of DepreciationOverride data.
*/
"data": S.Array(DepreciationOverrideData),
  /**
* An array of entity data objects accessible from DepreciationOverride.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemClassList extends S.Class<ItemClassList>("ItemClassList")({
  /**
* A list of ItemClass data.
*/
"data": S.Array(ItemClassData),
  /**
* An array of entity data objects accessible from ItemClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemClass extends S.Class<ItemClass>("ItemClass")({
  /**
* ItemClass data.
*/
"data": ItemClassData,
  /**
* An array of entity data objects accessible from ItemClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ItemCategoryList extends S.Class<ItemCategoryList>("ItemCategoryList")({
  /**
* A list of ItemCategory data.
*/
"data": S.Array(ItemCategoryData),
  /**
* An array of entity data objects accessible from ItemCategory.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemCategory extends S.Class<ItemCategory>("ItemCategory")({
  /**
* ItemCategory data.
*/
"data": ItemCategoryData,
  /**
* An array of entity data objects accessible from ItemCategory.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class IncidentTypeList extends S.Class<IncidentTypeList>("IncidentTypeList")({
  /**
* A list of IncidentType data.
*/
"data": S.Array(IncidentTypeData),
  /**
* An array of entity data objects accessible from IncidentType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class IncidentClassList extends S.Class<IncidentClassList>("IncidentClassList")({
  /**
* A list of IncidentClass data.
*/
"data": S.Array(IncidentClassData),
  /**
* An array of entity data objects accessible from IncidentClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class IncidentClass extends S.Class<IncidentClass>("IncidentClass")({
  /**
* IncidentClass data.
*/
"data": IncidentClassData,
  /**
* An array of entity data objects accessible from IncidentClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DocumentTypeList extends S.Class<DocumentTypeList>("DocumentTypeList")({
  /**
* A list of DocumentType data.
*/
"data": S.Array(DocumentTypeData),
  /**
* An array of entity data objects accessible from DocumentType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class DocumentType extends S.Class<DocumentType>("DocumentType")({
  /**
* DocumentType data.
*/
"data": DocumentTypeData,
  /**
* An array of entity data objects accessible from DocumentType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DocumentClassList extends S.Class<DocumentClassList>("DocumentClassList")({
  /**
* A list of DocumentClass data.
*/
"data": S.Array(DocumentClassData),
  /**
* An array of entity data objects accessible from DocumentClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class DocumentClass extends S.Class<DocumentClass>("DocumentClass")({
  /**
* DocumentClass data.
*/
"data": DocumentClassData,
  /**
* An array of entity data objects accessible from DocumentClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BucketType extends S.Class<BucketType>("BucketType")({
  /**
* BucketType data.
*/
"data": BucketTypeData,
  /**
* An array of entity data objects accessible from BucketType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class BucketClassList extends S.Class<BucketClassList>("BucketClassList")({
  /**
* A list of BucketClass data.
*/
"data": S.Array(BucketClassData),
  /**
* An array of entity data objects accessible from BucketClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BucketClass extends S.Class<BucketClass>("BucketClass")({
  /**
* BucketClass data.
*/
"data": BucketClassData,
  /**
* An array of entity data objects accessible from BucketClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AssetAttributeTypeList extends S.Class<AssetAttributeTypeList>("AssetAttributeTypeList")({
  /**
* A list of AssetAttributeType data.
*/
"data": S.Array(AssetAttributeTypeData),
  /**
* An array of entity data objects accessible from AssetAttributeType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AssetAttributeType extends S.Class<AssetAttributeType>("AssetAttributeType")({
  /**
* AssetAttributeType data.
*/
"data": AssetAttributeTypeData,
  /**
* An array of entity data objects accessible from AssetAttributeType.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AssetAttributeClassList extends S.Class<AssetAttributeClassList>("AssetAttributeClassList")({
  /**
* A list of AssetAttributeClass data.
*/
"data": S.Array(AssetAttributeClassData),
  /**
* An array of entity data objects accessible from AssetAttributeClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AssetAttributeClass extends S.Class<AssetAttributeClass>("AssetAttributeClass")({
  /**
* AssetAttributeClass data.
*/
"data": AssetAttributeClassData,
  /**
* An array of entity data objects accessible from AssetAttributeClass.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SubmissionTrackTemplateList extends S.Class<SubmissionTrackTemplateList>("SubmissionTrackTemplateList")({
  /**
* A list of SubmissionTrackTemplate data.
*/
"data": S.Array(SubmissionTrackTemplateData),
  /**
* An array of entity data objects accessible from SubmissionTrackTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SubmissionTrackTemplate extends S.Class<SubmissionTrackTemplate>("SubmissionTrackTemplate")({
  /**
* SubmissionTrackTemplate data.
*/
"data": SubmissionTrackTemplateData,
  /**
* An array of entity data objects accessible from SubmissionTrackTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class PolicyTemplate extends S.Class<PolicyTemplate>("PolicyTemplate")({
  /**
* PolicyTemplate data.
*/
"data": PolicyTemplateData,
  /**
* An array of entity data objects accessible from PolicyTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class SubCoverageTemplateList extends S.Class<SubCoverageTemplateList>("SubCoverageTemplateList")({
  /**
* A list of SubCoverageTemplate data.
*/
"data": S.Array(SubCoverageTemplateData),
  /**
* An array of entity data objects accessible from SubCoverageTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SubCoverageTemplate extends S.Class<SubCoverageTemplate>("SubCoverageTemplate")({
  /**
* SubCoverageTemplate data.
*/
"data": SubCoverageTemplateData,
  /**
* An array of entity data objects accessible from SubCoverageTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class CoverageTemplate extends S.Class<CoverageTemplate>("CoverageTemplate")({
  /**
* CoverageTemplate data.
*/
"data": CoverageTemplateData,
  /**
* An array of entity data objects accessible from CoverageTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class EndorsementTemplateList extends S.Class<EndorsementTemplateList>("EndorsementTemplateList")({
  /**
* A list of EndorsementTemplate data.
*/
"data": S.Array(EndorsementTemplateData),
  /**
* An array of entity data objects accessible from EndorsementTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SpaceTypeItemTemplateList extends S.Class<SpaceTypeItemTemplateList>("SpaceTypeItemTemplateList")({
  /**
* A list of SpaceTypeItemTemplate data.
*/
"data": S.Array(SpaceTypeItemTemplateData),
  /**
* An array of entity data objects accessible from SpaceTypeItemTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class SpaceTypeItemTemplate extends S.Class<SpaceTypeItemTemplate>("SpaceTypeItemTemplate")({
  /**
* SpaceTypeItemTemplate data.
*/
"data": SpaceTypeItemTemplateData,
  /**
* An array of entity data objects accessible from SpaceTypeItemTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ItemTemplate extends S.Class<ItemTemplate>("ItemTemplate")({
  /**
* ItemTemplate data.
*/
"data": ItemTemplateData,
  /**
* An array of entity data objects accessible from ItemTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class PolicyTemplateList extends S.Class<PolicyTemplateList>("PolicyTemplateList")({
  /**
* A list of PolicyTemplate data.
*/
"data": S.Array(PolicyTemplateData),
  /**
* An array of entity data objects accessible from PolicyTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class CoverageGroupTemplateList extends S.Class<CoverageGroupTemplateList>("CoverageGroupTemplateList")({
  /**
* A list of CoverageGroupTemplate data.
*/
"data": S.Array(CoverageGroupTemplateData),
  /**
* An array of entity data objects accessible from CoverageGroupTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class CoverageTemplateList extends S.Class<CoverageTemplateList>("CoverageTemplateList")({
  /**
* A list of CoverageTemplate data.
*/
"data": S.Array(CoverageTemplateData),
  /**
* An array of entity data objects accessible from CoverageTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ItemTemplateList extends S.Class<ItemTemplateList>("ItemTemplateList")({
  /**
* A list of ItemTemplate data.
*/
"data": S.Array(ItemTemplateData),
  /**
* An array of entity data objects accessible from ItemTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class EndorsementTemplate extends S.Class<EndorsementTemplate>("EndorsementTemplate")({
  /**
* EndorsementTemplate data.
*/
"data": EndorsementTemplateData,
  /**
* An array of entity data objects accessible from EndorsementTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class CoverageGroupTemplate extends S.Class<CoverageGroupTemplate>("CoverageGroupTemplate")({
  /**
* CoverageGroupTemplate data.
*/
"data": CoverageGroupTemplateData,
  /**
* An array of entity data objects accessible from CoverageGroupTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AssetAttributeTypeItemTemplateList extends S.Class<AssetAttributeTypeItemTemplateList>("AssetAttributeTypeItemTemplateList")({
  /**
* A list of AssetAttributeTypeItemTemplate data.
*/
"data": S.Array(AssetAttributeTypeItemTemplateData),
  /**
* An array of entity data objects accessible from AssetAttributeTypeItemTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class AssetAttributeTypeItemTemplate extends S.Class<AssetAttributeTypeItemTemplate>("AssetAttributeTypeItemTemplate")({
  /**
* AssetAttributeTypeItemTemplate data.
*/
"data": AssetAttributeTypeItemTemplateData,
  /**
* An array of entity data objects accessible from AssetAttributeTypeItemTemplate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ProviderList extends S.Class<ProviderList>("ProviderList")({
  /**
* A list of Provider data.
*/
"data": S.Array(ProviderData),
  /**
* An array of entity data objects accessible from Provider.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Peril extends S.Class<Peril>("Peril")({
  /**
* Peril data.
*/
"data": PerilData,
  /**
* An array of entity data objects accessible from Peril.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DisasterList extends S.Class<DisasterList>("DisasterList")({
  /**
* A list of Disaster data.
*/
"data": S.Array(DisasterData),
  /**
* An array of entity data objects accessible from Disaster.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Disaster extends S.Class<Disaster>("Disaster")({
  /**
* Disaster data.
*/
"data": DisasterData,
  /**
* An array of entity data objects accessible from Disaster.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class CurrencyList extends S.Class<CurrencyList>("CurrencyList")({
  /**
* A list of Currency data.
*/
"data": S.Array(CurrencyData),
  /**
* An array of entity data objects accessible from Currency.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class CountryList extends S.Class<CountryList>("CountryList")({
  /**
* A list of Country data.
*/
"data": S.Array(CountryData),
  /**
* An array of entity data objects accessible from Country.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class WarrantyList extends S.Class<WarrantyList>("WarrantyList")({
  /**
* A list of Warranty data.
*/
"data": S.Array(WarrantyData),
  /**
* An array of entity data objects accessible from Warranty.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Warranty extends S.Class<Warranty>("Warranty")({
  /**
* Warranty data.
*/
"data": WarrantyData,
  /**
* An array of entity data objects accessible from Warranty.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableFile extends S.Class<NullableFile>("NullableFile")({
  /**
* File data.
*/
"data": S.NullOr(FileData),
  /**
* An array of entity data objects accessible from File.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class UserManualList extends S.Class<UserManualList>("UserManualList")({
  /**
* A list of UserManual data.
*/
"data": S.Array(UserManualData),
  /**
* An array of entity data objects accessible from UserManual.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class UserManual extends S.Class<UserManual>("UserManual")({
  /**
* UserManual data.
*/
"data": UserManualData,
  /**
* An array of entity data objects accessible from UserManual.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ScopeOfLossList extends S.Class<ScopeOfLossList>("ScopeOfLossList")({
  /**
* A list of ScopeOfLoss data.
*/
"data": S.Array(ScopeOfLossData),
  /**
* An array of entity data objects accessible from ScopeOfLoss.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ScopeOfLoss extends S.Class<ScopeOfLoss>("ScopeOfLoss")({
  /**
* ScopeOfLoss data.
*/
"data": ScopeOfLossData,
  /**
* An array of entity data objects accessible from ScopeOfLoss.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class RentRollList extends S.Class<RentRollList>("RentRollList")({
  /**
* A list of RentRoll data.
*/
"data": S.Array(RentRollData),
  /**
* An array of entity data objects accessible from RentRoll.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class RentRoll extends S.Class<RentRoll>("RentRoll")({
  /**
* RentRoll data.
*/
"data": RentRollData,
  /**
* An array of entity data objects accessible from RentRoll.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ProductSpecList extends S.Class<ProductSpecList>("ProductSpecList")({
  /**
* A list of ProductSpec data.
*/
"data": S.Array(ProductSpecData),
  /**
* An array of entity data objects accessible from ProductSpec.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ProductSpec extends S.Class<ProductSpec>("ProductSpec")({
  /**
* ProductSpec data.
*/
"data": ProductSpecData,
  /**
* An array of entity data objects accessible from ProductSpec.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class PolicyJacketList extends S.Class<PolicyJacketList>("PolicyJacketList")({
  /**
* A list of PolicyJacket data.
*/
"data": S.Array(PolicyJacketData),
  /**
* An array of entity data objects accessible from PolicyJacket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class PolicyJacket extends S.Class<PolicyJacket>("PolicyJacket")({
  /**
* PolicyJacket data.
*/
"data": PolicyJacketData,
  /**
* An array of entity data objects accessible from PolicyJacket.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class PoliceReportList extends S.Class<PoliceReportList>("PoliceReportList")({
  /**
* A list of PoliceReport data.
*/
"data": S.Array(PoliceReportData),
  /**
* An array of entity data objects accessible from PoliceReport.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class PoliceReport extends S.Class<PoliceReport>("PoliceReport")({
  /**
* PoliceReport data.
*/
"data": PoliceReportData,
  /**
* An array of entity data objects accessible from PoliceReport.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class PermitList extends S.Class<PermitList>("PermitList")({
  /**
* A list of Permit data.
*/
"data": S.Array(PermitData),
  /**
* An array of entity data objects accessible from Permit.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Permit extends S.Class<Permit>("Permit")({
  /**
* Permit data.
*/
"data": PermitData,
  /**
* An array of entity data objects accessible from Permit.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Payment extends S.Class<Payment>("Payment")({
  /**
* Payment data.
*/
"data": PaymentData,
  /**
* An array of entity data objects accessible from Payment.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ItemizableFinancialDocumentStats extends S.Class<ItemizableFinancialDocumentStats>("ItemizableFinancialDocumentStats")({
  /**
* ItemizableFinancialDocumentStats data.
*/
"data": ItemizableFinancialDocumentStatsData,
  /**
* An array of entity data objects accessible from ItemizableFinancialDocumentStats.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableAccountProvider extends S.Class<NullableAccountProvider>("NullableAccountProvider")({
  /**
* AccountProvider data.
*/
"data": S.NullOr(AccountProviderData),
  /**
* An array of entity data objects accessible from AccountProvider.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class NullableService extends S.Class<NullableService>("NullableService")({
  /**
* Service data.
*/
"data": S.NullOr(ServiceData),
  /**
* An array of entity data objects accessible from Service.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class ParamedicReportList extends S.Class<ParamedicReportList>("ParamedicReportList")({
  /**
* A list of ParamedicReport data.
*/
"data": S.Array(ParamedicReportData),
  /**
* An array of entity data objects accessible from ParamedicReport.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class ParamedicReport extends S.Class<ParamedicReport>("ParamedicReport")({
  /**
* ParamedicReport data.
*/
"data": ParamedicReportData,
  /**
* An array of entity data objects accessible from ParamedicReport.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Invoice extends S.Class<Invoice>("Invoice")({
  /**
* Invoice data.
*/
"data": InvoiceData,
  /**
* An array of entity data objects accessible from Invoice.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class IncidentReportList extends S.Class<IncidentReportList>("IncidentReportList")({
  /**
* A list of IncidentReport data.
*/
"data": S.Array(IncidentReportData),
  /**
* An array of entity data objects accessible from IncidentReport.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class IncidentReport extends S.Class<IncidentReport>("IncidentReport")({
  /**
* IncidentReport data.
*/
"data": IncidentReportData,
  /**
* An array of entity data objects accessible from IncidentReport.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Estimate extends S.Class<Estimate>("Estimate")({
  /**
* Estimate data.
*/
"data": EstimateData,
  /**
* An array of entity data objects accessible from Estimate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class Document extends S.Class<Document>("Document")({
  /**
* Document data.
*/
"data": S.Union(ChangeOrderData,
EstimateData,
InvoiceData,
PaymentData,
AssetAppraisalData,
AppraisalData,
FundingData,
IncidentReportData,
PoliceReportData,
ParamedicReportData,
ContractData,
RentRollData,
PermitData,
BlueprintData,
DeclarationsPageData,
PolicyJacketData,
ScopeOfLossData,
DeliveryPaperworkData,
ProductSpecData,
UserManualData,
WarrantyData,
DeedData),
  /**
* An array of entity data objects accessible from Document.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DeliveryPaperworkList extends S.Class<DeliveryPaperworkList>("DeliveryPaperworkList")({
  /**
* A list of DeliveryPaperwork data.
*/
"data": S.Array(DeliveryPaperworkData),
  /**
* An array of entity data objects accessible from DeliveryPaperwork.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class DeliveryPaperwork extends S.Class<DeliveryPaperwork>("DeliveryPaperwork")({
  /**
* DeliveryPaperwork data.
*/
"data": DeliveryPaperworkData,
  /**
* An array of entity data objects accessible from DeliveryPaperwork.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DeedList extends S.Class<DeedList>("DeedList")({
  /**
* A list of Deed data.
*/
"data": S.Array(DeedData),
  /**
* An array of entity data objects accessible from Deed.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Deed extends S.Class<Deed>("Deed")({
  /**
* Deed data.
*/
"data": DeedData,
  /**
* An array of entity data objects accessible from Deed.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class DeclarationsPageList extends S.Class<DeclarationsPageList>("DeclarationsPageList")({
  /**
* A list of DeclarationsPage data.
*/
"data": S.Array(DeclarationsPageData),
  /**
* An array of entity data objects accessible from DeclarationsPage.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class DeclarationsPage extends S.Class<DeclarationsPage>("DeclarationsPage")({
  /**
* DeclarationsPage data.
*/
"data": DeclarationsPageData,
  /**
* An array of entity data objects accessible from DeclarationsPage.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ContractList extends S.Class<ContractList>("ContractList")({
  /**
* A list of Contract data.
*/
"data": S.Array(ContractData),
  /**
* An array of entity data objects accessible from Contract.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Contract extends S.Class<Contract>("Contract")({
  /**
* Contract data.
*/
"data": ContractData,
  /**
* An array of entity data objects accessible from Contract.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ChangeOrder extends S.Class<ChangeOrder>("ChangeOrder")({
  /**
* ChangeOrder data.
*/
"data": ChangeOrderData,
  /**
* An array of entity data objects accessible from ChangeOrder.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class ChangeOrderLineList extends S.Class<ChangeOrderLineList>("ChangeOrderLineList")({
  /**
* A list of ChangeOrderLine data.
*/
"data": S.Array(S.Union(ItemChangeOrderData,
ItemImpactChangeOrderData,
ServiceTaskChangeOrderData)),
  /**
* An array of entity data objects accessible from ChangeOrderLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BlueprintList extends S.Class<BlueprintList>("BlueprintList")({
  /**
* A list of Blueprint data.
*/
"data": S.Array(BlueprintData),
  /**
* An array of entity data objects accessible from Blueprint.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Blueprint extends S.Class<Blueprint>("Blueprint")({
  /**
* Blueprint data.
*/
"data": BlueprintData,
  /**
* An array of entity data objects accessible from Blueprint.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AssetAppraisal extends S.Class<AssetAppraisal>("AssetAppraisal")({
  /**
* AssetAppraisal data.
*/
"data": AssetAppraisalData,
  /**
* An array of entity data objects accessible from AssetAppraisal.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AppraisalList extends S.Class<AppraisalList>("AppraisalList")({
  /**
* A list of Appraisal data.
*/
"data": S.Array(AppraisalData),
  /**
* An array of entity data objects accessible from Appraisal.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class Appraisal extends S.Class<Appraisal>("Appraisal")({
  /**
* Appraisal data.
*/
"data": AppraisalData,
  /**
* An array of entity data objects accessible from Appraisal.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AppraisalLineList extends S.Class<AppraisalLineList>("AppraisalLineList")({
  /**
* A list of AppraisalLine data.
*/
"data": S.Array(ItemAppraisalData),
  /**
* An array of entity data objects accessible from AppraisalLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class BaseEntityList extends S.Class<BaseEntityList>("BaseEntityList")({
  /**
* A list of BaseEntity data.
*/
"data": S.Array(S.Union(ChangeOrderData,
EstimateData,
InvoiceData,
PaymentData,
AssetAppraisalData,
AppraisalData,
FundingData,
IncidentReportData,
PoliceReportData,
ParamedicReportData,
ContractData,
RentRollData,
PermitData,
BlueprintData,
DeclarationsPageData,
PolicyJacketData,
ScopeOfLossData,
DeliveryPaperworkData,
ProductSpecData,
UserManualData,
WarrantyData,
DeedData,
ItemChangeOrderData,
ItemImpactChangeOrderData,
ServiceTaskChangeOrderData,
ItemEstimateData,
ItemImpactEstimateData,
ServiceTaskEstimateData,
ItemInvoiceData,
ItemImpactInvoiceData,
ServiceTaskInvoiceData,
ItemPaymentData,
ItemImpactPaymentData,
ServiceTaskPaymentData,
ItemAppraisalData,
ItemizableFinancialDocumentStatsData,
ProviderData,
CountryData,
CurrencyData,
DepreciationModifierData,
DepreciationOverrideData,
ItemTypeData,
DisasterData,
PerilData,
AssetAttributeTypeItemTemplateData,
CoverageGroupTemplateData,
CoverageTemplateData,
EndorsementTemplateData,
ItemTemplateData,
PolicyTemplateData,
SpaceTypeItemTemplateData,
SubCoverageTemplateData,
SubmissionTrackTemplateData,
AssetAttributeClassData,
AssetAttributeTypeData,
AssetTypeData,
BucketClassData,
BucketTypeData,
DocumentClassData,
DocumentTypeData,
IncidentClassData,
IncidentTypeData,
ItemCategoryData,
ItemClassData,
ServiceCategoryData,
ServiceClassData,
ServiceTypeData,
SpaceGroupTypeData,
SpaceCategoryData,
SpaceClassData,
SpaceTypeData,
AccountInviteData,
AccountProviderContactData,
UserData,
AccountProviderData,
AccountData,
AddressData,
DwellingData,
AuthProfileData,
BaseBucketMetadataData,
EntryData,
BucketData,
SubBucketData,
BaseSubBucketMetadataData,
CoverageData,
BucketFundingData,
ClaimDeductibleData,
PolicyTermData,
ClaimData,
CoverageGroupData,
DeductibleData,
EmailAddressData,
EndorsementData,
EntrySourceMediaData,
EntrySourceMetadataData,
ItemImpactData,
ItemData,
ServiceTaskData,
ServiceData,
ThirdPartyImpactData,
FileProcessData,
FileData,
ProjectImpactData,
IncidentImpactData,
IncidentData,
ItemMediaSuggestionData,
ItemProductSuggestionData,
MediaData,
PhoneNumberData,
PolicyData,
ProjectMediaData,
SpaceGroupData,
SpaceData,
SubCoverageData,
ThirdPartyDwellingData,
ThirdPartyIndividualData,
UserAccountRoleData)),
  /**
* An array of entity data objects accessible from BaseEntity.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links. Only supplied for GET requests.
*/
"links": S.optionalWith(ListLinkObject, { nullable: true })
}) {}

export class PaymentLine extends S.Class<PaymentLine>("PaymentLine")({
  /**
* PaymentLine data.
*/
"data": S.Union(ItemPaymentData,
ItemImpactPaymentData,
ServiceTaskPaymentData),
  /**
* An array of entity data objects accessible from PaymentLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullablePayment extends S.Class<NullablePayment>("NullablePayment")({
  /**
* Payment data.
*/
"data": S.NullOr(PaymentData),
  /**
* An array of entity data objects accessible from Payment.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class InvoiceLine extends S.Class<InvoiceLine>("InvoiceLine")({
  /**
* InvoiceLine data.
*/
"data": S.Union(ItemInvoiceData,
ItemImpactInvoiceData,
ServiceTaskInvoiceData),
  /**
* An array of entity data objects accessible from InvoiceLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableInvoice extends S.Class<NullableInvoice>("NullableInvoice")({
  /**
* Invoice data.
*/
"data": S.NullOr(InvoiceData),
  /**
* An array of entity data objects accessible from Invoice.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class EstimateLine extends S.Class<EstimateLine>("EstimateLine")({
  /**
* EstimateLine data.
*/
"data": S.Union(ItemEstimateData,
ItemImpactEstimateData,
ServiceTaskEstimateData),
  /**
* An array of entity data objects accessible from EstimateLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class NullableEstimate extends S.Class<NullableEstimate>("NullableEstimate")({
  /**
* Estimate data.
*/
"data": S.NullOr(EstimateData),
  /**
* An array of entity data objects accessible from Estimate.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {}

export class ChangeOrderLine extends S.Class<ChangeOrderLine>("ChangeOrderLine")({
  /**
* ChangeOrderLine data.
*/
"data": S.Union(ItemChangeOrderData,
ItemImpactChangeOrderData,
ServiceTaskChangeOrderData),
  /**
* An array of entity data objects accessible from ChangeOrderLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class AppraisalLine extends S.Class<AppraisalLine>("AppraisalLine")({
  /**
* AppraisalLine data.
*/
"data": ItemAppraisalData,
  /**
* An array of entity data objects accessible from AppraisalLine.
*/
"included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
  /**
* Relevant links.
*/
"links": S.optionalWith(LinkObject, { nullable: true })
}) {}

export class UpdateUser extends S.Class<UpdateUser>("UpdateUser")({
  /**
* User data.
*/
"data": UpdateUserData,
  /**
* An array of entity data objects accessible from User.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertUserAccountRole extends S.Class<UpsertUserAccountRole>("UpsertUserAccountRole")({
  /**
* UserAccountRole data.
*/
"data": S.Union(CreateUserAccountRoleData,
UpdateUserAccountRoleData),
  /**
* An array of entity data objects accessible from UserAccountRole.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertUserAccountRoleList extends S.Class<UpsertUserAccountRoleList>("UpsertUserAccountRoleList")({
  /**
* A list of UserAccountRole data.
*/
"data": S.Array(S.Union(CreateUserAccountRoleData,
UpdateUserAccountRoleData)),
  /**
* An array of entity data objects accessible from UserAccountRole.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateUserAccountRole extends S.Class<UpdateUserAccountRole>("UpdateUserAccountRole")({
  /**
* UserAccountRole data.
*/
"data": UpdateUserAccountRoleData,
  /**
* An array of entity data objects accessible from UserAccountRole.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertThirdParty extends S.Class<UpsertThirdParty>("UpsertThirdParty")({
  /**
* ThirdParty data.
*/
"data": S.Union(CreateThirdPartyDwellingData,
CreateThirdPartyIndividualData,
UpdateThirdPartyDwellingData,
UpdateThirdPartyIndividualData),
  /**
* An array of entity data objects accessible from ThirdParty.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertThirdPartyList extends S.Class<UpsertThirdPartyList>("UpsertThirdPartyList")({
  /**
* A list of ThirdParty data.
*/
"data": S.Array(S.Union(CreateThirdPartyDwellingData,
CreateThirdPartyIndividualData,
UpdateThirdPartyDwellingData,
UpdateThirdPartyIndividualData)),
  /**
* An array of entity data objects accessible from ThirdParty.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateThirdParty extends S.Class<UpdateThirdParty>("UpdateThirdParty")({
  /**
* ThirdParty data.
*/
"data": S.Union(UpdateThirdPartyDwellingData,
UpdateThirdPartyIndividualData),
  /**
* An array of entity data objects accessible from ThirdParty.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertThirdPartyIndividual extends S.Class<UpsertThirdPartyIndividual>("UpsertThirdPartyIndividual")({
  /**
* ThirdPartyIndividual data.
*/
"data": S.Union(CreateThirdPartyIndividualData,
UpdateThirdPartyIndividualData),
  /**
* An array of entity data objects accessible from ThirdPartyIndividual.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertThirdPartyIndividualList extends S.Class<UpsertThirdPartyIndividualList>("UpsertThirdPartyIndividualList")({
  /**
* A list of ThirdPartyIndividual data.
*/
"data": S.Array(S.Union(CreateThirdPartyIndividualData,
UpdateThirdPartyIndividualData)),
  /**
* An array of entity data objects accessible from ThirdPartyIndividual.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateThirdPartyIndividual extends S.Class<UpdateThirdPartyIndividual>("UpdateThirdPartyIndividual")({
  /**
* ThirdPartyIndividual data.
*/
"data": UpdateThirdPartyIndividualData,
  /**
* An array of entity data objects accessible from ThirdPartyIndividual.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertThirdPartyImpact extends S.Class<UpsertThirdPartyImpact>("UpsertThirdPartyImpact")({
  /**
* ThirdPartyImpact data.
*/
"data": S.Union(CreateThirdPartyImpactData,
UpdateThirdPartyImpactData),
  /**
* An array of entity data objects accessible from ThirdPartyImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertThirdPartyImpactList extends S.Class<UpsertThirdPartyImpactList>("UpsertThirdPartyImpactList")({
  /**
* A list of ThirdPartyImpact data.
*/
"data": S.Array(S.Union(CreateThirdPartyImpactData,
UpdateThirdPartyImpactData)),
  /**
* An array of entity data objects accessible from ThirdPartyImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateThirdPartyImpact extends S.Class<UpdateThirdPartyImpact>("UpdateThirdPartyImpact")({
  /**
* ThirdPartyImpact data.
*/
"data": UpdateThirdPartyImpactData,
  /**
* An array of entity data objects accessible from ThirdPartyImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertThirdPartyDwelling extends S.Class<UpsertThirdPartyDwelling>("UpsertThirdPartyDwelling")({
  /**
* ThirdPartyDwelling data.
*/
"data": S.Union(CreateThirdPartyDwellingData,
UpdateThirdPartyDwellingData),
  /**
* An array of entity data objects accessible from ThirdPartyDwelling.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertThirdPartyDwellingList extends S.Class<UpsertThirdPartyDwellingList>("UpsertThirdPartyDwellingList")({
  /**
* A list of ThirdPartyDwelling data.
*/
"data": S.Array(S.Union(CreateThirdPartyDwellingData,
UpdateThirdPartyDwellingData)),
  /**
* An array of entity data objects accessible from ThirdPartyDwelling.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateThirdPartyDwelling extends S.Class<UpdateThirdPartyDwelling>("UpdateThirdPartyDwelling")({
  /**
* ThirdPartyDwelling data.
*/
"data": UpdateThirdPartyDwellingData,
  /**
* An array of entity data objects accessible from ThirdPartyDwelling.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSubCoverage extends S.Class<UpsertSubCoverage>("UpsertSubCoverage")({
  /**
* SubCoverage data.
*/
"data": S.Union(CreateSubCoverageData,
UpdateSubCoverageData),
  /**
* An array of entity data objects accessible from SubCoverage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSubCoverageList extends S.Class<UpsertSubCoverageList>("UpsertSubCoverageList")({
  /**
* A list of SubCoverage data.
*/
"data": S.Array(S.Union(CreateSubCoverageData,
UpdateSubCoverageData)),
  /**
* An array of entity data objects accessible from SubCoverage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateSubCoverage extends S.Class<UpdateSubCoverage>("UpdateSubCoverage")({
  /**
* SubCoverage data.
*/
"data": UpdateSubCoverageData,
  /**
* An array of entity data objects accessible from SubCoverage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSubBucket extends S.Class<UpsertSubBucket>("UpsertSubBucket")({
  /**
* SubBucket data.
*/
"data": S.Union(CreateSubBucketData,
UpdateSubBucketData),
  /**
* An array of entity data objects accessible from SubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSubBucketList extends S.Class<UpsertSubBucketList>("UpsertSubBucketList")({
  /**
* A list of SubBucket data.
*/
"data": S.Array(S.Union(CreateSubBucketData,
UpdateSubBucketData)),
  /**
* An array of entity data objects accessible from SubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateSubBucket extends S.Class<UpdateSubBucket>("UpdateSubBucket")({
  /**
* SubBucket data.
*/
"data": UpdateSubBucketData,
  /**
* An array of entity data objects accessible from SubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSubBucketDefinition extends S.Class<UpsertSubBucketDefinition>("UpsertSubBucketDefinition")({
  /**
* SubBucketDefinition data.
*/
"data": S.Union(CreateSubCoverageData,
UpdateSubCoverageData),
  /**
* An array of entity data objects accessible from SubBucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSubBucketDefinitionList extends S.Class<UpsertSubBucketDefinitionList>("UpsertSubBucketDefinitionList")({
  /**
* A list of SubBucketDefinition data.
*/
"data": S.Array(S.Union(CreateSubCoverageData,
UpdateSubCoverageData)),
  /**
* An array of entity data objects accessible from SubBucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateSubBucketDefinition extends S.Class<UpdateSubBucketDefinition>("UpdateSubBucketDefinition")({
  /**
* SubBucketDefinition data.
*/
"data": UpdateSubCoverageData,
  /**
* An array of entity data objects accessible from SubBucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSpace extends S.Class<UpsertSpace>("UpsertSpace")({
  /**
* Space data.
*/
"data": S.Union(CreateSpaceData,
UpdateSpaceData),
  /**
* An array of entity data objects accessible from Space.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSpaceList extends S.Class<UpsertSpaceList>("UpsertSpaceList")({
  /**
* A list of Space data.
*/
"data": S.Array(S.Union(CreateSpaceData,
UpdateSpaceData)),
  /**
* An array of entity data objects accessible from Space.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateSpace extends S.Class<UpdateSpace>("UpdateSpace")({
  /**
* Space data.
*/
"data": UpdateSpaceData,
  /**
* An array of entity data objects accessible from Space.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSpaceGroup extends S.Class<UpsertSpaceGroup>("UpsertSpaceGroup")({
  /**
* SpaceGroup data.
*/
"data": S.Union(CreateSpaceGroupData,
UpdateSpaceGroupData),
  /**
* An array of entity data objects accessible from SpaceGroup.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertSpaceGroupList extends S.Class<UpsertSpaceGroupList>("UpsertSpaceGroupList")({
  /**
* A list of SpaceGroup data.
*/
"data": S.Array(S.Union(CreateSpaceGroupData,
UpdateSpaceGroupData)),
  /**
* An array of entity data objects accessible from SpaceGroup.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateSpaceGroup extends S.Class<UpdateSpaceGroup>("UpdateSpaceGroup")({
  /**
* SpaceGroup data.
*/
"data": UpdateSpaceGroupData,
  /**
* An array of entity data objects accessible from SpaceGroup.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertService extends S.Class<UpsertService>("UpsertService")({
  /**
* Service data.
*/
"data": S.Union(CreateServiceData,
UpdateServiceData),
  /**
* An array of entity data objects accessible from Service.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertServiceList extends S.Class<UpsertServiceList>("UpsertServiceList")({
  /**
* A list of Service data.
*/
"data": S.Array(S.Union(CreateServiceData,
UpdateServiceData)),
  /**
* An array of entity data objects accessible from Service.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateService extends S.Class<UpdateService>("UpdateService")({
  /**
* Service data.
*/
"data": UpdateServiceData,
  /**
* An array of entity data objects accessible from Service.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertServiceTask extends S.Class<UpsertServiceTask>("UpsertServiceTask")({
  /**
* ServiceTask data.
*/
"data": S.Union(CreateServiceTaskData,
UpdateServiceTaskData),
  /**
* An array of entity data objects accessible from ServiceTask.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertServiceTaskList extends S.Class<UpsertServiceTaskList>("UpsertServiceTaskList")({
  /**
* A list of ServiceTask data.
*/
"data": S.Array(S.Union(CreateServiceTaskData,
UpdateServiceTaskData)),
  /**
* An array of entity data objects accessible from ServiceTask.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateServiceTask extends S.Class<UpdateServiceTask>("UpdateServiceTask")({
  /**
* ServiceTask data.
*/
"data": UpdateServiceTaskData,
  /**
* An array of entity data objects accessible from ServiceTask.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertProject extends S.Class<UpsertProject>("UpsertProject")({
  /**
* Project data.
*/
"data": S.Union(CreateIncidentData,
UpdateIncidentData),
  /**
* An array of entity data objects accessible from Project.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertProjectList extends S.Class<UpsertProjectList>("UpsertProjectList")({
  /**
* A list of Project data.
*/
"data": S.Array(S.Union(CreateIncidentData,
UpdateIncidentData)),
  /**
* An array of entity data objects accessible from Project.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateProject extends S.Class<UpdateProject>("UpdateProject")({
  /**
* Project data.
*/
"data": UpdateIncidentData,
  /**
* An array of entity data objects accessible from Project.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertProjectMedia extends S.Class<UpsertProjectMedia>("UpsertProjectMedia")({
  /**
* ProjectMedia data.
*/
"data": S.Union(CreateProjectMediaData,
UpdateProjectMediaData),
  /**
* An array of entity data objects accessible from ProjectMedia.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertProjectMediaList extends S.Class<UpsertProjectMediaList>("UpsertProjectMediaList")({
  /**
* A list of ProjectMedia data.
*/
"data": S.Array(S.Union(CreateProjectMediaData,
UpdateProjectMediaData)),
  /**
* An array of entity data objects accessible from ProjectMedia.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateProjectMedia extends S.Class<UpdateProjectMedia>("UpdateProjectMedia")({
  /**
* ProjectMedia data.
*/
"data": UpdateProjectMediaData,
  /**
* An array of entity data objects accessible from ProjectMedia.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertProjectImpact extends S.Class<UpsertProjectImpact>("UpsertProjectImpact")({
  /**
* ProjectImpact data.
*/
"data": S.Union(CreateProjectImpactData,
UpdateProjectImpactData),
  /**
* An array of entity data objects accessible from ProjectImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertProjectImpactList extends S.Class<UpsertProjectImpactList>("UpsertProjectImpactList")({
  /**
* A list of ProjectImpact data.
*/
"data": S.Array(S.Union(CreateProjectImpactData,
UpdateProjectImpactData)),
  /**
* An array of entity data objects accessible from ProjectImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateProjectImpact extends S.Class<UpdateProjectImpact>("UpdateProjectImpact")({
  /**
* ProjectImpact data.
*/
"data": UpdateProjectImpactData,
  /**
* An array of entity data objects accessible from ProjectImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPolicy extends S.Class<UpsertPolicy>("UpsertPolicy")({
  /**
* Policy data.
*/
"data": S.Union(CreatePolicyData,
UpdatePolicyData),
  /**
* An array of entity data objects accessible from Policy.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPolicyList extends S.Class<UpsertPolicyList>("UpsertPolicyList")({
  /**
* A list of Policy data.
*/
"data": S.Array(S.Union(CreatePolicyData,
UpdatePolicyData)),
  /**
* An array of entity data objects accessible from Policy.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdatePolicy extends S.Class<UpdatePolicy>("UpdatePolicy")({
  /**
* Policy data.
*/
"data": UpdatePolicyData,
  /**
* An array of entity data objects accessible from Policy.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPolicyTerm extends S.Class<UpsertPolicyTerm>("UpsertPolicyTerm")({
  /**
* PolicyTerm data.
*/
"data": S.Union(CreatePolicyTermData,
UpdatePolicyTermData),
  /**
* An array of entity data objects accessible from PolicyTerm.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPolicyTermList extends S.Class<UpsertPolicyTermList>("UpsertPolicyTermList")({
  /**
* A list of PolicyTerm data.
*/
"data": S.Array(S.Union(CreatePolicyTermData,
UpdatePolicyTermData)),
  /**
* An array of entity data objects accessible from PolicyTerm.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdatePolicyTerm extends S.Class<UpdatePolicyTerm>("UpdatePolicyTerm")({
  /**
* PolicyTerm data.
*/
"data": UpdatePolicyTermData,
  /**
* An array of entity data objects accessible from PolicyTerm.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPhoneNumber extends S.Class<UpsertPhoneNumber>("UpsertPhoneNumber")({
  /**
* PhoneNumber data.
*/
"data": S.Union(CreatePhoneNumberData,
UpdatePhoneNumberData),
  /**
* An array of entity data objects accessible from PhoneNumber.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPhoneNumberList extends S.Class<UpsertPhoneNumberList>("UpsertPhoneNumberList")({
  /**
* A list of PhoneNumber data.
*/
"data": S.Array(S.Union(CreatePhoneNumberData,
UpdatePhoneNumberData)),
  /**
* An array of entity data objects accessible from PhoneNumber.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdatePhoneNumber extends S.Class<UpdatePhoneNumber>("UpdatePhoneNumber")({
  /**
* PhoneNumber data.
*/
"data": UpdatePhoneNumberData,
  /**
* An array of entity data objects accessible from PhoneNumber.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertMedia extends S.Class<UpsertMedia>("UpsertMedia")({
  /**
* Media data.
*/
"data": S.Union(CreateMediaData,
UpdateMediaData),
  /**
* An array of entity data objects accessible from Media.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertMediaList extends S.Class<UpsertMediaList>("UpsertMediaList")({
  /**
* A list of Media data.
*/
"data": S.Array(S.Union(CreateMediaData,
UpdateMediaData)),
  /**
* An array of entity data objects accessible from Media.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateMedia extends S.Class<UpdateMedia>("UpdateMedia")({
  /**
* Media data.
*/
"data": UpdateMediaData,
  /**
* An array of entity data objects accessible from Media.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertItem extends S.Class<UpsertItem>("UpsertItem")({
  /**
* Item data.
*/
"data": S.Union(CreateItemData,
UpdateItemData),
  /**
* An array of entity data objects accessible from Item.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertItemList extends S.Class<UpsertItemList>("UpsertItemList")({
  /**
* A list of Item data.
*/
"data": S.Array(S.Union(CreateItemData,
UpdateItemData)),
  /**
* An array of entity data objects accessible from Item.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateItem extends S.Class<UpdateItem>("UpdateItem")({
  /**
* Item data.
*/
"data": UpdateItemData,
  /**
* An array of entity data objects accessible from Item.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertItemProductSuggestion extends S.Class<UpsertItemProductSuggestion>("UpsertItemProductSuggestion")({
  /**
* ItemProductSuggestion data.
*/
"data": S.Union(CreateItemProductSuggestionData,
UpdateItemProductSuggestionData),
  /**
* An array of entity data objects accessible from ItemProductSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertItemProductSuggestionList extends S.Class<UpsertItemProductSuggestionList>("UpsertItemProductSuggestionList")({
  /**
* A list of ItemProductSuggestion data.
*/
"data": S.Array(S.Union(CreateItemProductSuggestionData,
UpdateItemProductSuggestionData)),
  /**
* An array of entity data objects accessible from ItemProductSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateItemProductSuggestion extends S.Class<UpdateItemProductSuggestion>("UpdateItemProductSuggestion")({
  /**
* ItemProductSuggestion data.
*/
"data": UpdateItemProductSuggestionData,
  /**
* An array of entity data objects accessible from ItemProductSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertItemMediaSuggestion extends S.Class<UpsertItemMediaSuggestion>("UpsertItemMediaSuggestion")({
  /**
* ItemMediaSuggestion data.
*/
"data": S.Union(CreateItemMediaSuggestionData,
UpdateItemMediaSuggestionData),
  /**
* An array of entity data objects accessible from ItemMediaSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertItemMediaSuggestionList extends S.Class<UpsertItemMediaSuggestionList>("UpsertItemMediaSuggestionList")({
  /**
* A list of ItemMediaSuggestion data.
*/
"data": S.Array(S.Union(CreateItemMediaSuggestionData,
UpdateItemMediaSuggestionData)),
  /**
* An array of entity data objects accessible from ItemMediaSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateItemMediaSuggestion extends S.Class<UpdateItemMediaSuggestion>("UpdateItemMediaSuggestion")({
  /**
* ItemMediaSuggestion data.
*/
"data": UpdateItemMediaSuggestionData,
  /**
* An array of entity data objects accessible from ItemMediaSuggestion.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertItemImpact extends S.Class<UpsertItemImpact>("UpsertItemImpact")({
  /**
* ItemImpact data.
*/
"data": S.Union(CreateItemImpactData,
UpdateItemImpactData),
  /**
* An array of entity data objects accessible from ItemImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertItemImpactList extends S.Class<UpsertItemImpactList>("UpsertItemImpactList")({
  /**
* A list of ItemImpact data.
*/
"data": S.Array(S.Union(CreateItemImpactData,
UpdateItemImpactData)),
  /**
* An array of entity data objects accessible from ItemImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateItemImpact extends S.Class<UpdateItemImpact>("UpdateItemImpact")({
  /**
* ItemImpact data.
*/
"data": UpdateItemImpactData,
  /**
* An array of entity data objects accessible from ItemImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertIncident extends S.Class<UpsertIncident>("UpsertIncident")({
  /**
* Incident data.
*/
"data": S.Union(CreateIncidentData,
UpdateIncidentData),
  /**
* An array of entity data objects accessible from Incident.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertIncidentList extends S.Class<UpsertIncidentList>("UpsertIncidentList")({
  /**
* A list of Incident data.
*/
"data": S.Array(S.Union(CreateIncidentData,
UpdateIncidentData)),
  /**
* An array of entity data objects accessible from Incident.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateIncident extends S.Class<UpdateIncident>("UpdateIncident")({
  /**
* Incident data.
*/
"data": UpdateIncidentData,
  /**
* An array of entity data objects accessible from Incident.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertIncidentImpact extends S.Class<UpsertIncidentImpact>("UpsertIncidentImpact")({
  /**
* IncidentImpact data.
*/
"data": S.Union(CreateIncidentImpactData,
UpdateIncidentImpactData),
  /**
* An array of entity data objects accessible from IncidentImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertIncidentImpactList extends S.Class<UpsertIncidentImpactList>("UpsertIncidentImpactList")({
  /**
* A list of IncidentImpact data.
*/
"data": S.Array(S.Union(CreateIncidentImpactData,
UpdateIncidentImpactData)),
  /**
* An array of entity data objects accessible from IncidentImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateIncidentImpact extends S.Class<UpdateIncidentImpact>("UpdateIncidentImpact")({
  /**
* IncidentImpact data.
*/
"data": UpdateIncidentImpactData,
  /**
* An array of entity data objects accessible from IncidentImpact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertFundingSource extends S.Class<UpsertFundingSource>("UpsertFundingSource")({
  /**
* FundingSource data.
*/
"data": S.Union(CreateClaimData,
UpdateClaimData),
  /**
* An array of entity data objects accessible from FundingSource.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertFundingSourceList extends S.Class<UpsertFundingSourceList>("UpsertFundingSourceList")({
  /**
* A list of FundingSource data.
*/
"data": S.Array(S.Union(CreateClaimData,
UpdateClaimData)),
  /**
* An array of entity data objects accessible from FundingSource.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateFundingSource extends S.Class<UpdateFundingSource>("UpdateFundingSource")({
  /**
* FundingSource data.
*/
"data": UpdateClaimData,
  /**
* An array of entity data objects accessible from FundingSource.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateFile extends S.Class<UpdateFile>("UpdateFile")({
  /**
* File data.
*/
"data": UpdateFileData,
  /**
* An array of entity data objects accessible from File.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEntry extends S.Class<UpsertEntry>("UpsertEntry")({
  /**
* Entry data.
*/
"data": S.Union(CreateEntryData,
UpdateEntryData),
  /**
* An array of entity data objects accessible from Entry.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEntryList extends S.Class<UpsertEntryList>("UpsertEntryList")({
  /**
* A list of Entry data.
*/
"data": S.Array(S.Union(CreateEntryData,
UpdateEntryData)),
  /**
* An array of entity data objects accessible from Entry.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateEntry extends S.Class<UpdateEntry>("UpdateEntry")({
  /**
* Entry data.
*/
"data": UpdateEntryData,
  /**
* An array of entity data objects accessible from Entry.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEntrySource extends S.Class<UpsertEntrySource>("UpsertEntrySource")({
  /**
* EntrySource data.
*/
"data": S.Union(CreateItemImpactData,
CreateItemData,
CreateServiceTaskData,
CreateServiceData,
CreateThirdPartyImpactData,
UpdateItemImpactData,
UpdateItemData,
UpdateServiceTaskData,
UpdateServiceData,
UpdateThirdPartyImpactData),
  /**
* An array of entity data objects accessible from EntrySource.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEntrySourceList extends S.Class<UpsertEntrySourceList>("UpsertEntrySourceList")({
  /**
* A list of EntrySource data.
*/
"data": S.Array(S.Union(CreateItemImpactData,
CreateItemData,
CreateServiceTaskData,
CreateServiceData,
CreateThirdPartyImpactData,
UpdateItemImpactData,
UpdateItemData,
UpdateServiceTaskData,
UpdateServiceData,
UpdateThirdPartyImpactData)),
  /**
* An array of entity data objects accessible from EntrySource.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateEntrySource extends S.Class<UpdateEntrySource>("UpdateEntrySource")({
  /**
* EntrySource data.
*/
"data": S.Union(UpdateItemImpactData,
UpdateItemData,
UpdateServiceTaskData,
UpdateServiceData,
UpdateThirdPartyImpactData),
  /**
* An array of entity data objects accessible from EntrySource.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEntrySourceMedia extends S.Class<UpsertEntrySourceMedia>("UpsertEntrySourceMedia")({
  /**
* EntrySourceMedia data.
*/
"data": S.Union(CreateEntrySourceMediaData,
UpdateEntrySourceMediaData),
  /**
* An array of entity data objects accessible from EntrySourceMedia.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEntrySourceMediaList extends S.Class<UpsertEntrySourceMediaList>("UpsertEntrySourceMediaList")({
  /**
* A list of EntrySourceMedia data.
*/
"data": S.Array(S.Union(CreateEntrySourceMediaData,
UpdateEntrySourceMediaData)),
  /**
* An array of entity data objects accessible from EntrySourceMedia.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateEntrySourceMedia extends S.Class<UpdateEntrySourceMedia>("UpdateEntrySourceMedia")({
  /**
* EntrySourceMedia data.
*/
"data": UpdateEntrySourceMediaData,
  /**
* An array of entity data objects accessible from EntrySourceMedia.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEndorsement extends S.Class<UpsertEndorsement>("UpsertEndorsement")({
  /**
* Endorsement data.
*/
"data": S.Union(CreateEndorsementData,
UpdateEndorsementData),
  /**
* An array of entity data objects accessible from Endorsement.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEndorsementList extends S.Class<UpsertEndorsementList>("UpsertEndorsementList")({
  /**
* A list of Endorsement data.
*/
"data": S.Array(S.Union(CreateEndorsementData,
UpdateEndorsementData)),
  /**
* An array of entity data objects accessible from Endorsement.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateEndorsement extends S.Class<UpdateEndorsement>("UpdateEndorsement")({
  /**
* Endorsement data.
*/
"data": UpdateEndorsementData,
  /**
* An array of entity data objects accessible from Endorsement.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEmailAddress extends S.Class<UpsertEmailAddress>("UpsertEmailAddress")({
  /**
* EmailAddress data.
*/
"data": S.Union(CreateEmailAddressData,
UpdateEmailAddressData),
  /**
* An array of entity data objects accessible from EmailAddress.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEmailAddressList extends S.Class<UpsertEmailAddressList>("UpsertEmailAddressList")({
  /**
* A list of EmailAddress data.
*/
"data": S.Array(S.Union(CreateEmailAddressData,
UpdateEmailAddressData)),
  /**
* An array of entity data objects accessible from EmailAddress.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateEmailAddress extends S.Class<UpdateEmailAddress>("UpdateEmailAddress")({
  /**
* EmailAddress data.
*/
"data": UpdateEmailAddressData,
  /**
* An array of entity data objects accessible from EmailAddress.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDwelling extends S.Class<UpsertDwelling>("UpsertDwelling")({
  /**
* Dwelling data.
*/
"data": S.Union(CreateDwellingData,
UpdateDwellingData),
  /**
* An array of entity data objects accessible from Dwelling.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDwellingList extends S.Class<UpsertDwellingList>("UpsertDwellingList")({
  /**
* A list of Dwelling data.
*/
"data": S.Array(S.Union(CreateDwellingData,
UpdateDwellingData)),
  /**
* An array of entity data objects accessible from Dwelling.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateDwelling extends S.Class<UpdateDwelling>("UpdateDwelling")({
  /**
* Dwelling data.
*/
"data": UpdateDwellingData,
  /**
* An array of entity data objects accessible from Dwelling.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDeductible extends S.Class<UpsertDeductible>("UpsertDeductible")({
  /**
* Deductible data.
*/
"data": S.Union(CreateDeductibleData,
UpdateDeductibleData),
  /**
* An array of entity data objects accessible from Deductible.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDeductibleList extends S.Class<UpsertDeductibleList>("UpsertDeductibleList")({
  /**
* A list of Deductible data.
*/
"data": S.Array(S.Union(CreateDeductibleData,
UpdateDeductibleData)),
  /**
* An array of entity data objects accessible from Deductible.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateDeductible extends S.Class<UpdateDeductible>("UpdateDeductible")({
  /**
* Deductible data.
*/
"data": UpdateDeductibleData,
  /**
* An array of entity data objects accessible from Deductible.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertCoverage extends S.Class<UpsertCoverage>("UpsertCoverage")({
  /**
* Coverage data.
*/
"data": S.Union(CreateCoverageData,
UpdateCoverageData),
  /**
* An array of entity data objects accessible from Coverage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertCoverageList extends S.Class<UpsertCoverageList>("UpsertCoverageList")({
  /**
* A list of Coverage data.
*/
"data": S.Array(S.Union(CreateCoverageData,
UpdateCoverageData)),
  /**
* An array of entity data objects accessible from Coverage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateCoverage extends S.Class<UpdateCoverage>("UpdateCoverage")({
  /**
* Coverage data.
*/
"data": UpdateCoverageData,
  /**
* An array of entity data objects accessible from Coverage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertCoverageGroup extends S.Class<UpsertCoverageGroup>("UpsertCoverageGroup")({
  /**
* CoverageGroup data.
*/
"data": S.Union(CreateCoverageGroupData,
UpdateCoverageGroupData),
  /**
* An array of entity data objects accessible from CoverageGroup.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertCoverageGroupList extends S.Class<UpsertCoverageGroupList>("UpsertCoverageGroupList")({
  /**
* A list of CoverageGroup data.
*/
"data": S.Array(S.Union(CreateCoverageGroupData,
UpdateCoverageGroupData)),
  /**
* An array of entity data objects accessible from CoverageGroup.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateCoverageGroup extends S.Class<UpdateCoverageGroup>("UpdateCoverageGroup")({
  /**
* CoverageGroup data.
*/
"data": UpdateCoverageGroupData,
  /**
* An array of entity data objects accessible from CoverageGroup.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertClaim extends S.Class<UpsertClaim>("UpsertClaim")({
  /**
* Claim data.
*/
"data": S.Union(CreateClaimData,
UpdateClaimData),
  /**
* An array of entity data objects accessible from Claim.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertClaimList extends S.Class<UpsertClaimList>("UpsertClaimList")({
  /**
* A list of Claim data.
*/
"data": S.Array(S.Union(CreateClaimData,
UpdateClaimData)),
  /**
* An array of entity data objects accessible from Claim.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateClaim extends S.Class<UpdateClaim>("UpdateClaim")({
  /**
* Claim data.
*/
"data": UpdateClaimData,
  /**
* An array of entity data objects accessible from Claim.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertClaimDeductible extends S.Class<UpsertClaimDeductible>("UpsertClaimDeductible")({
  /**
* ClaimDeductible data.
*/
"data": S.Union(CreateClaimDeductibleData,
UpdateClaimDeductibleData),
  /**
* An array of entity data objects accessible from ClaimDeductible.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertClaimDeductibleList extends S.Class<UpsertClaimDeductibleList>("UpsertClaimDeductibleList")({
  /**
* A list of ClaimDeductible data.
*/
"data": S.Array(S.Union(CreateClaimDeductibleData,
UpdateClaimDeductibleData)),
  /**
* An array of entity data objects accessible from ClaimDeductible.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateClaimDeductible extends S.Class<UpdateClaimDeductible>("UpdateClaimDeductible")({
  /**
* ClaimDeductible data.
*/
"data": UpdateClaimDeductibleData,
  /**
* An array of entity data objects accessible from ClaimDeductible.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBucket extends S.Class<UpsertBucket>("UpsertBucket")({
  /**
* Bucket data.
*/
"data": S.Union(CreateBucketData,
UpdateBucketData),
  /**
* An array of entity data objects accessible from Bucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBucketList extends S.Class<UpsertBucketList>("UpsertBucketList")({
  /**
* A list of Bucket data.
*/
"data": S.Array(S.Union(CreateBucketData,
UpdateBucketData)),
  /**
* An array of entity data objects accessible from Bucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateBucket extends S.Class<UpdateBucket>("UpdateBucket")({
  /**
* Bucket data.
*/
"data": UpdateBucketData,
  /**
* An array of entity data objects accessible from Bucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBucketFunding extends S.Class<UpsertBucketFunding>("UpsertBucketFunding")({
  /**
* BucketFunding data.
*/
"data": S.Union(CreateBucketFundingData,
UpdateBucketFundingData),
  /**
* An array of entity data objects accessible from BucketFunding.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBucketFundingList extends S.Class<UpsertBucketFundingList>("UpsertBucketFundingList")({
  /**
* A list of BucketFunding data.
*/
"data": S.Array(S.Union(CreateBucketFundingData,
UpdateBucketFundingData)),
  /**
* An array of entity data objects accessible from BucketFunding.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateBucketFunding extends S.Class<UpdateBucketFunding>("UpdateBucketFunding")({
  /**
* BucketFunding data.
*/
"data": UpdateBucketFundingData,
  /**
* An array of entity data objects accessible from BucketFunding.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBucketDefinition extends S.Class<UpsertBucketDefinition>("UpsertBucketDefinition")({
  /**
* BucketDefinition data.
*/
"data": S.Union(CreateCoverageData,
UpdateCoverageData),
  /**
* An array of entity data objects accessible from BucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBucketDefinitionList extends S.Class<UpsertBucketDefinitionList>("UpsertBucketDefinitionList")({
  /**
* A list of BucketDefinition data.
*/
"data": S.Array(S.Union(CreateCoverageData,
UpdateCoverageData)),
  /**
* An array of entity data objects accessible from BucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateBucketDefinition extends S.Class<UpdateBucketDefinition>("UpdateBucketDefinition")({
  /**
* BucketDefinition data.
*/
"data": UpdateCoverageData,
  /**
* An array of entity data objects accessible from BucketDefinition.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBaseSubBucket extends S.Class<UpsertBaseSubBucket>("UpsertBaseSubBucket")({
  /**
* BaseSubBucket data.
*/
"data": S.Union(CreateSubBucketData,
UpdateSubBucketData),
  /**
* An array of entity data objects accessible from BaseSubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBaseSubBucketList extends S.Class<UpsertBaseSubBucketList>("UpsertBaseSubBucketList")({
  /**
* A list of BaseSubBucket data.
*/
"data": S.Array(S.Union(CreateSubBucketData,
UpdateSubBucketData)),
  /**
* An array of entity data objects accessible from BaseSubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateBaseSubBucket extends S.Class<UpdateBaseSubBucket>("UpdateBaseSubBucket")({
  /**
* BaseSubBucket data.
*/
"data": UpdateSubBucketData,
  /**
* An array of entity data objects accessible from BaseSubBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBaseBucket extends S.Class<UpsertBaseBucket>("UpsertBaseBucket")({
  /**
* BaseBucket data.
*/
"data": S.Union(CreateBucketData,
UpdateBucketData),
  /**
* An array of entity data objects accessible from BaseBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBaseBucketList extends S.Class<UpsertBaseBucketList>("UpsertBaseBucketList")({
  /**
* A list of BaseBucket data.
*/
"data": S.Array(S.Union(CreateBucketData,
UpdateBucketData)),
  /**
* An array of entity data objects accessible from BaseBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateBaseBucket extends S.Class<UpdateBaseBucket>("UpdateBaseBucket")({
  /**
* BaseBucket data.
*/
"data": UpdateBucketData,
  /**
* An array of entity data objects accessible from BaseBucket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAsset extends S.Class<UpsertAsset>("UpsertAsset")({
  /**
* Asset data.
*/
"data": S.Union(CreateDwellingData,
UpdateDwellingData),
  /**
* An array of entity data objects accessible from Asset.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAssetList extends S.Class<UpsertAssetList>("UpsertAssetList")({
  /**
* A list of Asset data.
*/
"data": S.Array(S.Union(CreateDwellingData,
UpdateDwellingData)),
  /**
* An array of entity data objects accessible from Asset.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAsset extends S.Class<UpdateAsset>("UpdateAsset")({
  /**
* Asset data.
*/
"data": UpdateDwellingData,
  /**
* An array of entity data objects accessible from Asset.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAddress extends S.Class<UpsertAddress>("UpsertAddress")({
  /**
* Address data.
*/
"data": S.Union(CreateAddressData,
UpdateAddressData),
  /**
* An array of entity data objects accessible from Address.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAddressList extends S.Class<UpsertAddressList>("UpsertAddressList")({
  /**
* A list of Address data.
*/
"data": S.Array(S.Union(CreateAddressData,
UpdateAddressData)),
  /**
* An array of entity data objects accessible from Address.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAddress extends S.Class<UpdateAddress>("UpdateAddress")({
  /**
* Address data.
*/
"data": UpdateAddressData,
  /**
* An array of entity data objects accessible from Address.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAccount extends S.Class<UpdateAccount>("UpdateAccount")({
  /**
* Account data.
*/
"data": UpdateAccountData,
  /**
* An array of entity data objects accessible from Account.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAccountProvider extends S.Class<UpsertAccountProvider>("UpsertAccountProvider")({
  /**
* AccountProvider data.
*/
"data": S.Union(CreateAccountProviderData,
UpdateAccountProviderData),
  /**
* An array of entity data objects accessible from AccountProvider.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAccountProviderList extends S.Class<UpsertAccountProviderList>("UpsertAccountProviderList")({
  /**
* A list of AccountProvider data.
*/
"data": S.Array(S.Union(CreateAccountProviderData,
UpdateAccountProviderData)),
  /**
* An array of entity data objects accessible from AccountProvider.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAccountProvider extends S.Class<UpdateAccountProvider>("UpdateAccountProvider")({
  /**
* AccountProvider data.
*/
"data": UpdateAccountProviderData,
  /**
* An array of entity data objects accessible from AccountProvider.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAccountProviderContact extends S.Class<UpsertAccountProviderContact>("UpsertAccountProviderContact")({
  /**
* AccountProviderContact data.
*/
"data": S.Union(CreateAccountProviderContactData,
UpdateAccountProviderContactData),
  /**
* An array of entity data objects accessible from AccountProviderContact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAccountProviderContactList extends S.Class<UpsertAccountProviderContactList>("UpsertAccountProviderContactList")({
  /**
* A list of AccountProviderContact data.
*/
"data": S.Array(S.Union(CreateAccountProviderContactData,
UpdateAccountProviderContactData)),
  /**
* An array of entity data objects accessible from AccountProviderContact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAccountProviderContact extends S.Class<UpdateAccountProviderContact>("UpdateAccountProviderContact")({
  /**
* AccountProviderContact data.
*/
"data": UpdateAccountProviderContactData,
  /**
* An array of entity data objects accessible from AccountProviderContact.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAccountInvite extends S.Class<UpsertAccountInvite>("UpsertAccountInvite")({
  /**
* AccountInvite data.
*/
"data": S.Union(CreateAccountInviteData,
UpdateAccountInviteData),
  /**
* An array of entity data objects accessible from AccountInvite.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAccountInviteList extends S.Class<UpsertAccountInviteList>("UpsertAccountInviteList")({
  /**
* A list of AccountInvite data.
*/
"data": S.Array(S.Union(CreateAccountInviteData,
UpdateAccountInviteData)),
  /**
* An array of entity data objects accessible from AccountInvite.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAccountInvite extends S.Class<UpdateAccountInvite>("UpdateAccountInvite")({
  /**
* AccountInvite data.
*/
"data": UpdateAccountInviteData,
  /**
* An array of entity data objects accessible from AccountInvite.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertWarranty extends S.Class<UpsertWarranty>("UpsertWarranty")({
  /**
* Warranty data.
*/
"data": S.Union(CreateWarrantyData,
UpdateWarrantyData),
  /**
* An array of entity data objects accessible from Warranty.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertWarrantyList extends S.Class<UpsertWarrantyList>("UpsertWarrantyList")({
  /**
* A list of Warranty data.
*/
"data": S.Array(S.Union(CreateWarrantyData,
UpdateWarrantyData)),
  /**
* An array of entity data objects accessible from Warranty.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateWarranty extends S.Class<UpdateWarranty>("UpdateWarranty")({
  /**
* Warranty data.
*/
"data": UpdateWarrantyData,
  /**
* An array of entity data objects accessible from Warranty.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertUserManual extends S.Class<UpsertUserManual>("UpsertUserManual")({
  /**
* UserManual data.
*/
"data": S.Union(CreateUserManualData,
UpdateUserManualData),
  /**
* An array of entity data objects accessible from UserManual.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertUserManualList extends S.Class<UpsertUserManualList>("UpsertUserManualList")({
  /**
* A list of UserManual data.
*/
"data": S.Array(S.Union(CreateUserManualData,
UpdateUserManualData)),
  /**
* An array of entity data objects accessible from UserManual.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateUserManual extends S.Class<UpdateUserManual>("UpdateUserManual")({
  /**
* UserManual data.
*/
"data": UpdateUserManualData,
  /**
* An array of entity data objects accessible from UserManual.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertScopeOfLoss extends S.Class<UpsertScopeOfLoss>("UpsertScopeOfLoss")({
  /**
* ScopeOfLoss data.
*/
"data": S.Union(CreateScopeOfLossData,
UpdateScopeOfLossData),
  /**
* An array of entity data objects accessible from ScopeOfLoss.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertScopeOfLossList extends S.Class<UpsertScopeOfLossList>("UpsertScopeOfLossList")({
  /**
* A list of ScopeOfLoss data.
*/
"data": S.Array(S.Union(CreateScopeOfLossData,
UpdateScopeOfLossData)),
  /**
* An array of entity data objects accessible from ScopeOfLoss.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateScopeOfLoss extends S.Class<UpdateScopeOfLoss>("UpdateScopeOfLoss")({
  /**
* ScopeOfLoss data.
*/
"data": UpdateScopeOfLossData,
  /**
* An array of entity data objects accessible from ScopeOfLoss.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertRentRoll extends S.Class<UpsertRentRoll>("UpsertRentRoll")({
  /**
* RentRoll data.
*/
"data": S.Union(CreateRentRollData,
UpdateRentRollData),
  /**
* An array of entity data objects accessible from RentRoll.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertRentRollList extends S.Class<UpsertRentRollList>("UpsertRentRollList")({
  /**
* A list of RentRoll data.
*/
"data": S.Array(S.Union(CreateRentRollData,
UpdateRentRollData)),
  /**
* An array of entity data objects accessible from RentRoll.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateRentRoll extends S.Class<UpdateRentRoll>("UpdateRentRoll")({
  /**
* RentRoll data.
*/
"data": UpdateRentRollData,
  /**
* An array of entity data objects accessible from RentRoll.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertProductSpec extends S.Class<UpsertProductSpec>("UpsertProductSpec")({
  /**
* ProductSpec data.
*/
"data": S.Union(CreateProductSpecData,
UpdateProductSpecData),
  /**
* An array of entity data objects accessible from ProductSpec.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertProductSpecList extends S.Class<UpsertProductSpecList>("UpsertProductSpecList")({
  /**
* A list of ProductSpec data.
*/
"data": S.Array(S.Union(CreateProductSpecData,
UpdateProductSpecData)),
  /**
* An array of entity data objects accessible from ProductSpec.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateProductSpec extends S.Class<UpdateProductSpec>("UpdateProductSpec")({
  /**
* ProductSpec data.
*/
"data": UpdateProductSpecData,
  /**
* An array of entity data objects accessible from ProductSpec.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPolicyJacket extends S.Class<UpsertPolicyJacket>("UpsertPolicyJacket")({
  /**
* PolicyJacket data.
*/
"data": S.Union(CreatePolicyJacketData,
UpdatePolicyJacketData),
  /**
* An array of entity data objects accessible from PolicyJacket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPolicyJacketList extends S.Class<UpsertPolicyJacketList>("UpsertPolicyJacketList")({
  /**
* A list of PolicyJacket data.
*/
"data": S.Array(S.Union(CreatePolicyJacketData,
UpdatePolicyJacketData)),
  /**
* An array of entity data objects accessible from PolicyJacket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdatePolicyJacket extends S.Class<UpdatePolicyJacket>("UpdatePolicyJacket")({
  /**
* PolicyJacket data.
*/
"data": UpdatePolicyJacketData,
  /**
* An array of entity data objects accessible from PolicyJacket.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPoliceReport extends S.Class<UpsertPoliceReport>("UpsertPoliceReport")({
  /**
* PoliceReport data.
*/
"data": S.Union(CreatePoliceReportData,
UpdatePoliceReportData),
  /**
* An array of entity data objects accessible from PoliceReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPoliceReportList extends S.Class<UpsertPoliceReportList>("UpsertPoliceReportList")({
  /**
* A list of PoliceReport data.
*/
"data": S.Array(S.Union(CreatePoliceReportData,
UpdatePoliceReportData)),
  /**
* An array of entity data objects accessible from PoliceReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdatePoliceReport extends S.Class<UpdatePoliceReport>("UpdatePoliceReport")({
  /**
* PoliceReport data.
*/
"data": UpdatePoliceReportData,
  /**
* An array of entity data objects accessible from PoliceReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPermit extends S.Class<UpsertPermit>("UpsertPermit")({
  /**
* Permit data.
*/
"data": S.Union(CreatePermitData,
UpdatePermitData),
  /**
* An array of entity data objects accessible from Permit.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPermitList extends S.Class<UpsertPermitList>("UpsertPermitList")({
  /**
* A list of Permit data.
*/
"data": S.Array(S.Union(CreatePermitData,
UpdatePermitData)),
  /**
* An array of entity data objects accessible from Permit.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdatePermit extends S.Class<UpdatePermit>("UpdatePermit")({
  /**
* Permit data.
*/
"data": UpdatePermitData,
  /**
* An array of entity data objects accessible from Permit.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPayment extends S.Class<UpsertPayment>("UpsertPayment")({
  /**
* Payment data.
*/
"data": S.Union(CreatePaymentData,
UpdatePaymentData),
  /**
* An array of entity data objects accessible from Payment.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPaymentList extends S.Class<UpsertPaymentList>("UpsertPaymentList")({
  /**
* A list of Payment data.
*/
"data": S.Array(S.Union(CreatePaymentData,
UpdatePaymentData)),
  /**
* An array of entity data objects accessible from Payment.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdatePayment extends S.Class<UpdatePayment>("UpdatePayment")({
  /**
* Payment data.
*/
"data": UpdatePaymentData,
  /**
* An array of entity data objects accessible from Payment.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertParamedicReport extends S.Class<UpsertParamedicReport>("UpsertParamedicReport")({
  /**
* ParamedicReport data.
*/
"data": S.Union(CreateParamedicReportData,
UpdateParamedicReportData),
  /**
* An array of entity data objects accessible from ParamedicReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertParamedicReportList extends S.Class<UpsertParamedicReportList>("UpsertParamedicReportList")({
  /**
* A list of ParamedicReport data.
*/
"data": S.Array(S.Union(CreateParamedicReportData,
UpdateParamedicReportData)),
  /**
* An array of entity data objects accessible from ParamedicReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateParamedicReport extends S.Class<UpdateParamedicReport>("UpdateParamedicReport")({
  /**
* ParamedicReport data.
*/
"data": UpdateParamedicReportData,
  /**
* An array of entity data objects accessible from ParamedicReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertInvoice extends S.Class<UpsertInvoice>("UpsertInvoice")({
  /**
* Invoice data.
*/
"data": S.Union(CreateInvoiceData,
UpdateInvoiceData),
  /**
* An array of entity data objects accessible from Invoice.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertInvoiceList extends S.Class<UpsertInvoiceList>("UpsertInvoiceList")({
  /**
* A list of Invoice data.
*/
"data": S.Array(S.Union(CreateInvoiceData,
UpdateInvoiceData)),
  /**
* An array of entity data objects accessible from Invoice.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateInvoice extends S.Class<UpdateInvoice>("UpdateInvoice")({
  /**
* Invoice data.
*/
"data": UpdateInvoiceData,
  /**
* An array of entity data objects accessible from Invoice.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertIncidentReport extends S.Class<UpsertIncidentReport>("UpsertIncidentReport")({
  /**
* IncidentReport data.
*/
"data": S.Union(CreateIncidentReportData,
UpdateIncidentReportData),
  /**
* An array of entity data objects accessible from IncidentReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertIncidentReportList extends S.Class<UpsertIncidentReportList>("UpsertIncidentReportList")({
  /**
* A list of IncidentReport data.
*/
"data": S.Array(S.Union(CreateIncidentReportData,
UpdateIncidentReportData)),
  /**
* An array of entity data objects accessible from IncidentReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateIncidentReport extends S.Class<UpdateIncidentReport>("UpdateIncidentReport")({
  /**
* IncidentReport data.
*/
"data": UpdateIncidentReportData,
  /**
* An array of entity data objects accessible from IncidentReport.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertFunding extends S.Class<UpsertFunding>("UpsertFunding")({
  /**
* Funding data.
*/
"data": S.Union(CreateFundingData,
UpdateFundingData),
  /**
* An array of entity data objects accessible from Funding.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertFundingList extends S.Class<UpsertFundingList>("UpsertFundingList")({
  /**
* A list of Funding data.
*/
"data": S.Array(S.Union(CreateFundingData,
UpdateFundingData)),
  /**
* An array of entity data objects accessible from Funding.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateFunding extends S.Class<UpdateFunding>("UpdateFunding")({
  /**
* Funding data.
*/
"data": UpdateFundingData,
  /**
* An array of entity data objects accessible from Funding.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEstimate extends S.Class<UpsertEstimate>("UpsertEstimate")({
  /**
* Estimate data.
*/
"data": S.Union(CreateEstimateData,
UpdateEstimateData),
  /**
* An array of entity data objects accessible from Estimate.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEstimateList extends S.Class<UpsertEstimateList>("UpsertEstimateList")({
  /**
* A list of Estimate data.
*/
"data": S.Array(S.Union(CreateEstimateData,
UpdateEstimateData)),
  /**
* An array of entity data objects accessible from Estimate.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateEstimate extends S.Class<UpdateEstimate>("UpdateEstimate")({
  /**
* Estimate data.
*/
"data": UpdateEstimateData,
  /**
* An array of entity data objects accessible from Estimate.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDocument extends S.Class<UpsertDocument>("UpsertDocument")({
  /**
* Document data.
*/
"data": S.Union(CreateChangeOrderData,
CreateEstimateData,
CreateInvoiceData,
CreatePaymentData,
CreateAssetAppraisalData,
CreateAppraisalData,
CreateFundingData,
CreateIncidentReportData,
CreatePoliceReportData,
CreateParamedicReportData,
CreateContractData,
CreateRentRollData,
CreatePermitData,
CreateBlueprintData,
CreateDeclarationsPageData,
CreatePolicyJacketData,
CreateScopeOfLossData,
CreateDeliveryPaperworkData,
CreateProductSpecData,
CreateUserManualData,
CreateWarrantyData,
CreateDeedData,
UpdateChangeOrderData,
UpdateEstimateData,
UpdateInvoiceData,
UpdatePaymentData,
UpdateAssetAppraisalData,
UpdateAppraisalData,
UpdateFundingData,
UpdateIncidentReportData,
UpdatePoliceReportData,
UpdateParamedicReportData,
UpdateContractData,
UpdateRentRollData,
UpdatePermitData,
UpdateBlueprintData,
UpdateDeclarationsPageData,
UpdatePolicyJacketData,
UpdateScopeOfLossData,
UpdateDeliveryPaperworkData,
UpdateProductSpecData,
UpdateUserManualData,
UpdateWarrantyData,
UpdateDeedData),
  /**
* An array of entity data objects accessible from Document.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDocumentList extends S.Class<UpsertDocumentList>("UpsertDocumentList")({
  /**
* A list of Document data.
*/
"data": S.Array(S.Union(CreateChangeOrderData,
CreateEstimateData,
CreateInvoiceData,
CreatePaymentData,
CreateAssetAppraisalData,
CreateAppraisalData,
CreateFundingData,
CreateIncidentReportData,
CreatePoliceReportData,
CreateParamedicReportData,
CreateContractData,
CreateRentRollData,
CreatePermitData,
CreateBlueprintData,
CreateDeclarationsPageData,
CreatePolicyJacketData,
CreateScopeOfLossData,
CreateDeliveryPaperworkData,
CreateProductSpecData,
CreateUserManualData,
CreateWarrantyData,
CreateDeedData,
UpdateChangeOrderData,
UpdateEstimateData,
UpdateInvoiceData,
UpdatePaymentData,
UpdateAssetAppraisalData,
UpdateAppraisalData,
UpdateFundingData,
UpdateIncidentReportData,
UpdatePoliceReportData,
UpdateParamedicReportData,
UpdateContractData,
UpdateRentRollData,
UpdatePermitData,
UpdateBlueprintData,
UpdateDeclarationsPageData,
UpdatePolicyJacketData,
UpdateScopeOfLossData,
UpdateDeliveryPaperworkData,
UpdateProductSpecData,
UpdateUserManualData,
UpdateWarrantyData,
UpdateDeedData)),
  /**
* An array of entity data objects accessible from Document.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateDocument extends S.Class<UpdateDocument>("UpdateDocument")({
  /**
* Document data.
*/
"data": S.Union(UpdateChangeOrderData,
UpdateEstimateData,
UpdateInvoiceData,
UpdatePaymentData,
UpdateAssetAppraisalData,
UpdateAppraisalData,
UpdateFundingData,
UpdateIncidentReportData,
UpdatePoliceReportData,
UpdateParamedicReportData,
UpdateContractData,
UpdateRentRollData,
UpdatePermitData,
UpdateBlueprintData,
UpdateDeclarationsPageData,
UpdatePolicyJacketData,
UpdateScopeOfLossData,
UpdateDeliveryPaperworkData,
UpdateProductSpecData,
UpdateUserManualData,
UpdateWarrantyData,
UpdateDeedData),
  /**
* An array of entity data objects accessible from Document.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDeliveryPaperwork extends S.Class<UpsertDeliveryPaperwork>("UpsertDeliveryPaperwork")({
  /**
* DeliveryPaperwork data.
*/
"data": S.Union(CreateDeliveryPaperworkData,
UpdateDeliveryPaperworkData),
  /**
* An array of entity data objects accessible from DeliveryPaperwork.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDeliveryPaperworkList extends S.Class<UpsertDeliveryPaperworkList>("UpsertDeliveryPaperworkList")({
  /**
* A list of DeliveryPaperwork data.
*/
"data": S.Array(S.Union(CreateDeliveryPaperworkData,
UpdateDeliveryPaperworkData)),
  /**
* An array of entity data objects accessible from DeliveryPaperwork.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateDeliveryPaperwork extends S.Class<UpdateDeliveryPaperwork>("UpdateDeliveryPaperwork")({
  /**
* DeliveryPaperwork data.
*/
"data": UpdateDeliveryPaperworkData,
  /**
* An array of entity data objects accessible from DeliveryPaperwork.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDeed extends S.Class<UpsertDeed>("UpsertDeed")({
  /**
* Deed data.
*/
"data": S.Union(CreateDeedData,
UpdateDeedData),
  /**
* An array of entity data objects accessible from Deed.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDeedList extends S.Class<UpsertDeedList>("UpsertDeedList")({
  /**
* A list of Deed data.
*/
"data": S.Array(S.Union(CreateDeedData,
UpdateDeedData)),
  /**
* An array of entity data objects accessible from Deed.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateDeed extends S.Class<UpdateDeed>("UpdateDeed")({
  /**
* Deed data.
*/
"data": UpdateDeedData,
  /**
* An array of entity data objects accessible from Deed.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDeclarationsPage extends S.Class<UpsertDeclarationsPage>("UpsertDeclarationsPage")({
  /**
* DeclarationsPage data.
*/
"data": S.Union(CreateDeclarationsPageData,
UpdateDeclarationsPageData),
  /**
* An array of entity data objects accessible from DeclarationsPage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertDeclarationsPageList extends S.Class<UpsertDeclarationsPageList>("UpsertDeclarationsPageList")({
  /**
* A list of DeclarationsPage data.
*/
"data": S.Array(S.Union(CreateDeclarationsPageData,
UpdateDeclarationsPageData)),
  /**
* An array of entity data objects accessible from DeclarationsPage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateDeclarationsPage extends S.Class<UpdateDeclarationsPage>("UpdateDeclarationsPage")({
  /**
* DeclarationsPage data.
*/
"data": UpdateDeclarationsPageData,
  /**
* An array of entity data objects accessible from DeclarationsPage.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertContract extends S.Class<UpsertContract>("UpsertContract")({
  /**
* Contract data.
*/
"data": S.Union(CreateContractData,
UpdateContractData),
  /**
* An array of entity data objects accessible from Contract.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertContractList extends S.Class<UpsertContractList>("UpsertContractList")({
  /**
* A list of Contract data.
*/
"data": S.Array(S.Union(CreateContractData,
UpdateContractData)),
  /**
* An array of entity data objects accessible from Contract.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateContract extends S.Class<UpdateContract>("UpdateContract")({
  /**
* Contract data.
*/
"data": UpdateContractData,
  /**
* An array of entity data objects accessible from Contract.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertChangeOrder extends S.Class<UpsertChangeOrder>("UpsertChangeOrder")({
  /**
* ChangeOrder data.
*/
"data": S.Union(CreateChangeOrderData,
UpdateChangeOrderData),
  /**
* An array of entity data objects accessible from ChangeOrder.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertChangeOrderList extends S.Class<UpsertChangeOrderList>("UpsertChangeOrderList")({
  /**
* A list of ChangeOrder data.
*/
"data": S.Array(S.Union(CreateChangeOrderData,
UpdateChangeOrderData)),
  /**
* An array of entity data objects accessible from ChangeOrder.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateChangeOrder extends S.Class<UpdateChangeOrder>("UpdateChangeOrder")({
  /**
* ChangeOrder data.
*/
"data": UpdateChangeOrderData,
  /**
* An array of entity data objects accessible from ChangeOrder.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBlueprint extends S.Class<UpsertBlueprint>("UpsertBlueprint")({
  /**
* Blueprint data.
*/
"data": S.Union(CreateBlueprintData,
UpdateBlueprintData),
  /**
* An array of entity data objects accessible from Blueprint.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBlueprintList extends S.Class<UpsertBlueprintList>("UpsertBlueprintList")({
  /**
* A list of Blueprint data.
*/
"data": S.Array(S.Union(CreateBlueprintData,
UpdateBlueprintData)),
  /**
* An array of entity data objects accessible from Blueprint.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateBlueprint extends S.Class<UpdateBlueprint>("UpdateBlueprint")({
  /**
* Blueprint data.
*/
"data": UpdateBlueprintData,
  /**
* An array of entity data objects accessible from Blueprint.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAssetAppraisal extends S.Class<UpsertAssetAppraisal>("UpsertAssetAppraisal")({
  /**
* AssetAppraisal data.
*/
"data": S.Union(CreateAssetAppraisalData,
UpdateAssetAppraisalData),
  /**
* An array of entity data objects accessible from AssetAppraisal.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAssetAppraisalList extends S.Class<UpsertAssetAppraisalList>("UpsertAssetAppraisalList")({
  /**
* A list of AssetAppraisal data.
*/
"data": S.Array(S.Union(CreateAssetAppraisalData,
UpdateAssetAppraisalData)),
  /**
* An array of entity data objects accessible from AssetAppraisal.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAssetAppraisal extends S.Class<UpdateAssetAppraisal>("UpdateAssetAppraisal")({
  /**
* AssetAppraisal data.
*/
"data": UpdateAssetAppraisalData,
  /**
* An array of entity data objects accessible from AssetAppraisal.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAppraisal extends S.Class<UpsertAppraisal>("UpsertAppraisal")({
  /**
* Appraisal data.
*/
"data": S.Union(CreateAppraisalData,
UpdateAppraisalData),
  /**
* An array of entity data objects accessible from Appraisal.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAppraisalList extends S.Class<UpsertAppraisalList>("UpsertAppraisalList")({
  /**
* A list of Appraisal data.
*/
"data": S.Array(S.Union(CreateAppraisalData,
UpdateAppraisalData)),
  /**
* An array of entity data objects accessible from Appraisal.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAppraisal extends S.Class<UpdateAppraisal>("UpdateAppraisal")({
  /**
* Appraisal data.
*/
"data": UpdateAppraisalData,
  /**
* An array of entity data objects accessible from Appraisal.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPaymentLine extends S.Class<UpsertPaymentLine>("UpsertPaymentLine")({
  /**
* PaymentLine data.
*/
"data": S.Union(CreateItemPaymentData,
CreateItemImpactPaymentData,
CreateServiceTaskPaymentData,
UpdateItemPaymentData,
UpdateItemImpactPaymentData,
UpdateServiceTaskPaymentData),
  /**
* An array of entity data objects accessible from PaymentLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertPaymentLineList extends S.Class<UpsertPaymentLineList>("UpsertPaymentLineList")({
  /**
* A list of PaymentLine data.
*/
"data": S.Array(S.Union(CreateItemPaymentData,
CreateItemImpactPaymentData,
CreateServiceTaskPaymentData,
UpdateItemPaymentData,
UpdateItemImpactPaymentData,
UpdateServiceTaskPaymentData)),
  /**
* An array of entity data objects accessible from PaymentLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdatePaymentLine extends S.Class<UpdatePaymentLine>("UpdatePaymentLine")({
  /**
* PaymentLine data.
*/
"data": S.Union(UpdateItemPaymentData,
UpdateItemImpactPaymentData,
UpdateServiceTaskPaymentData),
  /**
* An array of entity data objects accessible from PaymentLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertInvoiceLine extends S.Class<UpsertInvoiceLine>("UpsertInvoiceLine")({
  /**
* InvoiceLine data.
*/
"data": S.Union(CreateItemInvoiceData,
CreateItemImpactInvoiceData,
CreateServiceTaskInvoiceData,
UpdateItemInvoiceData,
UpdateItemImpactInvoiceData,
UpdateServiceTaskInvoiceData),
  /**
* An array of entity data objects accessible from InvoiceLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertInvoiceLineList extends S.Class<UpsertInvoiceLineList>("UpsertInvoiceLineList")({
  /**
* A list of InvoiceLine data.
*/
"data": S.Array(S.Union(CreateItemInvoiceData,
CreateItemImpactInvoiceData,
CreateServiceTaskInvoiceData,
UpdateItemInvoiceData,
UpdateItemImpactInvoiceData,
UpdateServiceTaskInvoiceData)),
  /**
* An array of entity data objects accessible from InvoiceLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateInvoiceLine extends S.Class<UpdateInvoiceLine>("UpdateInvoiceLine")({
  /**
* InvoiceLine data.
*/
"data": S.Union(UpdateItemInvoiceData,
UpdateItemImpactInvoiceData,
UpdateServiceTaskInvoiceData),
  /**
* An array of entity data objects accessible from InvoiceLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEstimateLine extends S.Class<UpsertEstimateLine>("UpsertEstimateLine")({
  /**
* EstimateLine data.
*/
"data": S.Union(CreateItemEstimateData,
CreateItemImpactEstimateData,
CreateServiceTaskEstimateData,
UpdateItemEstimateData,
UpdateItemImpactEstimateData,
UpdateServiceTaskEstimateData),
  /**
* An array of entity data objects accessible from EstimateLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertEstimateLineList extends S.Class<UpsertEstimateLineList>("UpsertEstimateLineList")({
  /**
* A list of EstimateLine data.
*/
"data": S.Array(S.Union(CreateItemEstimateData,
CreateItemImpactEstimateData,
CreateServiceTaskEstimateData,
UpdateItemEstimateData,
UpdateItemImpactEstimateData,
UpdateServiceTaskEstimateData)),
  /**
* An array of entity data objects accessible from EstimateLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateEstimateLine extends S.Class<UpdateEstimateLine>("UpdateEstimateLine")({
  /**
* EstimateLine data.
*/
"data": S.Union(UpdateItemEstimateData,
UpdateItemImpactEstimateData,
UpdateServiceTaskEstimateData),
  /**
* An array of entity data objects accessible from EstimateLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertChangeOrderLine extends S.Class<UpsertChangeOrderLine>("UpsertChangeOrderLine")({
  /**
* ChangeOrderLine data.
*/
"data": S.Union(CreateItemChangeOrderData,
CreateItemImpactChangeOrderData,
CreateServiceTaskChangeOrderData,
UpdateItemChangeOrderData,
UpdateItemImpactChangeOrderData,
UpdateServiceTaskChangeOrderData),
  /**
* An array of entity data objects accessible from ChangeOrderLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertChangeOrderLineList extends S.Class<UpsertChangeOrderLineList>("UpsertChangeOrderLineList")({
  /**
* A list of ChangeOrderLine data.
*/
"data": S.Array(S.Union(CreateItemChangeOrderData,
CreateItemImpactChangeOrderData,
CreateServiceTaskChangeOrderData,
UpdateItemChangeOrderData,
UpdateItemImpactChangeOrderData,
UpdateServiceTaskChangeOrderData)),
  /**
* An array of entity data objects accessible from ChangeOrderLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateChangeOrderLine extends S.Class<UpdateChangeOrderLine>("UpdateChangeOrderLine")({
  /**
* ChangeOrderLine data.
*/
"data": S.Union(UpdateItemChangeOrderData,
UpdateItemImpactChangeOrderData,
UpdateServiceTaskChangeOrderData),
  /**
* An array of entity data objects accessible from ChangeOrderLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAppraisalLine extends S.Class<UpsertAppraisalLine>("UpsertAppraisalLine")({
  /**
* AppraisalLine data.
*/
"data": S.Union(CreateItemAppraisalData,
UpdateItemAppraisalData),
  /**
* An array of entity data objects accessible from AppraisalLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertAppraisalLineList extends S.Class<UpsertAppraisalLineList>("UpsertAppraisalLineList")({
  /**
* A list of AppraisalLine data.
*/
"data": S.Array(S.Union(CreateItemAppraisalData,
UpdateItemAppraisalData)),
  /**
* An array of entity data objects accessible from AppraisalLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpdateAppraisalLine extends S.Class<UpdateAppraisalLine>("UpdateAppraisalLine")({
  /**
* AppraisalLine data.
*/
"data": UpdateItemAppraisalData,
  /**
* An array of entity data objects accessible from AppraisalLine.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBaseEntity extends S.Class<UpsertBaseEntity>("UpsertBaseEntity")({
  /**
* BaseEntity data.
*/
"data": S.Union(CreateChangeOrderData,
CreateEstimateData,
CreateInvoiceData,
CreatePaymentData,
CreateAssetAppraisalData,
CreateAppraisalData,
CreateFundingData,
CreateIncidentReportData,
CreatePoliceReportData,
CreateParamedicReportData,
CreateContractData,
CreateRentRollData,
CreatePermitData,
CreateBlueprintData,
CreateDeclarationsPageData,
CreatePolicyJacketData,
CreateScopeOfLossData,
CreateDeliveryPaperworkData,
CreateProductSpecData,
CreateUserManualData,
CreateWarrantyData,
CreateDeedData,
CreateItemChangeOrderData,
CreateItemImpactChangeOrderData,
CreateServiceTaskChangeOrderData,
CreateItemEstimateData,
CreateItemImpactEstimateData,
CreateServiceTaskEstimateData,
CreateItemInvoiceData,
CreateItemImpactInvoiceData,
CreateServiceTaskInvoiceData,
CreateItemPaymentData,
CreateItemImpactPaymentData,
CreateServiceTaskPaymentData,
CreateItemAppraisalData,
CreateItemizableFinancialDocumentStatsData,
CreateProviderData,
CreateCountryData,
CreateCurrencyData,
CreateDepreciationModifierData,
CreateDepreciationOverrideData,
CreateItemTypeData,
CreateDisasterData,
CreatePerilData,
CreateAssetAttributeTypeItemTemplateData,
CreateCoverageGroupTemplateData,
CreateCoverageTemplateData,
CreateEndorsementTemplateData,
CreateItemTemplateData,
CreatePolicyTemplateData,
CreateSpaceTypeItemTemplateData,
CreateSubCoverageTemplateData,
CreateSubmissionTrackTemplateData,
CreateAssetAttributeClassData,
CreateAssetAttributeTypeData,
CreateAssetTypeData,
CreateBucketClassData,
CreateBucketTypeData,
CreateDocumentClassData,
CreateDocumentTypeData,
CreateIncidentClassData,
CreateIncidentTypeData,
CreateItemCategoryData,
CreateItemClassData,
CreateServiceCategoryData,
CreateServiceClassData,
CreateServiceTypeData,
CreateSpaceGroupTypeData,
CreateSpaceCategoryData,
CreateSpaceClassData,
CreateSpaceTypeData,
CreateAccountInviteData,
CreateAccountProviderContactData,
CreateUserData,
CreateAccountProviderData,
CreateAccountData,
CreateAddressData,
CreateDwellingData,
CreateAuthProfileData,
CreateBaseBucketMetadataData,
CreateEntryData,
CreateBucketData,
CreateSubBucketData,
CreateBaseSubBucketMetadataData,
CreateCoverageData,
CreateBucketFundingData,
CreateClaimDeductibleData,
CreatePolicyTermData,
CreateClaimData,
CreateCoverageGroupData,
CreateDeductibleData,
CreateEmailAddressData,
CreateEndorsementData,
CreateEntrySourceMediaData,
CreateEntrySourceMetadataData,
CreateItemImpactData,
CreateItemData,
CreateServiceTaskData,
CreateServiceData,
CreateThirdPartyImpactData,
CreateFileProcessData,
CreateFileData,
CreateProjectImpactData,
CreateIncidentImpactData,
CreateIncidentData,
CreateItemMediaSuggestionData,
CreateItemProductSuggestionData,
CreateMediaData,
CreatePhoneNumberData,
CreatePolicyData,
CreateProjectMediaData,
CreateSpaceGroupData,
CreateSpaceData,
CreateSubCoverageData,
CreateThirdPartyDwellingData,
CreateThirdPartyIndividualData,
CreateUserAccountRoleData,
UpdateChangeOrderData,
UpdateEstimateData,
UpdateInvoiceData,
UpdatePaymentData,
UpdateAssetAppraisalData,
UpdateAppraisalData,
UpdateFundingData,
UpdateIncidentReportData,
UpdatePoliceReportData,
UpdateParamedicReportData,
UpdateContractData,
UpdateRentRollData,
UpdatePermitData,
UpdateBlueprintData,
UpdateDeclarationsPageData,
UpdatePolicyJacketData,
UpdateScopeOfLossData,
UpdateDeliveryPaperworkData,
UpdateProductSpecData,
UpdateUserManualData,
UpdateWarrantyData,
UpdateDeedData,
UpdateItemChangeOrderData,
UpdateItemImpactChangeOrderData,
UpdateServiceTaskChangeOrderData,
UpdateItemEstimateData,
UpdateItemImpactEstimateData,
UpdateServiceTaskEstimateData,
UpdateItemInvoiceData,
UpdateItemImpactInvoiceData,
UpdateServiceTaskInvoiceData,
UpdateItemPaymentData,
UpdateItemImpactPaymentData,
UpdateServiceTaskPaymentData,
UpdateItemAppraisalData,
UpdateItemizableFinancialDocumentStatsData,
UpdateProviderData,
UpdateCountryData,
UpdateCurrencyData,
UpdateDepreciationModifierData,
UpdateDepreciationOverrideData,
UpdateItemTypeData,
UpdateDisasterData,
UpdatePerilData,
UpdateAssetAttributeTypeItemTemplateData,
UpdateCoverageGroupTemplateData,
UpdateCoverageTemplateData,
UpdateEndorsementTemplateData,
UpdateItemTemplateData,
UpdatePolicyTemplateData,
UpdateSpaceTypeItemTemplateData,
UpdateSubCoverageTemplateData,
UpdateSubmissionTrackTemplateData,
UpdateAssetAttributeClassData,
UpdateAssetAttributeTypeData,
UpdateAssetTypeData,
UpdateBucketClassData,
UpdateBucketTypeData,
UpdateDocumentClassData,
UpdateDocumentTypeData,
UpdateIncidentClassData,
UpdateIncidentTypeData,
UpdateItemCategoryData,
UpdateItemClassData,
UpdateServiceCategoryData,
UpdateServiceClassData,
UpdateServiceTypeData,
UpdateSpaceGroupTypeData,
UpdateSpaceCategoryData,
UpdateSpaceClassData,
UpdateSpaceTypeData,
UpdateAccountInviteData,
UpdateAccountProviderContactData,
UpdateUserData,
UpdateAccountProviderData,
UpdateAccountData,
UpdateAddressData,
UpdateDwellingData,
UpdateAuthProfileData,
UpdateBaseBucketMetadataData,
UpdateEntryData,
UpdateBucketData,
UpdateSubBucketData,
UpdateBaseSubBucketMetadataData,
UpdateCoverageData,
UpdateBucketFundingData,
UpdateClaimDeductibleData,
UpdatePolicyTermData,
UpdateClaimData,
UpdateCoverageGroupData,
UpdateDeductibleData,
UpdateEmailAddressData,
UpdateEndorsementData,
UpdateEntrySourceMediaData,
UpdateEntrySourceMetadataData,
UpdateItemImpactData,
UpdateItemData,
UpdateServiceTaskData,
UpdateServiceData,
UpdateThirdPartyImpactData,
UpdateFileProcessData,
UpdateFileData,
UpdateProjectImpactData,
UpdateIncidentImpactData,
UpdateIncidentData,
UpdateItemMediaSuggestionData,
UpdateItemProductSuggestionData,
UpdateMediaData,
UpdatePhoneNumberData,
UpdatePolicyData,
UpdateProjectMediaData,
UpdateSpaceGroupData,
UpdateSpaceData,
UpdateSubCoverageData,
UpdateThirdPartyDwellingData,
UpdateThirdPartyIndividualData,
UpdateUserAccountRoleData),
  /**
* An array of entity data objects accessible from BaseEntity.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export class UpsertBaseEntityList extends S.Class<UpsertBaseEntityList>("UpsertBaseEntityList")({
  /**
* A list of BaseEntity data.
*/
"data": S.Array(S.Union(CreateChangeOrderData,
CreateEstimateData,
CreateInvoiceData,
CreatePaymentData,
CreateAssetAppraisalData,
CreateAppraisalData,
CreateFundingData,
CreateIncidentReportData,
CreatePoliceReportData,
CreateParamedicReportData,
CreateContractData,
CreateRentRollData,
CreatePermitData,
CreateBlueprintData,
CreateDeclarationsPageData,
CreatePolicyJacketData,
CreateScopeOfLossData,
CreateDeliveryPaperworkData,
CreateProductSpecData,
CreateUserManualData,
CreateWarrantyData,
CreateDeedData,
CreateItemChangeOrderData,
CreateItemImpactChangeOrderData,
CreateServiceTaskChangeOrderData,
CreateItemEstimateData,
CreateItemImpactEstimateData,
CreateServiceTaskEstimateData,
CreateItemInvoiceData,
CreateItemImpactInvoiceData,
CreateServiceTaskInvoiceData,
CreateItemPaymentData,
CreateItemImpactPaymentData,
CreateServiceTaskPaymentData,
CreateItemAppraisalData,
CreateItemizableFinancialDocumentStatsData,
CreateProviderData,
CreateCountryData,
CreateCurrencyData,
CreateDepreciationModifierData,
CreateDepreciationOverrideData,
CreateItemTypeData,
CreateDisasterData,
CreatePerilData,
CreateAssetAttributeTypeItemTemplateData,
CreateCoverageGroupTemplateData,
CreateCoverageTemplateData,
CreateEndorsementTemplateData,
CreateItemTemplateData,
CreatePolicyTemplateData,
CreateSpaceTypeItemTemplateData,
CreateSubCoverageTemplateData,
CreateSubmissionTrackTemplateData,
CreateAssetAttributeClassData,
CreateAssetAttributeTypeData,
CreateAssetTypeData,
CreateBucketClassData,
CreateBucketTypeData,
CreateDocumentClassData,
CreateDocumentTypeData,
CreateIncidentClassData,
CreateIncidentTypeData,
CreateItemCategoryData,
CreateItemClassData,
CreateServiceCategoryData,
CreateServiceClassData,
CreateServiceTypeData,
CreateSpaceGroupTypeData,
CreateSpaceCategoryData,
CreateSpaceClassData,
CreateSpaceTypeData,
CreateAccountInviteData,
CreateAccountProviderContactData,
CreateUserData,
CreateAccountProviderData,
CreateAccountData,
CreateAddressData,
CreateDwellingData,
CreateAuthProfileData,
CreateBaseBucketMetadataData,
CreateEntryData,
CreateBucketData,
CreateSubBucketData,
CreateBaseSubBucketMetadataData,
CreateCoverageData,
CreateBucketFundingData,
CreateClaimDeductibleData,
CreatePolicyTermData,
CreateClaimData,
CreateCoverageGroupData,
CreateDeductibleData,
CreateEmailAddressData,
CreateEndorsementData,
CreateEntrySourceMediaData,
CreateEntrySourceMetadataData,
CreateItemImpactData,
CreateItemData,
CreateServiceTaskData,
CreateServiceData,
CreateThirdPartyImpactData,
CreateFileProcessData,
CreateFileData,
CreateProjectImpactData,
CreateIncidentImpactData,
CreateIncidentData,
CreateItemMediaSuggestionData,
CreateItemProductSuggestionData,
CreateMediaData,
CreatePhoneNumberData,
CreatePolicyData,
CreateProjectMediaData,
CreateSpaceGroupData,
CreateSpaceData,
CreateSubCoverageData,
CreateThirdPartyDwellingData,
CreateThirdPartyIndividualData,
CreateUserAccountRoleData,
UpdateChangeOrderData,
UpdateEstimateData,
UpdateInvoiceData,
UpdatePaymentData,
UpdateAssetAppraisalData,
UpdateAppraisalData,
UpdateFundingData,
UpdateIncidentReportData,
UpdatePoliceReportData,
UpdateParamedicReportData,
UpdateContractData,
UpdateRentRollData,
UpdatePermitData,
UpdateBlueprintData,
UpdateDeclarationsPageData,
UpdatePolicyJacketData,
UpdateScopeOfLossData,
UpdateDeliveryPaperworkData,
UpdateProductSpecData,
UpdateUserManualData,
UpdateWarrantyData,
UpdateDeedData,
UpdateItemChangeOrderData,
UpdateItemImpactChangeOrderData,
UpdateServiceTaskChangeOrderData,
UpdateItemEstimateData,
UpdateItemImpactEstimateData,
UpdateServiceTaskEstimateData,
UpdateItemInvoiceData,
UpdateItemImpactInvoiceData,
UpdateServiceTaskInvoiceData,
UpdateItemPaymentData,
UpdateItemImpactPaymentData,
UpdateServiceTaskPaymentData,
UpdateItemAppraisalData,
UpdateItemizableFinancialDocumentStatsData,
UpdateProviderData,
UpdateCountryData,
UpdateCurrencyData,
UpdateDepreciationModifierData,
UpdateDepreciationOverrideData,
UpdateItemTypeData,
UpdateDisasterData,
UpdatePerilData,
UpdateAssetAttributeTypeItemTemplateData,
UpdateCoverageGroupTemplateData,
UpdateCoverageTemplateData,
UpdateEndorsementTemplateData,
UpdateItemTemplateData,
UpdatePolicyTemplateData,
UpdateSpaceTypeItemTemplateData,
UpdateSubCoverageTemplateData,
UpdateSubmissionTrackTemplateData,
UpdateAssetAttributeClassData,
UpdateAssetAttributeTypeData,
UpdateAssetTypeData,
UpdateBucketClassData,
UpdateBucketTypeData,
UpdateDocumentClassData,
UpdateDocumentTypeData,
UpdateIncidentClassData,
UpdateIncidentTypeData,
UpdateItemCategoryData,
UpdateItemClassData,
UpdateServiceCategoryData,
UpdateServiceClassData,
UpdateServiceTypeData,
UpdateSpaceGroupTypeData,
UpdateSpaceCategoryData,
UpdateSpaceClassData,
UpdateSpaceTypeData,
UpdateAccountInviteData,
UpdateAccountProviderContactData,
UpdateUserData,
UpdateAccountProviderData,
UpdateAccountData,
UpdateAddressData,
UpdateDwellingData,
UpdateAuthProfileData,
UpdateBaseBucketMetadataData,
UpdateEntryData,
UpdateBucketData,
UpdateSubBucketData,
UpdateBaseSubBucketMetadataData,
UpdateCoverageData,
UpdateBucketFundingData,
UpdateClaimDeductibleData,
UpdatePolicyTermData,
UpdateClaimData,
UpdateCoverageGroupData,
UpdateDeductibleData,
UpdateEmailAddressData,
UpdateEndorsementData,
UpdateEntrySourceMediaData,
UpdateEntrySourceMetadataData,
UpdateItemImpactData,
UpdateItemData,
UpdateServiceTaskData,
UpdateServiceData,
UpdateThirdPartyImpactData,
UpdateFileProcessData,
UpdateFileData,
UpdateProjectImpactData,
UpdateIncidentImpactData,
UpdateIncidentData,
UpdateItemMediaSuggestionData,
UpdateItemProductSuggestionData,
UpdateMediaData,
UpdatePhoneNumberData,
UpdatePolicyData,
UpdateProjectMediaData,
UpdateSpaceGroupData,
UpdateSpaceData,
UpdateSubCoverageData,
UpdateThirdPartyDwellingData,
UpdateThirdPartyIndividualData,
UpdateUserAccountRoleData)),
  /**
* An array of entity data objects accessible from BaseEntity.
*/
"included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {}

export const UserAccountRoleControllerCreateUserAccountRole201 = eraseSchemaReq(S.Union(UserAccountRoleList,
UserAccountRole))
export type UserAccountRoleControllerCreateUserAccountRole201 = typeof UserAccountRoleControllerCreateUserAccountRole201

export const ThirdPartyControllerCreateThirdParty201 = eraseSchemaReq(S.Union(ThirdPartyList,
ThirdParty))
export type ThirdPartyControllerCreateThirdParty201 = typeof ThirdPartyControllerCreateThirdParty201

export const ThirdPartyIndividualControllerCreateThirdPartyIndividual201 = eraseSchemaReq(S.Union(ThirdPartyIndividualList,
ThirdPartyIndividual))
export type ThirdPartyIndividualControllerCreateThirdPartyIndividual201 = typeof ThirdPartyIndividualControllerCreateThirdPartyIndividual201

export const ThirdPartyImpactControllerCreateThirdPartyImpact201 = eraseSchemaReq(S.Union(ThirdPartyImpactList,
ThirdPartyImpact))
export type ThirdPartyImpactControllerCreateThirdPartyImpact201 = typeof ThirdPartyImpactControllerCreateThirdPartyImpact201

export const ThirdPartyDwellingControllerCreateThirdPartyDwelling201 = eraseSchemaReq(S.Union(ThirdPartyDwellingList,
ThirdPartyDwelling))
export type ThirdPartyDwellingControllerCreateThirdPartyDwelling201 = typeof ThirdPartyDwellingControllerCreateThirdPartyDwelling201

export const SubCoverageControllerCreateSubCoverage201 = eraseSchemaReq(S.Union(SubCoverageList,
SubCoverage))
export type SubCoverageControllerCreateSubCoverage201 = typeof SubCoverageControllerCreateSubCoverage201

export const SubBucketControllerCreateSubBucket201 = eraseSchemaReq(S.Union(SubBucketList,
SubBucket))
export type SubBucketControllerCreateSubBucket201 = typeof SubBucketControllerCreateSubBucket201

export const SubBucketDefinitionControllerCreateSubBucketDefinition201 = eraseSchemaReq(S.Union(SubBucketDefinitionList,
SubBucketDefinition))
export type SubBucketDefinitionControllerCreateSubBucketDefinition201 = typeof SubBucketDefinitionControllerCreateSubBucketDefinition201

export const SpaceControllerCreateSpace201 = eraseSchemaReq(S.Union(SpaceList,
Space))
export type SpaceControllerCreateSpace201 = typeof SpaceControllerCreateSpace201

export const SpaceGroupControllerCreateSpaceGroup201 = eraseSchemaReq(S.Union(SpaceGroupList,
SpaceGroup))
export type SpaceGroupControllerCreateSpaceGroup201 = typeof SpaceGroupControllerCreateSpaceGroup201

export const ServiceControllerCreateService201 = eraseSchemaReq(S.Union(ServiceList,
Service))
export type ServiceControllerCreateService201 = typeof ServiceControllerCreateService201

export const ServiceTaskControllerCreateServiceTask201 = eraseSchemaReq(S.Union(ServiceTaskList,
ServiceTask))
export type ServiceTaskControllerCreateServiceTask201 = typeof ServiceTaskControllerCreateServiceTask201

export const ProjectControllerCreateProject201 = eraseSchemaReq(S.Union(ProjectList,
Project))
export type ProjectControllerCreateProject201 = typeof ProjectControllerCreateProject201

export const ProjectMediaControllerCreateProjectMedia201 = eraseSchemaReq(S.Union(ProjectMediaList,
ProjectMedia))
export type ProjectMediaControllerCreateProjectMedia201 = typeof ProjectMediaControllerCreateProjectMedia201

export const ProjectImpactControllerCreateProjectImpact201 = eraseSchemaReq(S.Union(ProjectImpactList,
ProjectImpact))
export type ProjectImpactControllerCreateProjectImpact201 = typeof ProjectImpactControllerCreateProjectImpact201

export const PolicyControllerCreatePolicy201 = eraseSchemaReq(S.Union(PolicyList,
Policy))
export type PolicyControllerCreatePolicy201 = typeof PolicyControllerCreatePolicy201

export const AssetControllerCreateAsset201 = eraseSchemaReq(S.Union(AssetList,
Asset))
export type AssetControllerCreateAsset201 = typeof AssetControllerCreateAsset201

export const PolicyTermControllerCreatePolicyTerm201 = eraseSchemaReq(S.Union(PolicyTermList,
PolicyTerm))
export type PolicyTermControllerCreatePolicyTerm201 = typeof PolicyTermControllerCreatePolicyTerm201

export const BucketDefinitionControllerCreateBucketDefinition201 = eraseSchemaReq(S.Union(BucketDefinitionList,
BucketDefinition))
export type BucketDefinitionControllerCreateBucketDefinition201 = typeof BucketDefinitionControllerCreateBucketDefinition201

export const PhoneNumberControllerCreatePhoneNumber201 = eraseSchemaReq(S.Union(PhoneNumberList,
PhoneNumber))
export type PhoneNumberControllerCreatePhoneNumber201 = typeof PhoneNumberControllerCreatePhoneNumber201

export const MediaControllerCreateMedia201 = eraseSchemaReq(S.Union(MediaList,
Media))
export type MediaControllerCreateMedia201 = typeof MediaControllerCreateMedia201

export const ItemControllerCreateItem201 = eraseSchemaReq(S.Union(ItemList,
Item))
export type ItemControllerCreateItem201 = typeof ItemControllerCreateItem201

export const ItemProductSuggestionControllerCreateItemProductSuggestion201 = eraseSchemaReq(S.Union(ItemProductSuggestionList,
ItemProductSuggestion))
export type ItemProductSuggestionControllerCreateItemProductSuggestion201 = typeof ItemProductSuggestionControllerCreateItemProductSuggestion201

export const ItemMediaSuggestionControllerCreateItemMediaSuggestion201 = eraseSchemaReq(S.Union(ItemMediaSuggestionList,
ItemMediaSuggestion))
export type ItemMediaSuggestionControllerCreateItemMediaSuggestion201 = typeof ItemMediaSuggestionControllerCreateItemMediaSuggestion201

export const ItemImpactControllerCreateItemImpact201 = eraseSchemaReq(S.Union(ItemImpactList,
ItemImpact))
export type ItemImpactControllerCreateItemImpact201 = typeof ItemImpactControllerCreateItemImpact201

export const IncidentControllerCreateIncident201 = eraseSchemaReq(S.Union(IncidentList,
Incident))
export type IncidentControllerCreateIncident201 = typeof IncidentControllerCreateIncident201

export const IncidentImpactControllerCreateIncidentImpact201 = eraseSchemaReq(S.Union(IncidentImpactList,
IncidentImpact))
export type IncidentImpactControllerCreateIncidentImpact201 = typeof IncidentImpactControllerCreateIncidentImpact201

export const FundingSourceControllerCreateFundingSource201 = eraseSchemaReq(S.Union(FundingSourceList,
FundingSource))
export type FundingSourceControllerCreateFundingSource201 = typeof FundingSourceControllerCreateFundingSource201

export const BaseBucketControllerCreateBaseBucket201 = eraseSchemaReq(S.Union(BaseBucketList,
BaseBucket))
export type BaseBucketControllerCreateBaseBucket201 = typeof BaseBucketControllerCreateBaseBucket201

export const EntryControllerCreateEntry201 = eraseSchemaReq(S.Union(EntryList,
Entry))
export type EntryControllerCreateEntry201 = typeof EntryControllerCreateEntry201

export const EntrySourceControllerCreateEntrySource201 = eraseSchemaReq(S.Union(EntrySourceList,
EntrySource))
export type EntrySourceControllerCreateEntrySource201 = typeof EntrySourceControllerCreateEntrySource201

export const EntrySourceMediaControllerCreateEntrySourceMedia201 = eraseSchemaReq(S.Union(EntrySourceMediaList,
EntrySourceMedia))
export type EntrySourceMediaControllerCreateEntrySourceMedia201 = typeof EntrySourceMediaControllerCreateEntrySourceMedia201

export const EndorsementControllerCreateEndorsement201 = eraseSchemaReq(S.Union(EndorsementList,
Endorsement))
export type EndorsementControllerCreateEndorsement201 = typeof EndorsementControllerCreateEndorsement201

export const CoverageControllerCreateCoverage201 = eraseSchemaReq(S.Union(CoverageList,
Coverage))
export type CoverageControllerCreateCoverage201 = typeof CoverageControllerCreateCoverage201

export const EmailAddressControllerCreateEmailAddress201 = eraseSchemaReq(S.Union(EmailAddressList,
EmailAddress))
export type EmailAddressControllerCreateEmailAddress201 = typeof EmailAddressControllerCreateEmailAddress201

export const DwellingControllerCreateDwelling201 = eraseSchemaReq(S.Union(DwellingList,
Dwelling))
export type DwellingControllerCreateDwelling201 = typeof DwellingControllerCreateDwelling201

export const DeductibleControllerCreateDeductible201 = eraseSchemaReq(S.Union(DeductibleList,
Deductible))
export type DeductibleControllerCreateDeductible201 = typeof DeductibleControllerCreateDeductible201

export const CoverageGroupControllerCreateCoverageGroup201 = eraseSchemaReq(S.Union(CoverageGroupList,
CoverageGroup))
export type CoverageGroupControllerCreateCoverageGroup201 = typeof CoverageGroupControllerCreateCoverageGroup201

export const ClaimControllerCreateClaim201 = eraseSchemaReq(S.Union(ClaimList,
Claim))
export type ClaimControllerCreateClaim201 = typeof ClaimControllerCreateClaim201

export const ClaimDeductibleControllerCreateClaimDeductible201 = eraseSchemaReq(S.Union(ClaimDeductibleList,
ClaimDeductible))
export type ClaimDeductibleControllerCreateClaimDeductible201 = typeof ClaimDeductibleControllerCreateClaimDeductible201

export const BucketControllerCreateBucket201 = eraseSchemaReq(S.Union(BucketList,
Bucket))
export type BucketControllerCreateBucket201 = typeof BucketControllerCreateBucket201

export const BucketFundingControllerCreateBucketFunding201 = eraseSchemaReq(S.Union(BucketFundingList,
BucketFunding))
export type BucketFundingControllerCreateBucketFunding201 = typeof BucketFundingControllerCreateBucketFunding201

export const FundingControllerCreateFunding201 = eraseSchemaReq(S.Union(FundingList,
Funding))
export type FundingControllerCreateFunding201 = typeof FundingControllerCreateFunding201

export const BaseSubBucketControllerCreateBaseSubBucket201 = eraseSchemaReq(S.Union(BaseSubBucketList,
BaseSubBucket))
export type BaseSubBucketControllerCreateBaseSubBucket201 = typeof BaseSubBucketControllerCreateBaseSubBucket201

export const AddressControllerCreateAddress201 = eraseSchemaReq(S.Union(AddressList,
Address))
export type AddressControllerCreateAddress201 = typeof AddressControllerCreateAddress201

export const AccountProviderControllerCreateAccountProvider201 = eraseSchemaReq(S.Union(AccountProviderList,
AccountProvider))
export type AccountProviderControllerCreateAccountProvider201 = typeof AccountProviderControllerCreateAccountProvider201

export const AccountProviderContactControllerCreateAccountProviderContact201 = eraseSchemaReq(S.Union(AccountProviderContactList,
AccountProviderContact))
export type AccountProviderContactControllerCreateAccountProviderContact201 = typeof AccountProviderContactControllerCreateAccountProviderContact201

export const AccountInviteControllerCreateAccountInvite201 = eraseSchemaReq(S.Union(AccountInviteList,
AccountInvite))
export type AccountInviteControllerCreateAccountInvite201 = typeof AccountInviteControllerCreateAccountInvite201

export const WarrantyControllerCreateWarranty201 = eraseSchemaReq(S.Union(WarrantyList,
Warranty))
export type WarrantyControllerCreateWarranty201 = typeof WarrantyControllerCreateWarranty201

export const UserManualControllerCreateUserManual201 = eraseSchemaReq(S.Union(UserManualList,
UserManual))
export type UserManualControllerCreateUserManual201 = typeof UserManualControllerCreateUserManual201

export const ScopeOfLossControllerCreateScopeOfLoss201 = eraseSchemaReq(S.Union(ScopeOfLossList,
ScopeOfLoss))
export type ScopeOfLossControllerCreateScopeOfLoss201 = typeof ScopeOfLossControllerCreateScopeOfLoss201

export const RentRollControllerCreateRentRoll201 = eraseSchemaReq(S.Union(RentRollList,
RentRoll))
export type RentRollControllerCreateRentRoll201 = typeof RentRollControllerCreateRentRoll201

export const ProductSpecControllerCreateProductSpec201 = eraseSchemaReq(S.Union(ProductSpecList,
ProductSpec))
export type ProductSpecControllerCreateProductSpec201 = typeof ProductSpecControllerCreateProductSpec201

export const PolicyJacketControllerCreatePolicyJacket201 = eraseSchemaReq(S.Union(PolicyJacketList,
PolicyJacket))
export type PolicyJacketControllerCreatePolicyJacket201 = typeof PolicyJacketControllerCreatePolicyJacket201

export const PoliceReportControllerCreatePoliceReport201 = eraseSchemaReq(S.Union(PoliceReportList,
PoliceReport))
export type PoliceReportControllerCreatePoliceReport201 = typeof PoliceReportControllerCreatePoliceReport201

export const PermitControllerCreatePermit201 = eraseSchemaReq(S.Union(PermitList,
Permit))
export type PermitControllerCreatePermit201 = typeof PermitControllerCreatePermit201

export const PaymentControllerCreatePayment201 = eraseSchemaReq(S.Union(PaymentList,
Payment))
export type PaymentControllerCreatePayment201 = typeof PaymentControllerCreatePayment201

export const ParamedicReportControllerCreateParamedicReport201 = eraseSchemaReq(S.Union(ParamedicReportList,
ParamedicReport))
export type ParamedicReportControllerCreateParamedicReport201 = typeof ParamedicReportControllerCreateParamedicReport201

export const InvoiceControllerCreateInvoice201 = eraseSchemaReq(S.Union(InvoiceList,
Invoice))
export type InvoiceControllerCreateInvoice201 = typeof InvoiceControllerCreateInvoice201

export const IncidentReportControllerCreateIncidentReport201 = eraseSchemaReq(S.Union(IncidentReportList,
IncidentReport))
export type IncidentReportControllerCreateIncidentReport201 = typeof IncidentReportControllerCreateIncidentReport201

export const EstimateControllerCreateEstimate201 = eraseSchemaReq(S.Union(EstimateList,
Estimate))
export type EstimateControllerCreateEstimate201 = typeof EstimateControllerCreateEstimate201

export const DocumentControllerCreateDocument201 = eraseSchemaReq(S.Union(DocumentList,
Document))
export type DocumentControllerCreateDocument201 = typeof DocumentControllerCreateDocument201

export const DeliveryPaperworkControllerCreateDeliveryPaperwork201 = eraseSchemaReq(S.Union(DeliveryPaperworkList,
DeliveryPaperwork))
export type DeliveryPaperworkControllerCreateDeliveryPaperwork201 = typeof DeliveryPaperworkControllerCreateDeliveryPaperwork201

export const DeedControllerCreateDeed201 = eraseSchemaReq(S.Union(DeedList,
Deed))
export type DeedControllerCreateDeed201 = typeof DeedControllerCreateDeed201

export const DeclarationsPageControllerCreateDeclarationsPage201 = eraseSchemaReq(S.Union(DeclarationsPageList,
DeclarationsPage))
export type DeclarationsPageControllerCreateDeclarationsPage201 = typeof DeclarationsPageControllerCreateDeclarationsPage201

export const ContractControllerCreateContract201 = eraseSchemaReq(S.Union(ContractList,
Contract))
export type ContractControllerCreateContract201 = typeof ContractControllerCreateContract201

export const ChangeOrderControllerCreateChangeOrder201 = eraseSchemaReq(S.Union(ChangeOrderList,
ChangeOrder))
export type ChangeOrderControllerCreateChangeOrder201 = typeof ChangeOrderControllerCreateChangeOrder201

export const BlueprintControllerCreateBlueprint201 = eraseSchemaReq(S.Union(BlueprintList,
Blueprint))
export type BlueprintControllerCreateBlueprint201 = typeof BlueprintControllerCreateBlueprint201

export const AssetAppraisalControllerCreateAssetAppraisal201 = eraseSchemaReq(S.Union(AssetAppraisalList,
AssetAppraisal))
export type AssetAppraisalControllerCreateAssetAppraisal201 = typeof AssetAppraisalControllerCreateAssetAppraisal201

export const AppraisalControllerCreateAppraisal201 = eraseSchemaReq(S.Union(AppraisalList,
Appraisal))
export type AppraisalControllerCreateAppraisal201 = typeof AppraisalControllerCreateAppraisal201

export const PaymentLineControllerCreatePaymentLine201 = eraseSchemaReq(S.Union(PaymentLineList,
PaymentLine))
export type PaymentLineControllerCreatePaymentLine201 = typeof PaymentLineControllerCreatePaymentLine201

export const InvoiceLineControllerCreateInvoiceLine201 = eraseSchemaReq(S.Union(InvoiceLineList,
InvoiceLine))
export type InvoiceLineControllerCreateInvoiceLine201 = typeof InvoiceLineControllerCreateInvoiceLine201

export const EstimateLineControllerCreateEstimateLine201 = eraseSchemaReq(S.Union(EstimateLineList,
EstimateLine))
export type EstimateLineControllerCreateEstimateLine201 = typeof EstimateLineControllerCreateEstimateLine201

export const ChangeOrderLineControllerCreateChangeOrderLine201 = eraseSchemaReq(S.Union(ChangeOrderLineList,
ChangeOrderLine))
export type ChangeOrderLineControllerCreateChangeOrderLine201 = typeof ChangeOrderLineControllerCreateChangeOrderLine201

export const AppraisalLineControllerCreateAppraisalLine201 = eraseSchemaReq(S.Union(AppraisalLineList,
AppraisalLine))
export type AppraisalLineControllerCreateAppraisalLine201 = typeof AppraisalLineControllerCreateAppraisalLine201

export const UserAccountRoleControllerCreateUserAccountRoleRequest = eraseSchemaReq(S.Union(UpsertUserAccountRole,
UpsertUserAccountRoleList))
export type UserAccountRoleControllerCreateUserAccountRoleRequest = typeof UserAccountRoleControllerCreateUserAccountRoleRequest

export const ThirdPartyControllerCreateThirdPartyRequest = eraseSchemaReq(S.Union(UpsertThirdParty,
UpsertThirdPartyList))
export type ThirdPartyControllerCreateThirdPartyRequest = typeof ThirdPartyControllerCreateThirdPartyRequest

export const ThirdPartyIndividualControllerCreateThirdPartyIndividualRequest = eraseSchemaReq(S.Union(UpsertThirdPartyIndividual,
UpsertThirdPartyIndividualList))
export type ThirdPartyIndividualControllerCreateThirdPartyIndividualRequest = typeof ThirdPartyIndividualControllerCreateThirdPartyIndividualRequest

export const ThirdPartyImpactControllerCreateThirdPartyImpactRequest = eraseSchemaReq(S.Union(UpsertThirdPartyImpact,
UpsertThirdPartyImpactList))
export type ThirdPartyImpactControllerCreateThirdPartyImpactRequest = typeof ThirdPartyImpactControllerCreateThirdPartyImpactRequest

export const ThirdPartyDwellingControllerCreateThirdPartyDwellingRequest = eraseSchemaReq(S.Union(UpsertThirdPartyDwelling,
UpsertThirdPartyDwellingList))
export type ThirdPartyDwellingControllerCreateThirdPartyDwellingRequest = typeof ThirdPartyDwellingControllerCreateThirdPartyDwellingRequest

export const SubCoverageControllerCreateSubCoverageRequest = eraseSchemaReq(S.Union(UpsertSubCoverage,
UpsertSubCoverageList))
export type SubCoverageControllerCreateSubCoverageRequest = typeof SubCoverageControllerCreateSubCoverageRequest

export const SubBucketControllerCreateSubBucketRequest = eraseSchemaReq(S.Union(UpsertSubBucket,
UpsertSubBucketList))
export type SubBucketControllerCreateSubBucketRequest = typeof SubBucketControllerCreateSubBucketRequest

export const SubBucketDefinitionControllerCreateSubBucketDefinitionRequest = eraseSchemaReq(S.Union(UpsertSubBucketDefinition,
UpsertSubBucketDefinitionList))
export type SubBucketDefinitionControllerCreateSubBucketDefinitionRequest = typeof SubBucketDefinitionControllerCreateSubBucketDefinitionRequest

export const SpaceControllerCreateSpaceRequest = eraseSchemaReq(S.Union(UpsertSpace,
UpsertSpaceList))
export type SpaceControllerCreateSpaceRequest = typeof SpaceControllerCreateSpaceRequest

export const SpaceGroupControllerCreateSpaceGroupRequest = eraseSchemaReq(S.Union(UpsertSpaceGroup,
UpsertSpaceGroupList))
export type SpaceGroupControllerCreateSpaceGroupRequest = typeof SpaceGroupControllerCreateSpaceGroupRequest

export const ServiceControllerCreateServiceRequest = eraseSchemaReq(S.Union(UpsertService,
UpsertServiceList))
export type ServiceControllerCreateServiceRequest = typeof ServiceControllerCreateServiceRequest

export const ServiceTaskControllerCreateServiceTaskRequest = eraseSchemaReq(S.Union(UpsertServiceTask,
UpsertServiceTaskList))
export type ServiceTaskControllerCreateServiceTaskRequest = typeof ServiceTaskControllerCreateServiceTaskRequest

export const ProjectControllerCreateProjectRequest = eraseSchemaReq(S.Union(UpsertProject,
UpsertProjectList))
export type ProjectControllerCreateProjectRequest = typeof ProjectControllerCreateProjectRequest

export const ProjectMediaControllerCreateProjectMediaRequest = eraseSchemaReq(S.Union(UpsertProjectMedia,
UpsertProjectMediaList))
export type ProjectMediaControllerCreateProjectMediaRequest = typeof ProjectMediaControllerCreateProjectMediaRequest

export const ProjectImpactControllerCreateProjectImpactRequest = eraseSchemaReq(S.Union(UpsertProjectImpact,
UpsertProjectImpactList))
export type ProjectImpactControllerCreateProjectImpactRequest = typeof ProjectImpactControllerCreateProjectImpactRequest

export const PolicyControllerCreatePolicyRequest = eraseSchemaReq(S.Union(UpsertPolicy,
UpsertPolicyList))
export type PolicyControllerCreatePolicyRequest = typeof PolicyControllerCreatePolicyRequest

export const PolicyTermControllerCreatePolicyTermRequest = eraseSchemaReq(S.Union(UpsertPolicyTerm,
UpsertPolicyTermList))
export type PolicyTermControllerCreatePolicyTermRequest = typeof PolicyTermControllerCreatePolicyTermRequest

export const PhoneNumberControllerCreatePhoneNumberRequest = eraseSchemaReq(S.Union(UpsertPhoneNumber,
UpsertPhoneNumberList))
export type PhoneNumberControllerCreatePhoneNumberRequest = typeof PhoneNumberControllerCreatePhoneNumberRequest

export const MediaControllerCreateMediaRequest = eraseSchemaReq(S.Union(UpsertMedia,
UpsertMediaList))
export type MediaControllerCreateMediaRequest = typeof MediaControllerCreateMediaRequest

export const ItemControllerCreateItemRequest = eraseSchemaReq(S.Union(UpsertItem,
UpsertItemList))
export type ItemControllerCreateItemRequest = typeof ItemControllerCreateItemRequest

export const ItemProductSuggestionControllerCreateItemProductSuggestionRequest = eraseSchemaReq(S.Union(UpsertItemProductSuggestion,
UpsertItemProductSuggestionList))
export type ItemProductSuggestionControllerCreateItemProductSuggestionRequest = typeof ItemProductSuggestionControllerCreateItemProductSuggestionRequest

export const ItemMediaSuggestionControllerCreateItemMediaSuggestionRequest = eraseSchemaReq(S.Union(UpsertItemMediaSuggestion,
UpsertItemMediaSuggestionList))
export type ItemMediaSuggestionControllerCreateItemMediaSuggestionRequest = typeof ItemMediaSuggestionControllerCreateItemMediaSuggestionRequest

export const ItemImpactControllerCreateItemImpactRequest = eraseSchemaReq(S.Union(UpsertItemImpact,
UpsertItemImpactList))
export type ItemImpactControllerCreateItemImpactRequest = typeof ItemImpactControllerCreateItemImpactRequest

export const IncidentControllerCreateIncidentRequest = eraseSchemaReq(S.Union(UpsertIncident,
UpsertIncidentList))
export type IncidentControllerCreateIncidentRequest = typeof IncidentControllerCreateIncidentRequest

export const IncidentImpactControllerCreateIncidentImpactRequest = eraseSchemaReq(S.Union(UpsertIncidentImpact,
UpsertIncidentImpactList))
export type IncidentImpactControllerCreateIncidentImpactRequest = typeof IncidentImpactControllerCreateIncidentImpactRequest

export const FundingSourceControllerCreateFundingSourceRequest = eraseSchemaReq(S.Union(UpsertFundingSource,
UpsertFundingSourceList))
export type FundingSourceControllerCreateFundingSourceRequest = typeof FundingSourceControllerCreateFundingSourceRequest

export const EntryControllerCreateEntryRequest = eraseSchemaReq(S.Union(UpsertEntry,
UpsertEntryList))
export type EntryControllerCreateEntryRequest = typeof EntryControllerCreateEntryRequest

export const EntrySourceControllerCreateEntrySourceRequest = eraseSchemaReq(S.Union(UpsertEntrySource,
UpsertEntrySourceList))
export type EntrySourceControllerCreateEntrySourceRequest = typeof EntrySourceControllerCreateEntrySourceRequest

export const EntrySourceMediaControllerCreateEntrySourceMediaRequest = eraseSchemaReq(S.Union(UpsertEntrySourceMedia,
UpsertEntrySourceMediaList))
export type EntrySourceMediaControllerCreateEntrySourceMediaRequest = typeof EntrySourceMediaControllerCreateEntrySourceMediaRequest

export const EndorsementControllerCreateEndorsementRequest = eraseSchemaReq(S.Union(UpsertEndorsement,
UpsertEndorsementList))
export type EndorsementControllerCreateEndorsementRequest = typeof EndorsementControllerCreateEndorsementRequest

export const EmailAddressControllerCreateEmailAddressRequest = eraseSchemaReq(S.Union(UpsertEmailAddress,
UpsertEmailAddressList))
export type EmailAddressControllerCreateEmailAddressRequest = typeof EmailAddressControllerCreateEmailAddressRequest

export const DwellingControllerCreateDwellingRequest = eraseSchemaReq(S.Union(UpsertDwelling,
UpsertDwellingList))
export type DwellingControllerCreateDwellingRequest = typeof DwellingControllerCreateDwellingRequest

export const DeductibleControllerCreateDeductibleRequest = eraseSchemaReq(S.Union(UpsertDeductible,
UpsertDeductibleList))
export type DeductibleControllerCreateDeductibleRequest = typeof DeductibleControllerCreateDeductibleRequest

export const CoverageControllerCreateCoverageRequest = eraseSchemaReq(S.Union(UpsertCoverage,
UpsertCoverageList))
export type CoverageControllerCreateCoverageRequest = typeof CoverageControllerCreateCoverageRequest

export const CoverageGroupControllerCreateCoverageGroupRequest = eraseSchemaReq(S.Union(UpsertCoverageGroup,
UpsertCoverageGroupList))
export type CoverageGroupControllerCreateCoverageGroupRequest = typeof CoverageGroupControllerCreateCoverageGroupRequest

export const ClaimControllerCreateClaimRequest = eraseSchemaReq(S.Union(UpsertClaim,
UpsertClaimList))
export type ClaimControllerCreateClaimRequest = typeof ClaimControllerCreateClaimRequest

export const ClaimDeductibleControllerCreateClaimDeductibleRequest = eraseSchemaReq(S.Union(UpsertClaimDeductible,
UpsertClaimDeductibleList))
export type ClaimDeductibleControllerCreateClaimDeductibleRequest = typeof ClaimDeductibleControllerCreateClaimDeductibleRequest

export const BucketControllerCreateBucketRequest = eraseSchemaReq(S.Union(UpsertBucket,
UpsertBucketList))
export type BucketControllerCreateBucketRequest = typeof BucketControllerCreateBucketRequest

export const BucketFundingControllerCreateBucketFundingRequest = eraseSchemaReq(S.Union(UpsertBucketFunding,
UpsertBucketFundingList))
export type BucketFundingControllerCreateBucketFundingRequest = typeof BucketFundingControllerCreateBucketFundingRequest

export const BucketDefinitionControllerCreateBucketDefinitionRequest = eraseSchemaReq(S.Union(UpsertBucketDefinition,
UpsertBucketDefinitionList))
export type BucketDefinitionControllerCreateBucketDefinitionRequest = typeof BucketDefinitionControllerCreateBucketDefinitionRequest

export const BaseSubBucketControllerCreateBaseSubBucketRequest = eraseSchemaReq(S.Union(UpsertBaseSubBucket,
UpsertBaseSubBucketList))
export type BaseSubBucketControllerCreateBaseSubBucketRequest = typeof BaseSubBucketControllerCreateBaseSubBucketRequest

export const BaseBucketControllerCreateBaseBucketRequest = eraseSchemaReq(S.Union(UpsertBaseBucket,
UpsertBaseBucketList))
export type BaseBucketControllerCreateBaseBucketRequest = typeof BaseBucketControllerCreateBaseBucketRequest

export const AssetControllerCreateAssetRequest = eraseSchemaReq(S.Union(UpsertAsset,
UpsertAssetList))
export type AssetControllerCreateAssetRequest = typeof AssetControllerCreateAssetRequest

export const AddressControllerCreateAddressRequest = eraseSchemaReq(S.Union(UpsertAddress,
UpsertAddressList))
export type AddressControllerCreateAddressRequest = typeof AddressControllerCreateAddressRequest

export const AccountProviderControllerCreateAccountProviderRequest = eraseSchemaReq(S.Union(UpsertAccountProvider,
UpsertAccountProviderList))
export type AccountProviderControllerCreateAccountProviderRequest = typeof AccountProviderControllerCreateAccountProviderRequest

export const AccountProviderContactControllerCreateAccountProviderContactRequest = eraseSchemaReq(S.Union(UpsertAccountProviderContact,
UpsertAccountProviderContactList))
export type AccountProviderContactControllerCreateAccountProviderContactRequest = typeof AccountProviderContactControllerCreateAccountProviderContactRequest

export const AccountInviteControllerCreateAccountInviteRequest = eraseSchemaReq(S.Union(UpsertAccountInvite,
UpsertAccountInviteList))
export type AccountInviteControllerCreateAccountInviteRequest = typeof AccountInviteControllerCreateAccountInviteRequest

export const WarrantyControllerCreateWarrantyRequest = eraseSchemaReq(S.Union(UpsertWarranty,
UpsertWarrantyList))
export type WarrantyControllerCreateWarrantyRequest = typeof WarrantyControllerCreateWarrantyRequest

export const UserManualControllerCreateUserManualRequest = eraseSchemaReq(S.Union(UpsertUserManual,
UpsertUserManualList))
export type UserManualControllerCreateUserManualRequest = typeof UserManualControllerCreateUserManualRequest

export const ScopeOfLossControllerCreateScopeOfLossRequest = eraseSchemaReq(S.Union(UpsertScopeOfLoss,
UpsertScopeOfLossList))
export type ScopeOfLossControllerCreateScopeOfLossRequest = typeof ScopeOfLossControllerCreateScopeOfLossRequest

export const RentRollControllerCreateRentRollRequest = eraseSchemaReq(S.Union(UpsertRentRoll,
UpsertRentRollList))
export type RentRollControllerCreateRentRollRequest = typeof RentRollControllerCreateRentRollRequest

export const ProductSpecControllerCreateProductSpecRequest = eraseSchemaReq(S.Union(UpsertProductSpec,
UpsertProductSpecList))
export type ProductSpecControllerCreateProductSpecRequest = typeof ProductSpecControllerCreateProductSpecRequest

export const PolicyJacketControllerCreatePolicyJacketRequest = eraseSchemaReq(S.Union(UpsertPolicyJacket,
UpsertPolicyJacketList))
export type PolicyJacketControllerCreatePolicyJacketRequest = typeof PolicyJacketControllerCreatePolicyJacketRequest

export const PoliceReportControllerCreatePoliceReportRequest = eraseSchemaReq(S.Union(UpsertPoliceReport,
UpsertPoliceReportList))
export type PoliceReportControllerCreatePoliceReportRequest = typeof PoliceReportControllerCreatePoliceReportRequest

export const PermitControllerCreatePermitRequest = eraseSchemaReq(S.Union(UpsertPermit,
UpsertPermitList))
export type PermitControllerCreatePermitRequest = typeof PermitControllerCreatePermitRequest

export const PaymentControllerCreatePaymentRequest = eraseSchemaReq(S.Union(UpsertPayment,
UpsertPaymentList))
export type PaymentControllerCreatePaymentRequest = typeof PaymentControllerCreatePaymentRequest

export const ParamedicReportControllerCreateParamedicReportRequest = eraseSchemaReq(S.Union(UpsertParamedicReport,
UpsertParamedicReportList))
export type ParamedicReportControllerCreateParamedicReportRequest = typeof ParamedicReportControllerCreateParamedicReportRequest

export const InvoiceControllerCreateInvoiceRequest = eraseSchemaReq(S.Union(UpsertInvoice,
UpsertInvoiceList))
export type InvoiceControllerCreateInvoiceRequest = typeof InvoiceControllerCreateInvoiceRequest

export const IncidentReportControllerCreateIncidentReportRequest = eraseSchemaReq(S.Union(UpsertIncidentReport,
UpsertIncidentReportList))
export type IncidentReportControllerCreateIncidentReportRequest = typeof IncidentReportControllerCreateIncidentReportRequest

export const FundingControllerCreateFundingRequest = eraseSchemaReq(S.Union(UpsertFunding,
UpsertFundingList))
export type FundingControllerCreateFundingRequest = typeof FundingControllerCreateFundingRequest

export const EstimateControllerCreateEstimateRequest = eraseSchemaReq(S.Union(UpsertEstimate,
UpsertEstimateList))
export type EstimateControllerCreateEstimateRequest = typeof EstimateControllerCreateEstimateRequest

export const DocumentControllerCreateDocumentRequest = eraseSchemaReq(S.Union(UpsertDocument,
UpsertDocumentList))
export type DocumentControllerCreateDocumentRequest = typeof DocumentControllerCreateDocumentRequest

export const DeliveryPaperworkControllerCreateDeliveryPaperworkRequest = eraseSchemaReq(S.Union(UpsertDeliveryPaperwork,
UpsertDeliveryPaperworkList))
export type DeliveryPaperworkControllerCreateDeliveryPaperworkRequest = typeof DeliveryPaperworkControllerCreateDeliveryPaperworkRequest

export const DeedControllerCreateDeedRequest = eraseSchemaReq(S.Union(UpsertDeed,
UpsertDeedList))
export type DeedControllerCreateDeedRequest = typeof DeedControllerCreateDeedRequest

export const DeclarationsPageControllerCreateDeclarationsPageRequest = eraseSchemaReq(S.Union(UpsertDeclarationsPage,
UpsertDeclarationsPageList))
export type DeclarationsPageControllerCreateDeclarationsPageRequest = typeof DeclarationsPageControllerCreateDeclarationsPageRequest

export const ContractControllerCreateContractRequest = eraseSchemaReq(S.Union(UpsertContract,
UpsertContractList))
export type ContractControllerCreateContractRequest = typeof ContractControllerCreateContractRequest

export const ChangeOrderControllerCreateChangeOrderRequest = eraseSchemaReq(S.Union(UpsertChangeOrder,
UpsertChangeOrderList))
export type ChangeOrderControllerCreateChangeOrderRequest = typeof ChangeOrderControllerCreateChangeOrderRequest

export const BlueprintControllerCreateBlueprintRequest = eraseSchemaReq(S.Union(UpsertBlueprint,
UpsertBlueprintList))
export type BlueprintControllerCreateBlueprintRequest = typeof BlueprintControllerCreateBlueprintRequest

export const AssetAppraisalControllerCreateAssetAppraisalRequest = eraseSchemaReq(S.Union(UpsertAssetAppraisal,
UpsertAssetAppraisalList))
export type AssetAppraisalControllerCreateAssetAppraisalRequest = typeof AssetAppraisalControllerCreateAssetAppraisalRequest

export const AppraisalControllerCreateAppraisalRequest = eraseSchemaReq(S.Union(UpsertAppraisal,
UpsertAppraisalList))
export type AppraisalControllerCreateAppraisalRequest = typeof AppraisalControllerCreateAppraisalRequest

export const PaymentLineControllerCreatePaymentLineRequest = eraseSchemaReq(S.Union(UpsertPaymentLine,
UpsertPaymentLineList))
export type PaymentLineControllerCreatePaymentLineRequest = typeof PaymentLineControllerCreatePaymentLineRequest

export const InvoiceLineControllerCreateInvoiceLineRequest = eraseSchemaReq(S.Union(UpsertInvoiceLine,
UpsertInvoiceLineList))
export type InvoiceLineControllerCreateInvoiceLineRequest = typeof InvoiceLineControllerCreateInvoiceLineRequest

export const EstimateLineControllerCreateEstimateLineRequest = eraseSchemaReq(S.Union(UpsertEstimateLine,
UpsertEstimateLineList))
export type EstimateLineControllerCreateEstimateLineRequest = typeof EstimateLineControllerCreateEstimateLineRequest

export const ChangeOrderLineControllerCreateChangeOrderLineRequest = eraseSchemaReq(S.Union(UpsertChangeOrderLine,
UpsertChangeOrderLineList))
export type ChangeOrderLineControllerCreateChangeOrderLineRequest = typeof ChangeOrderLineControllerCreateChangeOrderLineRequest

export const AppraisalLineControllerCreateAppraisalLineRequest = eraseSchemaReq(S.Union(UpsertAppraisalLine,
UpsertAppraisalLineList))
export type AppraisalLineControllerCreateAppraisalLineRequest = typeof AppraisalLineControllerCreateAppraisalLineRequest

export const PermissionsControllerCheckUpsertPermissionsRequest = eraseSchemaReq(S.Union(UpsertBaseEntity,
UpsertBaseEntityList))
export type PermissionsControllerCheckUpsertPermissionsRequest = typeof PermissionsControllerCheckUpsertPermissionsRequest

export const make = (
  httpClient: HttpClient.HttpClient, 
  options: {
    readonly transformClient?: ((client: HttpClient.HttpClient) => Effect.Effect<HttpClient.HttpClient>) | undefined
  } = {}
): Client => {
  const unexpectedStatus = (response: HttpClientResponse.HttpClientResponse) =>
    Effect.flatMap(
      Effect.orElseSucceed(response.json, () => "Unexpected status code"),
      (description) =>
        Effect.fail(
          new HttpClientError.ResponseError({
            request: response.request,
            response,
            reason: "StatusCode",
            description: typeof description === "string" ? description : JSON.stringify(description),
          }),
        ),
    )
  const withResponse: <A, E>(
    f: (response: HttpClientResponse.HttpClientResponse) => Effect.Effect<A, E>,
  ) => (
    request: HttpClientRequest.HttpClientRequest,
  ) => Effect.Effect<any, any> = options.transformClient
    ? (f) => (request) =>
        Effect.flatMap(
          Effect.flatMap(options.transformClient!(httpClient), (client) =>
            client.execute(request),
          ),
          f,
        )
    : (f) => (request) => Effect.flatMap(httpClient.execute(request), f)
  const decodeSuccess =
    <A, I, R>(schema: S.Schema<A, I, R>) =>
    (response: HttpClientResponse.HttpClientResponse) =>
      HttpClientResponse.schemaBodyJson(schema)(response)
  const decodeError =
    <const Tag extends string, A, I, R>(tag: Tag, schema: S.Schema<A, I, R>) =>
    (response: HttpClientResponse.HttpClientResponse) =>
      Effect.flatMap(
        HttpClientResponse.schemaBodyJson(schema)(response),
        (cause) => Effect.fail(ClientError(tag, cause, response)),
      )
  return {
    httpClient,
    "AccountControllerGetCurrentAccount": (options) => HttpClientRequest.get(`/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ProfileControllerGetCurrentUser": (options) => HttpClientRequest.get(`/profile`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(User),
      orElse: unexpectedStatus
    }))
  ),
  "HealthControllerInternalHealthCheck": () => HttpClientRequest.get(`/health/internal`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(HealthControllerInternalHealthCheck200),
      "503": decodeError("HealthControllerInternalHealthCheck503", HealthControllerInternalHealthCheck503),
      orElse: unexpectedStatus
    }))
  ),
  "HealthControllerExternalHealthCheck": () => HttpClientRequest.get(`/health`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(HealthControllerExternalHealthCheck200),
      "503": decodeError("HealthControllerExternalHealthCheck503", HealthControllerExternalHealthCheck503),
      orElse: unexpectedStatus
    }))
  ),
  "TestControllerTest": () => HttpClientRequest.get(`/test`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "TestControllerTestManyById": () => HttpClientRequest.get(`/test/test`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserById": (id, options) => HttpClientRequest.get(`/users/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(User),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerUpdateUserById": (id, options) => HttpClientRequest.patch(`/users/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(User),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserPrimaryEmailAddress": (id, options) => HttpClientRequest.get(`/users/${id}/primaryEmailAddress`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableEmailAddress),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserPrimaryEmailAddressRef": (id) => HttpClientRequest.get(`/users/${id}/relationships/primaryEmailAddress`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedEmailAddress),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerPatchUserPrimaryEmailAddressRef": (id, options) => HttpClientRequest.patch(`/users/${id}/relationships/primaryEmailAddress`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedEmailAddress),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserPrimaryPhoneNumber": (id, options) => HttpClientRequest.get(`/users/${id}/primaryPhoneNumber`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullablePhoneNumber),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserPrimaryPhoneNumberRef": (id) => HttpClientRequest.get(`/users/${id}/relationships/primaryPhoneNumber`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPhoneNumber),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerPatchUserPrimaryPhoneNumberRef": (id, options) => HttpClientRequest.patch(`/users/${id}/relationships/primaryPhoneNumber`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPhoneNumber),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserDefaultAccount": (id, options) => HttpClientRequest.get(`/users/${id}/defaultAccount`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccount),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserDefaultAccountRef": (id) => HttpClientRequest.get(`/users/${id}/relationships/defaultAccount`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerPatchUserDefaultAccountRef": (id, options) => HttpClientRequest.patch(`/users/${id}/relationships/defaultAccount`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserAccountRoles": (id, options) => HttpClientRequest.get(`/users/${id}/accountRoles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserAccountRoleList),
      orElse: unexpectedStatus
    }))
  ),
  "UserControllerGetUserAccountRolesRef": (id) => HttpClientRequest.get(`/users/${id}/relationships/accountRoles`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedUserAccountRoleList),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerGetUserAccountRoleList": (options) => HttpClientRequest.get(`/userAccountRoles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserAccountRoleList),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerCreateUserAccountRole": (options) => HttpClientRequest.post(`/userAccountRoles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserAccountRoleControllerCreateUserAccountRole201),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerGetUserAccountRoleById": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserAccountRole),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerDeleteUserAccountRoleById": (id, options) => HttpClientRequest.del(`/userAccountRoles/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerUpdateUserAccountRoleById": (id, options) => HttpClientRequest.patch(`/userAccountRoles/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserAccountRole),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerGetUserAccountRoleUser": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}/user`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(User),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerGetUserAccountRoleUserRef": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}/relationships/user`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerPatchUserAccountRoleUserRef": (id, options) => HttpClientRequest.patch(`/userAccountRoles/${id}/relationships/user`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerGetUserAccountRoleAccount": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerGetUserAccountRoleAccountRef": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "UserAccountRoleControllerPatchUserAccountRoleAccountRef": (id, options) => HttpClientRequest.patch(`/userAccountRoles/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyControllerGetThirdPartyList": (options) => HttpClientRequest.get(`/thirdParties`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyList),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyControllerCreateThirdParty": (options) => HttpClientRequest.post(`/thirdParties`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyControllerCreateThirdParty201),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyControllerGetThirdPartyById": (id, options) => HttpClientRequest.get(`/thirdParties/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdParty),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyControllerDeleteThirdPartyById": (id, options) => HttpClientRequest.del(`/thirdParties/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyControllerUpdateThirdPartyById": (id, options) => HttpClientRequest.patch(`/thirdParties/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdParty),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyControllerGetThirdPartyProject": (id, options) => HttpClientRequest.get(`/thirdParties/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyControllerGetThirdPartyProjectRef": (id, options) => HttpClientRequest.get(`/thirdParties/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyControllerPatchThirdPartyProjectRef": (id, options) => HttpClientRequest.patch(`/thirdParties/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyIndividualControllerGetThirdPartyIndividualList": (options) => HttpClientRequest.get(`/thirdPartyIndividuals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyIndividualList),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyIndividualControllerCreateThirdPartyIndividual": (options) => HttpClientRequest.post(`/thirdPartyIndividuals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyIndividualControllerCreateThirdPartyIndividual201),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyIndividualControllerGetThirdPartyIndividualById": (id, options) => HttpClientRequest.get(`/thirdPartyIndividuals/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyIndividual),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyIndividualControllerDeleteThirdPartyIndividualById": (id, options) => HttpClientRequest.del(`/thirdPartyIndividuals/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyIndividualControllerUpdateThirdPartyIndividualById": (id, options) => HttpClientRequest.patch(`/thirdPartyIndividuals/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyIndividual),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyIndividualControllerGetThirdPartyIndividualProject": (id, options) => HttpClientRequest.get(`/thirdPartyIndividuals/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyIndividualControllerGetThirdPartyIndividualProjectRef": (id, options) => HttpClientRequest.get(`/thirdPartyIndividuals/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyIndividualControllerPatchThirdPartyIndividualProjectRef": (id, options) => HttpClientRequest.patch(`/thirdPartyIndividuals/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactList": (options) => HttpClientRequest.get(`/thirdPartyImpacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyImpactList),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerCreateThirdPartyImpact": (options) => HttpClientRequest.post(`/thirdPartyImpacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyImpactControllerCreateThirdPartyImpact201),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactById": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyImpact),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerDeleteThirdPartyImpactById": (id, options) => HttpClientRequest.del(`/thirdPartyImpacts/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerUpdateThirdPartyImpactById": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyImpact),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactMetadata": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactMetadataRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactProject": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactProjectRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerPatchThirdPartyImpactProjectRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactAccount": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactAccountRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerPatchThirdPartyImpactAccountRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactCurrency": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactCurrencyRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerPatchThirdPartyImpactCurrencyRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactEntries": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactEntriesRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactAppraisals": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/appraisals`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisal": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/selectedAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerPatchThirdPartyImpactSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisal": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relevantAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/relevantAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactThirdParty": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/thirdParty`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdParty),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/thirdParty`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedThirdParty),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyImpactControllerPatchThirdPartyImpactThirdPartyRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/thirdParty`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedThirdParty),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerGetThirdPartyDwellingList": (options) => HttpClientRequest.get(`/thirdPartyDwellings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyDwellingList),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerCreateThirdPartyDwelling": (options) => HttpClientRequest.post(`/thirdPartyDwellings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyDwellingControllerCreateThirdPartyDwelling201),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerGetThirdPartyDwellingById": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyDwelling),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerDeleteThirdPartyDwellingById": (id, options) => HttpClientRequest.del(`/thirdPartyDwellings/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerUpdateThirdPartyDwellingById": (id, options) => HttpClientRequest.patch(`/thirdPartyDwellings/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThirdPartyDwelling),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerGetThirdPartyDwellingProject": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerGetThirdPartyDwellingProjectRef": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerPatchThirdPartyDwellingProjectRef": (id, options) => HttpClientRequest.patch(`/thirdPartyDwellings/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerGetThirdPartyDwellingCountry": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}/country`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Country),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerGetThirdPartyDwellingCountryRef": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}/relationships/country`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCountry),
      orElse: unexpectedStatus
    }))
  ),
  "ThirdPartyDwellingControllerPatchThirdPartyDwellingCountryRef": (id, options) => HttpClientRequest.patch(`/thirdPartyDwellings/${id}/relationships/country`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCountry),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageList": (options) => HttpClientRequest.get(`/subCoverages`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerCreateSubCoverage": (options) => HttpClientRequest.post(`/subCoverages`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverageControllerCreateSubCoverage201),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageById": (id, options) => HttpClientRequest.get(`/subCoverages/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverage),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerDeleteSubCoverageById": (id, options) => HttpClientRequest.del(`/subCoverages/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerUpdateSubCoverageById": (id, options) => HttpClientRequest.patch(`/subCoverages/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverage),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageParent": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/parent`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Coverage),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageParentRef": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/relationships/parent`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverage),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerPatchSubCoverageParentRef": (id, options) => HttpClientRequest.patch(`/subCoverages/${id}/relationships/parent`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverage),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageBuckets": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageBucketsRef": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/relationships/buckets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageTemplate": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/template`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableSubCoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageTemplateRef": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedSubCoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerPatchSubCoverageTemplateRef": (id, options) => HttpClientRequest.patch(`/subCoverages/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedSubCoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageEndorsements": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/endorsements`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerGetSubCoverageEndorsementsRef": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/relationships/endorsements`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEndorsementList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerPostSubCoverageEndorsementsRef": (id, options) => HttpClientRequest.post(`/subCoverages/${id}/relationships/endorsements`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEndorsementList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerDeleteSubCoverageEndorsementsRef": (id, options) => HttpClientRequest.del(`/subCoverages/${id}/relationships/endorsements`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEndorsementList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageControllerPatchSubCoverageEndorsementsRef": (id, options) => HttpClientRequest.patch(`/subCoverages/${id}/relationships/endorsements`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEndorsementList),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketList": (options) => HttpClientRequest.get(`/subBuckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerCreateSubBucket": (options) => HttpClientRequest.post(`/subBuckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketControllerCreateSubBucket201),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketById": (id, options) => HttpClientRequest.get(`/subBuckets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucket),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerDeleteSubBucketById": (id, options) => HttpClientRequest.del(`/subBuckets/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerUpdateSubBucketById": (id, options) => HttpClientRequest.patch(`/subBuckets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucket),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketParent": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/parent`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketParentRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/parent`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerPatchSubBucketParentRef": (id, options) => HttpClientRequest.patch(`/subBuckets/${id}/relationships/parent`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketMetadata": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketMetadataRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseSubBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketFundingSource": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/fundingSource`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketFundingSourceRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/fundingSource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketProject": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketProjectRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketAccount": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketAccountRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketEntries": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketEntriesRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketDefinition": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/definition`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerGetSubBucketDefinitionRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/definition`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketControllerPatchSubBucketDefinitionRef": (id, options) => HttpClientRequest.patch(`/subBuckets/${id}/relationships/definition`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerGetSubBucketDefinitionList": (options) => HttpClientRequest.get(`/subBucketDefinitions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerCreateSubBucketDefinition": (options) => HttpClientRequest.post(`/subBucketDefinitions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketDefinitionControllerCreateSubBucketDefinition201),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerGetSubBucketDefinitionById": (id, options) => HttpClientRequest.get(`/subBucketDefinitions/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerDeleteSubBucketDefinitionById": (id) => HttpClientRequest.del(`/subBucketDefinitions/${id}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerUpdateSubBucketDefinitionById": (id, options) => HttpClientRequest.patch(`/subBucketDefinitions/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerGetSubBucketDefinitionParent": (id, options) => HttpClientRequest.get(`/subBucketDefinitions/${id}/parent`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerGetSubBucketDefinitionParentRef": (id) => HttpClientRequest.get(`/subBucketDefinitions/${id}/relationships/parent`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerPatchSubBucketDefinitionParentRef": (id, options) => HttpClientRequest.patch(`/subBucketDefinitions/${id}/relationships/parent`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerGetSubBucketDefinitionBuckets": (id, options) => HttpClientRequest.get(`/subBucketDefinitions/${id}/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "SubBucketDefinitionControllerGetSubBucketDefinitionBucketsRef": (id) => HttpClientRequest.get(`/subBucketDefinitions/${id}/relationships/buckets`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerGetSpaceList": (options) => HttpClientRequest.get(`/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerCreateSpace": (options) => HttpClientRequest.post(`/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceControllerCreateSpace201),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerGetSpaceById": (id, options) => HttpClientRequest.get(`/spaces/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Space),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerDeleteSpaceById": (id, options) => HttpClientRequest.del(`/spaces/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerUpdateSpaceById": (id, options) => HttpClientRequest.patch(`/spaces/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Space),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerGetSpaceType": (id, options) => HttpClientRequest.get(`/spaces/${id}/type`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerGetSpaceTypeRef": (id, options) => HttpClientRequest.get(`/spaces/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerPatchSpaceTypeRef": (id, options) => HttpClientRequest.patch(`/spaces/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerGetSpaceGroup": (id, options) => HttpClientRequest.get(`/spaces/${id}/group`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroup),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerGetSpaceGroupRef": (id, options) => HttpClientRequest.get(`/spaces/${id}/relationships/group`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceGroup),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerPatchSpaceGroupRef": (id, options) => HttpClientRequest.patch(`/spaces/${id}/relationships/group`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceGroup),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerGetSpaceAsset": (id, options) => HttpClientRequest.get(`/spaces/${id}/asset`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Asset),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerGetSpaceAssetRef": (id, options) => HttpClientRequest.get(`/spaces/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceControllerPatchSpaceAssetRef": (id, options) => HttpClientRequest.patch(`/spaces/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerGetSpaceGroupList": (options) => HttpClientRequest.get(`/spaceGroups`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroupList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerCreateSpaceGroup": (options) => HttpClientRequest.post(`/spaceGroups`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroupControllerCreateSpaceGroup201),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerGetSpaceGroupById": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroup),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerDeleteSpaceGroupById": (id, options) => HttpClientRequest.del(`/spaceGroups/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerUpdateSpaceGroupById": (id, options) => HttpClientRequest.patch(`/spaceGroups/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroup),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerGetSpaceGroupType": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/type`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerGetSpaceGroupTypeRef": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerPatchSpaceGroupTypeRef": (id, options) => HttpClientRequest.patch(`/spaceGroups/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerGetSpaceGroupAsset": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/asset`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Asset),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerGetSpaceGroupAssetRef": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerPatchSpaceGroupAssetRef": (id, options) => HttpClientRequest.patch(`/spaceGroups/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerGetSpaceGroupSpaces": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerGetSpaceGroupSpacesRef": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerPostSpaceGroupSpacesRef": (id, options) => HttpClientRequest.post(`/spaceGroups/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerDeleteSpaceGroupSpacesRef": (id, options) => HttpClientRequest.del(`/spaceGroups/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupControllerPatchSpaceGroupSpacesRef": (id, options) => HttpClientRequest.patch(`/spaceGroups/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceList": (options) => HttpClientRequest.get(`/services`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerCreateService": (options) => HttpClientRequest.post(`/services`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceControllerCreateService201),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceById": (id, options) => HttpClientRequest.get(`/services/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Service),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerDeleteServiceById": (id, options) => HttpClientRequest.del(`/services/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerUpdateServiceById": (id, options) => HttpClientRequest.patch(`/services/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Service),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceMetadata": (id, options) => HttpClientRequest.get(`/services/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceMetadataRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceProject": (id, options) => HttpClientRequest.get(`/services/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableProject),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceProjectRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerPatchServiceProjectRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceAccount": (id, options) => HttpClientRequest.get(`/services/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceAccountRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerPatchServiceAccountRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceCurrency": (id, options) => HttpClientRequest.get(`/services/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceCurrencyRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerPatchServiceCurrencyRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceEntries": (id, options) => HttpClientRequest.get(`/services/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceEntriesRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceAppraisals": (id, options) => HttpClientRequest.get(`/services/${id}/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceAppraisalsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/appraisals`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceSelectedAppraisal": (id, options) => HttpClientRequest.get(`/services/${id}/selectedAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerPatchServiceSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceRelevantAppraisal": (id, options) => HttpClientRequest.get(`/services/${id}/relevantAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/relevantAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceType": (id, options) => HttpClientRequest.get(`/services/${id}/type`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableServiceType),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceTypeRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedServiceType),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerPatchServiceTypeRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedServiceType),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServicePayments": (id, options) => HttpClientRequest.get(`/services/${id}/payments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServicePaymentsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/payments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceInvoices": (id, options) => HttpClientRequest.get(`/services/${id}/invoices`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceInvoicesRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/invoices`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedInvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceEstimates": (id, options) => HttpClientRequest.get(`/services/${id}/estimates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceEstimatesRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/estimates`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceChangeOrders": (id, options) => HttpClientRequest.get(`/services/${id}/changeOrders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceChangeOrdersRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServicePaidLineItems": (id, options) => HttpClientRequest.get(`/services/${id}/paidLineItems`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServicePaidLineItemsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/paidLineItems`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPaymentLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceInvoicedLineItems": (id, options) => HttpClientRequest.get(`/services/${id}/invoicedLineItems`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceInvoicedLineItemsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/invoicedLineItems`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedInvoiceLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceEstimatedLineItems": (id, options) => HttpClientRequest.get(`/services/${id}/estimatedLineItems`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceControllerGetServiceEstimatedLineItemsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/estimatedLineItems`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimateLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskList": (options) => HttpClientRequest.get(`/serviceTasks`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceTaskList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerCreateServiceTask": (options) => HttpClientRequest.post(`/serviceTasks`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceTaskControllerCreateServiceTask201),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskById": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceTask),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerDeleteServiceTaskById": (id, options) => HttpClientRequest.del(`/serviceTasks/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerUpdateServiceTaskById": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceTask),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskMetadata": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskMetadataRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskProject": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableProject),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskProjectRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerPatchServiceTaskProjectRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskAccount": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskAccountRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerPatchServiceTaskAccountRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskCurrency": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskCurrencyRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerPatchServiceTaskCurrencyRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskEntries": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskEntriesRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskAppraisals": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskAppraisalsRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/appraisals`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskSelectedAppraisal": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/selectedAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerPatchServiceTaskSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskRelevantAppraisal": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relevantAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/relevantAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskService": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Service),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskServiceRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerPatchServiceTaskServiceRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskPayments": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/payments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskPaymentsRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/payments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskInvoices": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/invoices`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskInvoicesRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/invoices`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedInvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskEstimates": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/estimates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskEstimatesRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/estimates`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskChangeOrders": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/changeOrders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTaskControllerGetServiceTaskChangeOrdersRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerGetProjectList": (options) => HttpClientRequest.get(`/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerCreateProject": (options) => HttpClientRequest.post(`/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectControllerCreateProject201),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerGetProjectById": (id, options) => HttpClientRequest.get(`/projects/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerDeleteProjectById": (id, options) => HttpClientRequest.del(`/projects/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerUpdateProjectById": (id, options) => HttpClientRequest.patch(`/projects/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerGetProjectAccount": (id, options) => HttpClientRequest.get(`/projects/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerGetProjectAccountRef": (id, options) => HttpClientRequest.get(`/projects/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerPatchProjectAccountRef": (id, options) => HttpClientRequest.patch(`/projects/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerGetProjectMediaAttachments": (id, options) => HttpClientRequest.get(`/projects/${id}/mediaAttachments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerGetProjectMediaAttachmentsRef": (id, options) => HttpClientRequest.get(`/projects/${id}/relationships/mediaAttachments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerPostProjectMediaAttachmentsRef": (id, options) => HttpClientRequest.post(`/projects/${id}/relationships/mediaAttachments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerDeleteProjectMediaAttachmentsRef": (id, options) => HttpClientRequest.del(`/projects/${id}/relationships/mediaAttachments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectControllerPatchProjectMediaAttachmentsRef": (id, options) => HttpClientRequest.patch(`/projects/${id}/relationships/mediaAttachments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerGetProjectMediaList": (options) => HttpClientRequest.get(`/projectMedia`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerCreateProjectMedia": (options) => HttpClientRequest.post(`/projectMedia`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectMediaControllerCreateProjectMedia201),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerGetProjectMediaById": (id, options) => HttpClientRequest.get(`/projectMedia/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectMedia),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerDeleteProjectMediaById": (id, options) => HttpClientRequest.del(`/projectMedia/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerUpdateProjectMediaById": (id, options) => HttpClientRequest.patch(`/projectMedia/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectMedia),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerGetProjectMediaMedia": (id, options) => HttpClientRequest.get(`/projectMedia/${id}/media`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Media),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerGetProjectMediaMediaRef": (id, options) => HttpClientRequest.get(`/projectMedia/${id}/relationships/media`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedMedia),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerPatchProjectMediaMediaRef": (id, options) => HttpClientRequest.patch(`/projectMedia/${id}/relationships/media`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedMedia),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerGetProjectMediaProject": (id, options) => HttpClientRequest.get(`/projectMedia/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerGetProjectMediaProjectRef": (id, options) => HttpClientRequest.get(`/projectMedia/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectMediaControllerPatchProjectMediaProjectRef": (id, options) => HttpClientRequest.patch(`/projectMedia/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerGetProjectImpactList": (options) => HttpClientRequest.get(`/projectImpacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectImpactList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerCreateProjectImpact": (options) => HttpClientRequest.post(`/projectImpacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectImpactControllerCreateProjectImpact201),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerGetProjectImpactById": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectImpact),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerDeleteProjectImpactById": (id, options) => HttpClientRequest.del(`/projectImpacts/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerUpdateProjectImpactById": (id, options) => HttpClientRequest.patch(`/projectImpacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectImpact),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerGetProjectImpactAsset": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/asset`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Asset),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerGetProjectImpactAssetRef": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerPatchProjectImpactAssetRef": (id, options) => HttpClientRequest.patch(`/projectImpacts/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerGetProjectImpactProject": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerGetProjectImpactProjectRef": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerPatchProjectImpactProjectRef": (id, options) => HttpClientRequest.patch(`/projectImpacts/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerGetProjectImpactSpaces": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerGetProjectImpactSpacesRef": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerPostProjectImpactSpacesRef": (id, options) => HttpClientRequest.post(`/projectImpacts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerDeleteProjectImpactSpacesRef": (id, options) => HttpClientRequest.del(`/projectImpacts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProjectImpactControllerPatchProjectImpactSpacesRef": (id, options) => HttpClientRequest.patch(`/projectImpacts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyList": (options) => HttpClientRequest.get(`/policies`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerCreatePolicy": (options) => HttpClientRequest.post(`/policies`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyControllerCreatePolicy201),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyById": (id, options) => HttpClientRequest.get(`/policies/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Policy),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerDeletePolicyById": (id, options) => HttpClientRequest.del(`/policies/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerUpdatePolicyById": (id, options) => HttpClientRequest.patch(`/policies/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Policy),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyProvider": (id, options) => HttpClientRequest.get(`/policies/${id}/provider`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Provider),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyProviderRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/provider`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProvider),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerPatchPolicyProviderRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/provider`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProvider),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyTemplate": (id, options) => HttpClientRequest.get(`/policies/${id}/template`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullablePolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyTemplateRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerPatchPolicyTemplateRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyCurrency": (id, options) => HttpClientRequest.get(`/policies/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyCurrencyRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerPatchPolicyCurrencyRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyAssets": (id, options) => HttpClientRequest.get(`/policies/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyAssetsRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerPostPolicyAssetsRef": (id, options) => HttpClientRequest.post(`/policies/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerDeletePolicyAssetsRef": (id, options) => HttpClientRequest.del(`/policies/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerPatchPolicyAssetsRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyAccount": (id, options) => HttpClientRequest.get(`/policies/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyAccountRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerPatchPolicyAccountRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyTerms": (id, options) => HttpClientRequest.get(`/policies/${id}/terms`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTermList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyControllerGetPolicyTermsRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/terms`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicyTermList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermList": (options) => HttpClientRequest.get(`/policyTerms`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTermList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerCreatePolicyTerm": (options) => HttpClientRequest.post(`/policyTerms`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTermControllerCreatePolicyTerm201),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermById": (id, options) => HttpClientRequest.get(`/policyTerms/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerDeletePolicyTermById": (id, options) => HttpClientRequest.del(`/policyTerms/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerUpdatePolicyTermById": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermProvider": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/provider`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Provider),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermProviderRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/provider`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProvider),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermCurrency": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermCurrencyRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerPatchPolicyTermCurrencyRef": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermDeductibles": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/deductibles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeductibleList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermDeductiblesRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/deductibles`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDeductibleList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermBucketDefinitions": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/bucketDefinitions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermBucketDefinitionsRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/bucketDefinitions`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermPolicy": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/policy`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Policy),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermPolicyRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/policy`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicy),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerPatchPolicyTermPolicyRef": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}/relationships/policy`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicy),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermAssets": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermAssetsRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerPostPolicyTermAssetsRef": (id, options) => HttpClientRequest.post(`/policyTerms/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerDeletePolicyTermAssetsRef": (id, options) => HttpClientRequest.del(`/policyTerms/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerPatchPolicyTermAssetsRef": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermTemplate": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/template`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullablePolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerGetPolicyTermTemplateRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTermControllerPatchPolicyTermTemplateRef": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "PhoneNumberControllerGetPhoneNumberList": (options) => HttpClientRequest.get(`/phoneNumbers`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PhoneNumberList),
      orElse: unexpectedStatus
    }))
  ),
  "PhoneNumberControllerCreatePhoneNumber": (options) => HttpClientRequest.post(`/phoneNumbers`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PhoneNumberControllerCreatePhoneNumber201),
      orElse: unexpectedStatus
    }))
  ),
  "PhoneNumberControllerGetPhoneNumberById": (id, options) => HttpClientRequest.get(`/phoneNumbers/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PhoneNumber),
      orElse: unexpectedStatus
    }))
  ),
  "PhoneNumberControllerDeletePhoneNumberById": (id) => HttpClientRequest.del(`/phoneNumbers/${id}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PhoneNumberControllerUpdatePhoneNumberById": (id, options) => HttpClientRequest.patch(`/phoneNumbers/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PhoneNumber),
      orElse: unexpectedStatus
    }))
  ),
  "PhoneNumberControllerGetPhoneNumberIdentity": (id, options) => HttpClientRequest.get(`/phoneNumbers/${id}/identity`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Identity),
      orElse: unexpectedStatus
    }))
  ),
  "PhoneNumberControllerGetPhoneNumberIdentityRef": (id) => HttpClientRequest.get(`/phoneNumbers/${id}/relationships/identity`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIdentity),
      orElse: unexpectedStatus
    }))
  ),
  "PhoneNumberControllerPatchPhoneNumberIdentityRef": (id, options) => HttpClientRequest.patch(`/phoneNumbers/${id}/relationships/identity`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIdentity),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaList": (options) => HttpClientRequest.get(`/media`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MediaList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerCreateMedia": (options) => HttpClientRequest.post(`/media`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MediaControllerCreateMedia201),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaById": (id, options) => HttpClientRequest.get(`/media/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Media),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerDeleteMediaById": (id, options) => HttpClientRequest.del(`/media/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerUpdateMediaById": (id, options) => HttpClientRequest.patch(`/media/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Media),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaAccount": (id, options) => HttpClientRequest.get(`/media/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaAccountRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerPatchMediaAccountRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaFile": (id, options) => HttpClientRequest.get(`/media/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(File),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaFileRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerPatchMediaFileRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaAssets": (id, options) => HttpClientRequest.get(`/media/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaAssetsRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerPostMediaAssetsRef": (id, options) => HttpClientRequest.post(`/media/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerDeleteMediaAssetsRef": (id, options) => HttpClientRequest.del(`/media/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerPatchMediaAssetsRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaSpaces": (id, options) => HttpClientRequest.get(`/media/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaSpacesRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerPostMediaSpacesRef": (id, options) => HttpClientRequest.post(`/media/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerDeleteMediaSpacesRef": (id, options) => HttpClientRequest.del(`/media/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerPatchMediaSpacesRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaProjectAssignments": (id, options) => HttpClientRequest.get(`/media/${id}/projectAssignments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaProjectAssignmentsRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/projectAssignments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerPostMediaProjectAssignmentsRef": (id, options) => HttpClientRequest.post(`/media/${id}/relationships/projectAssignments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerDeleteMediaProjectAssignmentsRef": (id, options) => HttpClientRequest.del(`/media/${id}/relationships/projectAssignments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerPatchMediaProjectAssignmentsRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/projectAssignments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaEntrySourceAnnotations": (id, options) => HttpClientRequest.get(`/media/${id}/entrySourceAnnotations`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "MediaControllerGetMediaEntrySourceAnnotationsRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/entrySourceAnnotations`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemList": (options) => HttpClientRequest.get(`/items`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerCreateItem": (options) => HttpClientRequest.post(`/items`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemControllerCreateItem201),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemById": (id, options) => HttpClientRequest.get(`/items/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Item),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerDeleteItemById": (id, options) => HttpClientRequest.del(`/items/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerUpdateItemById": (id, options) => HttpClientRequest.patch(`/items/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Item),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemMetadata": (id, options) => HttpClientRequest.get(`/items/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemMetadataRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemProject": (id, options) => HttpClientRequest.get(`/items/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableProject),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemProjectRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerPatchItemProjectRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemAccount": (id, options) => HttpClientRequest.get(`/items/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemAccountRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerPatchItemAccountRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemCurrency": (id, options) => HttpClientRequest.get(`/items/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemCurrencyRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerPatchItemCurrencyRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemEntries": (id, options) => HttpClientRequest.get(`/items/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemEntriesRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemAppraisals": (id, options) => HttpClientRequest.get(`/items/${id}/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemAppraisalsRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/appraisals`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemSelectedAppraisal": (id, options) => HttpClientRequest.get(`/items/${id}/selectedAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerPatchItemSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemRelevantAppraisal": (id, options) => HttpClientRequest.get(`/items/${id}/relevantAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/relevantAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemType": (id, options) => HttpClientRequest.get(`/items/${id}/type`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemTypeRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerPatchItemTypeRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemAsset": (id, options) => HttpClientRequest.get(`/items/${id}/asset`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAsset),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemAssetRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerPatchItemAssetRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemSpace": (id, options) => HttpClientRequest.get(`/items/${id}/space`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableSpace),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemSpaceRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/space`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedSpace),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerPatchItemSpaceRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/space`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedSpace),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemReplaces": (id, options) => HttpClientRequest.get(`/items/${id}/replaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemImpact),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemReplacesRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/replaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemImpact),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemPayments": (id, options) => HttpClientRequest.get(`/items/${id}/payments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemPaymentsRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/payments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemInvoices": (id, options) => HttpClientRequest.get(`/items/${id}/invoices`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemInvoicesRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/invoices`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedInvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemEstimates": (id, options) => HttpClientRequest.get(`/items/${id}/estimates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemEstimatesRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/estimates`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemChangeOrders": (id, options) => HttpClientRequest.get(`/items/${id}/changeOrders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemChangeOrdersRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemImpacts": (id, options) => HttpClientRequest.get(`/items/${id}/impacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemImpactList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemControllerGetItemImpactsRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/impacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemImpactList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemProductSuggestionControllerGetItemProductSuggestionList": (options) => HttpClientRequest.get(`/itemProductSuggestions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemProductSuggestionList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemProductSuggestionControllerCreateItemProductSuggestion": (options) => HttpClientRequest.post(`/itemProductSuggestions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemProductSuggestionControllerCreateItemProductSuggestion201),
      orElse: unexpectedStatus
    }))
  ),
  "ItemProductSuggestionControllerGetItemProductSuggestionById": (id, options) => HttpClientRequest.get(`/itemProductSuggestions/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemProductSuggestion),
      orElse: unexpectedStatus
    }))
  ),
  "ItemProductSuggestionControllerDeleteItemProductSuggestionById": (id, options) => HttpClientRequest.del(`/itemProductSuggestions/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ItemProductSuggestionControllerUpdateItemProductSuggestionById": (id, options) => HttpClientRequest.patch(`/itemProductSuggestions/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemProductSuggestion),
      orElse: unexpectedStatus
    }))
  ),
  "ItemProductSuggestionControllerGetItemProductSuggestionItem": (id, options) => HttpClientRequest.get(`/itemProductSuggestions/${id}/item`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Item),
      orElse: unexpectedStatus
    }))
  ),
  "ItemProductSuggestionControllerGetItemProductSuggestionItemRef": (id, options) => HttpClientRequest.get(`/itemProductSuggestions/${id}/relationships/item`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemProductSuggestionControllerPatchItemProductSuggestionItemRef": (id, options) => HttpClientRequest.patch(`/itemProductSuggestions/${id}/relationships/item`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionList": (options) => HttpClientRequest.get(`/itemMediaSuggestions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemMediaSuggestionList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerCreateItemMediaSuggestion": (options) => HttpClientRequest.post(`/itemMediaSuggestions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemMediaSuggestionControllerCreateItemMediaSuggestion201),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionById": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemMediaSuggestion),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerDeleteItemMediaSuggestionById": (id, options) => HttpClientRequest.del(`/itemMediaSuggestions/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerUpdateItemMediaSuggestionById": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemMediaSuggestion),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionMedia": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/media`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Media),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionMediaRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/media`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedMedia),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerPatchItemMediaSuggestionMediaRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/media`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedMedia),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionItem": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/item`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionItemRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/item`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerPatchItemMediaSuggestionItemRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/item`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItems": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/existing_items`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/existing_items`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRef": (id, options) => HttpClientRequest.post(`/itemMediaSuggestions/${id}/relationships/existing_items`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRef": (id, options) => HttpClientRequest.del(`/itemMediaSuggestions/${id}/relationships/existing_items`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerPatchItemMediaSuggestionExistingItemsRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/existing_items`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionType": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/type`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionTypeRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerPatchItemMediaSuggestionTypeRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionAsset": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/asset`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAsset),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionAssetRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerPatchItemMediaSuggestionAssetRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionSpace": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/space`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableSpace),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/space`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedSpace),
      orElse: unexpectedStatus
    }))
  ),
  "ItemMediaSuggestionControllerPatchItemMediaSuggestionSpaceRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/space`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedSpace),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactList": (options) => HttpClientRequest.get(`/itemImpacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemImpactList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerCreateItemImpact": (options) => HttpClientRequest.post(`/itemImpacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemImpactControllerCreateItemImpact201),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactById": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemImpact),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerDeleteItemImpactById": (id, options) => HttpClientRequest.del(`/itemImpacts/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerUpdateItemImpactById": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemImpact),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactMetadata": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactMetadataRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactProject": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableProject),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactProjectRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerPatchItemImpactProjectRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactAccount": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactAccountRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerPatchItemImpactAccountRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactCurrency": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactCurrencyRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerPatchItemImpactCurrencyRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactEntries": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactEntriesRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactAppraisals": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactAppraisalsRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/appraisals`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactSelectedAppraisal": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/selectedAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerPatchItemImpactSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactRelevantAppraisal": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relevantAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/relevantAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactItem": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/item`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Item),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactItemRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/item`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerPatchItemImpactItemRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/item`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactReplacement": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/replacement`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactReplacementRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/replacement`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerPatchItemImpactReplacementRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/replacement`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItem),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactPayments": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/payments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactPaymentsRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/payments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactInvoices": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/invoices`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactInvoicesRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/invoices`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedInvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactEstimates": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/estimates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactEstimatesRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/estimates`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactChangeOrders": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/changeOrders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactChangeOrdersRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactItemType": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/itemType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemImpactControllerGetItemImpactItemTypeRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/itemType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemType),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentList": (options) => HttpClientRequest.get(`/incidents`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerCreateIncident": (options) => HttpClientRequest.post(`/incidents`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentControllerCreateIncident201),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentById": (id, options) => HttpClientRequest.get(`/incidents/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Incident),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerDeleteIncidentById": (id, options) => HttpClientRequest.del(`/incidents/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerUpdateIncidentById": (id, options) => HttpClientRequest.patch(`/incidents/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Incident),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentAccount": (id, options) => HttpClientRequest.get(`/incidents/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentAccountRef": (id, options) => HttpClientRequest.get(`/incidents/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerPatchIncidentAccountRef": (id, options) => HttpClientRequest.patch(`/incidents/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentMediaAttachments": (id, options) => HttpClientRequest.get(`/incidents/${id}/mediaAttachments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentMediaAttachmentsRef": (id, options) => HttpClientRequest.get(`/incidents/${id}/relationships/mediaAttachments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerPostIncidentMediaAttachmentsRef": (id, options) => HttpClientRequest.post(`/incidents/${id}/relationships/mediaAttachments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerDeleteIncidentMediaAttachmentsRef": (id, options) => HttpClientRequest.del(`/incidents/${id}/relationships/mediaAttachments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerPatchIncidentMediaAttachmentsRef": (id, options) => HttpClientRequest.patch(`/incidents/${id}/relationships/mediaAttachments`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentType": (id, options) => HttpClientRequest.get(`/incidents/${id}/type`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentType),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentTypeRef": (id, options) => HttpClientRequest.get(`/incidents/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIncidentType),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerPatchIncidentTypeRef": (id, options) => HttpClientRequest.patch(`/incidents/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIncidentType),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentDisaster": (id, options) => HttpClientRequest.get(`/incidents/${id}/disaster`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableDisaster),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerGetIncidentDisasterRef": (id, options) => HttpClientRequest.get(`/incidents/${id}/relationships/disaster`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedDisaster),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentControllerPatchIncidentDisasterRef": (id, options) => HttpClientRequest.patch(`/incidents/${id}/relationships/disaster`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedDisaster),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactList": (options) => HttpClientRequest.get(`/incidentImpacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentImpactList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerCreateIncidentImpact": (options) => HttpClientRequest.post(`/incidentImpacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentImpactControllerCreateIncidentImpact201),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactById": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentImpact),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerDeleteIncidentImpactById": (id, options) => HttpClientRequest.del(`/incidentImpacts/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerUpdateIncidentImpactById": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentImpact),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactAsset": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/asset`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Asset),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactAssetRef": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerPatchIncidentImpactAssetRef": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactProject": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactProjectRef": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerPatchIncidentImpactProjectRef": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactSpaces": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactSpacesRef": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerPostIncidentImpactSpacesRef": (id, options) => HttpClientRequest.post(`/incidentImpacts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerDeleteIncidentImpactSpacesRef": (id, options) => HttpClientRequest.del(`/incidentImpacts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerPatchIncidentImpactSpacesRef": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactPerils": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/perils`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PerilList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerGetIncidentImpactPerilsRef": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerPostIncidentImpactPerilsRef": (id, options) => HttpClientRequest.post(`/incidentImpacts/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerDeleteIncidentImpactPerilsRef": (id, options) => HttpClientRequest.del(`/incidentImpacts/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentImpactControllerPatchIncidentImpactPerilsRef": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceList": (options) => HttpClientRequest.get(`/fundingSources`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSourceList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerCreateFundingSource": (options) => HttpClientRequest.post(`/fundingSources`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSourceControllerCreateFundingSource201),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceById": (id, options) => HttpClientRequest.get(`/fundingSources/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerDeleteFundingSourceById": (id, options) => HttpClientRequest.del(`/fundingSources/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerUpdateFundingSourceById": (id, options) => HttpClientRequest.patch(`/fundingSources/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceProject": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceProjectRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerPatchFundingSourceProjectRef": (id, options) => HttpClientRequest.patch(`/fundingSources/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceAccount": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceAccountRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceBuckets": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceBucketsRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/buckets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceFundings": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/fundings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceFundingsRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/fundings`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceContacts": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/contacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceContactsRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/contacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerPostFundingSourceContactsRef": (id, options) => HttpClientRequest.post(`/fundingSources/${id}/relationships/contacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerDeleteFundingSourceContactsRef": (id, options) => HttpClientRequest.del(`/fundingSources/${id}/relationships/contacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerPatchFundingSourceContactsRef": (id, options) => HttpClientRequest.patch(`/fundingSources/${id}/relationships/contacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceCurrency": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerGetFundingSourceCurrencyRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "FundingSourceControllerPatchFundingSourceCurrencyRef": (id, options) => HttpClientRequest.patch(`/fundingSources/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileList": (options) => HttpClientRequest.get(`/files`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FileList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileById": (id, options) => HttpClientRequest.get(`/files/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(File),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerDeleteFileById": (id, options) => HttpClientRequest.del(`/files/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerUpdateFileById": (id, options) => HttpClientRequest.patch(`/files/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(File),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileAccount": (id, options) => HttpClientRequest.get(`/files/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileAccountRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerPatchFileAccountRef": (id, options) => HttpClientRequest.patch(`/files/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileProjects": (id, options) => HttpClientRequest.get(`/files/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileProjectsRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerPostFileProjectsRef": (id, options) => HttpClientRequest.post(`/files/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerDeleteFileProjectsRef": (id, options) => HttpClientRequest.del(`/files/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerPatchFileProjectsRef": (id, options) => HttpClientRequest.patch(`/files/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileAssets": (id, options) => HttpClientRequest.get(`/files/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileAssetsRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerPostFileAssetsRef": (id, options) => HttpClientRequest.post(`/files/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerDeleteFileAssetsRef": (id, options) => HttpClientRequest.del(`/files/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerPatchFileAssetsRef": (id, options) => HttpClientRequest.patch(`/files/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileProcesses": (id, options) => HttpClientRequest.get(`/files/${id}/processes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FileProcessList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileProcessesRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/processes`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFileProcessList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileMedia": (id, options) => HttpClientRequest.get(`/files/${id}/media`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MediaList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileMediaRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/media`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileDocuments": (id, options) => HttpClientRequest.get(`/files/${id}/documents`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileDocumentsRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/documents`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentList),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileAddedBy": (id, options) => HttpClientRequest.get(`/files/${id}/addedBy`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(User),
      orElse: unexpectedStatus
    }))
  ),
  "FileControllerGetFileAddedByRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/addedBy`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "FileProcessControllerGetFileProcessList": (options) => HttpClientRequest.get(`/fileProcesses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FileProcessList),
      orElse: unexpectedStatus
    }))
  ),
  "FileProcessControllerGetFileProcessById": (id, options) => HttpClientRequest.get(`/fileProcesses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FileProcess),
      orElse: unexpectedStatus
    }))
  ),
  "FileProcessControllerGetFileProcessFile": (id, options) => HttpClientRequest.get(`/fileProcesses/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(File),
      orElse: unexpectedStatus
    }))
  ),
  "FileProcessControllerGetFileProcessFileRef": (id, options) => HttpClientRequest.get(`/fileProcesses/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryList": (options) => HttpClientRequest.get(`/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerCreateEntry": (options) => HttpClientRequest.post(`/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryControllerCreateEntry201),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryById": (id, options) => HttpClientRequest.get(`/entries/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Entry),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerDeleteEntryById": (id, options) => HttpClientRequest.del(`/entries/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerUpdateEntryById": (id, options) => HttpClientRequest.patch(`/entries/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Entry),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntrySource": (id, options) => HttpClientRequest.get(`/entries/${id}/source`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntrySourceRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/source`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerPatchEntrySourceRef": (id, options) => HttpClientRequest.patch(`/entries/${id}/relationships/source`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryBucket": (id, options) => HttpClientRequest.get(`/entries/${id}/bucket`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryBucketRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/bucket`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerPatchEntryBucketRef": (id, options) => HttpClientRequest.patch(`/entries/${id}/relationships/bucket`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntrySubBucket": (id, options) => HttpClientRequest.get(`/entries/${id}/subBucket`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableBaseSubBucket),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntrySubBucketRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/subBucket`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBaseSubBucket),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerPatchEntrySubBucketRef": (id, options) => HttpClientRequest.patch(`/entries/${id}/relationships/subBucket`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBaseSubBucket),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryFundingSource": (id, options) => HttpClientRequest.get(`/entries/${id}/fundingSource`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryFundingSourceRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/fundingSource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryProject": (id, options) => HttpClientRequest.get(`/entries/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryProjectRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryAccount": (id, options) => HttpClientRequest.get(`/entries/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryAccountRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryCurrency": (id, options) => HttpClientRequest.get(`/entries/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "EntryControllerGetEntryCurrencyRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceList": (options) => HttpClientRequest.get(`/entrySources`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerCreateEntrySource": (options) => HttpClientRequest.post(`/entrySources`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceControllerCreateEntrySource201),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceById": (id, options) => HttpClientRequest.get(`/entrySources/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerDeleteEntrySourceById": (id, options) => HttpClientRequest.del(`/entrySources/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerUpdateEntrySourceById": (id, options) => HttpClientRequest.patch(`/entrySources/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceMetadata": (id, options) => HttpClientRequest.get(`/entrySources/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceMetadataRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceProject": (id, options) => HttpClientRequest.get(`/entrySources/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableProject),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceProjectRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerPatchEntrySourceProjectRef": (id, options) => HttpClientRequest.patch(`/entrySources/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceAccount": (id, options) => HttpClientRequest.get(`/entrySources/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceAccountRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerPatchEntrySourceAccountRef": (id, options) => HttpClientRequest.patch(`/entrySources/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceCurrency": (id, options) => HttpClientRequest.get(`/entrySources/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceCurrencyRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerPatchEntrySourceCurrencyRef": (id, options) => HttpClientRequest.patch(`/entrySources/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceEntries": (id, options) => HttpClientRequest.get(`/entrySources/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceEntriesRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceAppraisals": (id, options) => HttpClientRequest.get(`/entrySources/${id}/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceAppraisalsRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/appraisals`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceSelectedAppraisal": (id, options) => HttpClientRequest.get(`/entrySources/${id}/selectedAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerPatchEntrySourceSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/entrySources/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceRelevantAppraisal": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relevantAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceControllerGetEntrySourceRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/relevantAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedItemAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataList": (options) => HttpClientRequest.get(`/entrySourceMetadatas`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMetadataList),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataById": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataObject": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/object`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataObjectRef": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/relationships/object`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataAccount": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataAccountRef": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataProject": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableProject),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataProjectRef": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataCurrency": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyRef": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerGetEntrySourceMediaList": (options) => HttpClientRequest.get(`/entrySourceMedia`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMediaList),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerCreateEntrySourceMedia": (options) => HttpClientRequest.post(`/entrySourceMedia`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMediaControllerCreateEntrySourceMedia201),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerGetEntrySourceMediaById": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMedia),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerDeleteEntrySourceMediaById": (id, options) => HttpClientRequest.del(`/entrySourceMedia/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerUpdateEntrySourceMediaById": (id, options) => HttpClientRequest.patch(`/entrySourceMedia/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceMedia),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerGetEntrySourceMediaEntrySource": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}/entrySource`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerGetEntrySourceMediaEntrySourceRef": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}/relationships/entrySource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerPatchEntrySourceMediaEntrySourceRef": (id, options) => HttpClientRequest.patch(`/entrySourceMedia/${id}/relationships/entrySource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerGetEntrySourceMediaMedia": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}/media`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Media),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerGetEntrySourceMediaMediaRef": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}/relationships/media`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedMedia),
      orElse: unexpectedStatus
    }))
  ),
  "EntrySourceMediaControllerPatchEntrySourceMediaMediaRef": (id, options) => HttpClientRequest.patch(`/entrySourceMedia/${id}/relationships/media`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedMedia),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementList": (options) => HttpClientRequest.get(`/endorsements`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerCreateEndorsement": (options) => HttpClientRequest.post(`/endorsements`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementControllerCreateEndorsement201),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementById": (id, options) => HttpClientRequest.get(`/endorsements/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Endorsement),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerDeleteEndorsementById": (id, options) => HttpClientRequest.del(`/endorsements/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerUpdateEndorsementById": (id, options) => HttpClientRequest.patch(`/endorsements/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Endorsement),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementPolicyTerm": (id, options) => HttpClientRequest.get(`/endorsements/${id}/policyTerm`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementPolicyTermRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/policyTerm`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerPatchEndorsementPolicyTermRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/policyTerm`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementTemplate": (id, options) => HttpClientRequest.get(`/endorsements/${id}/template`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableEndorsementTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementTemplateRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedEndorsementTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerPatchEndorsementTemplateRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedEndorsementTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementCoverages": (id, options) => HttpClientRequest.get(`/endorsements/${id}/coverages`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementCoveragesRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/coverages`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerPostEndorsementCoveragesRef": (id, options) => HttpClientRequest.post(`/endorsements/${id}/relationships/coverages`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerDeleteEndorsementCoveragesRef": (id, options) => HttpClientRequest.del(`/endorsements/${id}/relationships/coverages`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerPatchEndorsementCoveragesRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/coverages`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementSubCoverages": (id, options) => HttpClientRequest.get(`/endorsements/${id}/subCoverages`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementSubCoveragesRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/subCoverages`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerPostEndorsementSubCoveragesRef": (id, options) => HttpClientRequest.post(`/endorsements/${id}/relationships/subCoverages`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerDeleteEndorsementSubCoveragesRef": (id, options) => HttpClientRequest.del(`/endorsements/${id}/relationships/subCoverages`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerPatchEndorsementSubCoveragesRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/subCoverages`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubCoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementPerils": (id, options) => HttpClientRequest.get(`/endorsements/${id}/perils`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PerilList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerGetEndorsementPerilsRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerPostEndorsementPerilsRef": (id, options) => HttpClientRequest.post(`/endorsements/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerDeleteEndorsementPerilsRef": (id, options) => HttpClientRequest.del(`/endorsements/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementControllerPatchEndorsementPerilsRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "EmailAddressControllerGetEmailAddressList": (options) => HttpClientRequest.get(`/emailAddresses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmailAddressList),
      orElse: unexpectedStatus
    }))
  ),
  "EmailAddressControllerCreateEmailAddress": (options) => HttpClientRequest.post(`/emailAddresses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmailAddressControllerCreateEmailAddress201),
      orElse: unexpectedStatus
    }))
  ),
  "EmailAddressControllerGetEmailAddressById": (id, options) => HttpClientRequest.get(`/emailAddresses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmailAddress),
      orElse: unexpectedStatus
    }))
  ),
  "EmailAddressControllerDeleteEmailAddressById": (id) => HttpClientRequest.del(`/emailAddresses/${id}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "EmailAddressControllerUpdateEmailAddressById": (id, options) => HttpClientRequest.patch(`/emailAddresses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmailAddress),
      orElse: unexpectedStatus
    }))
  ),
  "EmailAddressControllerGetEmailAddressIdentity": (id, options) => HttpClientRequest.get(`/emailAddresses/${id}/identity`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Identity),
      orElse: unexpectedStatus
    }))
  ),
  "EmailAddressControllerGetEmailAddressIdentityRef": (id) => HttpClientRequest.get(`/emailAddresses/${id}/relationships/identity`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIdentity),
      orElse: unexpectedStatus
    }))
  ),
  "EmailAddressControllerPatchEmailAddressIdentityRef": (id, options) => HttpClientRequest.patch(`/emailAddresses/${id}/relationships/identity`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIdentity),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingList": (options) => HttpClientRequest.get(`/dwellings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DwellingList),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerCreateDwelling": (options) => HttpClientRequest.post(`/dwellings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DwellingControllerCreateDwelling201),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingById": (id, options) => HttpClientRequest.get(`/dwellings/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Dwelling),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerDeleteDwellingById": (id, options) => HttpClientRequest.del(`/dwellings/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerUpdateDwellingById": (id, options) => HttpClientRequest.patch(`/dwellings/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Dwelling),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingAssetType": (id, options) => HttpClientRequest.get(`/dwellings/${id}/assetType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetType),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingAssetTypeRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/assetType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetType),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerPatchDwellingAssetTypeRef": (id, options) => HttpClientRequest.patch(`/dwellings/${id}/relationships/assetType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetType),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingAccount": (id, options) => HttpClientRequest.get(`/dwellings/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingAccountRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerPatchDwellingAccountRef": (id, options) => HttpClientRequest.patch(`/dwellings/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingAppraisals": (id, options) => HttpClientRequest.get(`/dwellings/${id}/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingAppraisalsRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/appraisals`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingSelectedAppraisal": (id, options) => HttpClientRequest.get(`/dwellings/${id}/selectedAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerPatchDwellingSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/dwellings/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingRelevantAppraisal": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relevantAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/relevantAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingAddress": (id, options) => HttpClientRequest.get(`/dwellings/${id}/address`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Address),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerGetDwellingAddressRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/address`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAddress),
      orElse: unexpectedStatus
    }))
  ),
  "DwellingControllerPatchDwellingAddressRef": (id, options) => HttpClientRequest.patch(`/dwellings/${id}/relationships/address`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAddress),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerGetDeductibleList": (options) => HttpClientRequest.get(`/deductibles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeductibleList),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerCreateDeductible": (options) => HttpClientRequest.post(`/deductibles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeductibleControllerCreateDeductible201),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerGetDeductibleById": (id, options) => HttpClientRequest.get(`/deductibles/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Deductible),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerDeleteDeductibleById": (id) => HttpClientRequest.del(`/deductibles/${id}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerUpdateDeductibleById": (id, options) => HttpClientRequest.patch(`/deductibles/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Deductible),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerGetDeductibleClaimTarget": (id, options) => HttpClientRequest.get(`/deductibles/${id}/claimTarget`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerGetDeductibleClaimTargetRef": (id) => HttpClientRequest.get(`/deductibles/${id}/relationships/claimTarget`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerPatchDeductibleClaimTargetRef": (id, options) => HttpClientRequest.patch(`/deductibles/${id}/relationships/claimTarget`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerGetDeductibleBucketDefinitions": (id, options) => HttpClientRequest.get(`/deductibles/${id}/bucketDefinitions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerGetDeductibleBucketDefinitionsRef": (id) => HttpClientRequest.get(`/deductibles/${id}/relationships/bucketDefinitions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerGetDeductibleClaimDeductibles": (id, options) => HttpClientRequest.get(`/deductibles/${id}/claimDeductibles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimDeductibleList),
      orElse: unexpectedStatus
    }))
  ),
  "DeductibleControllerGetDeductibleClaimDeductiblesRef": (id) => HttpClientRequest.get(`/deductibles/${id}/relationships/claimDeductibles`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimDeductibleList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageList": (options) => HttpClientRequest.get(`/coverages`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerCreateCoverage": (options) => HttpClientRequest.post(`/coverages`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageControllerCreateCoverage201),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageById": (id, options) => HttpClientRequest.get(`/coverages/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Coverage),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerDeleteCoverageById": (id, options) => HttpClientRequest.del(`/coverages/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerUpdateCoverageById": (id, options) => HttpClientRequest.patch(`/coverages/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Coverage),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageBasis": (id, options) => HttpClientRequest.get(`/coverages/${id}/basis`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageBasisRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/basis`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPatchCoverageBasisRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/basis`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageBucketType": (id, options) => HttpClientRequest.get(`/coverages/${id}/bucketType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageBucketTypeRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/bucketType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPatchCoverageBucketTypeRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/bucketType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageDeductible": (id, options) => HttpClientRequest.get(`/coverages/${id}/deductible`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageDeductibleRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/deductible`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPatchCoverageDeductibleRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/deductible`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageSubBucketDefinitions": (id, options) => HttpClientRequest.get(`/coverages/${id}/subBucketDefinitions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageSubBucketDefinitionsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/subBucketDefinitions`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubBucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageBuckets": (id, options) => HttpClientRequest.get(`/coverages/${id}/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageBucketsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/buckets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageAssets": (id, options) => HttpClientRequest.get(`/coverages/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageAssetsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPostCoverageAssetsRef": (id, options) => HttpClientRequest.post(`/coverages/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerDeleteCoverageAssetsRef": (id, options) => HttpClientRequest.del(`/coverages/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPatchCoverageAssetsRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageTemplate": (id, options) => HttpClientRequest.get(`/coverages/${id}/template`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableCoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageTemplateRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedCoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPatchCoverageTemplateRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedCoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageGroup": (id, options) => HttpClientRequest.get(`/coverages/${id}/group`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableCoverageGroup),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageGroupRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/group`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedCoverageGroup),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPatchCoverageGroupRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/group`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedCoverageGroup),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoveragePerils": (id, options) => HttpClientRequest.get(`/coverages/${id}/perils`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PerilList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoveragePerilsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPostCoveragePerilsRef": (id, options) => HttpClientRequest.post(`/coverages/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerDeleteCoveragePerilsRef": (id, options) => HttpClientRequest.del(`/coverages/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerPatchCoveragePerilsRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/perils`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageEndorsements": (id, options) => HttpClientRequest.get(`/coverages/${id}/endorsements`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageControllerGetCoverageEndorsementsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/endorsements`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEndorsementList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerGetCoverageGroupList": (options) => HttpClientRequest.get(`/coverageGroups`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageGroupList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerCreateCoverageGroup": (options) => HttpClientRequest.post(`/coverageGroups`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageGroupControllerCreateCoverageGroup201),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerGetCoverageGroupById": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageGroup),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerDeleteCoverageGroupById": (id, options) => HttpClientRequest.del(`/coverageGroups/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerUpdateCoverageGroupById": (id, options) => HttpClientRequest.patch(`/coverageGroups/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageGroup),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerGetCoverageGroupPolicyTerm": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}/policyTerm`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerGetCoverageGroupPolicyTermRef": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}/relationships/policyTerm`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerPatchCoverageGroupPolicyTermRef": (id, options) => HttpClientRequest.patch(`/coverageGroups/${id}/relationships/policyTerm`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicyTerm),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerGetCoverageGroupTemplate": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}/template`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableCoverageGroupTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerGetCoverageGroupTemplateRef": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedCoverageGroupTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupControllerPatchCoverageGroupTemplateRef": (id, options) => HttpClientRequest.patch(`/coverageGroups/${id}/relationships/template`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedCoverageGroupTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimList": (options) => HttpClientRequest.get(`/claims`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerCreateClaim": (options) => HttpClientRequest.post(`/claims`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimControllerCreateClaim201),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimById": (id, options) => HttpClientRequest.get(`/claims/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Claim),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerDeleteClaimById": (id, options) => HttpClientRequest.del(`/claims/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerUpdateClaimById": (id, options) => HttpClientRequest.patch(`/claims/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Claim),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimProject": (id, options) => HttpClientRequest.get(`/claims/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimProjectRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerPatchClaimProjectRef": (id, options) => HttpClientRequest.patch(`/claims/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimAccount": (id, options) => HttpClientRequest.get(`/claims/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimAccountRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimBuckets": (id, options) => HttpClientRequest.get(`/claims/${id}/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimBucketsRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/buckets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimFundings": (id, options) => HttpClientRequest.get(`/claims/${id}/fundings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimFundingsRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/fundings`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimContacts": (id, options) => HttpClientRequest.get(`/claims/${id}/contacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimContactsRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/contacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerPostClaimContactsRef": (id, options) => HttpClientRequest.post(`/claims/${id}/relationships/contacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerDeleteClaimContactsRef": (id, options) => HttpClientRequest.del(`/claims/${id}/relationships/contacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerPatchClaimContactsRef": (id, options) => HttpClientRequest.patch(`/claims/${id}/relationships/contacts`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimCurrency": (id, options) => HttpClientRequest.get(`/claims/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimCurrencyRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerPatchClaimCurrencyRef": (id, options) => HttpClientRequest.patch(`/claims/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimTarget": (id, options) => HttpClientRequest.get(`/claims/${id}/target`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimTargetRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/target`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerPatchClaimTargetRef": (id, options) => HttpClientRequest.patch(`/claims/${id}/relationships/target`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimProvider": (id, options) => HttpClientRequest.get(`/claims/${id}/provider`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Provider),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimProviderRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/provider`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProvider),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimDeductibles": (id, options) => HttpClientRequest.get(`/claims/${id}/deductibles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeductibleList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimControllerGetClaimDeductiblesRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/deductibles`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDeductibleList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleList": (options) => HttpClientRequest.get(`/claimDeductibles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimDeductibleList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerCreateClaimDeductible": (options) => HttpClientRequest.post(`/claimDeductibles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimDeductibleControllerCreateClaimDeductible201),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleById": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerDeleteClaimDeductibleById": (id, options) => HttpClientRequest.del(`/claimDeductibles/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerUpdateClaimDeductibleById": (id, options) => HttpClientRequest.patch(`/claimDeductibles/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleContext": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/context`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Deductible),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleContextRef": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/relationships/context`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerPatchClaimDeductibleContextRef": (id, options) => HttpClientRequest.patch(`/claimDeductibles/${id}/relationships/context`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleClaim": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/claim`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Claim),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleClaimRef": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/relationships/claim`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaim),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerPatchClaimDeductibleClaimRef": (id, options) => HttpClientRequest.patch(`/claimDeductibles/${id}/relationships/claim`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaim),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleTarget": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/target`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleTargetRef": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/relationships/target`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleBuckets": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketList),
      orElse: unexpectedStatus
    }))
  ),
  "ClaimDeductibleControllerGetClaimDeductibleBucketsRef": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/relationships/buckets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketList": (options) => HttpClientRequest.get(`/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerCreateBucket": (options) => HttpClientRequest.post(`/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketControllerCreateBucket201),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketById": (id, options) => HttpClientRequest.get(`/buckets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Bucket),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerDeleteBucketById": (id, options) => HttpClientRequest.del(`/buckets/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerUpdateBucketById": (id, options) => HttpClientRequest.patch(`/buckets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Bucket),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketType": (id, options) => HttpClientRequest.get(`/buckets/${id}/type`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketTypeRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerPatchBucketTypeRef": (id, options) => HttpClientRequest.patch(`/buckets/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketFundingSource": (id, options) => HttpClientRequest.get(`/buckets/${id}/fundingSource`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketFundingSourceRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/fundingSource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerPatchBucketFundingSourceRef": (id, options) => HttpClientRequest.patch(`/buckets/${id}/relationships/fundingSource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketMetadata": (id, options) => HttpClientRequest.get(`/buckets/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketMetadataRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketProject": (id, options) => HttpClientRequest.get(`/buckets/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketProjectRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketAccount": (id, options) => HttpClientRequest.get(`/buckets/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketAccountRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketEntries": (id, options) => HttpClientRequest.get(`/buckets/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketEntriesRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketSubBuckets": (id, options) => HttpClientRequest.get(`/buckets/${id}/subBuckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketSubBucketsRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/subBuckets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseSubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketFundings": (id, options) => HttpClientRequest.get(`/buckets/${id}/fundings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketFundingsRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/fundings`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketDefinition": (id, options) => HttpClientRequest.get(`/buckets/${id}/definition`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketDefinitionRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/definition`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerPatchBucketDefinitionRef": (id, options) => HttpClientRequest.patch(`/buckets/${id}/relationships/definition`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketDeductible": (id, options) => HttpClientRequest.get(`/buckets/${id}/deductible`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Deductible),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketDeductibleRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/deductible`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketClaimDeductible": (id, options) => HttpClientRequest.get(`/buckets/${id}/claimDeductible`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "BucketControllerGetBucketClaimDeductibleRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/claimDeductible`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingList": (options) => HttpClientRequest.get(`/bucketFundings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerCreateBucketFunding": (options) => HttpClientRequest.post(`/bucketFundings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketFundingControllerCreateBucketFunding201),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingById": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketFunding),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerDeleteBucketFundingById": (id, options) => HttpClientRequest.del(`/bucketFundings/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerUpdateBucketFundingById": (id, options) => HttpClientRequest.patch(`/bucketFundings/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketFunding),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingFunding": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/funding`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Funding),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingFundingRef": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/relationships/funding`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFunding),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerPatchBucketFundingFundingRef": (id, options) => HttpClientRequest.patch(`/bucketFundings/${id}/relationships/funding`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFunding),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingBucket": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/bucket`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingBucketRef": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/relationships/bucket`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerPatchBucketFundingBucketRef": (id, options) => HttpClientRequest.patch(`/bucketFundings/${id}/relationships/bucket`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingFundingSource": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/fundingSource`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingFundingSourceRef": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/relationships/fundingSource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingCurrency": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "BucketFundingControllerGetBucketFundingCurrencyRef": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionList": (options) => HttpClientRequest.get(`/bucketDefinitions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerCreateBucketDefinition": (options) => HttpClientRequest.post(`/bucketDefinitions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketDefinitionControllerCreateBucketDefinition201),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionById": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerDeleteBucketDefinitionById": (id) => HttpClientRequest.del(`/bucketDefinitions/${id}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerUpdateBucketDefinitionById": (id, options) => HttpClientRequest.patch(`/bucketDefinitions/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketDefinition),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionBasis": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/basis`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionBasisRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/basis`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerPatchBucketDefinitionBasisRef": (id, options) => HttpClientRequest.patch(`/bucketDefinitions/${id}/relationships/basis`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedClaimTarget),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionBucketType": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/bucketType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionBucketTypeRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/bucketType`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerPatchBucketDefinitionBucketTypeRef": (id, options) => HttpClientRequest.patch(`/bucketDefinitions/${id}/relationships/bucketType`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionDeductible": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/deductible`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionDeductibleRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/deductible`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerPatchBucketDefinitionDeductibleRef": (id, options) => HttpClientRequest.patch(`/bucketDefinitions/${id}/relationships/deductible`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedDeductible),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitions": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/subBucketDefinitions`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubBucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitionsRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/subBucketDefinitions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubBucketDefinitionList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionBuckets": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/buckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketDefinitionControllerGetBucketDefinitionBucketsRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/buckets`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketList": (options) => HttpClientRequest.get(`/baseSubBuckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerCreateBaseSubBucket": (options) => HttpClientRequest.post(`/baseSubBuckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucketControllerCreateBaseSubBucket201),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketById": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerDeleteBaseSubBucketById": (id, options) => HttpClientRequest.del(`/baseSubBuckets/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerUpdateBaseSubBucketById": (id, options) => HttpClientRequest.patch(`/baseSubBuckets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketParent": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/parent`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketParentRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/parent`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerPatchBaseSubBucketParentRef": (id, options) => HttpClientRequest.patch(`/baseSubBuckets/${id}/relationships/parent`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketMetadata": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketMetadataRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseSubBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketFundingSource": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/fundingSource`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketFundingSourceRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/fundingSource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketProject": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketProjectRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketAccount": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketAccountRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketEntries": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketControllerGetBaseSubBucketEntriesRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataList": (options) => HttpClientRequest.get(`/baseSubBucketMetadatas`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucketMetadataList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataById": (id, options) => HttpClientRequest.get(`/baseSubBucketMetadatas/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObject": (id, options) => HttpClientRequest.get(`/baseSubBucketMetadatas/${id}/object`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectRef": (id, options) => HttpClientRequest.get(`/baseSubBucketMetadatas/${id}/relationships/object`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketList": (options) => HttpClientRequest.get(`/baseBuckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerCreateBaseBucket": (options) => HttpClientRequest.post(`/baseBuckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucketControllerCreateBaseBucket201),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketById": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerDeleteBaseBucketById": (id, options) => HttpClientRequest.del(`/baseBuckets/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerUpdateBaseBucketById": (id, options) => HttpClientRequest.patch(`/baseBuckets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketType": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/type`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketTypeRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerPatchBaseBucketTypeRef": (id, options) => HttpClientRequest.patch(`/baseBuckets/${id}/relationships/type`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketFundingSource": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/fundingSource`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketFundingSourceRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/fundingSource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerPatchBaseBucketFundingSourceRef": (id, options) => HttpClientRequest.patch(`/baseBuckets/${id}/relationships/fundingSource`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketMetadata": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/metadata`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketMetadataRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/metadata`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketProject": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/project`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketProjectRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/project`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProject),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketAccount": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketAccountRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketEntries": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/entries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntryList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketEntriesRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/entries`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntryList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketSubBuckets": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/subBuckets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseSubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketSubBucketsRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/subBuckets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseSubBucketList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketFundings": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/fundings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketControllerGetBaseBucketFundingsRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/fundings`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketMetadataControllerGetBaseBucketMetadataList": (options) => HttpClientRequest.get(`/baseBucketMetadatas`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucketMetadataList),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketMetadataControllerGetBaseBucketMetadataById": (id, options) => HttpClientRequest.get(`/baseBucketMetadatas/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucketMetadata),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketMetadataControllerGetBaseBucketMetadataObject": (id, options) => HttpClientRequest.get(`/baseBucketMetadatas/${id}/object`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "BaseBucketMetadataControllerGetBaseBucketMetadataObjectRef": (id, options) => HttpClientRequest.get(`/baseBucketMetadatas/${id}/relationships/object`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseBucket),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetList": (options) => HttpClientRequest.get(`/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerCreateAsset": (options) => HttpClientRequest.post(`/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetControllerCreateAsset201),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetById": (id, options) => HttpClientRequest.get(`/assets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Asset),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerDeleteAssetById": (id, options) => HttpClientRequest.del(`/assets/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerUpdateAssetById": (id, options) => HttpClientRequest.patch(`/assets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Asset),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetAssetType": (id, options) => HttpClientRequest.get(`/assets/${id}/assetType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetAssetTypeRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/assetType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerPatchAssetAssetTypeRef": (id, options) => HttpClientRequest.patch(`/assets/${id}/relationships/assetType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetAccount": (id, options) => HttpClientRequest.get(`/assets/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetAccountRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerPatchAssetAccountRef": (id, options) => HttpClientRequest.patch(`/assets/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetAppraisals": (id, options) => HttpClientRequest.get(`/assets/${id}/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetAppraisalsRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/appraisals`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetSelectedAppraisal": (id, options) => HttpClientRequest.get(`/assets/${id}/selectedAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerPatchAssetSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/assets/${id}/relationships/selectedAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetRelevantAppraisal": (id, options) => HttpClientRequest.get(`/assets/${id}/relevantAppraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AssetControllerGetAssetRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/relevantAppraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerGetAddressList": (options) => HttpClientRequest.get(`/addresses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AddressList),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerCreateAddress": (options) => HttpClientRequest.post(`/addresses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AddressControllerCreateAddress201),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerGetAddressById": (id, options) => HttpClientRequest.get(`/addresses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Address),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerDeleteAddressById": (id, options) => HttpClientRequest.del(`/addresses/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerUpdateAddressById": (id, options) => HttpClientRequest.patch(`/addresses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Address),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerGetAddressAccount": (id, options) => HttpClientRequest.get(`/addresses/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerGetAddressAccountRef": (id, options) => HttpClientRequest.get(`/addresses/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerPatchAddressAccountRef": (id, options) => HttpClientRequest.patch(`/addresses/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerGetAddressCountry": (id, options) => HttpClientRequest.get(`/addresses/${id}/country`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Country),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerGetAddressCountryRef": (id, options) => HttpClientRequest.get(`/addresses/${id}/relationships/country`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCountry),
      orElse: unexpectedStatus
    }))
  ),
  "AddressControllerPatchAddressCountryRef": (id, options) => HttpClientRequest.patch(`/addresses/${id}/relationships/country`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCountry),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountById": (id, options) => HttpClientRequest.get(`/accounts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerUpdateAccountById": (id, options) => HttpClientRequest.patch(`/accounts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountOwner": (id, options) => HttpClientRequest.get(`/accounts/${id}/owner`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(User),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountOwnerRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/owner`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerPatchAccountOwnerRef": (id, options) => HttpClientRequest.patch(`/accounts/${id}/relationships/owner`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountProjects": (id, options) => HttpClientRequest.get(`/accounts/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountProjectsRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/projects`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountAssets": (id, options) => HttpClientRequest.get(`/accounts/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountAssetsRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/assets`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountUserRoles": (id, options) => HttpClientRequest.get(`/accounts/${id}/userRoles`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserAccountRoleList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountUserRolesRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/userRoles`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedUserAccountRoleList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountDefaultCurrency": (id, options) => HttpClientRequest.get(`/accounts/${id}/defaultCurrency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerGetAccountDefaultCurrencyRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/defaultCurrency`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "AccountControllerPatchAccountDefaultCurrencyRef": (id, options) => HttpClientRequest.patch(`/accounts/${id}/relationships/defaultCurrency`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerGetAccountProviderList": (options) => HttpClientRequest.get(`/accountProviders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProviderList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerCreateAccountProvider": (options) => HttpClientRequest.post(`/accountProviders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProviderControllerCreateAccountProvider201),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerGetAccountProviderById": (id, options) => HttpClientRequest.get(`/accountProviders/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerDeleteAccountProviderById": (id, options) => HttpClientRequest.del(`/accountProviders/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerUpdateAccountProviderById": (id, options) => HttpClientRequest.patch(`/accountProviders/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerGetAccountProviderAccount": (id, options) => HttpClientRequest.get(`/accountProviders/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerGetAccountProviderAccountRef": (id, options) => HttpClientRequest.get(`/accountProviders/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerPatchAccountProviderAccountRef": (id, options) => HttpClientRequest.patch(`/accountProviders/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerGetAccountProviderProvider": (id, options) => HttpClientRequest.get(`/accountProviders/${id}/provider`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerGetAccountProviderProviderRef": (id, options) => HttpClientRequest.get(`/accountProviders/${id}/relationships/provider`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderControllerPatchAccountProviderProviderRef": (id, options) => HttpClientRequest.patch(`/accountProviders/${id}/relationships/provider`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactList": (options) => HttpClientRequest.get(`/accountProviderContacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProviderContactList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerCreateAccountProviderContact": (options) => HttpClientRequest.post(`/accountProviderContacts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProviderContactControllerCreateAccountProviderContact201),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactById": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProviderContact),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerDeleteAccountProviderContactById": (id, options) => HttpClientRequest.del(`/accountProviderContacts/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerUpdateAccountProviderContactById": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProviderContact),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddress": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/primaryEmailAddress`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableEmailAddress),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressRef": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/relationships/primaryEmailAddress`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedEmailAddress),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerPatchAccountProviderContactPrimaryEmailAddressRef": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}/relationships/primaryEmailAddress`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedEmailAddress),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumber": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/primaryPhoneNumber`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullablePhoneNumber),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberRef": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/relationships/primaryPhoneNumber`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPhoneNumber),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerPatchAccountProviderContactPrimaryPhoneNumberRef": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}/relationships/primaryPhoneNumber`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPhoneNumber),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactProvider": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/provider`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactProviderRef": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/relationships/provider`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerPatchAccountProviderContactProviderRef": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}/relationships/provider`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactUser": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/user`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableUser),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerGetAccountProviderContactUserRef": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/relationships/user`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "AccountProviderContactControllerPatchAccountProviderContactUserRef": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}/relationships/user`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerGetAccountInviteList": (options) => HttpClientRequest.get(`/accountInvites`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountInviteList),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerCreateAccountInvite": (options) => HttpClientRequest.post(`/accountInvites`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountInviteControllerCreateAccountInvite201),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerGetAccountInviteById": (id, options) => HttpClientRequest.get(`/accountInvites/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountInvite),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerDeleteAccountInviteById": (id, options) => HttpClientRequest.del(`/accountInvites/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerUpdateAccountInviteById": (id, options) => HttpClientRequest.patch(`/accountInvites/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountInvite),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerGetAccountInviteAccount": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerGetAccountInviteAccountRef": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerPatchAccountInviteAccountRef": (id, options) => HttpClientRequest.patch(`/accountInvites/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerGetAccountInviteInvitedBy": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/invitedBy`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(User),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerGetAccountInviteInvitedByRef": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/relationships/invitedBy`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerGetAccountInviteAcceptedBy": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/acceptedBy`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableUser),
      orElse: unexpectedStatus
    }))
  ),
  "AccountInviteControllerGetAccountInviteAcceptedByRef": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/relationships/acceptedBy`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedUser),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeControllerGetSpaceTypeList": (options) => HttpClientRequest.get(`/spaceTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeControllerGetSpaceTypeById": (id, options) => HttpClientRequest.get(`/spaceTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeControllerGetSpaceTypeClasses": (id, options) => HttpClientRequest.get(`/spaceTypes/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceClassList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeControllerGetSpaceTypeClassesRef": (id) => HttpClientRequest.get(`/spaceTypes/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceClassList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeControllerGetSpaceTypeAssetTypes": (id, options) => HttpClientRequest.get(`/spaceTypes/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeControllerGetSpaceTypeAssetTypesRef": (id) => HttpClientRequest.get(`/spaceTypes/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeControllerGetSpaceTypeGroupTypes": (id, options) => HttpClientRequest.get(`/spaceTypes/${id}/groupTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroupTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeControllerGetSpaceTypeGroupTypesRef": (id) => HttpClientRequest.get(`/spaceTypes/${id}/relationships/groupTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceGroupTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupTypeControllerGetSpaceGroupTypeList": (options) => HttpClientRequest.get(`/spaceGroupTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroupTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupTypeControllerGetSpaceGroupTypeById": (id, options) => HttpClientRequest.get(`/spaceGroupTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroupType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypes": (id, options) => HttpClientRequest.get(`/spaceGroupTypes/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypesRef": (id) => HttpClientRequest.get(`/spaceGroupTypes/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypes": (id, options) => HttpClientRequest.get(`/spaceGroupTypes/${id}/bucketTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypesRef": (id) => HttpClientRequest.get(`/spaceGroupTypes/${id}/relationships/bucketTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassList": (options) => HttpClientRequest.get(`/spaceClasses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceClassList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassById": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceClass),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassCategories": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}/categories`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassCategoriesRef": (id) => HttpClientRequest.get(`/spaceClasses/${id}/relationships/categories`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassTypes": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}/types`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassTypesRef": (id) => HttpClientRequest.get(`/spaceClasses/${id}/relationships/types`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassAssetTypes": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassAssetTypesRef": (id) => HttpClientRequest.get(`/spaceClasses/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassGroupTypes": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}/groupTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroupTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceClassControllerGetSpaceClassGroupTypesRef": (id) => HttpClientRequest.get(`/spaceClasses/${id}/relationships/groupTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceGroupTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceCategoryControllerGetSpaceCategoryList": (options) => HttpClientRequest.get(`/spaceCategories`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceCategoryControllerGetSpaceCategoryById": (id, options) => HttpClientRequest.get(`/spaceCategories/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceCategory),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceCategoryControllerGetSpaceCategoryClasses": (id, options) => HttpClientRequest.get(`/spaceCategories/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceClassList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceCategoryControllerGetSpaceCategoryClassesRef": (id) => HttpClientRequest.get(`/spaceCategories/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceClassList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceCategoryControllerGetSpaceCategoryAssetTypes": (id, options) => HttpClientRequest.get(`/spaceCategories/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceCategoryControllerGetSpaceCategoryAssetTypesRef": (id) => HttpClientRequest.get(`/spaceCategories/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceCategoryControllerGetSpaceCategoryGroupTypes": (id, options) => HttpClientRequest.get(`/spaceCategories/${id}/groupTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceGroupTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceCategoryControllerGetSpaceCategoryGroupTypesRef": (id) => HttpClientRequest.get(`/spaceCategories/${id}/relationships/groupTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceGroupTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTypeControllerGetServiceTypeList": (options) => HttpClientRequest.get(`/serviceTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTypeControllerGetServiceTypeById": (id, options) => HttpClientRequest.get(`/serviceTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceType),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTypeControllerGetServiceTypeAssetTypes": (id, options) => HttpClientRequest.get(`/serviceTypes/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceTypeControllerGetServiceTypeAssetTypesRef": (id) => HttpClientRequest.get(`/serviceTypes/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceClassControllerGetServiceClassList": (options) => HttpClientRequest.get(`/serviceClasses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceClassList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceClassControllerGetServiceClassById": (id, options) => HttpClientRequest.get(`/serviceClasses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceClass),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceClassControllerGetServiceClassCategories": (id, options) => HttpClientRequest.get(`/serviceClasses/${id}/categories`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceClassControllerGetServiceClassCategoriesRef": (id) => HttpClientRequest.get(`/serviceClasses/${id}/relationships/categories`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedServiceCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceClassControllerGetServiceClassTypes": (id, options) => HttpClientRequest.get(`/serviceClasses/${id}/types`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceClassControllerGetServiceClassTypesRef": (id) => HttpClientRequest.get(`/serviceClasses/${id}/relationships/types`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedServiceTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceClassControllerGetServiceClassAssetTypes": (id, options) => HttpClientRequest.get(`/serviceClasses/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceClassControllerGetServiceClassAssetTypesRef": (id) => HttpClientRequest.get(`/serviceClasses/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceCategoryControllerGetServiceCategoryList": (options) => HttpClientRequest.get(`/serviceCategories`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceCategoryControllerGetServiceCategoryById": (id, options) => HttpClientRequest.get(`/serviceCategories/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceCategory),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceCategoryControllerGetServiceCategoryClasses": (id, options) => HttpClientRequest.get(`/serviceCategories/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ServiceClassList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceCategoryControllerGetServiceCategoryClassesRef": (id) => HttpClientRequest.get(`/serviceCategories/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedServiceClassList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceCategoryControllerGetServiceCategoryAssetTypes": (id, options) => HttpClientRequest.get(`/serviceCategories/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ServiceCategoryControllerGetServiceCategoryAssetTypesRef": (id) => HttpClientRequest.get(`/serviceCategories/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeList": (options) => HttpClientRequest.get(`/itemTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeById": (id, options) => HttpClientRequest.get(`/itemTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeDepreciationModifiers": (id, options) => HttpClientRequest.get(`/itemTypes/${id}/depreciationModifiers`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DepreciationModifierList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeDepreciationModifiersRef": (id) => HttpClientRequest.get(`/itemTypes/${id}/relationships/depreciationModifiers`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDepreciationModifierList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeDepreciationOverrides": (id, options) => HttpClientRequest.get(`/itemTypes/${id}/depreciationOverrides`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DepreciationOverrideList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeDepreciationOverridesRef": (id) => HttpClientRequest.get(`/itemTypes/${id}/relationships/depreciationOverrides`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDepreciationOverrideList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeClasses": (id, options) => HttpClientRequest.get(`/itemTypes/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemClassList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeClassesRef": (id) => HttpClientRequest.get(`/itemTypes/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemClassList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeAssetTypes": (id, options) => HttpClientRequest.get(`/itemTypes/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTypeControllerGetItemTypeAssetTypesRef": (id) => HttpClientRequest.get(`/itemTypes/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemClassControllerGetItemClassList": (options) => HttpClientRequest.get(`/itemClasses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemClassList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemClassControllerGetItemClassById": (id, options) => HttpClientRequest.get(`/itemClasses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemClass),
      orElse: unexpectedStatus
    }))
  ),
  "ItemClassControllerGetItemClassCategories": (id, options) => HttpClientRequest.get(`/itemClasses/${id}/categories`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemClassControllerGetItemClassCategoriesRef": (id) => HttpClientRequest.get(`/itemClasses/${id}/relationships/categories`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemClassControllerGetItemClassTypes": (id, options) => HttpClientRequest.get(`/itemClasses/${id}/types`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemClassControllerGetItemClassTypesRef": (id) => HttpClientRequest.get(`/itemClasses/${id}/relationships/types`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemClassControllerGetItemClassAssetTypes": (id, options) => HttpClientRequest.get(`/itemClasses/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemClassControllerGetItemClassAssetTypesRef": (id) => HttpClientRequest.get(`/itemClasses/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemCategoryControllerGetItemCategoryList": (options) => HttpClientRequest.get(`/itemCategories`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemCategoryList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemCategoryControllerGetItemCategoryById": (id, options) => HttpClientRequest.get(`/itemCategories/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemCategory),
      orElse: unexpectedStatus
    }))
  ),
  "ItemCategoryControllerGetItemCategoryClasses": (id, options) => HttpClientRequest.get(`/itemCategories/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemClassList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemCategoryControllerGetItemCategoryClassesRef": (id) => HttpClientRequest.get(`/itemCategories/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemClassList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemCategoryControllerGetItemCategoryAssetTypes": (id, options) => HttpClientRequest.get(`/itemCategories/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemCategoryControllerGetItemCategoryAssetTypesRef": (id) => HttpClientRequest.get(`/itemCategories/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentTypeControllerGetIncidentTypeList": (options) => HttpClientRequest.get(`/incidentTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentTypeControllerGetIncidentTypeById": (id, options) => HttpClientRequest.get(`/incidentTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentType),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentTypeControllerGetIncidentTypeClasses": (id, options) => HttpClientRequest.get(`/incidentTypes/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentClassList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentTypeControllerGetIncidentTypeClassesRef": (id) => HttpClientRequest.get(`/incidentTypes/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIncidentClassList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentTypeControllerGetIncidentTypeAssetTypes": (id, options) => HttpClientRequest.get(`/incidentTypes/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentTypeControllerGetIncidentTypeAssetTypesRef": (id) => HttpClientRequest.get(`/incidentTypes/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentTypeControllerGetIncidentTypePerils": (id, options) => HttpClientRequest.get(`/incidentTypes/${id}/perils`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PerilList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentTypeControllerGetIncidentTypePerilsRef": (id) => HttpClientRequest.get(`/incidentTypes/${id}/relationships/perils`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentClassControllerGetIncidentClassList": (options) => HttpClientRequest.get(`/incidentClasses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentClassList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentClassControllerGetIncidentClassById": (id, options) => HttpClientRequest.get(`/incidentClasses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentClass),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentClassControllerGetIncidentClassTypes": (id, options) => HttpClientRequest.get(`/incidentClasses/${id}/types`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentClassControllerGetIncidentClassTypesRef": (id) => HttpClientRequest.get(`/incidentClasses/${id}/relationships/types`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIncidentTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentClassControllerGetIncidentClassAssetTypes": (id, options) => HttpClientRequest.get(`/incidentClasses/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentClassControllerGetIncidentClassAssetTypesRef": (id) => HttpClientRequest.get(`/incidentClasses/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentTypeControllerGetDocumentTypeList": (options) => HttpClientRequest.get(`/documentTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentTypeControllerGetDocumentTypeById": (id, options) => HttpClientRequest.get(`/documentTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentTypeControllerGetDocumentTypeClasses": (id, options) => HttpClientRequest.get(`/documentTypes/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentClassList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentTypeControllerGetDocumentTypeClassesRef": (id) => HttpClientRequest.get(`/documentTypes/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentClassList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentTypeControllerGetDocumentTypeAssetTypes": (id, options) => HttpClientRequest.get(`/documentTypes/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentTypeControllerGetDocumentTypeAssetTypesRef": (id) => HttpClientRequest.get(`/documentTypes/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentClassControllerGetDocumentClassList": (options) => HttpClientRequest.get(`/documentClasses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentClassList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentClassControllerGetDocumentClassById": (id, options) => HttpClientRequest.get(`/documentClasses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentClass),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentClassControllerGetDocumentClassTypes": (id, options) => HttpClientRequest.get(`/documentClasses/${id}/types`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentClassControllerGetDocumentClassTypesRef": (id) => HttpClientRequest.get(`/documentClasses/${id}/relationships/types`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentClassControllerGetDocumentClassAssetTypes": (id, options) => HttpClientRequest.get(`/documentClasses/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentClassControllerGetDocumentClassAssetTypesRef": (id) => HttpClientRequest.get(`/documentClasses/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketTypeControllerGetBucketTypeList": (options) => HttpClientRequest.get(`/bucketTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketTypeControllerGetBucketTypeById": (id, options) => HttpClientRequest.get(`/bucketTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketType),
      orElse: unexpectedStatus
    }))
  ),
  "BucketTypeControllerGetBucketTypeClasses": (id, options) => HttpClientRequest.get(`/bucketTypes/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketClassList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketTypeControllerGetBucketTypeClassesRef": (id) => HttpClientRequest.get(`/bucketTypes/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketClassList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketTypeControllerGetBucketTypeAssetTypes": (id, options) => HttpClientRequest.get(`/bucketTypes/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketTypeControllerGetBucketTypeAssetTypesRef": (id) => HttpClientRequest.get(`/bucketTypes/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketClassControllerGetBucketClassList": (options) => HttpClientRequest.get(`/bucketClasses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketClassList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketClassControllerGetBucketClassById": (id, options) => HttpClientRequest.get(`/bucketClasses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketClass),
      orElse: unexpectedStatus
    }))
  ),
  "BucketClassControllerGetBucketClassTypes": (id, options) => HttpClientRequest.get(`/bucketClasses/${id}/types`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketClassControllerGetBucketClassTypesRef": (id) => HttpClientRequest.get(`/bucketClasses/${id}/relationships/types`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketClassControllerGetBucketClassAssetTypes": (id, options) => HttpClientRequest.get(`/bucketClasses/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "BucketClassControllerGetBucketClassAssetTypesRef": (id) => HttpClientRequest.get(`/bucketClasses/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetTypeControllerGetAssetTypeList": (options) => HttpClientRequest.get(`/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetTypeControllerGetAssetTypeById": (id, options) => HttpClientRequest.get(`/assetTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeControllerGetAssetAttributeTypeList": (options) => HttpClientRequest.get(`/assetAttributeTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeControllerGetAssetAttributeTypeById": (id, options) => HttpClientRequest.get(`/assetAttributeTypes/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeControllerGetAssetAttributeTypeClasses": (id, options) => HttpClientRequest.get(`/assetAttributeTypes/${id}/classes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeClassList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeControllerGetAssetAttributeTypeClassesRef": (id) => HttpClientRequest.get(`/assetAttributeTypes/${id}/relationships/classes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetAttributeClassList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypes": (id, options) => HttpClientRequest.get(`/assetAttributeTypes/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypesRef": (id) => HttpClientRequest.get(`/assetAttributeTypes/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeClassControllerGetAssetAttributeClassList": (options) => HttpClientRequest.get(`/assetAttributeClasses`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeClassList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeClassControllerGetAssetAttributeClassById": (id, options) => HttpClientRequest.get(`/assetAttributeClasses/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeClass),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeClassControllerGetAssetAttributeClassTypes": (id, options) => HttpClientRequest.get(`/assetAttributeClasses/${id}/types`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeClassControllerGetAssetAttributeClassTypesRef": (id) => HttpClientRequest.get(`/assetAttributeClasses/${id}/relationships/types`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetAttributeTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeClassControllerGetAssetAttributeClassAssetTypes": (id, options) => HttpClientRequest.get(`/assetAttributeClasses/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeClassControllerGetAssetAttributeClassAssetTypesRef": (id) => HttpClientRequest.get(`/assetAttributeClasses/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateList": (options) => HttpClientRequest.get(`/submissionTrackTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubmissionTrackTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateById": (id, options) => HttpClientRequest.get(`/submissionTrackTemplates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubmissionTrackTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplate": (id, options) => HttpClientRequest.get(`/submissionTrackTemplates/${id}/policyTemplate`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplateRef": (id) => HttpClientRequest.get(`/submissionTrackTemplates/${id}/relationships/policyTemplate`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypes": (id, options) => HttpClientRequest.get(`/submissionTrackTemplates/${id}/bucketTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypesRef": (id) => HttpClientRequest.get(`/submissionTrackTemplates/${id}/relationships/bucketTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageTemplateControllerGetSubCoverageTemplateList": (options) => HttpClientRequest.get(`/subCoverageTemplate`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageTemplateControllerGetSubCoverageTemplateById": (id, options) => HttpClientRequest.get(`/subCoverageTemplate/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplate": (id, options) => HttpClientRequest.get(`/subCoverageTemplate/${id}/coverageTemplate`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplateRef": (id) => HttpClientRequest.get(`/subCoverageTemplate/${id}/relationships/coverageTemplate`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplates": (id, options) => HttpClientRequest.get(`/subCoverageTemplate/${id}/endorsementTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplatesRef": (id) => HttpClientRequest.get(`/subCoverageTemplate/${id}/relationships/endorsementTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEndorsementTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateList": (options) => HttpClientRequest.get(`/spaceTypeItemTemplate`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceTypeItemTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateById": (id, options) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceTypeItemTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceType": (id, options) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}/spaceType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceTypeRef": (id) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}/relationships/spaceType`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceType),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplate": (id, options) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}/itemTemplate`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplateRef": (id) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}/relationships/itemTemplate`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateList": (options) => HttpClientRequest.get(`/policyTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateById": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateAssetTypes": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateAssetTypesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplates": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/coverageGroupTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageGroupTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplatesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/coverageGroupTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageGroupTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateCoverageTemplates": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/coverageTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateCoverageTemplatesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/coverageTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplates": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/subCoverageTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplatesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/subCoverageTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateEndorsementTemplates": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/endorsementTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplateEndorsementTemplatesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/endorsementTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEndorsementTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplatePerils": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/perils`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PerilList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyTemplateControllerGetPolicyTemplatePerilsRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/perils`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTemplateControllerGetItemTemplateList": (options) => HttpClientRequest.get(`/itemTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTemplateControllerGetItemTemplateById": (id, options) => HttpClientRequest.get(`/itemTemplates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTemplateControllerGetItemTemplateItemType": (id, options) => HttpClientRequest.get(`/itemTemplates/${id}/itemType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTemplateControllerGetItemTemplateItemTypeRef": (id) => HttpClientRequest.get(`/itemTemplates/${id}/relationships/itemType`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemType),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTemplateControllerGetItemTemplateAssetTypes": (id, options) => HttpClientRequest.get(`/itemTemplates/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "ItemTemplateControllerGetItemTemplateAssetTypesRef": (id) => HttpClientRequest.get(`/itemTemplates/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplateList": (options) => HttpClientRequest.get(`/endorsementTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplateById": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplatePerils": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}/perils`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PerilList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplatePerilsRef": (id) => HttpClientRequest.get(`/endorsementTemplates/${id}/relationships/perils`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplates": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}/coverageTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplatesRef": (id) => HttpClientRequest.get(`/endorsementTemplates/${id}/relationships/coverageTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatess": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}/subCoverageTemplatess`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatessRef": (id) => HttpClientRequest.get(`/endorsementTemplates/${id}/relationships/subCoverageTemplatess`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplateBucketTypes": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}/bucketTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "EndorsementTemplateControllerGetEndorsementTemplateBucketTypesRef": (id) => HttpClientRequest.get(`/endorsementTemplates/${id}/relationships/bucketTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateList": (options) => HttpClientRequest.get(`/coverageTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateById": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateGroup": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/group`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableCoverageGroupTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateGroupRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/group`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedCoverageGroupTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplatePerils": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/perils`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PerilList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplatePerilsRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/perils`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPerilList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateBucketType": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/bucketType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketType),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateBucketTypeRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/bucketType`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketType),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplates": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/subCoverageTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SubCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplatesRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/subCoverageTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSubCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateEndorsementTemplates": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/endorsementTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EndorsementTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageTemplateControllerGetCoverageTemplateEndorsementTemplatesRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/endorsementTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEndorsementTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupTemplateControllerGetCoverageGroupTemplateList": (options) => HttpClientRequest.get(`/coverageGroupTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageGroupTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupTemplateControllerGetCoverageGroupTemplateById": (id, options) => HttpClientRequest.get(`/coverageGroupTemplates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageGroupTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplates": (id, options) => HttpClientRequest.get(`/coverageGroupTemplates/${id}/coverageTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplatesRef": (id) => HttpClientRequest.get(`/coverageGroupTemplates/${id}/relationships/coverageTemplates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCoverageTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateList": (options) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeTypeItemTemplateList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateById": (id, options) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeTypeItemTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeType": (id, options) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}/assetAttributeType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAttributeType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeTypeRef": (id) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}/relationships/assetAttributeType`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetAttributeType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplate": (id, options) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}/itemTemplate`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplateRef": (id) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}/relationships/itemTemplate`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemTemplate),
      orElse: unexpectedStatus
    }))
  ),
  "ProviderControllerGetProviderList": (options) => HttpClientRequest.get(`/providers`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProviderList),
      orElse: unexpectedStatus
    }))
  ),
  "ProviderControllerGetProviderById": (id, options) => HttpClientRequest.get(`/providers/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Provider),
      orElse: unexpectedStatus
    }))
  ),
  "PerilControllerGetPerilList": (options) => HttpClientRequest.get(`/perils`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PerilList),
      orElse: unexpectedStatus
    }))
  ),
  "PerilControllerGetPerilById": (id, options) => HttpClientRequest.get(`/perils/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Peril),
      orElse: unexpectedStatus
    }))
  ),
  "PerilControllerGetPerilAssetTypes": (id, options) => HttpClientRequest.get(`/perils/${id}/assetTypes`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "PerilControllerGetPerilAssetTypesRef": (id) => HttpClientRequest.get(`/perils/${id}/relationships/assetTypes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetTypeList),
      orElse: unexpectedStatus
    }))
  ),
  "DisasterControllerGetDisasterList": (options) => HttpClientRequest.get(`/disasters`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DisasterList),
      orElse: unexpectedStatus
    }))
  ),
  "DisasterControllerGetDisasterById": (id, options) => HttpClientRequest.get(`/disasters/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Disaster),
      orElse: unexpectedStatus
    }))
  ),
  "DisasterControllerGetDisasterIncidentType": (id, options) => HttpClientRequest.get(`/disasters/${id}/incidentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentType),
      orElse: unexpectedStatus
    }))
  ),
  "DisasterControllerGetDisasterIncidentTypeRef": (id) => HttpClientRequest.get(`/disasters/${id}/relationships/incidentType`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedIncidentType),
      orElse: unexpectedStatus
    }))
  ),
  "CurrencyControllerGetCurrencyList": (options) => HttpClientRequest.get(`/currencies`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CurrencyList),
      orElse: unexpectedStatus
    }))
  ),
  "CurrencyControllerGetCurrencyById": (id, options) => HttpClientRequest.get(`/currencies/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "CountryControllerGetCountryList": (options) => HttpClientRequest.get(`/countries`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CountryList),
      orElse: unexpectedStatus
    }))
  ),
  "CountryControllerGetCountryById": (id, options) => HttpClientRequest.get(`/countries/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Country),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyList": (options) => HttpClientRequest.get(`/warranties`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WarrantyList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerCreateWarranty": (options) => HttpClientRequest.post(`/warranties`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WarrantyControllerCreateWarranty201),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyById": (id, options) => HttpClientRequest.get(`/warranties/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Warranty),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerDeleteWarrantyById": (id, options) => HttpClientRequest.del(`/warranties/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerUpdateWarrantyById": (id, options) => HttpClientRequest.patch(`/warranties/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Warranty),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyDocumentType": (id, options) => HttpClientRequest.get(`/warranties/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyDocumentTypeRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyAccount": (id, options) => HttpClientRequest.get(`/warranties/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyAccountRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerPatchWarrantyAccountRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyFile": (id, options) => HttpClientRequest.get(`/warranties/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyFileRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerPatchWarrantyFileRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyAssets": (id, options) => HttpClientRequest.get(`/warranties/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyAssetsRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerPostWarrantyAssetsRef": (id, options) => HttpClientRequest.post(`/warranties/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerDeleteWarrantyAssetsRef": (id, options) => HttpClientRequest.del(`/warranties/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerPatchWarrantyAssetsRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantySpaces": (id, options) => HttpClientRequest.get(`/warranties/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantySpacesRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerPostWarrantySpacesRef": (id, options) => HttpClientRequest.post(`/warranties/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerDeleteWarrantySpacesRef": (id, options) => HttpClientRequest.del(`/warranties/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerPatchWarrantySpacesRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyProjects": (id, options) => HttpClientRequest.get(`/warranties/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerGetWarrantyProjectsRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerPostWarrantyProjectsRef": (id, options) => HttpClientRequest.post(`/warranties/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerDeleteWarrantyProjectsRef": (id, options) => HttpClientRequest.del(`/warranties/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "WarrantyControllerPatchWarrantyProjectsRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualList": (options) => HttpClientRequest.get(`/userManuals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserManualList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerCreateUserManual": (options) => HttpClientRequest.post(`/userManuals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserManualControllerCreateUserManual201),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualById": (id, options) => HttpClientRequest.get(`/userManuals/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserManual),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerDeleteUserManualById": (id, options) => HttpClientRequest.del(`/userManuals/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerUpdateUserManualById": (id, options) => HttpClientRequest.patch(`/userManuals/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UserManual),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualDocumentType": (id, options) => HttpClientRequest.get(`/userManuals/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualDocumentTypeRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualAccount": (id, options) => HttpClientRequest.get(`/userManuals/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualAccountRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerPatchUserManualAccountRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualFile": (id, options) => HttpClientRequest.get(`/userManuals/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualFileRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerPatchUserManualFileRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualAssets": (id, options) => HttpClientRequest.get(`/userManuals/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualAssetsRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerPostUserManualAssetsRef": (id, options) => HttpClientRequest.post(`/userManuals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerDeleteUserManualAssetsRef": (id, options) => HttpClientRequest.del(`/userManuals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerPatchUserManualAssetsRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualSpaces": (id, options) => HttpClientRequest.get(`/userManuals/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualSpacesRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerPostUserManualSpacesRef": (id, options) => HttpClientRequest.post(`/userManuals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerDeleteUserManualSpacesRef": (id, options) => HttpClientRequest.del(`/userManuals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerPatchUserManualSpacesRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualProjects": (id, options) => HttpClientRequest.get(`/userManuals/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerGetUserManualProjectsRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerPostUserManualProjectsRef": (id, options) => HttpClientRequest.post(`/userManuals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerDeleteUserManualProjectsRef": (id, options) => HttpClientRequest.del(`/userManuals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "UserManualControllerPatchUserManualProjectsRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossList": (options) => HttpClientRequest.get(`/scopesOfLoss`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ScopeOfLossList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerCreateScopeOfLoss": (options) => HttpClientRequest.post(`/scopesOfLoss`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ScopeOfLossControllerCreateScopeOfLoss201),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossById": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ScopeOfLoss),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerDeleteScopeOfLossById": (id, options) => HttpClientRequest.del(`/scopesOfLoss/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerUpdateScopeOfLossById": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ScopeOfLoss),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossDocumentType": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossDocumentTypeRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossAccount": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossAccountRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerPatchScopeOfLossAccountRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossFile": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossFileRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerPatchScopeOfLossFileRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossAssets": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossAssetsRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerPostScopeOfLossAssetsRef": (id, options) => HttpClientRequest.post(`/scopesOfLoss/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerDeleteScopeOfLossAssetsRef": (id, options) => HttpClientRequest.del(`/scopesOfLoss/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerPatchScopeOfLossAssetsRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossSpaces": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossSpacesRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerPostScopeOfLossSpacesRef": (id, options) => HttpClientRequest.post(`/scopesOfLoss/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerDeleteScopeOfLossSpacesRef": (id, options) => HttpClientRequest.del(`/scopesOfLoss/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerPatchScopeOfLossSpacesRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossProjects": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerGetScopeOfLossProjectsRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerPostScopeOfLossProjectsRef": (id, options) => HttpClientRequest.post(`/scopesOfLoss/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerDeleteScopeOfLossProjectsRef": (id, options) => HttpClientRequest.del(`/scopesOfLoss/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ScopeOfLossControllerPatchScopeOfLossProjectsRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollList": (options) => HttpClientRequest.get(`/rentRolls`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RentRollList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerCreateRentRoll": (options) => HttpClientRequest.post(`/rentRolls`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RentRollControllerCreateRentRoll201),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollById": (id, options) => HttpClientRequest.get(`/rentRolls/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RentRoll),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerDeleteRentRollById": (id, options) => HttpClientRequest.del(`/rentRolls/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerUpdateRentRollById": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RentRoll),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollDocumentType": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollDocumentTypeRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollAccount": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollAccountRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerPatchRentRollAccountRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollFile": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollFileRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerPatchRentRollFileRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollAssets": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollAssetsRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerPostRentRollAssetsRef": (id, options) => HttpClientRequest.post(`/rentRolls/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerDeleteRentRollAssetsRef": (id, options) => HttpClientRequest.del(`/rentRolls/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerPatchRentRollAssetsRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollSpaces": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollSpacesRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerPostRentRollSpacesRef": (id, options) => HttpClientRequest.post(`/rentRolls/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerDeleteRentRollSpacesRef": (id, options) => HttpClientRequest.del(`/rentRolls/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerPatchRentRollSpacesRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollProjects": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerGetRentRollProjectsRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerPostRentRollProjectsRef": (id, options) => HttpClientRequest.post(`/rentRolls/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerDeleteRentRollProjectsRef": (id, options) => HttpClientRequest.del(`/rentRolls/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "RentRollControllerPatchRentRollProjectsRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecList": (options) => HttpClientRequest.get(`/productSpecs`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProductSpecList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerCreateProductSpec": (options) => HttpClientRequest.post(`/productSpecs`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProductSpecControllerCreateProductSpec201),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecById": (id, options) => HttpClientRequest.get(`/productSpecs/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProductSpec),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerDeleteProductSpecById": (id, options) => HttpClientRequest.del(`/productSpecs/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerUpdateProductSpecById": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProductSpec),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecDocumentType": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecDocumentTypeRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecAccount": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecAccountRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerPatchProductSpecAccountRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecFile": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecFileRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerPatchProductSpecFileRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecAssets": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecAssetsRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerPostProductSpecAssetsRef": (id, options) => HttpClientRequest.post(`/productSpecs/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerDeleteProductSpecAssetsRef": (id, options) => HttpClientRequest.del(`/productSpecs/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerPatchProductSpecAssetsRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecSpaces": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecSpacesRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerPostProductSpecSpacesRef": (id, options) => HttpClientRequest.post(`/productSpecs/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerDeleteProductSpecSpacesRef": (id, options) => HttpClientRequest.del(`/productSpecs/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerPatchProductSpecSpacesRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecProjects": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerGetProductSpecProjectsRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerPostProductSpecProjectsRef": (id, options) => HttpClientRequest.post(`/productSpecs/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerDeleteProductSpecProjectsRef": (id, options) => HttpClientRequest.del(`/productSpecs/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ProductSpecControllerPatchProductSpecProjectsRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketList": (options) => HttpClientRequest.get(`/policyJackets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyJacketList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerCreatePolicyJacket": (options) => HttpClientRequest.post(`/policyJackets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyJacketControllerCreatePolicyJacket201),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketById": (id, options) => HttpClientRequest.get(`/policyJackets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyJacket),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerDeletePolicyJacketById": (id, options) => HttpClientRequest.del(`/policyJackets/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerUpdatePolicyJacketById": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PolicyJacket),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketDocumentType": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketDocumentTypeRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketAccount": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketAccountRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerPatchPolicyJacketAccountRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketFile": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketFileRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerPatchPolicyJacketFileRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketAssets": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketAssetsRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerPostPolicyJacketAssetsRef": (id, options) => HttpClientRequest.post(`/policyJackets/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerDeletePolicyJacketAssetsRef": (id, options) => HttpClientRequest.del(`/policyJackets/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerPatchPolicyJacketAssetsRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketSpaces": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketSpacesRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerPostPolicyJacketSpacesRef": (id, options) => HttpClientRequest.post(`/policyJackets/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerDeletePolicyJacketSpacesRef": (id, options) => HttpClientRequest.del(`/policyJackets/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerPatchPolicyJacketSpacesRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketProjects": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerGetPolicyJacketProjectsRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerPostPolicyJacketProjectsRef": (id, options) => HttpClientRequest.post(`/policyJackets/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerDeletePolicyJacketProjectsRef": (id, options) => HttpClientRequest.del(`/policyJackets/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PolicyJacketControllerPatchPolicyJacketProjectsRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportList": (options) => HttpClientRequest.get(`/policeReports`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PoliceReportList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerCreatePoliceReport": (options) => HttpClientRequest.post(`/policeReports`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PoliceReportControllerCreatePoliceReport201),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportById": (id, options) => HttpClientRequest.get(`/policeReports/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PoliceReport),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerDeletePoliceReportById": (id, options) => HttpClientRequest.del(`/policeReports/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerUpdatePoliceReportById": (id, options) => HttpClientRequest.patch(`/policeReports/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PoliceReport),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportDocumentType": (id, options) => HttpClientRequest.get(`/policeReports/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportDocumentTypeRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportAccount": (id, options) => HttpClientRequest.get(`/policeReports/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportAccountRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerPatchPoliceReportAccountRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportFile": (id, options) => HttpClientRequest.get(`/policeReports/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportFileRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerPatchPoliceReportFileRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportAssets": (id, options) => HttpClientRequest.get(`/policeReports/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportAssetsRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerPostPoliceReportAssetsRef": (id, options) => HttpClientRequest.post(`/policeReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerDeletePoliceReportAssetsRef": (id, options) => HttpClientRequest.del(`/policeReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerPatchPoliceReportAssetsRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportSpaces": (id, options) => HttpClientRequest.get(`/policeReports/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportSpacesRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerPostPoliceReportSpacesRef": (id, options) => HttpClientRequest.post(`/policeReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerDeletePoliceReportSpacesRef": (id, options) => HttpClientRequest.del(`/policeReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerPatchPoliceReportSpacesRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportProjects": (id, options) => HttpClientRequest.get(`/policeReports/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerGetPoliceReportProjectsRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerPostPoliceReportProjectsRef": (id, options) => HttpClientRequest.post(`/policeReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerDeletePoliceReportProjectsRef": (id, options) => HttpClientRequest.del(`/policeReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PoliceReportControllerPatchPoliceReportProjectsRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitList": (options) => HttpClientRequest.get(`/permits`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PermitList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerCreatePermit": (options) => HttpClientRequest.post(`/permits`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PermitControllerCreatePermit201),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitById": (id, options) => HttpClientRequest.get(`/permits/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Permit),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerDeletePermitById": (id, options) => HttpClientRequest.del(`/permits/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerUpdatePermitById": (id, options) => HttpClientRequest.patch(`/permits/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Permit),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitDocumentType": (id, options) => HttpClientRequest.get(`/permits/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitDocumentTypeRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitAccount": (id, options) => HttpClientRequest.get(`/permits/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitAccountRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerPatchPermitAccountRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitFile": (id, options) => HttpClientRequest.get(`/permits/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitFileRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerPatchPermitFileRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitAssets": (id, options) => HttpClientRequest.get(`/permits/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitAssetsRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerPostPermitAssetsRef": (id, options) => HttpClientRequest.post(`/permits/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerDeletePermitAssetsRef": (id, options) => HttpClientRequest.del(`/permits/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerPatchPermitAssetsRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitSpaces": (id, options) => HttpClientRequest.get(`/permits/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitSpacesRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerPostPermitSpacesRef": (id, options) => HttpClientRequest.post(`/permits/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerDeletePermitSpacesRef": (id, options) => HttpClientRequest.del(`/permits/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerPatchPermitSpacesRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitProjects": (id, options) => HttpClientRequest.get(`/permits/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerGetPermitProjectsRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerPostPermitProjectsRef": (id, options) => HttpClientRequest.post(`/permits/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerDeletePermitProjectsRef": (id, options) => HttpClientRequest.del(`/permits/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PermitControllerPatchPermitProjectsRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentList": (options) => HttpClientRequest.get(`/payments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerCreatePayment": (options) => HttpClientRequest.post(`/payments`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentControllerCreatePayment201),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentById": (id, options) => HttpClientRequest.get(`/payments/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Payment),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerDeletePaymentById": (id, options) => HttpClientRequest.del(`/payments/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerUpdatePaymentById": (id, options) => HttpClientRequest.patch(`/payments/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Payment),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentDocumentType": (id, options) => HttpClientRequest.get(`/payments/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentDocumentTypeRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentAccount": (id, options) => HttpClientRequest.get(`/payments/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentAccountRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPatchPaymentAccountRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentFile": (id, options) => HttpClientRequest.get(`/payments/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentFileRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPatchPaymentFileRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentAssets": (id, options) => HttpClientRequest.get(`/payments/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentAssetsRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPostPaymentAssetsRef": (id, options) => HttpClientRequest.post(`/payments/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerDeletePaymentAssetsRef": (id, options) => HttpClientRequest.del(`/payments/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPatchPaymentAssetsRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentSpaces": (id, options) => HttpClientRequest.get(`/payments/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentSpacesRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPostPaymentSpacesRef": (id, options) => HttpClientRequest.post(`/payments/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerDeletePaymentSpacesRef": (id, options) => HttpClientRequest.del(`/payments/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPatchPaymentSpacesRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentProjects": (id, options) => HttpClientRequest.get(`/payments/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentProjectsRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPostPaymentProjectsRef": (id, options) => HttpClientRequest.post(`/payments/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerDeletePaymentProjectsRef": (id, options) => HttpClientRequest.del(`/payments/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPatchPaymentProjectsRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentCurrency": (id, options) => HttpClientRequest.get(`/payments/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentCurrencyRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPatchPaymentCurrencyRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentStats": (id, options) => HttpClientRequest.get(`/payments/${id}/stats`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemizableFinancialDocumentStats),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentStatsRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/stats`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemizableFinancialDocumentStats),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentVendor": (id, options) => HttpClientRequest.get(`/payments/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentVendorRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPatchPaymentVendorRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentService": (id, options) => HttpClientRequest.get(`/payments/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableService),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentServiceRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerPatchPaymentServiceRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentLines": (id, options) => HttpClientRequest.get(`/payments/${id}/lines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentLineList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentLinesRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/lines`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedPaymentLineList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentLineSubjects": (id, options) => HttpClientRequest.get(`/payments/${id}/lineSubjects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentControllerGetPaymentLineSubjectsRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/lineSubjects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportList": (options) => HttpClientRequest.get(`/paramedicReports`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ParamedicReportList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerCreateParamedicReport": (options) => HttpClientRequest.post(`/paramedicReports`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ParamedicReportControllerCreateParamedicReport201),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportById": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ParamedicReport),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerDeleteParamedicReportById": (id, options) => HttpClientRequest.del(`/paramedicReports/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerUpdateParamedicReportById": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ParamedicReport),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportDocumentType": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportDocumentTypeRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportAccount": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportAccountRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerPatchParamedicReportAccountRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportFile": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportFileRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerPatchParamedicReportFileRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportAssets": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportAssetsRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerPostParamedicReportAssetsRef": (id, options) => HttpClientRequest.post(`/paramedicReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerDeleteParamedicReportAssetsRef": (id, options) => HttpClientRequest.del(`/paramedicReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerPatchParamedicReportAssetsRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportSpaces": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportSpacesRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerPostParamedicReportSpacesRef": (id, options) => HttpClientRequest.post(`/paramedicReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerDeleteParamedicReportSpacesRef": (id, options) => HttpClientRequest.del(`/paramedicReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerPatchParamedicReportSpacesRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportProjects": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerGetParamedicReportProjectsRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerPostParamedicReportProjectsRef": (id, options) => HttpClientRequest.post(`/paramedicReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerDeleteParamedicReportProjectsRef": (id, options) => HttpClientRequest.del(`/paramedicReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ParamedicReportControllerPatchParamedicReportProjectsRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceList": (options) => HttpClientRequest.get(`/invoices`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerCreateInvoice": (options) => HttpClientRequest.post(`/invoices`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceControllerCreateInvoice201),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceById": (id, options) => HttpClientRequest.get(`/invoices/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Invoice),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerDeleteInvoiceById": (id, options) => HttpClientRequest.del(`/invoices/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerUpdateInvoiceById": (id, options) => HttpClientRequest.patch(`/invoices/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Invoice),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceDocumentType": (id, options) => HttpClientRequest.get(`/invoices/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceDocumentTypeRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceAccount": (id, options) => HttpClientRequest.get(`/invoices/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceAccountRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPatchInvoiceAccountRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceFile": (id, options) => HttpClientRequest.get(`/invoices/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceFileRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPatchInvoiceFileRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceAssets": (id, options) => HttpClientRequest.get(`/invoices/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceAssetsRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPostInvoiceAssetsRef": (id, options) => HttpClientRequest.post(`/invoices/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerDeleteInvoiceAssetsRef": (id, options) => HttpClientRequest.del(`/invoices/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPatchInvoiceAssetsRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceSpaces": (id, options) => HttpClientRequest.get(`/invoices/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceSpacesRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPostInvoiceSpacesRef": (id, options) => HttpClientRequest.post(`/invoices/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerDeleteInvoiceSpacesRef": (id, options) => HttpClientRequest.del(`/invoices/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPatchInvoiceSpacesRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceProjects": (id, options) => HttpClientRequest.get(`/invoices/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceProjectsRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPostInvoiceProjectsRef": (id, options) => HttpClientRequest.post(`/invoices/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerDeleteInvoiceProjectsRef": (id, options) => HttpClientRequest.del(`/invoices/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPatchInvoiceProjectsRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceCurrency": (id, options) => HttpClientRequest.get(`/invoices/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceCurrencyRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPatchInvoiceCurrencyRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceStats": (id, options) => HttpClientRequest.get(`/invoices/${id}/stats`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemizableFinancialDocumentStats),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceStatsRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/stats`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemizableFinancialDocumentStats),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceVendor": (id, options) => HttpClientRequest.get(`/invoices/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceVendorRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPatchInvoiceVendorRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceService": (id, options) => HttpClientRequest.get(`/invoices/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableService),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceServiceRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerPatchInvoiceServiceRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceLines": (id, options) => HttpClientRequest.get(`/invoices/${id}/lines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceLineList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceLinesRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/lines`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedInvoiceLineList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceLineSubjects": (id, options) => HttpClientRequest.get(`/invoices/${id}/lineSubjects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceControllerGetInvoiceLineSubjectsRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/lineSubjects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportList": (options) => HttpClientRequest.get(`/incidentReports`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentReportList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerCreateIncidentReport": (options) => HttpClientRequest.post(`/incidentReports`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentReportControllerCreateIncidentReport201),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportById": (id, options) => HttpClientRequest.get(`/incidentReports/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentReport),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerDeleteIncidentReportById": (id, options) => HttpClientRequest.del(`/incidentReports/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerUpdateIncidentReportById": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IncidentReport),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportDocumentType": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportDocumentTypeRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportAccount": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportAccountRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerPatchIncidentReportAccountRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportFile": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportFileRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerPatchIncidentReportFileRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportAssets": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportAssetsRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerPostIncidentReportAssetsRef": (id, options) => HttpClientRequest.post(`/incidentReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerDeleteIncidentReportAssetsRef": (id, options) => HttpClientRequest.del(`/incidentReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerPatchIncidentReportAssetsRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportSpaces": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportSpacesRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerPostIncidentReportSpacesRef": (id, options) => HttpClientRequest.post(`/incidentReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerDeleteIncidentReportSpacesRef": (id, options) => HttpClientRequest.del(`/incidentReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerPatchIncidentReportSpacesRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportProjects": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerGetIncidentReportProjectsRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerPostIncidentReportProjectsRef": (id, options) => HttpClientRequest.post(`/incidentReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerDeleteIncidentReportProjectsRef": (id, options) => HttpClientRequest.del(`/incidentReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "IncidentReportControllerPatchIncidentReportProjectsRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingList": (options) => HttpClientRequest.get(`/fundings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerCreateFunding": (options) => HttpClientRequest.post(`/fundings`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingControllerCreateFunding201),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingById": (id, options) => HttpClientRequest.get(`/fundings/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Funding),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerDeleteFundingById": (id) => HttpClientRequest.del(`/fundings/${id}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerUpdateFundingById": (id, options) => HttpClientRequest.patch(`/fundings/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Funding),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingDocumentType": (id, options) => HttpClientRequest.get(`/fundings/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingDocumentTypeRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/documentType`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingAccount": (id, options) => HttpClientRequest.get(`/fundings/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingAccountRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/account`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPatchFundingAccountRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/account`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingFile": (id, options) => HttpClientRequest.get(`/fundings/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingFileRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/file`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPatchFundingFileRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/file`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingAssets": (id, options) => HttpClientRequest.get(`/fundings/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingAssetsRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/assets`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPostFundingAssetsRef": (id, options) => HttpClientRequest.post(`/fundings/${id}/relationships/assets`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerDeleteFundingAssetsRef": (id, options) => HttpClientRequest.del(`/fundings/${id}/relationships/assets`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPatchFundingAssetsRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/assets`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingSpaces": (id, options) => HttpClientRequest.get(`/fundings/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingSpacesRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/spaces`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPostFundingSpacesRef": (id, options) => HttpClientRequest.post(`/fundings/${id}/relationships/spaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerDeleteFundingSpacesRef": (id, options) => HttpClientRequest.del(`/fundings/${id}/relationships/spaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPatchFundingSpacesRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/spaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingProjects": (id, options) => HttpClientRequest.get(`/fundings/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingProjectsRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/projects`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPostFundingProjectsRef": (id, options) => HttpClientRequest.post(`/fundings/${id}/relationships/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerDeleteFundingProjectsRef": (id, options) => HttpClientRequest.del(`/fundings/${id}/relationships/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPatchFundingProjectsRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingSource": (id, options) => HttpClientRequest.get(`/fundings/${id}/source`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingSourceRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/source`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerPatchFundingSourceRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/source`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedFundingSource),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingAllocations": (id, options) => HttpClientRequest.get(`/fundings/${id}/allocations`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BucketFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "FundingControllerGetFundingAllocationsRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/allocations`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBucketFundingList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateList": (options) => HttpClientRequest.get(`/estimates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerCreateEstimate": (options) => HttpClientRequest.post(`/estimates`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateControllerCreateEstimate201),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateById": (id, options) => HttpClientRequest.get(`/estimates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Estimate),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerDeleteEstimateById": (id, options) => HttpClientRequest.del(`/estimates/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerUpdateEstimateById": (id, options) => HttpClientRequest.patch(`/estimates/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Estimate),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateDocumentType": (id, options) => HttpClientRequest.get(`/estimates/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateDocumentTypeRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateAccount": (id, options) => HttpClientRequest.get(`/estimates/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateAccountRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPatchEstimateAccountRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateFile": (id, options) => HttpClientRequest.get(`/estimates/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateFileRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPatchEstimateFileRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateAssets": (id, options) => HttpClientRequest.get(`/estimates/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateAssetsRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPostEstimateAssetsRef": (id, options) => HttpClientRequest.post(`/estimates/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerDeleteEstimateAssetsRef": (id, options) => HttpClientRequest.del(`/estimates/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPatchEstimateAssetsRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateSpaces": (id, options) => HttpClientRequest.get(`/estimates/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateSpacesRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPostEstimateSpacesRef": (id, options) => HttpClientRequest.post(`/estimates/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerDeleteEstimateSpacesRef": (id, options) => HttpClientRequest.del(`/estimates/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPatchEstimateSpacesRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateProjects": (id, options) => HttpClientRequest.get(`/estimates/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateProjectsRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPostEstimateProjectsRef": (id, options) => HttpClientRequest.post(`/estimates/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerDeleteEstimateProjectsRef": (id, options) => HttpClientRequest.del(`/estimates/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPatchEstimateProjectsRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateCurrency": (id, options) => HttpClientRequest.get(`/estimates/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateCurrencyRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPatchEstimateCurrencyRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateStats": (id, options) => HttpClientRequest.get(`/estimates/${id}/stats`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemizableFinancialDocumentStats),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateStatsRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/stats`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemizableFinancialDocumentStats),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateVendor": (id, options) => HttpClientRequest.get(`/estimates/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateVendorRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPatchEstimateVendorRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateService": (id, options) => HttpClientRequest.get(`/estimates/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableService),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateServiceRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerPatchEstimateServiceRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateLines": (id, options) => HttpClientRequest.get(`/estimates/${id}/lines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateLineList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateLinesRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/lines`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimateLineList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateLineSubjects": (id, options) => HttpClientRequest.get(`/estimates/${id}/lineSubjects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateLineSubjectsRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/lineSubjects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateChangeOrders": (id, options) => HttpClientRequest.get(`/estimates/${id}/changeOrders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateControllerGetEstimateChangeOrdersRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentList": (options) => HttpClientRequest.get(`/documents`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerCreateDocument": (options) => HttpClientRequest.post(`/documents`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentControllerCreateDocument201),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentById": (id, options) => HttpClientRequest.get(`/documents/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Document),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerDeleteDocumentById": (id, options) => HttpClientRequest.del(`/documents/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerUpdateDocumentById": (id, options) => HttpClientRequest.patch(`/documents/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Document),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentDocumentType": (id, options) => HttpClientRequest.get(`/documents/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentDocumentTypeRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentAccount": (id, options) => HttpClientRequest.get(`/documents/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentAccountRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerPatchDocumentAccountRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentFile": (id, options) => HttpClientRequest.get(`/documents/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentFileRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerPatchDocumentFileRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentAssets": (id, options) => HttpClientRequest.get(`/documents/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentAssetsRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerPostDocumentAssetsRef": (id, options) => HttpClientRequest.post(`/documents/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerDeleteDocumentAssetsRef": (id, options) => HttpClientRequest.del(`/documents/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerPatchDocumentAssetsRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentSpaces": (id, options) => HttpClientRequest.get(`/documents/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentSpacesRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerPostDocumentSpacesRef": (id, options) => HttpClientRequest.post(`/documents/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerDeleteDocumentSpacesRef": (id, options) => HttpClientRequest.del(`/documents/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerPatchDocumentSpacesRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentProjects": (id, options) => HttpClientRequest.get(`/documents/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerGetDocumentProjectsRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerPostDocumentProjectsRef": (id, options) => HttpClientRequest.post(`/documents/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerDeleteDocumentProjectsRef": (id, options) => HttpClientRequest.del(`/documents/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DocumentControllerPatchDocumentProjectsRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkList": (options) => HttpClientRequest.get(`/deliveryPaperworks`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeliveryPaperworkList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerCreateDeliveryPaperwork": (options) => HttpClientRequest.post(`/deliveryPaperworks`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeliveryPaperworkControllerCreateDeliveryPaperwork201),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkById": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeliveryPaperwork),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerDeleteDeliveryPaperworkById": (id, options) => HttpClientRequest.del(`/deliveryPaperworks/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerUpdateDeliveryPaperworkById": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeliveryPaperwork),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkDocumentType": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkAccount": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkAccountRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerPatchDeliveryPaperworkAccountRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkFile": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkFileRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerPatchDeliveryPaperworkFileRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkAssets": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkAssetsRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRef": (id, options) => HttpClientRequest.post(`/deliveryPaperworks/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRef": (id, options) => HttpClientRequest.del(`/deliveryPaperworks/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerPatchDeliveryPaperworkAssetsRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkSpaces": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkSpacesRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRef": (id, options) => HttpClientRequest.post(`/deliveryPaperworks/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRef": (id, options) => HttpClientRequest.del(`/deliveryPaperworks/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerPatchDeliveryPaperworkSpacesRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkProjects": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerGetDeliveryPaperworkProjectsRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRef": (id, options) => HttpClientRequest.post(`/deliveryPaperworks/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRef": (id, options) => HttpClientRequest.del(`/deliveryPaperworks/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeliveryPaperworkControllerPatchDeliveryPaperworkProjectsRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedList": (options) => HttpClientRequest.get(`/deeds`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeedList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerCreateDeed": (options) => HttpClientRequest.post(`/deeds`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeedControllerCreateDeed201),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedById": (id, options) => HttpClientRequest.get(`/deeds/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Deed),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerDeleteDeedById": (id, options) => HttpClientRequest.del(`/deeds/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerUpdateDeedById": (id, options) => HttpClientRequest.patch(`/deeds/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Deed),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedDocumentType": (id, options) => HttpClientRequest.get(`/deeds/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedDocumentTypeRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedAccount": (id, options) => HttpClientRequest.get(`/deeds/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedAccountRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerPatchDeedAccountRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedFile": (id, options) => HttpClientRequest.get(`/deeds/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedFileRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerPatchDeedFileRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedAssets": (id, options) => HttpClientRequest.get(`/deeds/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedAssetsRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerPostDeedAssetsRef": (id, options) => HttpClientRequest.post(`/deeds/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerDeleteDeedAssetsRef": (id, options) => HttpClientRequest.del(`/deeds/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerPatchDeedAssetsRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedSpaces": (id, options) => HttpClientRequest.get(`/deeds/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedSpacesRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerPostDeedSpacesRef": (id, options) => HttpClientRequest.post(`/deeds/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerDeleteDeedSpacesRef": (id, options) => HttpClientRequest.del(`/deeds/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerPatchDeedSpacesRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedProjects": (id, options) => HttpClientRequest.get(`/deeds/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerGetDeedProjectsRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerPostDeedProjectsRef": (id, options) => HttpClientRequest.post(`/deeds/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerDeleteDeedProjectsRef": (id, options) => HttpClientRequest.del(`/deeds/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeedControllerPatchDeedProjectsRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageList": (options) => HttpClientRequest.get(`/declarationsPages`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeclarationsPageList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerCreateDeclarationsPage": (options) => HttpClientRequest.post(`/declarationsPages`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeclarationsPageControllerCreateDeclarationsPage201),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageById": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeclarationsPage),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerDeleteDeclarationsPageById": (id, options) => HttpClientRequest.del(`/declarationsPages/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerUpdateDeclarationsPageById": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeclarationsPage),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageDocumentType": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageDocumentTypeRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageAccount": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageAccountRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerPatchDeclarationsPageAccountRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageFile": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageFileRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerPatchDeclarationsPageFileRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageAssets": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageAssetsRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerPostDeclarationsPageAssetsRef": (id, options) => HttpClientRequest.post(`/declarationsPages/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerDeleteDeclarationsPageAssetsRef": (id, options) => HttpClientRequest.del(`/declarationsPages/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerPatchDeclarationsPageAssetsRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageSpaces": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageSpacesRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerPostDeclarationsPageSpacesRef": (id, options) => HttpClientRequest.post(`/declarationsPages/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerDeleteDeclarationsPageSpacesRef": (id, options) => HttpClientRequest.del(`/declarationsPages/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerPatchDeclarationsPageSpacesRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageProjects": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerGetDeclarationsPageProjectsRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerPostDeclarationsPageProjectsRef": (id, options) => HttpClientRequest.post(`/declarationsPages/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerDeleteDeclarationsPageProjectsRef": (id, options) => HttpClientRequest.del(`/declarationsPages/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "DeclarationsPageControllerPatchDeclarationsPageProjectsRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractList": (options) => HttpClientRequest.get(`/contracts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ContractList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerCreateContract": (options) => HttpClientRequest.post(`/contracts`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ContractControllerCreateContract201),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractById": (id, options) => HttpClientRequest.get(`/contracts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Contract),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerDeleteContractById": (id, options) => HttpClientRequest.del(`/contracts/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerUpdateContractById": (id, options) => HttpClientRequest.patch(`/contracts/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Contract),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractDocumentType": (id, options) => HttpClientRequest.get(`/contracts/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractDocumentTypeRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractAccount": (id, options) => HttpClientRequest.get(`/contracts/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractAccountRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerPatchContractAccountRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractFile": (id, options) => HttpClientRequest.get(`/contracts/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractFileRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerPatchContractFileRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractAssets": (id, options) => HttpClientRequest.get(`/contracts/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractAssetsRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerPostContractAssetsRef": (id, options) => HttpClientRequest.post(`/contracts/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerDeleteContractAssetsRef": (id, options) => HttpClientRequest.del(`/contracts/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerPatchContractAssetsRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractSpaces": (id, options) => HttpClientRequest.get(`/contracts/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractSpacesRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerPostContractSpacesRef": (id, options) => HttpClientRequest.post(`/contracts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerDeleteContractSpacesRef": (id, options) => HttpClientRequest.del(`/contracts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerPatchContractSpacesRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractProjects": (id, options) => HttpClientRequest.get(`/contracts/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerGetContractProjectsRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerPostContractProjectsRef": (id, options) => HttpClientRequest.post(`/contracts/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerDeleteContractProjectsRef": (id, options) => HttpClientRequest.del(`/contracts/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ContractControllerPatchContractProjectsRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderList": (options) => HttpClientRequest.get(`/changeOrders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerCreateChangeOrder": (options) => HttpClientRequest.post(`/changeOrders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderControllerCreateChangeOrder201),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderById": (id, options) => HttpClientRequest.get(`/changeOrders/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrder),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerDeleteChangeOrderById": (id, options) => HttpClientRequest.del(`/changeOrders/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerUpdateChangeOrderById": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrder),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderDocumentType": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderDocumentTypeRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderAccount": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderAccountRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPatchChangeOrderAccountRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderFile": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderFileRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPatchChangeOrderFileRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderAssets": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderAssetsRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPostChangeOrderAssetsRef": (id, options) => HttpClientRequest.post(`/changeOrders/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerDeleteChangeOrderAssetsRef": (id, options) => HttpClientRequest.del(`/changeOrders/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPatchChangeOrderAssetsRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderSpaces": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderSpacesRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPostChangeOrderSpacesRef": (id, options) => HttpClientRequest.post(`/changeOrders/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerDeleteChangeOrderSpacesRef": (id, options) => HttpClientRequest.del(`/changeOrders/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPatchChangeOrderSpacesRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderProjects": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderProjectsRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPostChangeOrderProjectsRef": (id, options) => HttpClientRequest.post(`/changeOrders/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerDeleteChangeOrderProjectsRef": (id, options) => HttpClientRequest.del(`/changeOrders/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPatchChangeOrderProjectsRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderCurrency": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderCurrencyRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPatchChangeOrderCurrencyRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderStats": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/stats`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ItemizableFinancialDocumentStats),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderStatsRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/stats`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedItemizableFinancialDocumentStats),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderEstimate": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/estimate`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Estimate),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderEstimateRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/estimate`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimate),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerPatchChangeOrderEstimateRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/estimate`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimate),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderVendor": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderVendorRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderService": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Service),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderServiceRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderLines": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/lines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderLinesRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/lines`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderLineSubjects": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/lineSubjects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderControllerGetChangeOrderLineSubjectsRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/lineSubjects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySourceList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintList": (options) => HttpClientRequest.get(`/blueprints`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BlueprintList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerCreateBlueprint": (options) => HttpClientRequest.post(`/blueprints`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BlueprintControllerCreateBlueprint201),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintById": (id, options) => HttpClientRequest.get(`/blueprints/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Blueprint),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerDeleteBlueprintById": (id, options) => HttpClientRequest.del(`/blueprints/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerUpdateBlueprintById": (id, options) => HttpClientRequest.patch(`/blueprints/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Blueprint),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintDocumentType": (id, options) => HttpClientRequest.get(`/blueprints/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintDocumentTypeRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintAccount": (id, options) => HttpClientRequest.get(`/blueprints/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintAccountRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerPatchBlueprintAccountRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintFile": (id, options) => HttpClientRequest.get(`/blueprints/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintFileRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerPatchBlueprintFileRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintAssets": (id, options) => HttpClientRequest.get(`/blueprints/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintAssetsRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerPostBlueprintAssetsRef": (id, options) => HttpClientRequest.post(`/blueprints/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerDeleteBlueprintAssetsRef": (id, options) => HttpClientRequest.del(`/blueprints/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerPatchBlueprintAssetsRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintSpaces": (id, options) => HttpClientRequest.get(`/blueprints/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintSpacesRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerPostBlueprintSpacesRef": (id, options) => HttpClientRequest.post(`/blueprints/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerDeleteBlueprintSpacesRef": (id, options) => HttpClientRequest.del(`/blueprints/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerPatchBlueprintSpacesRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintProjects": (id, options) => HttpClientRequest.get(`/blueprints/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerGetBlueprintProjectsRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerPostBlueprintProjectsRef": (id, options) => HttpClientRequest.post(`/blueprints/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerDeleteBlueprintProjectsRef": (id, options) => HttpClientRequest.del(`/blueprints/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "BlueprintControllerPatchBlueprintProjectsRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalList": (options) => HttpClientRequest.get(`/assetAppraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerCreateAssetAppraisal": (options) => HttpClientRequest.post(`/assetAppraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAppraisalControllerCreateAssetAppraisal201),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalById": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerDeleteAssetAppraisalById": (id, options) => HttpClientRequest.del(`/assetAppraisals/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerUpdateAssetAppraisalById": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalDocumentType": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalDocumentTypeRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalAccount": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalAccountRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPatchAssetAppraisalAccountRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalFile": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalFileRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPatchAssetAppraisalFileRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalAssets": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalAssetsRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPostAssetAppraisalAssetsRef": (id, options) => HttpClientRequest.post(`/assetAppraisals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerDeleteAssetAppraisalAssetsRef": (id, options) => HttpClientRequest.del(`/assetAppraisals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPatchAssetAppraisalAssetsRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalSpaces": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalSpacesRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPostAssetAppraisalSpacesRef": (id, options) => HttpClientRequest.post(`/assetAppraisals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerDeleteAssetAppraisalSpacesRef": (id, options) => HttpClientRequest.del(`/assetAppraisals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPatchAssetAppraisalSpacesRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalProjects": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalProjectsRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPostAssetAppraisalProjectsRef": (id, options) => HttpClientRequest.post(`/assetAppraisals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerDeleteAssetAppraisalProjectsRef": (id, options) => HttpClientRequest.del(`/assetAppraisals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPatchAssetAppraisalProjectsRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalCurrency": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalCurrencyRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPatchAssetAppraisalCurrencyRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalVendor": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalVendorRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPatchAssetAppraisalVendorRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalAsset": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/asset`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Asset),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerGetAssetAppraisalAssetRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "AssetAppraisalControllerPatchAssetAppraisalAssetRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/asset`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAsset),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalList": (options) => HttpClientRequest.get(`/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppraisalList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerCreateAppraisal": (options) => HttpClientRequest.post(`/appraisals`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppraisalControllerCreateAppraisal201),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalById": (id, options) => HttpClientRequest.get(`/appraisals/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Appraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerDeleteAppraisalById": (id, options) => HttpClientRequest.del(`/appraisals/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerUpdateAppraisalById": (id, options) => HttpClientRequest.patch(`/appraisals/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Appraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalDocumentType": (id, options) => HttpClientRequest.get(`/appraisals/${id}/documentType`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalDocumentTypeRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/documentType`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedDocumentType),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalAccount": (id, options) => HttpClientRequest.get(`/appraisals/${id}/account`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Account),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalAccountRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPatchAppraisalAccountRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/account`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccount),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalFile": (id, options) => HttpClientRequest.get(`/appraisals/${id}/file`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableFile),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalFileRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPatchAppraisalFileRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/file`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedFile),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalAssets": (id, options) => HttpClientRequest.get(`/appraisals/${id}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalAssetsRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPostAppraisalAssetsRef": (id, options) => HttpClientRequest.post(`/appraisals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerDeleteAppraisalAssetsRef": (id, options) => HttpClientRequest.del(`/appraisals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPatchAppraisalAssetsRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/assets`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAssetList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalSpaces": (id, options) => HttpClientRequest.get(`/appraisals/${id}/spaces`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalSpacesRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPostAppraisalSpacesRef": (id, options) => HttpClientRequest.post(`/appraisals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerDeleteAppraisalSpacesRef": (id, options) => HttpClientRequest.del(`/appraisals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPatchAppraisalSpacesRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/spaces`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedSpaceList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalProjects": (id, options) => HttpClientRequest.get(`/appraisals/${id}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalProjectsRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPostAppraisalProjectsRef": (id, options) => HttpClientRequest.post(`/appraisals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerDeleteAppraisalProjectsRef": (id, options) => HttpClientRequest.del(`/appraisals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPatchAppraisalProjectsRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/projects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedProjectList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalCurrency": (id, options) => HttpClientRequest.get(`/appraisals/${id}/currency`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Currency),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalCurrencyRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPatchAppraisalCurrencyRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/currency`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedCurrency),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalVendor": (id, options) => HttpClientRequest.get(`/appraisals/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalVendorRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerPatchAppraisalVendorRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalLines": (id, options) => HttpClientRequest.get(`/appraisals/${id}/lines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppraisalLineList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalLinesRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/lines`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAppraisalLineList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalSubjects": (id, options) => HttpClientRequest.get(`/appraisals/${id}/subjects`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseEntityList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalControllerGetAppraisalSubjectsRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/subjects`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedBaseEntityList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLineList": (options) => HttpClientRequest.get(`/paymentLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentLineList),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerCreatePaymentLine": (options) => HttpClientRequest.post(`/paymentLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentLineControllerCreatePaymentLine201),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLineById": (id, options) => HttpClientRequest.get(`/paymentLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentLine),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerDeletePaymentLineById": (id, options) => HttpClientRequest.del(`/paymentLines/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerUpdatePaymentLineById": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PaymentLine),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLinePayment": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/payment`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullablePayment),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLinePaymentRef": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/relationships/payment`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPayment),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerPatchPaymentLinePaymentRef": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}/relationships/payment`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedPayment),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLineSubject": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/subject`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLineSubjectRef": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerPatchPaymentLineSubjectRef": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLineService": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableService),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLineServiceRef": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerPatchPaymentLineServiceRef": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLineVendor": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerGetPaymentLineVendorRef": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "PaymentLineControllerPatchPaymentLineVendorRef": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineList": (options) => HttpClientRequest.get(`/invoiceLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceLineList),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerCreateInvoiceLine": (options) => HttpClientRequest.post(`/invoiceLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceLineControllerCreateInvoiceLine201),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineById": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceLine),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerDeleteInvoiceLineById": (id, options) => HttpClientRequest.del(`/invoiceLines/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerUpdateInvoiceLineById": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InvoiceLine),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineInvoice": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/invoice`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableInvoice),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineInvoiceRef": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/relationships/invoice`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedInvoice),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerPatchInvoiceLineInvoiceRef": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}/relationships/invoice`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedInvoice),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineSubject": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/subject`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineSubjectRef": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerPatchInvoiceLineSubjectRef": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineService": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableService),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineServiceRef": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerPatchInvoiceLineServiceRef": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineVendor": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerGetInvoiceLineVendorRef": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "InvoiceLineControllerPatchInvoiceLineVendorRef": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineList": (options) => HttpClientRequest.get(`/estimateLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateLineList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerCreateEstimateLine": (options) => HttpClientRequest.post(`/estimateLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateLineControllerCreateEstimateLine201),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineById": (id, options) => HttpClientRequest.get(`/estimateLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateLine),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerDeleteEstimateLineById": (id, options) => HttpClientRequest.del(`/estimateLines/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerUpdateEstimateLineById": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateLine),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineEstimate": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/estimate`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableEstimate),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineEstimateRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/estimate`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedEstimate),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerPatchEstimateLineEstimateRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/estimate`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedEstimate),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineSubject": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/subject`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineSubjectRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerPatchEstimateLineSubjectRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineChangeOrders": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/changeOrders`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderLineList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineChangeOrdersRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderLineList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerPostEstimateLineChangeOrdersRef": (id, options) => HttpClientRequest.post(`/estimateLines/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderLineList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerDeleteEstimateLineChangeOrdersRef": (id, options) => HttpClientRequest.del(`/estimateLines/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderLineList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerPatchEstimateLineChangeOrdersRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/changeOrders`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrderLineList),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineService": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableService),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineServiceRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerPatchEstimateLineServiceRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineVendor": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerGetEstimateLineVendorRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "EstimateLineControllerPatchEstimateLineVendorRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NullableReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineList": (options) => HttpClientRequest.get(`/changeOrderLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderLineList),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerCreateChangeOrderLine": (options) => HttpClientRequest.post(`/changeOrderLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderLineControllerCreateChangeOrderLine201),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineById": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderLine),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerDeleteChangeOrderLineById": (id, options) => HttpClientRequest.del(`/changeOrderLines/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerUpdateChangeOrderLineById": (id, options) => HttpClientRequest.patch(`/changeOrderLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrderLine),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineEstimateLine": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/estimateLine`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EstimateLine),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineEstimateLineRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/estimateLine`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimateLine),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerPatchChangeOrderLineEstimateLineRef": (id, options) => HttpClientRequest.patch(`/changeOrderLines/${id}/relationships/estimateLine`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEstimateLine),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineChangeOrder": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/changeOrder`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChangeOrder),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineChangeOrderRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/changeOrder`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrder),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerPatchChangeOrderLineChangeOrderRef": (id, options) => HttpClientRequest.patch(`/changeOrderLines/${id}/relationships/changeOrder`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedChangeOrder),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineVendor": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/vendor`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineVendorRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/vendor`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAccountProvider),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineService": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/service`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Service),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineServiceRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/service`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedService),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineSubject": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/subject`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "ChangeOrderLineControllerGetChangeOrderLineSubjectRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerGetAppraisalLineList": (options) => HttpClientRequest.get(`/appraisalLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any, "filter": options?.["filter"] as any, "sort": options?.["sort"] as any, "page[offset]": options?.["page[offset]"] as any, "page[limit]": options?.["page[limit]"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppraisalLineList),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerCreateAppraisalLine": (options) => HttpClientRequest.post(`/appraisalLines`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppraisalLineControllerCreateAppraisalLine201),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerGetAppraisalLineById": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppraisalLine),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerDeleteAppraisalLineById": (id, options) => HttpClientRequest.del(`/appraisalLines/${id}`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerUpdateAppraisalLineById": (id, options) => HttpClientRequest.patch(`/appraisalLines/${id}`).pipe(
    HttpClientRequest.setUrlParams({ "include": options.params?.["include"] as any, "typeDepthLimit": options.params?.["typeDepthLimit"] as any, "fields": options.params?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppraisalLine),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerGetAppraisalLineAppraisal": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}/appraisal`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Appraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerGetAppraisalLineAppraisalRef": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}/relationships/appraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerPatchAppraisalLineAppraisalRef": (id, options) => HttpClientRequest.patch(`/appraisalLines/${id}/relationships/appraisal`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedAppraisal),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerGetAppraisalLineSubject": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}/subject`).pipe(
    HttpClientRequest.setUrlParams({ "include": options?.["include"] as any, "typeDepthLimit": options?.["typeDepthLimit"] as any, "fields": options?.["fields"] as any }),
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerGetAppraisalLineSubjectRef": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "AppraisalLineControllerPatchAppraisalLineSubjectRef": (id, options) => HttpClientRequest.patch(`/appraisalLines/${id}/relationships/subject`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReferencedEntrySource),
      orElse: unexpectedStatus
    }))
  ),
  "PermissionsControllerCheckUpsertPermissions": (options) => HttpClientRequest.post(`/permissions/upsert`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "PermissionsControllerCheckDeletePermissions": (options) => HttpClientRequest.post(`/permissions/delete`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "UploadsControllerStartUpload": (options) => HttpClientRequest.post(`/uploads`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TransloaditAssemblyOptionsResponseDto),
      orElse: unexpectedStatus
    }))
  ),
  "UploadsControllerInitializeFileIds": (options) => HttpClientRequest.post(`/uploads/files`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UploadFilesResponseDto),
      orElse: unexpectedStatus
    }))
  ),
  "CdnControllerSetCdnCookies": (options) => HttpClientRequest.post(`/cdn/access`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FilesCdnAccessResponseDto),
      orElse: unexpectedStatus
    }))
  ),
  "CdnControllerGetSignedUrls": (options) => HttpClientRequest.post(`/cdn/urls`).pipe(
    HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FilesCdnSignedUrlsResponseDto),
      orElse: unexpectedStatus
    }))
  )
  }
}

export interface Client {
  readonly httpClient: HttpClient.HttpClient
  /**
* Get the account based on the current context
*/
readonly "AccountControllerGetCurrentAccount": (options?: typeof AccountControllerGetCurrentAccountParams.Encoded | undefined) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the currently authed user
*/
readonly "ProfileControllerGetCurrentUser": (options?: typeof ProfileControllerGetCurrentUserParams.Encoded | undefined) => Effect.Effect<typeof User.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Used by container service to confirm task is healthy
*/
readonly "HealthControllerInternalHealthCheck": () => Effect.Effect<typeof HealthControllerInternalHealthCheck200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"HealthControllerInternalHealthCheck503", typeof HealthControllerInternalHealthCheck503.Type>>
  /**
* Used by load balancer to confirm service is available
*/
readonly "HealthControllerExternalHealthCheck": () => Effect.Effect<typeof HealthControllerExternalHealthCheck200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"HealthControllerExternalHealthCheck503", typeof HealthControllerExternalHealthCheck503.Type>>
  readonly "TestControllerTest": () => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* testing
*/
readonly "TestControllerTestManyById": () => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Get User by ID
*/
readonly "UserControllerGetUserById": (id: string, options?: typeof UserControllerGetUserByIdParams.Encoded | undefined) => Effect.Effect<typeof User.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Update User by ID
*/
readonly "UserControllerUpdateUserById": (id: string, options: { readonly params?: typeof UserControllerUpdateUserByIdParams.Encoded | undefined; readonly payload: typeof UpdateUser.Encoded }) => Effect.Effect<typeof User.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch User.primaryEmailAddress
*/
readonly "UserControllerGetUserPrimaryEmailAddress": (id: string, options?: typeof UserControllerGetUserPrimaryEmailAddressParams.Encoded | undefined) => Effect.Effect<typeof NullableEmailAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch User.primaryEmailAddress ref
*/
readonly "UserControllerGetUserPrimaryEmailAddressRef": (id: string) => Effect.Effect<typeof NullableReferencedEmailAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace User.primaryEmailAddress ref
*/
readonly "UserControllerPatchUserPrimaryEmailAddressRef": (id: string, options: typeof NullableReferencedUpdateEmailAddress.Encoded) => Effect.Effect<typeof NullableReferencedEmailAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch User.primaryPhoneNumber
*/
readonly "UserControllerGetUserPrimaryPhoneNumber": (id: string, options?: typeof UserControllerGetUserPrimaryPhoneNumberParams.Encoded | undefined) => Effect.Effect<typeof NullablePhoneNumber.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch User.primaryPhoneNumber ref
*/
readonly "UserControllerGetUserPrimaryPhoneNumberRef": (id: string) => Effect.Effect<typeof NullableReferencedPhoneNumber.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace User.primaryPhoneNumber ref
*/
readonly "UserControllerPatchUserPrimaryPhoneNumberRef": (id: string, options: typeof NullableReferencedUpdatePhoneNumber.Encoded) => Effect.Effect<typeof NullableReferencedPhoneNumber.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch User.defaultAccount
*/
readonly "UserControllerGetUserDefaultAccount": (id: string, options?: typeof UserControllerGetUserDefaultAccountParams.Encoded | undefined) => Effect.Effect<typeof NullableAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch User.defaultAccount ref
*/
readonly "UserControllerGetUserDefaultAccountRef": (id: string) => Effect.Effect<typeof NullableReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace User.defaultAccount ref
*/
readonly "UserControllerPatchUserDefaultAccountRef": (id: string, options: typeof NullableReferencedUpdateAccount.Encoded) => Effect.Effect<typeof NullableReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch User.accountRoles
*/
readonly "UserControllerGetUserAccountRoles": (id: string, options?: typeof UserControllerGetUserAccountRolesParams.Encoded | undefined) => Effect.Effect<typeof UserAccountRoleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch User.accountRoles refs
*/
readonly "UserControllerGetUserAccountRolesRef": (id: string) => Effect.Effect<typeof ReferencedUserAccountRoleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserAccountRole List
*/
readonly "UserAccountRoleControllerGetUserAccountRoleList": (options: typeof UserAccountRoleControllerGetUserAccountRoleListParams.Encoded) => Effect.Effect<typeof UserAccountRoleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create UserAccountRole
*/
readonly "UserAccountRoleControllerCreateUserAccountRole": (options: { readonly params: typeof UserAccountRoleControllerCreateUserAccountRoleParams.Encoded; readonly payload: typeof UserAccountRoleControllerCreateUserAccountRoleRequest.Encoded }) => Effect.Effect<typeof UserAccountRoleControllerCreateUserAccountRole201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get UserAccountRole by ID
*/
readonly "UserAccountRoleControllerGetUserAccountRoleById": (id: string, options: typeof UserAccountRoleControllerGetUserAccountRoleByIdParams.Encoded) => Effect.Effect<typeof UserAccountRole.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete UserAccountRole by ID
*/
readonly "UserAccountRoleControllerDeleteUserAccountRoleById": (id: string, options: typeof UserAccountRoleControllerDeleteUserAccountRoleByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update UserAccountRole by ID
*/
readonly "UserAccountRoleControllerUpdateUserAccountRoleById": (id: string, options: { readonly params: typeof UserAccountRoleControllerUpdateUserAccountRoleByIdParams.Encoded; readonly payload: typeof UpdateUserAccountRole.Encoded }) => Effect.Effect<typeof UserAccountRole.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserAccountRole.user
*/
readonly "UserAccountRoleControllerGetUserAccountRoleUser": (id: string, options: typeof UserAccountRoleControllerGetUserAccountRoleUserParams.Encoded) => Effect.Effect<typeof User.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserAccountRole.user ref
*/
readonly "UserAccountRoleControllerGetUserAccountRoleUserRef": (id: string, options: typeof UserAccountRoleControllerGetUserAccountRoleUserRefParams.Encoded) => Effect.Effect<typeof ReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace UserAccountRole.user ref
*/
readonly "UserAccountRoleControllerPatchUserAccountRoleUserRef": (id: string, options: { readonly params: typeof UserAccountRoleControllerPatchUserAccountRoleUserRefParams.Encoded; readonly payload: typeof ReferencedUpdateUser.Encoded }) => Effect.Effect<typeof ReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserAccountRole.account
*/
readonly "UserAccountRoleControllerGetUserAccountRoleAccount": (id: string, options: typeof UserAccountRoleControllerGetUserAccountRoleAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserAccountRole.account ref
*/
readonly "UserAccountRoleControllerGetUserAccountRoleAccountRef": (id: string, options: typeof UserAccountRoleControllerGetUserAccountRoleAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace UserAccountRole.account ref
*/
readonly "UserAccountRoleControllerPatchUserAccountRoleAccountRef": (id: string, options: { readonly params: typeof UserAccountRoleControllerPatchUserAccountRoleAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdParty List
*/
readonly "ThirdPartyControllerGetThirdPartyList": (options: typeof ThirdPartyControllerGetThirdPartyListParams.Encoded) => Effect.Effect<typeof ThirdPartyList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ThirdParty
*/
readonly "ThirdPartyControllerCreateThirdParty": (options: { readonly params: typeof ThirdPartyControllerCreateThirdPartyParams.Encoded; readonly payload: typeof ThirdPartyControllerCreateThirdPartyRequest.Encoded }) => Effect.Effect<typeof ThirdPartyControllerCreateThirdParty201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ThirdParty by ID
*/
readonly "ThirdPartyControllerGetThirdPartyById": (id: string, options: typeof ThirdPartyControllerGetThirdPartyByIdParams.Encoded) => Effect.Effect<typeof ThirdParty.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ThirdParty by ID
*/
readonly "ThirdPartyControllerDeleteThirdPartyById": (id: string, options: typeof ThirdPartyControllerDeleteThirdPartyByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ThirdParty by ID
*/
readonly "ThirdPartyControllerUpdateThirdPartyById": (id: string, options: { readonly params: typeof ThirdPartyControllerUpdateThirdPartyByIdParams.Encoded; readonly payload: typeof UpdateThirdParty.Encoded }) => Effect.Effect<typeof ThirdParty.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdParty.project
*/
readonly "ThirdPartyControllerGetThirdPartyProject": (id: string, options: typeof ThirdPartyControllerGetThirdPartyProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdParty.project ref
*/
readonly "ThirdPartyControllerGetThirdPartyProjectRef": (id: string, options: typeof ThirdPartyControllerGetThirdPartyProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdParty.project ref
*/
readonly "ThirdPartyControllerPatchThirdPartyProjectRef": (id: string, options: { readonly params: typeof ThirdPartyControllerPatchThirdPartyProjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateProject.Encoded }) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyIndividual List
*/
readonly "ThirdPartyIndividualControllerGetThirdPartyIndividualList": (options: typeof ThirdPartyIndividualControllerGetThirdPartyIndividualListParams.Encoded) => Effect.Effect<typeof ThirdPartyIndividualList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ThirdPartyIndividual
*/
readonly "ThirdPartyIndividualControllerCreateThirdPartyIndividual": (options: { readonly params: typeof ThirdPartyIndividualControllerCreateThirdPartyIndividualParams.Encoded; readonly payload: typeof ThirdPartyIndividualControllerCreateThirdPartyIndividualRequest.Encoded }) => Effect.Effect<typeof ThirdPartyIndividualControllerCreateThirdPartyIndividual201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ThirdPartyIndividual by ID
*/
readonly "ThirdPartyIndividualControllerGetThirdPartyIndividualById": (id: string, options: typeof ThirdPartyIndividualControllerGetThirdPartyIndividualByIdParams.Encoded) => Effect.Effect<typeof ThirdPartyIndividual.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ThirdPartyIndividual by ID
*/
readonly "ThirdPartyIndividualControllerDeleteThirdPartyIndividualById": (id: string, options: typeof ThirdPartyIndividualControllerDeleteThirdPartyIndividualByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ThirdPartyIndividual by ID
*/
readonly "ThirdPartyIndividualControllerUpdateThirdPartyIndividualById": (id: string, options: { readonly params: typeof ThirdPartyIndividualControllerUpdateThirdPartyIndividualByIdParams.Encoded; readonly payload: typeof UpdateThirdPartyIndividual.Encoded }) => Effect.Effect<typeof ThirdPartyIndividual.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyIndividual.project
*/
readonly "ThirdPartyIndividualControllerGetThirdPartyIndividualProject": (id: string, options: typeof ThirdPartyIndividualControllerGetThirdPartyIndividualProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyIndividual.project ref
*/
readonly "ThirdPartyIndividualControllerGetThirdPartyIndividualProjectRef": (id: string, options: typeof ThirdPartyIndividualControllerGetThirdPartyIndividualProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdPartyIndividual.project ref
*/
readonly "ThirdPartyIndividualControllerPatchThirdPartyIndividualProjectRef": (id: string, options: { readonly params: typeof ThirdPartyIndividualControllerPatchThirdPartyIndividualProjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateProject.Encoded }) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact List
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactList": (options: typeof ThirdPartyImpactControllerGetThirdPartyImpactListParams.Encoded) => Effect.Effect<typeof ThirdPartyImpactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ThirdPartyImpact
*/
readonly "ThirdPartyImpactControllerCreateThirdPartyImpact": (options: { readonly params: typeof ThirdPartyImpactControllerCreateThirdPartyImpactParams.Encoded; readonly payload: typeof ThirdPartyImpactControllerCreateThirdPartyImpactRequest.Encoded }) => Effect.Effect<typeof ThirdPartyImpactControllerCreateThirdPartyImpact201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ThirdPartyImpact by ID
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactById": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactByIdParams.Encoded) => Effect.Effect<typeof ThirdPartyImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ThirdPartyImpact by ID
*/
readonly "ThirdPartyImpactControllerDeleteThirdPartyImpactById": (id: string, options: typeof ThirdPartyImpactControllerDeleteThirdPartyImpactByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ThirdPartyImpact by ID
*/
readonly "ThirdPartyImpactControllerUpdateThirdPartyImpactById": (id: string, options: { readonly params: typeof ThirdPartyImpactControllerUpdateThirdPartyImpactByIdParams.Encoded; readonly payload: typeof UpdateThirdPartyImpact.Encoded }) => Effect.Effect<typeof ThirdPartyImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.metadata
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactMetadata": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactMetadataParams.Encoded) => Effect.Effect<typeof EntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.metadata ref
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactMetadataRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.project
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactProject": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactProjectParams.Encoded) => Effect.Effect<typeof NullableProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.project ref
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactProjectRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactProjectRefParams.Encoded) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdPartyImpact.project ref
*/
readonly "ThirdPartyImpactControllerPatchThirdPartyImpactProjectRef": (id: string, options: { readonly params: typeof ThirdPartyImpactControllerPatchThirdPartyImpactProjectRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateProject.Encoded }) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.account
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactAccount": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.account ref
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactAccountRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdPartyImpact.account ref
*/
readonly "ThirdPartyImpactControllerPatchThirdPartyImpactAccountRef": (id: string, options: { readonly params: typeof ThirdPartyImpactControllerPatchThirdPartyImpactAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.currency
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactCurrency": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.currency ref
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactCurrencyRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdPartyImpact.currency ref
*/
readonly "ThirdPartyImpactControllerPatchThirdPartyImpactCurrencyRef": (id: string, options: { readonly params: typeof ThirdPartyImpactControllerPatchThirdPartyImpactCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.entries
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactEntries": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.entries refs
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactEntriesRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.appraisals
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactAppraisals": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsParams.Encoded) => Effect.Effect<typeof ItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.appraisals refs
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.selectedAppraisal
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisal": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.selectedAppraisal ref
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdPartyImpact.selectedAppraisal ref
*/
readonly "ThirdPartyImpactControllerPatchThirdPartyImpactSelectedAppraisalRef": (id: string, options: { readonly params: typeof ThirdPartyImpactControllerPatchThirdPartyImpactSelectedAppraisalRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItemAppraisal.Encoded }) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.relevantAppraisal
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisal": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.relevantAppraisal ref
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.thirdParty
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactThirdParty": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyParams.Encoded) => Effect.Effect<typeof ThirdParty.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyImpact.thirdParty ref
*/
readonly "ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyRef": (id: string, options: typeof ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyRefParams.Encoded) => Effect.Effect<typeof ReferencedThirdParty.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdPartyImpact.thirdParty ref
*/
readonly "ThirdPartyImpactControllerPatchThirdPartyImpactThirdPartyRef": (id: string, options: { readonly params: typeof ThirdPartyImpactControllerPatchThirdPartyImpactThirdPartyRefParams.Encoded; readonly payload: typeof ReferencedUpdateThirdParty.Encoded }) => Effect.Effect<typeof ReferencedThirdParty.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyDwelling List
*/
readonly "ThirdPartyDwellingControllerGetThirdPartyDwellingList": (options: typeof ThirdPartyDwellingControllerGetThirdPartyDwellingListParams.Encoded) => Effect.Effect<typeof ThirdPartyDwellingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ThirdPartyDwelling
*/
readonly "ThirdPartyDwellingControllerCreateThirdPartyDwelling": (options: { readonly params: typeof ThirdPartyDwellingControllerCreateThirdPartyDwellingParams.Encoded; readonly payload: typeof ThirdPartyDwellingControllerCreateThirdPartyDwellingRequest.Encoded }) => Effect.Effect<typeof ThirdPartyDwellingControllerCreateThirdPartyDwelling201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ThirdPartyDwelling by ID
*/
readonly "ThirdPartyDwellingControllerGetThirdPartyDwellingById": (id: string, options: typeof ThirdPartyDwellingControllerGetThirdPartyDwellingByIdParams.Encoded) => Effect.Effect<typeof ThirdPartyDwelling.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ThirdPartyDwelling by ID
*/
readonly "ThirdPartyDwellingControllerDeleteThirdPartyDwellingById": (id: string, options: typeof ThirdPartyDwellingControllerDeleteThirdPartyDwellingByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ThirdPartyDwelling by ID
*/
readonly "ThirdPartyDwellingControllerUpdateThirdPartyDwellingById": (id: string, options: { readonly params: typeof ThirdPartyDwellingControllerUpdateThirdPartyDwellingByIdParams.Encoded; readonly payload: typeof UpdateThirdPartyDwelling.Encoded }) => Effect.Effect<typeof ThirdPartyDwelling.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyDwelling.project
*/
readonly "ThirdPartyDwellingControllerGetThirdPartyDwellingProject": (id: string, options: typeof ThirdPartyDwellingControllerGetThirdPartyDwellingProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyDwelling.project ref
*/
readonly "ThirdPartyDwellingControllerGetThirdPartyDwellingProjectRef": (id: string, options: typeof ThirdPartyDwellingControllerGetThirdPartyDwellingProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdPartyDwelling.project ref
*/
readonly "ThirdPartyDwellingControllerPatchThirdPartyDwellingProjectRef": (id: string, options: { readonly params: typeof ThirdPartyDwellingControllerPatchThirdPartyDwellingProjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateProject.Encoded }) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyDwelling.country
*/
readonly "ThirdPartyDwellingControllerGetThirdPartyDwellingCountry": (id: string, options: typeof ThirdPartyDwellingControllerGetThirdPartyDwellingCountryParams.Encoded) => Effect.Effect<typeof Country.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ThirdPartyDwelling.country ref
*/
readonly "ThirdPartyDwellingControllerGetThirdPartyDwellingCountryRef": (id: string, options: typeof ThirdPartyDwellingControllerGetThirdPartyDwellingCountryRefParams.Encoded) => Effect.Effect<typeof ReferencedCountry.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ThirdPartyDwelling.country ref
*/
readonly "ThirdPartyDwellingControllerPatchThirdPartyDwellingCountryRef": (id: string, options: { readonly params: typeof ThirdPartyDwellingControllerPatchThirdPartyDwellingCountryRefParams.Encoded; readonly payload: typeof ReferencedUpdateCountry.Encoded }) => Effect.Effect<typeof ReferencedCountry.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage List
*/
readonly "SubCoverageControllerGetSubCoverageList": (options: typeof SubCoverageControllerGetSubCoverageListParams.Encoded) => Effect.Effect<typeof SubCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create SubCoverage
*/
readonly "SubCoverageControllerCreateSubCoverage": (options: { readonly params: typeof SubCoverageControllerCreateSubCoverageParams.Encoded; readonly payload: typeof SubCoverageControllerCreateSubCoverageRequest.Encoded }) => Effect.Effect<typeof SubCoverageControllerCreateSubCoverage201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SubCoverage by ID
*/
readonly "SubCoverageControllerGetSubCoverageById": (id: string, options: typeof SubCoverageControllerGetSubCoverageByIdParams.Encoded) => Effect.Effect<typeof SubCoverage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete SubCoverage by ID
*/
readonly "SubCoverageControllerDeleteSubCoverageById": (id: string, options: typeof SubCoverageControllerDeleteSubCoverageByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update SubCoverage by ID
*/
readonly "SubCoverageControllerUpdateSubCoverageById": (id: string, options: { readonly params: typeof SubCoverageControllerUpdateSubCoverageByIdParams.Encoded; readonly payload: typeof UpdateSubCoverage.Encoded }) => Effect.Effect<typeof SubCoverage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage.parent
*/
readonly "SubCoverageControllerGetSubCoverageParent": (id: string, options: typeof SubCoverageControllerGetSubCoverageParentParams.Encoded) => Effect.Effect<typeof Coverage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage.parent ref
*/
readonly "SubCoverageControllerGetSubCoverageParentRef": (id: string, options: typeof SubCoverageControllerGetSubCoverageParentRefParams.Encoded) => Effect.Effect<typeof ReferencedCoverage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace SubCoverage.parent ref
*/
readonly "SubCoverageControllerPatchSubCoverageParentRef": (id: string, options: { readonly params: typeof SubCoverageControllerPatchSubCoverageParentRefParams.Encoded; readonly payload: typeof ReferencedUpdateCoverage.Encoded }) => Effect.Effect<typeof ReferencedCoverage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage.buckets
*/
readonly "SubCoverageControllerGetSubCoverageBuckets": (id: string, options: typeof SubCoverageControllerGetSubCoverageBucketsParams.Encoded) => Effect.Effect<typeof SubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage.buckets refs
*/
readonly "SubCoverageControllerGetSubCoverageBucketsRef": (id: string, options: typeof SubCoverageControllerGetSubCoverageBucketsRefParams.Encoded) => Effect.Effect<typeof ReferencedSubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage.template
*/
readonly "SubCoverageControllerGetSubCoverageTemplate": (id: string, options: typeof SubCoverageControllerGetSubCoverageTemplateParams.Encoded) => Effect.Effect<typeof NullableSubCoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage.template ref
*/
readonly "SubCoverageControllerGetSubCoverageTemplateRef": (id: string, options: typeof SubCoverageControllerGetSubCoverageTemplateRefParams.Encoded) => Effect.Effect<typeof NullableReferencedSubCoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace SubCoverage.template ref
*/
readonly "SubCoverageControllerPatchSubCoverageTemplateRef": (id: string, options: { readonly params: typeof SubCoverageControllerPatchSubCoverageTemplateRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateSubCoverageTemplate.Encoded }) => Effect.Effect<typeof NullableReferencedSubCoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage.endorsements
*/
readonly "SubCoverageControllerGetSubCoverageEndorsements": (id: string, options: typeof SubCoverageControllerGetSubCoverageEndorsementsParams.Encoded) => Effect.Effect<typeof EndorsementList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverage.endorsements refs
*/
readonly "SubCoverageControllerGetSubCoverageEndorsementsRef": (id: string, options: typeof SubCoverageControllerGetSubCoverageEndorsementsRefParams.Encoded) => Effect.Effect<typeof ReferencedEndorsementList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add SubCoverage.endorsements ref(s)
*/
readonly "SubCoverageControllerPostSubCoverageEndorsementsRef": (id: string, options: { readonly params: typeof SubCoverageControllerPostSubCoverageEndorsementsRefParams.Encoded; readonly payload: typeof SubCoverageControllerPostSubCoverageEndorsementsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedEndorsementList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove SubCoverage.endorsements ref(s)
*/
readonly "SubCoverageControllerDeleteSubCoverageEndorsementsRef": (id: string, options: { readonly params: typeof SubCoverageControllerDeleteSubCoverageEndorsementsRefParams.Encoded; readonly payload: typeof SubCoverageControllerDeleteSubCoverageEndorsementsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedEndorsementList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all SubCoverage.endorsements refs
*/
readonly "SubCoverageControllerPatchSubCoverageEndorsementsRef": (id: string, options: { readonly params: typeof SubCoverageControllerPatchSubCoverageEndorsementsRefParams.Encoded; readonly payload: typeof ReferencedUpdateEndorsementList.Encoded }) => Effect.Effect<typeof ReferencedEndorsementList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket List
*/
readonly "SubBucketControllerGetSubBucketList": (options: typeof SubBucketControllerGetSubBucketListParams.Encoded) => Effect.Effect<typeof SubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create SubBucket
*/
readonly "SubBucketControllerCreateSubBucket": (options: { readonly params: typeof SubBucketControllerCreateSubBucketParams.Encoded; readonly payload: typeof SubBucketControllerCreateSubBucketRequest.Encoded }) => Effect.Effect<typeof SubBucketControllerCreateSubBucket201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SubBucket by ID
*/
readonly "SubBucketControllerGetSubBucketById": (id: string, options: typeof SubBucketControllerGetSubBucketByIdParams.Encoded) => Effect.Effect<typeof SubBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete SubBucket by ID
*/
readonly "SubBucketControllerDeleteSubBucketById": (id: string, options: typeof SubBucketControllerDeleteSubBucketByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update SubBucket by ID
*/
readonly "SubBucketControllerUpdateSubBucketById": (id: string, options: { readonly params: typeof SubBucketControllerUpdateSubBucketByIdParams.Encoded; readonly payload: typeof UpdateSubBucket.Encoded }) => Effect.Effect<typeof SubBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.parent
*/
readonly "SubBucketControllerGetSubBucketParent": (id: string, options: typeof SubBucketControllerGetSubBucketParentParams.Encoded) => Effect.Effect<typeof BaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.parent ref
*/
readonly "SubBucketControllerGetSubBucketParentRef": (id: string, options: typeof SubBucketControllerGetSubBucketParentRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace SubBucket.parent ref
*/
readonly "SubBucketControllerPatchSubBucketParentRef": (id: string, options: { readonly params: typeof SubBucketControllerPatchSubBucketParentRefParams.Encoded; readonly payload: typeof ReferencedUpdateBaseBucket.Encoded }) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.metadata
*/
readonly "SubBucketControllerGetSubBucketMetadata": (id: string, options: typeof SubBucketControllerGetSubBucketMetadataParams.Encoded) => Effect.Effect<typeof BaseSubBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.metadata ref
*/
readonly "SubBucketControllerGetSubBucketMetadataRef": (id: string, options: typeof SubBucketControllerGetSubBucketMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseSubBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.fundingSource
*/
readonly "SubBucketControllerGetSubBucketFundingSource": (id: string, options: typeof SubBucketControllerGetSubBucketFundingSourceParams.Encoded) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.fundingSource ref
*/
readonly "SubBucketControllerGetSubBucketFundingSourceRef": (id: string, options: typeof SubBucketControllerGetSubBucketFundingSourceRefParams.Encoded) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.project
*/
readonly "SubBucketControllerGetSubBucketProject": (id: string, options: typeof SubBucketControllerGetSubBucketProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.project ref
*/
readonly "SubBucketControllerGetSubBucketProjectRef": (id: string, options: typeof SubBucketControllerGetSubBucketProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.account
*/
readonly "SubBucketControllerGetSubBucketAccount": (id: string, options: typeof SubBucketControllerGetSubBucketAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.account ref
*/
readonly "SubBucketControllerGetSubBucketAccountRef": (id: string, options: typeof SubBucketControllerGetSubBucketAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.entries
*/
readonly "SubBucketControllerGetSubBucketEntries": (id: string, options: typeof SubBucketControllerGetSubBucketEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.entries refs
*/
readonly "SubBucketControllerGetSubBucketEntriesRef": (id: string, options: typeof SubBucketControllerGetSubBucketEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.definition
*/
readonly "SubBucketControllerGetSubBucketDefinition": (id: string, options: typeof SubBucketControllerGetSubBucketDefinitionParams.Encoded) => Effect.Effect<typeof SubBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucket.definition ref
*/
readonly "SubBucketControllerGetSubBucketDefinitionRef": (id: string, options: typeof SubBucketControllerGetSubBucketDefinitionRefParams.Encoded) => Effect.Effect<typeof ReferencedSubBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace SubBucket.definition ref
*/
readonly "SubBucketControllerPatchSubBucketDefinitionRef": (id: string, options: { readonly params: typeof SubBucketControllerPatchSubBucketDefinitionRefParams.Encoded; readonly payload: typeof ReferencedUpdateSubBucketDefinition.Encoded }) => Effect.Effect<typeof ReferencedSubBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucketDefinition List
*/
readonly "SubBucketDefinitionControllerGetSubBucketDefinitionList": (options?: typeof SubBucketDefinitionControllerGetSubBucketDefinitionListParams.Encoded | undefined) => Effect.Effect<typeof SubBucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create SubBucketDefinition
*/
readonly "SubBucketDefinitionControllerCreateSubBucketDefinition": (options: { readonly params?: typeof SubBucketDefinitionControllerCreateSubBucketDefinitionParams.Encoded | undefined; readonly payload: typeof SubBucketDefinitionControllerCreateSubBucketDefinitionRequest.Encoded }) => Effect.Effect<typeof SubBucketDefinitionControllerCreateSubBucketDefinition201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SubBucketDefinition by ID
*/
readonly "SubBucketDefinitionControllerGetSubBucketDefinitionById": (id: string, options?: typeof SubBucketDefinitionControllerGetSubBucketDefinitionByIdParams.Encoded | undefined) => Effect.Effect<typeof SubBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete SubBucketDefinition by ID
*/
readonly "SubBucketDefinitionControllerDeleteSubBucketDefinitionById": (id: string) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update SubBucketDefinition by ID
*/
readonly "SubBucketDefinitionControllerUpdateSubBucketDefinitionById": (id: string, options: { readonly params?: typeof SubBucketDefinitionControllerUpdateSubBucketDefinitionByIdParams.Encoded | undefined; readonly payload: typeof UpdateSubBucketDefinition.Encoded }) => Effect.Effect<typeof SubBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucketDefinition.parent
*/
readonly "SubBucketDefinitionControllerGetSubBucketDefinitionParent": (id: string, options?: typeof SubBucketDefinitionControllerGetSubBucketDefinitionParentParams.Encoded | undefined) => Effect.Effect<typeof BucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucketDefinition.parent ref
*/
readonly "SubBucketDefinitionControllerGetSubBucketDefinitionParentRef": (id: string) => Effect.Effect<typeof ReferencedBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace SubBucketDefinition.parent ref
*/
readonly "SubBucketDefinitionControllerPatchSubBucketDefinitionParentRef": (id: string, options: typeof ReferencedUpdateBucketDefinition.Encoded) => Effect.Effect<typeof ReferencedBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucketDefinition.buckets
*/
readonly "SubBucketDefinitionControllerGetSubBucketDefinitionBuckets": (id: string, options?: typeof SubBucketDefinitionControllerGetSubBucketDefinitionBucketsParams.Encoded | undefined) => Effect.Effect<typeof SubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubBucketDefinition.buckets refs
*/
readonly "SubBucketDefinitionControllerGetSubBucketDefinitionBucketsRef": (id: string) => Effect.Effect<typeof ReferencedSubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Space List
*/
readonly "SpaceControllerGetSpaceList": (options: typeof SpaceControllerGetSpaceListParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Space
*/
readonly "SpaceControllerCreateSpace": (options: { readonly params: typeof SpaceControllerCreateSpaceParams.Encoded; readonly payload: typeof SpaceControllerCreateSpaceRequest.Encoded }) => Effect.Effect<typeof SpaceControllerCreateSpace201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Space by ID
*/
readonly "SpaceControllerGetSpaceById": (id: string, options: typeof SpaceControllerGetSpaceByIdParams.Encoded) => Effect.Effect<typeof Space.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Space by ID
*/
readonly "SpaceControllerDeleteSpaceById": (id: string, options: typeof SpaceControllerDeleteSpaceByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Space by ID
*/
readonly "SpaceControllerUpdateSpaceById": (id: string, options: { readonly params: typeof SpaceControllerUpdateSpaceByIdParams.Encoded; readonly payload: typeof UpdateSpace.Encoded }) => Effect.Effect<typeof Space.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Space.type
*/
readonly "SpaceControllerGetSpaceType": (id: string, options: typeof SpaceControllerGetSpaceTypeParams.Encoded) => Effect.Effect<typeof SpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Space.type ref
*/
readonly "SpaceControllerGetSpaceTypeRef": (id: string, options: typeof SpaceControllerGetSpaceTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Space.type ref
*/
readonly "SpaceControllerPatchSpaceTypeRef": (id: string, options: { readonly params: typeof SpaceControllerPatchSpaceTypeRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceType.Encoded }) => Effect.Effect<typeof ReferencedSpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Space.group
*/
readonly "SpaceControllerGetSpaceGroup": (id: string, options: typeof SpaceControllerGetSpaceGroupParams.Encoded) => Effect.Effect<typeof SpaceGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Space.group ref
*/
readonly "SpaceControllerGetSpaceGroupRef": (id: string, options: typeof SpaceControllerGetSpaceGroupRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Space.group ref
*/
readonly "SpaceControllerPatchSpaceGroupRef": (id: string, options: { readonly params: typeof SpaceControllerPatchSpaceGroupRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceGroup.Encoded }) => Effect.Effect<typeof ReferencedSpaceGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Space.asset
*/
readonly "SpaceControllerGetSpaceAsset": (id: string, options: typeof SpaceControllerGetSpaceAssetParams.Encoded) => Effect.Effect<typeof Asset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Space.asset ref
*/
readonly "SpaceControllerGetSpaceAssetRef": (id: string, options: typeof SpaceControllerGetSpaceAssetRefParams.Encoded) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Space.asset ref
*/
readonly "SpaceControllerPatchSpaceAssetRef": (id: string, options: { readonly params: typeof SpaceControllerPatchSpaceAssetRefParams.Encoded; readonly payload: typeof ReferencedUpdateAsset.Encoded }) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroup List
*/
readonly "SpaceGroupControllerGetSpaceGroupList": (options: typeof SpaceGroupControllerGetSpaceGroupListParams.Encoded) => Effect.Effect<typeof SpaceGroupList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create SpaceGroup
*/
readonly "SpaceGroupControllerCreateSpaceGroup": (options: { readonly params: typeof SpaceGroupControllerCreateSpaceGroupParams.Encoded; readonly payload: typeof SpaceGroupControllerCreateSpaceGroupRequest.Encoded }) => Effect.Effect<typeof SpaceGroupControllerCreateSpaceGroup201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SpaceGroup by ID
*/
readonly "SpaceGroupControllerGetSpaceGroupById": (id: string, options: typeof SpaceGroupControllerGetSpaceGroupByIdParams.Encoded) => Effect.Effect<typeof SpaceGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete SpaceGroup by ID
*/
readonly "SpaceGroupControllerDeleteSpaceGroupById": (id: string, options: typeof SpaceGroupControllerDeleteSpaceGroupByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update SpaceGroup by ID
*/
readonly "SpaceGroupControllerUpdateSpaceGroupById": (id: string, options: { readonly params: typeof SpaceGroupControllerUpdateSpaceGroupByIdParams.Encoded; readonly payload: typeof UpdateSpaceGroup.Encoded }) => Effect.Effect<typeof SpaceGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroup.type
*/
readonly "SpaceGroupControllerGetSpaceGroupType": (id: string, options: typeof SpaceGroupControllerGetSpaceGroupTypeParams.Encoded) => Effect.Effect<typeof SpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroup.type ref
*/
readonly "SpaceGroupControllerGetSpaceGroupTypeRef": (id: string, options: typeof SpaceGroupControllerGetSpaceGroupTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace SpaceGroup.type ref
*/
readonly "SpaceGroupControllerPatchSpaceGroupTypeRef": (id: string, options: { readonly params: typeof SpaceGroupControllerPatchSpaceGroupTypeRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceType.Encoded }) => Effect.Effect<typeof ReferencedSpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroup.asset
*/
readonly "SpaceGroupControllerGetSpaceGroupAsset": (id: string, options: typeof SpaceGroupControllerGetSpaceGroupAssetParams.Encoded) => Effect.Effect<typeof Asset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroup.asset ref
*/
readonly "SpaceGroupControllerGetSpaceGroupAssetRef": (id: string, options: typeof SpaceGroupControllerGetSpaceGroupAssetRefParams.Encoded) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace SpaceGroup.asset ref
*/
readonly "SpaceGroupControllerPatchSpaceGroupAssetRef": (id: string, options: { readonly params: typeof SpaceGroupControllerPatchSpaceGroupAssetRefParams.Encoded; readonly payload: typeof ReferencedUpdateAsset.Encoded }) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroup.spaces
*/
readonly "SpaceGroupControllerGetSpaceGroupSpaces": (id: string, options: typeof SpaceGroupControllerGetSpaceGroupSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroup.spaces refs
*/
readonly "SpaceGroupControllerGetSpaceGroupSpacesRef": (id: string, options: typeof SpaceGroupControllerGetSpaceGroupSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add SpaceGroup.spaces ref(s)
*/
readonly "SpaceGroupControllerPostSpaceGroupSpacesRef": (id: string, options: { readonly params: typeof SpaceGroupControllerPostSpaceGroupSpacesRefParams.Encoded; readonly payload: typeof SpaceGroupControllerPostSpaceGroupSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove SpaceGroup.spaces ref(s)
*/
readonly "SpaceGroupControllerDeleteSpaceGroupSpacesRef": (id: string, options: { readonly params: typeof SpaceGroupControllerDeleteSpaceGroupSpacesRefParams.Encoded; readonly payload: typeof SpaceGroupControllerDeleteSpaceGroupSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all SpaceGroup.spaces refs
*/
readonly "SpaceGroupControllerPatchSpaceGroupSpacesRef": (id: string, options: { readonly params: typeof SpaceGroupControllerPatchSpaceGroupSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service List
*/
readonly "ServiceControllerGetServiceList": (options: typeof ServiceControllerGetServiceListParams.Encoded) => Effect.Effect<typeof ServiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Service
*/
readonly "ServiceControllerCreateService": (options: { readonly params: typeof ServiceControllerCreateServiceParams.Encoded; readonly payload: typeof ServiceControllerCreateServiceRequest.Encoded }) => Effect.Effect<typeof ServiceControllerCreateService201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Service by ID
*/
readonly "ServiceControllerGetServiceById": (id: string, options: typeof ServiceControllerGetServiceByIdParams.Encoded) => Effect.Effect<typeof Service.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Service by ID
*/
readonly "ServiceControllerDeleteServiceById": (id: string, options: typeof ServiceControllerDeleteServiceByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Service by ID
*/
readonly "ServiceControllerUpdateServiceById": (id: string, options: { readonly params: typeof ServiceControllerUpdateServiceByIdParams.Encoded; readonly payload: typeof UpdateService.Encoded }) => Effect.Effect<typeof Service.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.metadata
*/
readonly "ServiceControllerGetServiceMetadata": (id: string, options: typeof ServiceControllerGetServiceMetadataParams.Encoded) => Effect.Effect<typeof EntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.metadata ref
*/
readonly "ServiceControllerGetServiceMetadataRef": (id: string, options: typeof ServiceControllerGetServiceMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.project
*/
readonly "ServiceControllerGetServiceProject": (id: string, options: typeof ServiceControllerGetServiceProjectParams.Encoded) => Effect.Effect<typeof NullableProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.project ref
*/
readonly "ServiceControllerGetServiceProjectRef": (id: string, options: typeof ServiceControllerGetServiceProjectRefParams.Encoded) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Service.project ref
*/
readonly "ServiceControllerPatchServiceProjectRef": (id: string, options: { readonly params: typeof ServiceControllerPatchServiceProjectRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateProject.Encoded }) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.account
*/
readonly "ServiceControllerGetServiceAccount": (id: string, options: typeof ServiceControllerGetServiceAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.account ref
*/
readonly "ServiceControllerGetServiceAccountRef": (id: string, options: typeof ServiceControllerGetServiceAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Service.account ref
*/
readonly "ServiceControllerPatchServiceAccountRef": (id: string, options: { readonly params: typeof ServiceControllerPatchServiceAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.currency
*/
readonly "ServiceControllerGetServiceCurrency": (id: string, options: typeof ServiceControllerGetServiceCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.currency ref
*/
readonly "ServiceControllerGetServiceCurrencyRef": (id: string, options: typeof ServiceControllerGetServiceCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Service.currency ref
*/
readonly "ServiceControllerPatchServiceCurrencyRef": (id: string, options: { readonly params: typeof ServiceControllerPatchServiceCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.entries
*/
readonly "ServiceControllerGetServiceEntries": (id: string, options: typeof ServiceControllerGetServiceEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.entries refs
*/
readonly "ServiceControllerGetServiceEntriesRef": (id: string, options: typeof ServiceControllerGetServiceEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.appraisals
*/
readonly "ServiceControllerGetServiceAppraisals": (id: string, options: typeof ServiceControllerGetServiceAppraisalsParams.Encoded) => Effect.Effect<typeof ItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.appraisals refs
*/
readonly "ServiceControllerGetServiceAppraisalsRef": (id: string, options: typeof ServiceControllerGetServiceAppraisalsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.selectedAppraisal
*/
readonly "ServiceControllerGetServiceSelectedAppraisal": (id: string, options: typeof ServiceControllerGetServiceSelectedAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.selectedAppraisal ref
*/
readonly "ServiceControllerGetServiceSelectedAppraisalRef": (id: string, options: typeof ServiceControllerGetServiceSelectedAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Service.selectedAppraisal ref
*/
readonly "ServiceControllerPatchServiceSelectedAppraisalRef": (id: string, options: { readonly params: typeof ServiceControllerPatchServiceSelectedAppraisalRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItemAppraisal.Encoded }) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.relevantAppraisal
*/
readonly "ServiceControllerGetServiceRelevantAppraisal": (id: string, options: typeof ServiceControllerGetServiceRelevantAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.relevantAppraisal ref
*/
readonly "ServiceControllerGetServiceRelevantAppraisalRef": (id: string, options: typeof ServiceControllerGetServiceRelevantAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.type
*/
readonly "ServiceControllerGetServiceType": (id: string, options: typeof ServiceControllerGetServiceTypeParams.Encoded) => Effect.Effect<typeof NullableServiceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.type ref
*/
readonly "ServiceControllerGetServiceTypeRef": (id: string, options: typeof ServiceControllerGetServiceTypeRefParams.Encoded) => Effect.Effect<typeof NullableReferencedServiceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Service.type ref
*/
readonly "ServiceControllerPatchServiceTypeRef": (id: string, options: { readonly params: typeof ServiceControllerPatchServiceTypeRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateServiceType.Encoded }) => Effect.Effect<typeof NullableReferencedServiceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.payments
*/
readonly "ServiceControllerGetServicePayments": (id: string, options: typeof ServiceControllerGetServicePaymentsParams.Encoded) => Effect.Effect<typeof PaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.payments refs
*/
readonly "ServiceControllerGetServicePaymentsRef": (id: string, options: typeof ServiceControllerGetServicePaymentsRefParams.Encoded) => Effect.Effect<typeof ReferencedPaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.invoices
*/
readonly "ServiceControllerGetServiceInvoices": (id: string, options: typeof ServiceControllerGetServiceInvoicesParams.Encoded) => Effect.Effect<typeof InvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.invoices refs
*/
readonly "ServiceControllerGetServiceInvoicesRef": (id: string, options: typeof ServiceControllerGetServiceInvoicesRefParams.Encoded) => Effect.Effect<typeof ReferencedInvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.estimates
*/
readonly "ServiceControllerGetServiceEstimates": (id: string, options: typeof ServiceControllerGetServiceEstimatesParams.Encoded) => Effect.Effect<typeof EstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.estimates refs
*/
readonly "ServiceControllerGetServiceEstimatesRef": (id: string, options: typeof ServiceControllerGetServiceEstimatesRefParams.Encoded) => Effect.Effect<typeof ReferencedEstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.changeOrders
*/
readonly "ServiceControllerGetServiceChangeOrders": (id: string, options: typeof ServiceControllerGetServiceChangeOrdersParams.Encoded) => Effect.Effect<typeof ChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.changeOrders refs
*/
readonly "ServiceControllerGetServiceChangeOrdersRef": (id: string, options: typeof ServiceControllerGetServiceChangeOrdersRefParams.Encoded) => Effect.Effect<typeof ReferencedChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.paidLineItems
*/
readonly "ServiceControllerGetServicePaidLineItems": (id: string, options: typeof ServiceControllerGetServicePaidLineItemsParams.Encoded) => Effect.Effect<typeof PaymentLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.paidLineItems refs
*/
readonly "ServiceControllerGetServicePaidLineItemsRef": (id: string, options: typeof ServiceControllerGetServicePaidLineItemsRefParams.Encoded) => Effect.Effect<typeof ReferencedPaymentLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.invoicedLineItems
*/
readonly "ServiceControllerGetServiceInvoicedLineItems": (id: string, options: typeof ServiceControllerGetServiceInvoicedLineItemsParams.Encoded) => Effect.Effect<typeof InvoiceLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.invoicedLineItems refs
*/
readonly "ServiceControllerGetServiceInvoicedLineItemsRef": (id: string, options: typeof ServiceControllerGetServiceInvoicedLineItemsRefParams.Encoded) => Effect.Effect<typeof ReferencedInvoiceLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.estimatedLineItems
*/
readonly "ServiceControllerGetServiceEstimatedLineItems": (id: string, options: typeof ServiceControllerGetServiceEstimatedLineItemsParams.Encoded) => Effect.Effect<typeof EstimateLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Service.estimatedLineItems refs
*/
readonly "ServiceControllerGetServiceEstimatedLineItemsRef": (id: string, options: typeof ServiceControllerGetServiceEstimatedLineItemsRefParams.Encoded) => Effect.Effect<typeof ReferencedEstimateLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask List
*/
readonly "ServiceTaskControllerGetServiceTaskList": (options: typeof ServiceTaskControllerGetServiceTaskListParams.Encoded) => Effect.Effect<typeof ServiceTaskList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ServiceTask
*/
readonly "ServiceTaskControllerCreateServiceTask": (options: { readonly params: typeof ServiceTaskControllerCreateServiceTaskParams.Encoded; readonly payload: typeof ServiceTaskControllerCreateServiceTaskRequest.Encoded }) => Effect.Effect<typeof ServiceTaskControllerCreateServiceTask201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ServiceTask by ID
*/
readonly "ServiceTaskControllerGetServiceTaskById": (id: string, options: typeof ServiceTaskControllerGetServiceTaskByIdParams.Encoded) => Effect.Effect<typeof ServiceTask.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ServiceTask by ID
*/
readonly "ServiceTaskControllerDeleteServiceTaskById": (id: string, options: typeof ServiceTaskControllerDeleteServiceTaskByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ServiceTask by ID
*/
readonly "ServiceTaskControllerUpdateServiceTaskById": (id: string, options: { readonly params: typeof ServiceTaskControllerUpdateServiceTaskByIdParams.Encoded; readonly payload: typeof UpdateServiceTask.Encoded }) => Effect.Effect<typeof ServiceTask.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.metadata
*/
readonly "ServiceTaskControllerGetServiceTaskMetadata": (id: string, options: typeof ServiceTaskControllerGetServiceTaskMetadataParams.Encoded) => Effect.Effect<typeof EntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.metadata ref
*/
readonly "ServiceTaskControllerGetServiceTaskMetadataRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.project
*/
readonly "ServiceTaskControllerGetServiceTaskProject": (id: string, options: typeof ServiceTaskControllerGetServiceTaskProjectParams.Encoded) => Effect.Effect<typeof NullableProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.project ref
*/
readonly "ServiceTaskControllerGetServiceTaskProjectRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskProjectRefParams.Encoded) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ServiceTask.project ref
*/
readonly "ServiceTaskControllerPatchServiceTaskProjectRef": (id: string, options: { readonly params: typeof ServiceTaskControllerPatchServiceTaskProjectRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateProject.Encoded }) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.account
*/
readonly "ServiceTaskControllerGetServiceTaskAccount": (id: string, options: typeof ServiceTaskControllerGetServiceTaskAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.account ref
*/
readonly "ServiceTaskControllerGetServiceTaskAccountRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ServiceTask.account ref
*/
readonly "ServiceTaskControllerPatchServiceTaskAccountRef": (id: string, options: { readonly params: typeof ServiceTaskControllerPatchServiceTaskAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.currency
*/
readonly "ServiceTaskControllerGetServiceTaskCurrency": (id: string, options: typeof ServiceTaskControllerGetServiceTaskCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.currency ref
*/
readonly "ServiceTaskControllerGetServiceTaskCurrencyRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ServiceTask.currency ref
*/
readonly "ServiceTaskControllerPatchServiceTaskCurrencyRef": (id: string, options: { readonly params: typeof ServiceTaskControllerPatchServiceTaskCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.entries
*/
readonly "ServiceTaskControllerGetServiceTaskEntries": (id: string, options: typeof ServiceTaskControllerGetServiceTaskEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.entries refs
*/
readonly "ServiceTaskControllerGetServiceTaskEntriesRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.appraisals
*/
readonly "ServiceTaskControllerGetServiceTaskAppraisals": (id: string, options: typeof ServiceTaskControllerGetServiceTaskAppraisalsParams.Encoded) => Effect.Effect<typeof ItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.appraisals refs
*/
readonly "ServiceTaskControllerGetServiceTaskAppraisalsRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskAppraisalsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.selectedAppraisal
*/
readonly "ServiceTaskControllerGetServiceTaskSelectedAppraisal": (id: string, options: typeof ServiceTaskControllerGetServiceTaskSelectedAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.selectedAppraisal ref
*/
readonly "ServiceTaskControllerGetServiceTaskSelectedAppraisalRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskSelectedAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ServiceTask.selectedAppraisal ref
*/
readonly "ServiceTaskControllerPatchServiceTaskSelectedAppraisalRef": (id: string, options: { readonly params: typeof ServiceTaskControllerPatchServiceTaskSelectedAppraisalRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItemAppraisal.Encoded }) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.relevantAppraisal
*/
readonly "ServiceTaskControllerGetServiceTaskRelevantAppraisal": (id: string, options: typeof ServiceTaskControllerGetServiceTaskRelevantAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.relevantAppraisal ref
*/
readonly "ServiceTaskControllerGetServiceTaskRelevantAppraisalRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskRelevantAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.service
*/
readonly "ServiceTaskControllerGetServiceTaskService": (id: string, options: typeof ServiceTaskControllerGetServiceTaskServiceParams.Encoded) => Effect.Effect<typeof Service.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.service ref
*/
readonly "ServiceTaskControllerGetServiceTaskServiceRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskServiceRefParams.Encoded) => Effect.Effect<typeof ReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ServiceTask.service ref
*/
readonly "ServiceTaskControllerPatchServiceTaskServiceRef": (id: string, options: { readonly params: typeof ServiceTaskControllerPatchServiceTaskServiceRefParams.Encoded; readonly payload: typeof ReferencedUpdateService.Encoded }) => Effect.Effect<typeof ReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.payments
*/
readonly "ServiceTaskControllerGetServiceTaskPayments": (id: string, options: typeof ServiceTaskControllerGetServiceTaskPaymentsParams.Encoded) => Effect.Effect<typeof PaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.payments refs
*/
readonly "ServiceTaskControllerGetServiceTaskPaymentsRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskPaymentsRefParams.Encoded) => Effect.Effect<typeof ReferencedPaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.invoices
*/
readonly "ServiceTaskControllerGetServiceTaskInvoices": (id: string, options: typeof ServiceTaskControllerGetServiceTaskInvoicesParams.Encoded) => Effect.Effect<typeof InvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.invoices refs
*/
readonly "ServiceTaskControllerGetServiceTaskInvoicesRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskInvoicesRefParams.Encoded) => Effect.Effect<typeof ReferencedInvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.estimates
*/
readonly "ServiceTaskControllerGetServiceTaskEstimates": (id: string, options: typeof ServiceTaskControllerGetServiceTaskEstimatesParams.Encoded) => Effect.Effect<typeof EstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.estimates refs
*/
readonly "ServiceTaskControllerGetServiceTaskEstimatesRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskEstimatesRefParams.Encoded) => Effect.Effect<typeof ReferencedEstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.changeOrders
*/
readonly "ServiceTaskControllerGetServiceTaskChangeOrders": (id: string, options: typeof ServiceTaskControllerGetServiceTaskChangeOrdersParams.Encoded) => Effect.Effect<typeof ChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceTask.changeOrders refs
*/
readonly "ServiceTaskControllerGetServiceTaskChangeOrdersRef": (id: string, options: typeof ServiceTaskControllerGetServiceTaskChangeOrdersRefParams.Encoded) => Effect.Effect<typeof ReferencedChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Project List
*/
readonly "ProjectControllerGetProjectList": (options: typeof ProjectControllerGetProjectListParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Project
*/
readonly "ProjectControllerCreateProject": (options: { readonly params: typeof ProjectControllerCreateProjectParams.Encoded; readonly payload: typeof ProjectControllerCreateProjectRequest.Encoded }) => Effect.Effect<typeof ProjectControllerCreateProject201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Project by ID
*/
readonly "ProjectControllerGetProjectById": (id: string, options: typeof ProjectControllerGetProjectByIdParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Project by ID
*/
readonly "ProjectControllerDeleteProjectById": (id: string, options: typeof ProjectControllerDeleteProjectByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Project by ID
*/
readonly "ProjectControllerUpdateProjectById": (id: string, options: { readonly params: typeof ProjectControllerUpdateProjectByIdParams.Encoded; readonly payload: typeof UpdateProject.Encoded }) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Project.account
*/
readonly "ProjectControllerGetProjectAccount": (id: string, options: typeof ProjectControllerGetProjectAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Project.account ref
*/
readonly "ProjectControllerGetProjectAccountRef": (id: string, options: typeof ProjectControllerGetProjectAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Project.account ref
*/
readonly "ProjectControllerPatchProjectAccountRef": (id: string, options: { readonly params: typeof ProjectControllerPatchProjectAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Project.mediaAttachments
*/
readonly "ProjectControllerGetProjectMediaAttachments": (id: string, options: typeof ProjectControllerGetProjectMediaAttachmentsParams.Encoded) => Effect.Effect<typeof ProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Project.mediaAttachments refs
*/
readonly "ProjectControllerGetProjectMediaAttachmentsRef": (id: string, options: typeof ProjectControllerGetProjectMediaAttachmentsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Project.mediaAttachments ref(s)
*/
readonly "ProjectControllerPostProjectMediaAttachmentsRef": (id: string, options: { readonly params: typeof ProjectControllerPostProjectMediaAttachmentsRefParams.Encoded; readonly payload: typeof ProjectControllerPostProjectMediaAttachmentsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Project.mediaAttachments ref(s)
*/
readonly "ProjectControllerDeleteProjectMediaAttachmentsRef": (id: string, options: { readonly params: typeof ProjectControllerDeleteProjectMediaAttachmentsRefParams.Encoded; readonly payload: typeof ProjectControllerDeleteProjectMediaAttachmentsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Project.mediaAttachments refs
*/
readonly "ProjectControllerPatchProjectMediaAttachmentsRef": (id: string, options: { readonly params: typeof ProjectControllerPatchProjectMediaAttachmentsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectMediaList.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectMedia List
*/
readonly "ProjectMediaControllerGetProjectMediaList": (options: typeof ProjectMediaControllerGetProjectMediaListParams.Encoded) => Effect.Effect<typeof ProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ProjectMedia
*/
readonly "ProjectMediaControllerCreateProjectMedia": (options: { readonly params: typeof ProjectMediaControllerCreateProjectMediaParams.Encoded; readonly payload: typeof ProjectMediaControllerCreateProjectMediaRequest.Encoded }) => Effect.Effect<typeof ProjectMediaControllerCreateProjectMedia201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ProjectMedia by ID
*/
readonly "ProjectMediaControllerGetProjectMediaById": (id: string, options: typeof ProjectMediaControllerGetProjectMediaByIdParams.Encoded) => Effect.Effect<typeof ProjectMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ProjectMedia by ID
*/
readonly "ProjectMediaControllerDeleteProjectMediaById": (id: string, options: typeof ProjectMediaControllerDeleteProjectMediaByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ProjectMedia by ID
*/
readonly "ProjectMediaControllerUpdateProjectMediaById": (id: string, options: { readonly params: typeof ProjectMediaControllerUpdateProjectMediaByIdParams.Encoded; readonly payload: typeof UpdateProjectMedia.Encoded }) => Effect.Effect<typeof ProjectMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectMedia.media
*/
readonly "ProjectMediaControllerGetProjectMediaMedia": (id: string, options: typeof ProjectMediaControllerGetProjectMediaMediaParams.Encoded) => Effect.Effect<typeof Media.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectMedia.media ref
*/
readonly "ProjectMediaControllerGetProjectMediaMediaRef": (id: string, options: typeof ProjectMediaControllerGetProjectMediaMediaRefParams.Encoded) => Effect.Effect<typeof ReferencedMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ProjectMedia.media ref
*/
readonly "ProjectMediaControllerPatchProjectMediaMediaRef": (id: string, options: { readonly params: typeof ProjectMediaControllerPatchProjectMediaMediaRefParams.Encoded; readonly payload: typeof ReferencedUpdateMedia.Encoded }) => Effect.Effect<typeof ReferencedMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectMedia.project
*/
readonly "ProjectMediaControllerGetProjectMediaProject": (id: string, options: typeof ProjectMediaControllerGetProjectMediaProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectMedia.project ref
*/
readonly "ProjectMediaControllerGetProjectMediaProjectRef": (id: string, options: typeof ProjectMediaControllerGetProjectMediaProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ProjectMedia.project ref
*/
readonly "ProjectMediaControllerPatchProjectMediaProjectRef": (id: string, options: { readonly params: typeof ProjectMediaControllerPatchProjectMediaProjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateProject.Encoded }) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectImpact List
*/
readonly "ProjectImpactControllerGetProjectImpactList": (options: typeof ProjectImpactControllerGetProjectImpactListParams.Encoded) => Effect.Effect<typeof ProjectImpactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ProjectImpact
*/
readonly "ProjectImpactControllerCreateProjectImpact": (options: { readonly params: typeof ProjectImpactControllerCreateProjectImpactParams.Encoded; readonly payload: typeof ProjectImpactControllerCreateProjectImpactRequest.Encoded }) => Effect.Effect<typeof ProjectImpactControllerCreateProjectImpact201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ProjectImpact by ID
*/
readonly "ProjectImpactControllerGetProjectImpactById": (id: string, options: typeof ProjectImpactControllerGetProjectImpactByIdParams.Encoded) => Effect.Effect<typeof ProjectImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ProjectImpact by ID
*/
readonly "ProjectImpactControllerDeleteProjectImpactById": (id: string, options: typeof ProjectImpactControllerDeleteProjectImpactByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ProjectImpact by ID
*/
readonly "ProjectImpactControllerUpdateProjectImpactById": (id: string, options: { readonly params: typeof ProjectImpactControllerUpdateProjectImpactByIdParams.Encoded; readonly payload: typeof UpdateProjectImpact.Encoded }) => Effect.Effect<typeof ProjectImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectImpact.asset
*/
readonly "ProjectImpactControllerGetProjectImpactAsset": (id: string, options: typeof ProjectImpactControllerGetProjectImpactAssetParams.Encoded) => Effect.Effect<typeof Asset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectImpact.asset ref
*/
readonly "ProjectImpactControllerGetProjectImpactAssetRef": (id: string, options: typeof ProjectImpactControllerGetProjectImpactAssetRefParams.Encoded) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ProjectImpact.asset ref
*/
readonly "ProjectImpactControllerPatchProjectImpactAssetRef": (id: string, options: { readonly params: typeof ProjectImpactControllerPatchProjectImpactAssetRefParams.Encoded; readonly payload: typeof ReferencedUpdateAsset.Encoded }) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectImpact.project
*/
readonly "ProjectImpactControllerGetProjectImpactProject": (id: string, options: typeof ProjectImpactControllerGetProjectImpactProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectImpact.project ref
*/
readonly "ProjectImpactControllerGetProjectImpactProjectRef": (id: string, options: typeof ProjectImpactControllerGetProjectImpactProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ProjectImpact.project ref
*/
readonly "ProjectImpactControllerPatchProjectImpactProjectRef": (id: string, options: { readonly params: typeof ProjectImpactControllerPatchProjectImpactProjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateProject.Encoded }) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectImpact.spaces
*/
readonly "ProjectImpactControllerGetProjectImpactSpaces": (id: string, options: typeof ProjectImpactControllerGetProjectImpactSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProjectImpact.spaces refs
*/
readonly "ProjectImpactControllerGetProjectImpactSpacesRef": (id: string, options: typeof ProjectImpactControllerGetProjectImpactSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ProjectImpact.spaces ref(s)
*/
readonly "ProjectImpactControllerPostProjectImpactSpacesRef": (id: string, options: { readonly params: typeof ProjectImpactControllerPostProjectImpactSpacesRefParams.Encoded; readonly payload: typeof ProjectImpactControllerPostProjectImpactSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ProjectImpact.spaces ref(s)
*/
readonly "ProjectImpactControllerDeleteProjectImpactSpacesRef": (id: string, options: { readonly params: typeof ProjectImpactControllerDeleteProjectImpactSpacesRefParams.Encoded; readonly payload: typeof ProjectImpactControllerDeleteProjectImpactSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ProjectImpact.spaces refs
*/
readonly "ProjectImpactControllerPatchProjectImpactSpacesRef": (id: string, options: { readonly params: typeof ProjectImpactControllerPatchProjectImpactSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy List
*/
readonly "PolicyControllerGetPolicyList": (options: typeof PolicyControllerGetPolicyListParams.Encoded) => Effect.Effect<typeof PolicyList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Policy
*/
readonly "PolicyControllerCreatePolicy": (options: { readonly params: typeof PolicyControllerCreatePolicyParams.Encoded; readonly payload: typeof PolicyControllerCreatePolicyRequest.Encoded }) => Effect.Effect<typeof PolicyControllerCreatePolicy201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Policy by ID
*/
readonly "PolicyControllerGetPolicyById": (id: string, options: typeof PolicyControllerGetPolicyByIdParams.Encoded) => Effect.Effect<typeof Policy.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Policy by ID
*/
readonly "PolicyControllerDeletePolicyById": (id: string, options: typeof PolicyControllerDeletePolicyByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Policy by ID
*/
readonly "PolicyControllerUpdatePolicyById": (id: string, options: { readonly params: typeof PolicyControllerUpdatePolicyByIdParams.Encoded; readonly payload: typeof UpdatePolicy.Encoded }) => Effect.Effect<typeof Policy.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.provider
*/
readonly "PolicyControllerGetPolicyProvider": (id: string, options: typeof PolicyControllerGetPolicyProviderParams.Encoded) => Effect.Effect<typeof Provider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.provider ref
*/
readonly "PolicyControllerGetPolicyProviderRef": (id: string, options: typeof PolicyControllerGetPolicyProviderRefParams.Encoded) => Effect.Effect<typeof ReferencedProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Policy.provider ref
*/
readonly "PolicyControllerPatchPolicyProviderRef": (id: string, options: { readonly params: typeof PolicyControllerPatchPolicyProviderRefParams.Encoded; readonly payload: typeof ReferencedUpdateProvider.Encoded }) => Effect.Effect<typeof ReferencedProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.template
*/
readonly "PolicyControllerGetPolicyTemplate": (id: string, options: typeof PolicyControllerGetPolicyTemplateParams.Encoded) => Effect.Effect<typeof NullablePolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.template ref
*/
readonly "PolicyControllerGetPolicyTemplateRef": (id: string, options: typeof PolicyControllerGetPolicyTemplateRefParams.Encoded) => Effect.Effect<typeof NullableReferencedPolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Policy.template ref
*/
readonly "PolicyControllerPatchPolicyTemplateRef": (id: string, options: { readonly params: typeof PolicyControllerPatchPolicyTemplateRefParams.Encoded; readonly payload: typeof NullableReferencedUpdatePolicyTemplate.Encoded }) => Effect.Effect<typeof NullableReferencedPolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.currency
*/
readonly "PolicyControllerGetPolicyCurrency": (id: string, options: typeof PolicyControllerGetPolicyCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.currency ref
*/
readonly "PolicyControllerGetPolicyCurrencyRef": (id: string, options: typeof PolicyControllerGetPolicyCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Policy.currency ref
*/
readonly "PolicyControllerPatchPolicyCurrencyRef": (id: string, options: { readonly params: typeof PolicyControllerPatchPolicyCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.assets
*/
readonly "PolicyControllerGetPolicyAssets": (id: string, options: typeof PolicyControllerGetPolicyAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.assets refs
*/
readonly "PolicyControllerGetPolicyAssetsRef": (id: string, options: typeof PolicyControllerGetPolicyAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Policy.assets ref(s)
*/
readonly "PolicyControllerPostPolicyAssetsRef": (id: string, options: { readonly params: typeof PolicyControllerPostPolicyAssetsRefParams.Encoded; readonly payload: typeof PolicyControllerPostPolicyAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Policy.assets ref(s)
*/
readonly "PolicyControllerDeletePolicyAssetsRef": (id: string, options: { readonly params: typeof PolicyControllerDeletePolicyAssetsRefParams.Encoded; readonly payload: typeof PolicyControllerDeletePolicyAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Policy.assets refs
*/
readonly "PolicyControllerPatchPolicyAssetsRef": (id: string, options: { readonly params: typeof PolicyControllerPatchPolicyAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.account
*/
readonly "PolicyControllerGetPolicyAccount": (id: string, options: typeof PolicyControllerGetPolicyAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.account ref
*/
readonly "PolicyControllerGetPolicyAccountRef": (id: string, options: typeof PolicyControllerGetPolicyAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Policy.account ref
*/
readonly "PolicyControllerPatchPolicyAccountRef": (id: string, options: { readonly params: typeof PolicyControllerPatchPolicyAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.terms
*/
readonly "PolicyControllerGetPolicyTerms": (id: string, options: typeof PolicyControllerGetPolicyTermsParams.Encoded) => Effect.Effect<typeof PolicyTermList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Policy.terms refs
*/
readonly "PolicyControllerGetPolicyTermsRef": (id: string, options: typeof PolicyControllerGetPolicyTermsRefParams.Encoded) => Effect.Effect<typeof ReferencedPolicyTermList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm List
*/
readonly "PolicyTermControllerGetPolicyTermList": (options: typeof PolicyTermControllerGetPolicyTermListParams.Encoded) => Effect.Effect<typeof PolicyTermList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create PolicyTerm
*/
readonly "PolicyTermControllerCreatePolicyTerm": (options: { readonly params: typeof PolicyTermControllerCreatePolicyTermParams.Encoded; readonly payload: typeof PolicyTermControllerCreatePolicyTermRequest.Encoded }) => Effect.Effect<typeof PolicyTermControllerCreatePolicyTerm201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get PolicyTerm by ID
*/
readonly "PolicyTermControllerGetPolicyTermById": (id: string, options: typeof PolicyTermControllerGetPolicyTermByIdParams.Encoded) => Effect.Effect<typeof PolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete PolicyTerm by ID
*/
readonly "PolicyTermControllerDeletePolicyTermById": (id: string, options: typeof PolicyTermControllerDeletePolicyTermByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update PolicyTerm by ID
*/
readonly "PolicyTermControllerUpdatePolicyTermById": (id: string, options: { readonly params: typeof PolicyTermControllerUpdatePolicyTermByIdParams.Encoded; readonly payload: typeof UpdatePolicyTerm.Encoded }) => Effect.Effect<typeof PolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.provider
*/
readonly "PolicyTermControllerGetPolicyTermProvider": (id: string, options: typeof PolicyTermControllerGetPolicyTermProviderParams.Encoded) => Effect.Effect<typeof Provider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.provider ref
*/
readonly "PolicyTermControllerGetPolicyTermProviderRef": (id: string, options: typeof PolicyTermControllerGetPolicyTermProviderRefParams.Encoded) => Effect.Effect<typeof ReferencedProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.currency
*/
readonly "PolicyTermControllerGetPolicyTermCurrency": (id: string, options: typeof PolicyTermControllerGetPolicyTermCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.currency ref
*/
readonly "PolicyTermControllerGetPolicyTermCurrencyRef": (id: string, options: typeof PolicyTermControllerGetPolicyTermCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PolicyTerm.currency ref
*/
readonly "PolicyTermControllerPatchPolicyTermCurrencyRef": (id: string, options: { readonly params: typeof PolicyTermControllerPatchPolicyTermCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.deductibles
*/
readonly "PolicyTermControllerGetPolicyTermDeductibles": (id: string, options: typeof PolicyTermControllerGetPolicyTermDeductiblesParams.Encoded) => Effect.Effect<typeof DeductibleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.deductibles refs
*/
readonly "PolicyTermControllerGetPolicyTermDeductiblesRef": (id: string, options: typeof PolicyTermControllerGetPolicyTermDeductiblesRefParams.Encoded) => Effect.Effect<typeof ReferencedDeductibleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.bucketDefinitions
*/
readonly "PolicyTermControllerGetPolicyTermBucketDefinitions": (id: string, options: typeof PolicyTermControllerGetPolicyTermBucketDefinitionsParams.Encoded) => Effect.Effect<typeof BucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.bucketDefinitions refs
*/
readonly "PolicyTermControllerGetPolicyTermBucketDefinitionsRef": (id: string, options: typeof PolicyTermControllerGetPolicyTermBucketDefinitionsRefParams.Encoded) => Effect.Effect<typeof ReferencedBucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.policy
*/
readonly "PolicyTermControllerGetPolicyTermPolicy": (id: string, options: typeof PolicyTermControllerGetPolicyTermPolicyParams.Encoded) => Effect.Effect<typeof Policy.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.policy ref
*/
readonly "PolicyTermControllerGetPolicyTermPolicyRef": (id: string, options: typeof PolicyTermControllerGetPolicyTermPolicyRefParams.Encoded) => Effect.Effect<typeof ReferencedPolicy.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PolicyTerm.policy ref
*/
readonly "PolicyTermControllerPatchPolicyTermPolicyRef": (id: string, options: { readonly params: typeof PolicyTermControllerPatchPolicyTermPolicyRefParams.Encoded; readonly payload: typeof ReferencedUpdatePolicy.Encoded }) => Effect.Effect<typeof ReferencedPolicy.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.assets
*/
readonly "PolicyTermControllerGetPolicyTermAssets": (id: string, options: typeof PolicyTermControllerGetPolicyTermAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.assets refs
*/
readonly "PolicyTermControllerGetPolicyTermAssetsRef": (id: string, options: typeof PolicyTermControllerGetPolicyTermAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add PolicyTerm.assets ref(s)
*/
readonly "PolicyTermControllerPostPolicyTermAssetsRef": (id: string, options: { readonly params: typeof PolicyTermControllerPostPolicyTermAssetsRefParams.Encoded; readonly payload: typeof PolicyTermControllerPostPolicyTermAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove PolicyTerm.assets ref(s)
*/
readonly "PolicyTermControllerDeletePolicyTermAssetsRef": (id: string, options: { readonly params: typeof PolicyTermControllerDeletePolicyTermAssetsRefParams.Encoded; readonly payload: typeof PolicyTermControllerDeletePolicyTermAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all PolicyTerm.assets refs
*/
readonly "PolicyTermControllerPatchPolicyTermAssetsRef": (id: string, options: { readonly params: typeof PolicyTermControllerPatchPolicyTermAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.template
*/
readonly "PolicyTermControllerGetPolicyTermTemplate": (id: string, options: typeof PolicyTermControllerGetPolicyTermTemplateParams.Encoded) => Effect.Effect<typeof NullablePolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTerm.template ref
*/
readonly "PolicyTermControllerGetPolicyTermTemplateRef": (id: string, options: typeof PolicyTermControllerGetPolicyTermTemplateRefParams.Encoded) => Effect.Effect<typeof NullableReferencedPolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PolicyTerm.template ref
*/
readonly "PolicyTermControllerPatchPolicyTermTemplateRef": (id: string, options: { readonly params: typeof PolicyTermControllerPatchPolicyTermTemplateRefParams.Encoded; readonly payload: typeof NullableReferencedUpdatePolicyTemplate.Encoded }) => Effect.Effect<typeof NullableReferencedPolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PhoneNumber List
*/
readonly "PhoneNumberControllerGetPhoneNumberList": (options?: typeof PhoneNumberControllerGetPhoneNumberListParams.Encoded | undefined) => Effect.Effect<typeof PhoneNumberList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create PhoneNumber
*/
readonly "PhoneNumberControllerCreatePhoneNumber": (options: { readonly params?: typeof PhoneNumberControllerCreatePhoneNumberParams.Encoded | undefined; readonly payload: typeof PhoneNumberControllerCreatePhoneNumberRequest.Encoded }) => Effect.Effect<typeof PhoneNumberControllerCreatePhoneNumber201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get PhoneNumber by ID
*/
readonly "PhoneNumberControllerGetPhoneNumberById": (id: string, options?: typeof PhoneNumberControllerGetPhoneNumberByIdParams.Encoded | undefined) => Effect.Effect<typeof PhoneNumber.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete PhoneNumber by ID
*/
readonly "PhoneNumberControllerDeletePhoneNumberById": (id: string) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update PhoneNumber by ID
*/
readonly "PhoneNumberControllerUpdatePhoneNumberById": (id: string, options: { readonly params?: typeof PhoneNumberControllerUpdatePhoneNumberByIdParams.Encoded | undefined; readonly payload: typeof UpdatePhoneNumber.Encoded }) => Effect.Effect<typeof PhoneNumber.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PhoneNumber.identity
*/
readonly "PhoneNumberControllerGetPhoneNumberIdentity": (id: string, options?: typeof PhoneNumberControllerGetPhoneNumberIdentityParams.Encoded | undefined) => Effect.Effect<typeof Identity.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PhoneNumber.identity ref
*/
readonly "PhoneNumberControllerGetPhoneNumberIdentityRef": (id: string) => Effect.Effect<typeof ReferencedIdentity.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PhoneNumber.identity ref
*/
readonly "PhoneNumberControllerPatchPhoneNumberIdentityRef": (id: string, options: typeof ReferencedUpdateIdentity.Encoded) => Effect.Effect<typeof ReferencedIdentity.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media List
*/
readonly "MediaControllerGetMediaList": (options: typeof MediaControllerGetMediaListParams.Encoded) => Effect.Effect<typeof MediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Media
*/
readonly "MediaControllerCreateMedia": (options: { readonly params: typeof MediaControllerCreateMediaParams.Encoded; readonly payload: typeof MediaControllerCreateMediaRequest.Encoded }) => Effect.Effect<typeof MediaControllerCreateMedia201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Media by ID
*/
readonly "MediaControllerGetMediaById": (id: string, options: typeof MediaControllerGetMediaByIdParams.Encoded) => Effect.Effect<typeof Media.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Media by ID
*/
readonly "MediaControllerDeleteMediaById": (id: string, options: typeof MediaControllerDeleteMediaByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Media by ID
*/
readonly "MediaControllerUpdateMediaById": (id: string, options: { readonly params: typeof MediaControllerUpdateMediaByIdParams.Encoded; readonly payload: typeof UpdateMedia.Encoded }) => Effect.Effect<typeof Media.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.account
*/
readonly "MediaControllerGetMediaAccount": (id: string, options: typeof MediaControllerGetMediaAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.account ref
*/
readonly "MediaControllerGetMediaAccountRef": (id: string, options: typeof MediaControllerGetMediaAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Media.account ref
*/
readonly "MediaControllerPatchMediaAccountRef": (id: string, options: { readonly params: typeof MediaControllerPatchMediaAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.file
*/
readonly "MediaControllerGetMediaFile": (id: string, options: typeof MediaControllerGetMediaFileParams.Encoded) => Effect.Effect<typeof File.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.file ref
*/
readonly "MediaControllerGetMediaFileRef": (id: string, options: typeof MediaControllerGetMediaFileRefParams.Encoded) => Effect.Effect<typeof ReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Media.file ref
*/
readonly "MediaControllerPatchMediaFileRef": (id: string, options: { readonly params: typeof MediaControllerPatchMediaFileRefParams.Encoded; readonly payload: typeof ReferencedUpdateFile.Encoded }) => Effect.Effect<typeof ReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.assets
*/
readonly "MediaControllerGetMediaAssets": (id: string, options: typeof MediaControllerGetMediaAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.assets refs
*/
readonly "MediaControllerGetMediaAssetsRef": (id: string, options: typeof MediaControllerGetMediaAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Media.assets ref(s)
*/
readonly "MediaControllerPostMediaAssetsRef": (id: string, options: { readonly params: typeof MediaControllerPostMediaAssetsRefParams.Encoded; readonly payload: typeof MediaControllerPostMediaAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Media.assets ref(s)
*/
readonly "MediaControllerDeleteMediaAssetsRef": (id: string, options: { readonly params: typeof MediaControllerDeleteMediaAssetsRefParams.Encoded; readonly payload: typeof MediaControllerDeleteMediaAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Media.assets refs
*/
readonly "MediaControllerPatchMediaAssetsRef": (id: string, options: { readonly params: typeof MediaControllerPatchMediaAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.spaces
*/
readonly "MediaControllerGetMediaSpaces": (id: string, options: typeof MediaControllerGetMediaSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.spaces refs
*/
readonly "MediaControllerGetMediaSpacesRef": (id: string, options: typeof MediaControllerGetMediaSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Media.spaces ref(s)
*/
readonly "MediaControllerPostMediaSpacesRef": (id: string, options: { readonly params: typeof MediaControllerPostMediaSpacesRefParams.Encoded; readonly payload: typeof MediaControllerPostMediaSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Media.spaces ref(s)
*/
readonly "MediaControllerDeleteMediaSpacesRef": (id: string, options: { readonly params: typeof MediaControllerDeleteMediaSpacesRefParams.Encoded; readonly payload: typeof MediaControllerDeleteMediaSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Media.spaces refs
*/
readonly "MediaControllerPatchMediaSpacesRef": (id: string, options: { readonly params: typeof MediaControllerPatchMediaSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.projectAssignments
*/
readonly "MediaControllerGetMediaProjectAssignments": (id: string, options: typeof MediaControllerGetMediaProjectAssignmentsParams.Encoded) => Effect.Effect<typeof ProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.projectAssignments refs
*/
readonly "MediaControllerGetMediaProjectAssignmentsRef": (id: string, options: typeof MediaControllerGetMediaProjectAssignmentsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Media.projectAssignments ref(s)
*/
readonly "MediaControllerPostMediaProjectAssignmentsRef": (id: string, options: { readonly params: typeof MediaControllerPostMediaProjectAssignmentsRefParams.Encoded; readonly payload: typeof MediaControllerPostMediaProjectAssignmentsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Media.projectAssignments ref(s)
*/
readonly "MediaControllerDeleteMediaProjectAssignmentsRef": (id: string, options: { readonly params: typeof MediaControllerDeleteMediaProjectAssignmentsRefParams.Encoded; readonly payload: typeof MediaControllerDeleteMediaProjectAssignmentsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Media.projectAssignments refs
*/
readonly "MediaControllerPatchMediaProjectAssignmentsRef": (id: string, options: { readonly params: typeof MediaControllerPatchMediaProjectAssignmentsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectMediaList.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.entrySourceAnnotations
*/
readonly "MediaControllerGetMediaEntrySourceAnnotations": (id: string, options: typeof MediaControllerGetMediaEntrySourceAnnotationsParams.Encoded) => Effect.Effect<typeof EntrySourceMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Media.entrySourceAnnotations refs
*/
readonly "MediaControllerGetMediaEntrySourceAnnotationsRef": (id: string, options: typeof MediaControllerGetMediaEntrySourceAnnotationsRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item List
*/
readonly "ItemControllerGetItemList": (options: typeof ItemControllerGetItemListParams.Encoded) => Effect.Effect<typeof ItemList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Item
*/
readonly "ItemControllerCreateItem": (options: { readonly params: typeof ItemControllerCreateItemParams.Encoded; readonly payload: typeof ItemControllerCreateItemRequest.Encoded }) => Effect.Effect<typeof ItemControllerCreateItem201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Item by ID
*/
readonly "ItemControllerGetItemById": (id: string, options: typeof ItemControllerGetItemByIdParams.Encoded) => Effect.Effect<typeof Item.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Item by ID
*/
readonly "ItemControllerDeleteItemById": (id: string, options: typeof ItemControllerDeleteItemByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Item by ID
*/
readonly "ItemControllerUpdateItemById": (id: string, options: { readonly params: typeof ItemControllerUpdateItemByIdParams.Encoded; readonly payload: typeof UpdateItem.Encoded }) => Effect.Effect<typeof Item.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.metadata
*/
readonly "ItemControllerGetItemMetadata": (id: string, options: typeof ItemControllerGetItemMetadataParams.Encoded) => Effect.Effect<typeof EntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.metadata ref
*/
readonly "ItemControllerGetItemMetadataRef": (id: string, options: typeof ItemControllerGetItemMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.project
*/
readonly "ItemControllerGetItemProject": (id: string, options: typeof ItemControllerGetItemProjectParams.Encoded) => Effect.Effect<typeof NullableProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.project ref
*/
readonly "ItemControllerGetItemProjectRef": (id: string, options: typeof ItemControllerGetItemProjectRefParams.Encoded) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Item.project ref
*/
readonly "ItemControllerPatchItemProjectRef": (id: string, options: { readonly params: typeof ItemControllerPatchItemProjectRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateProject.Encoded }) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.account
*/
readonly "ItemControllerGetItemAccount": (id: string, options: typeof ItemControllerGetItemAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.account ref
*/
readonly "ItemControllerGetItemAccountRef": (id: string, options: typeof ItemControllerGetItemAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Item.account ref
*/
readonly "ItemControllerPatchItemAccountRef": (id: string, options: { readonly params: typeof ItemControllerPatchItemAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.currency
*/
readonly "ItemControllerGetItemCurrency": (id: string, options: typeof ItemControllerGetItemCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.currency ref
*/
readonly "ItemControllerGetItemCurrencyRef": (id: string, options: typeof ItemControllerGetItemCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Item.currency ref
*/
readonly "ItemControllerPatchItemCurrencyRef": (id: string, options: { readonly params: typeof ItemControllerPatchItemCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.entries
*/
readonly "ItemControllerGetItemEntries": (id: string, options: typeof ItemControllerGetItemEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.entries refs
*/
readonly "ItemControllerGetItemEntriesRef": (id: string, options: typeof ItemControllerGetItemEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.appraisals
*/
readonly "ItemControllerGetItemAppraisals": (id: string, options: typeof ItemControllerGetItemAppraisalsParams.Encoded) => Effect.Effect<typeof ItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.appraisals refs
*/
readonly "ItemControllerGetItemAppraisalsRef": (id: string, options: typeof ItemControllerGetItemAppraisalsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.selectedAppraisal
*/
readonly "ItemControllerGetItemSelectedAppraisal": (id: string, options: typeof ItemControllerGetItemSelectedAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.selectedAppraisal ref
*/
readonly "ItemControllerGetItemSelectedAppraisalRef": (id: string, options: typeof ItemControllerGetItemSelectedAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Item.selectedAppraisal ref
*/
readonly "ItemControllerPatchItemSelectedAppraisalRef": (id: string, options: { readonly params: typeof ItemControllerPatchItemSelectedAppraisalRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItemAppraisal.Encoded }) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.relevantAppraisal
*/
readonly "ItemControllerGetItemRelevantAppraisal": (id: string, options: typeof ItemControllerGetItemRelevantAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.relevantAppraisal ref
*/
readonly "ItemControllerGetItemRelevantAppraisalRef": (id: string, options: typeof ItemControllerGetItemRelevantAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.type
*/
readonly "ItemControllerGetItemType": (id: string, options: typeof ItemControllerGetItemTypeParams.Encoded) => Effect.Effect<typeof NullableItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.type ref
*/
readonly "ItemControllerGetItemTypeRef": (id: string, options: typeof ItemControllerGetItemTypeRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Item.type ref
*/
readonly "ItemControllerPatchItemTypeRef": (id: string, options: { readonly params: typeof ItemControllerPatchItemTypeRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItemType.Encoded }) => Effect.Effect<typeof NullableReferencedItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.asset
*/
readonly "ItemControllerGetItemAsset": (id: string, options: typeof ItemControllerGetItemAssetParams.Encoded) => Effect.Effect<typeof NullableAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.asset ref
*/
readonly "ItemControllerGetItemAssetRef": (id: string, options: typeof ItemControllerGetItemAssetRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Item.asset ref
*/
readonly "ItemControllerPatchItemAssetRef": (id: string, options: { readonly params: typeof ItemControllerPatchItemAssetRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAsset.Encoded }) => Effect.Effect<typeof NullableReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.space
*/
readonly "ItemControllerGetItemSpace": (id: string, options: typeof ItemControllerGetItemSpaceParams.Encoded) => Effect.Effect<typeof NullableSpace.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.space ref
*/
readonly "ItemControllerGetItemSpaceRef": (id: string, options: typeof ItemControllerGetItemSpaceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedSpace.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Item.space ref
*/
readonly "ItemControllerPatchItemSpaceRef": (id: string, options: { readonly params: typeof ItemControllerPatchItemSpaceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateSpace.Encoded }) => Effect.Effect<typeof NullableReferencedSpace.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.replaces
*/
readonly "ItemControllerGetItemReplaces": (id: string, options: typeof ItemControllerGetItemReplacesParams.Encoded) => Effect.Effect<typeof NullableItemImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.replaces ref
*/
readonly "ItemControllerGetItemReplacesRef": (id: string, options: typeof ItemControllerGetItemReplacesRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.payments
*/
readonly "ItemControllerGetItemPayments": (id: string, options: typeof ItemControllerGetItemPaymentsParams.Encoded) => Effect.Effect<typeof PaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.payments refs
*/
readonly "ItemControllerGetItemPaymentsRef": (id: string, options: typeof ItemControllerGetItemPaymentsRefParams.Encoded) => Effect.Effect<typeof ReferencedPaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.invoices
*/
readonly "ItemControllerGetItemInvoices": (id: string, options: typeof ItemControllerGetItemInvoicesParams.Encoded) => Effect.Effect<typeof InvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.invoices refs
*/
readonly "ItemControllerGetItemInvoicesRef": (id: string, options: typeof ItemControllerGetItemInvoicesRefParams.Encoded) => Effect.Effect<typeof ReferencedInvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.estimates
*/
readonly "ItemControllerGetItemEstimates": (id: string, options: typeof ItemControllerGetItemEstimatesParams.Encoded) => Effect.Effect<typeof EstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.estimates refs
*/
readonly "ItemControllerGetItemEstimatesRef": (id: string, options: typeof ItemControllerGetItemEstimatesRefParams.Encoded) => Effect.Effect<typeof ReferencedEstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.changeOrders
*/
readonly "ItemControllerGetItemChangeOrders": (id: string, options: typeof ItemControllerGetItemChangeOrdersParams.Encoded) => Effect.Effect<typeof ChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.changeOrders refs
*/
readonly "ItemControllerGetItemChangeOrdersRef": (id: string, options: typeof ItemControllerGetItemChangeOrdersRefParams.Encoded) => Effect.Effect<typeof ReferencedChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.impacts
*/
readonly "ItemControllerGetItemImpacts": (id: string, options: typeof ItemControllerGetItemImpactsParams.Encoded) => Effect.Effect<typeof ItemImpactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Item.impacts refs
*/
readonly "ItemControllerGetItemImpactsRef": (id: string, options: typeof ItemControllerGetItemImpactsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemImpactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemProductSuggestion List
*/
readonly "ItemProductSuggestionControllerGetItemProductSuggestionList": (options: typeof ItemProductSuggestionControllerGetItemProductSuggestionListParams.Encoded) => Effect.Effect<typeof ItemProductSuggestionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ItemProductSuggestion
*/
readonly "ItemProductSuggestionControllerCreateItemProductSuggestion": (options: { readonly params: typeof ItemProductSuggestionControllerCreateItemProductSuggestionParams.Encoded; readonly payload: typeof ItemProductSuggestionControllerCreateItemProductSuggestionRequest.Encoded }) => Effect.Effect<typeof ItemProductSuggestionControllerCreateItemProductSuggestion201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ItemProductSuggestion by ID
*/
readonly "ItemProductSuggestionControllerGetItemProductSuggestionById": (id: string, options: typeof ItemProductSuggestionControllerGetItemProductSuggestionByIdParams.Encoded) => Effect.Effect<typeof ItemProductSuggestion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ItemProductSuggestion by ID
*/
readonly "ItemProductSuggestionControllerDeleteItemProductSuggestionById": (id: string, options: typeof ItemProductSuggestionControllerDeleteItemProductSuggestionByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ItemProductSuggestion by ID
*/
readonly "ItemProductSuggestionControllerUpdateItemProductSuggestionById": (id: string, options: { readonly params: typeof ItemProductSuggestionControllerUpdateItemProductSuggestionByIdParams.Encoded; readonly payload: typeof UpdateItemProductSuggestion.Encoded }) => Effect.Effect<typeof ItemProductSuggestion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemProductSuggestion.item
*/
readonly "ItemProductSuggestionControllerGetItemProductSuggestionItem": (id: string, options: typeof ItemProductSuggestionControllerGetItemProductSuggestionItemParams.Encoded) => Effect.Effect<typeof Item.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemProductSuggestion.item ref
*/
readonly "ItemProductSuggestionControllerGetItemProductSuggestionItemRef": (id: string, options: typeof ItemProductSuggestionControllerGetItemProductSuggestionItemRefParams.Encoded) => Effect.Effect<typeof ReferencedItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemProductSuggestion.item ref
*/
readonly "ItemProductSuggestionControllerPatchItemProductSuggestionItemRef": (id: string, options: { readonly params: typeof ItemProductSuggestionControllerPatchItemProductSuggestionItemRefParams.Encoded; readonly payload: typeof ReferencedUpdateItem.Encoded }) => Effect.Effect<typeof ReferencedItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion List
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionList": (options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionListParams.Encoded) => Effect.Effect<typeof ItemMediaSuggestionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ItemMediaSuggestion
*/
readonly "ItemMediaSuggestionControllerCreateItemMediaSuggestion": (options: { readonly params: typeof ItemMediaSuggestionControllerCreateItemMediaSuggestionParams.Encoded; readonly payload: typeof ItemMediaSuggestionControllerCreateItemMediaSuggestionRequest.Encoded }) => Effect.Effect<typeof ItemMediaSuggestionControllerCreateItemMediaSuggestion201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ItemMediaSuggestion by ID
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionById": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionByIdParams.Encoded) => Effect.Effect<typeof ItemMediaSuggestion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ItemMediaSuggestion by ID
*/
readonly "ItemMediaSuggestionControllerDeleteItemMediaSuggestionById": (id: string, options: typeof ItemMediaSuggestionControllerDeleteItemMediaSuggestionByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ItemMediaSuggestion by ID
*/
readonly "ItemMediaSuggestionControllerUpdateItemMediaSuggestionById": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerUpdateItemMediaSuggestionByIdParams.Encoded; readonly payload: typeof UpdateItemMediaSuggestion.Encoded }) => Effect.Effect<typeof ItemMediaSuggestion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.media
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionMedia": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionMediaParams.Encoded) => Effect.Effect<typeof Media.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.media ref
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionMediaRef": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionMediaRefParams.Encoded) => Effect.Effect<typeof ReferencedMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemMediaSuggestion.media ref
*/
readonly "ItemMediaSuggestionControllerPatchItemMediaSuggestionMediaRef": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerPatchItemMediaSuggestionMediaRefParams.Encoded; readonly payload: typeof ReferencedUpdateMedia.Encoded }) => Effect.Effect<typeof ReferencedMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.item
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionItem": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionItemParams.Encoded) => Effect.Effect<typeof NullableItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.item ref
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionItemRef": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionItemRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemMediaSuggestion.item ref
*/
readonly "ItemMediaSuggestionControllerPatchItemMediaSuggestionItemRef": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerPatchItemMediaSuggestionItemRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItem.Encoded }) => Effect.Effect<typeof NullableReferencedItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.existing_items
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItems": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsParams.Encoded) => Effect.Effect<typeof ItemList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.existing_items refs
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsRef": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ItemMediaSuggestion.existing_items ref(s)
*/
readonly "ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRef": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefParams.Encoded; readonly payload: typeof ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedItemList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ItemMediaSuggestion.existing_items ref(s)
*/
readonly "ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRef": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRefParams.Encoded; readonly payload: typeof ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedItemList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ItemMediaSuggestion.existing_items refs
*/
readonly "ItemMediaSuggestionControllerPatchItemMediaSuggestionExistingItemsRef": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerPatchItemMediaSuggestionExistingItemsRefParams.Encoded; readonly payload: typeof ReferencedUpdateItemList.Encoded }) => Effect.Effect<typeof ReferencedItemList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.type
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionType": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionTypeParams.Encoded) => Effect.Effect<typeof NullableItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.type ref
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionTypeRef": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionTypeRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemMediaSuggestion.type ref
*/
readonly "ItemMediaSuggestionControllerPatchItemMediaSuggestionTypeRef": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerPatchItemMediaSuggestionTypeRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItemType.Encoded }) => Effect.Effect<typeof NullableReferencedItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.asset
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionAsset": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionAssetParams.Encoded) => Effect.Effect<typeof NullableAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.asset ref
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionAssetRef": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionAssetRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemMediaSuggestion.asset ref
*/
readonly "ItemMediaSuggestionControllerPatchItemMediaSuggestionAssetRef": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerPatchItemMediaSuggestionAssetRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAsset.Encoded }) => Effect.Effect<typeof NullableReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.space
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionSpace": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceParams.Encoded) => Effect.Effect<typeof NullableSpace.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemMediaSuggestion.space ref
*/
readonly "ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceRef": (id: string, options: typeof ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedSpace.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemMediaSuggestion.space ref
*/
readonly "ItemMediaSuggestionControllerPatchItemMediaSuggestionSpaceRef": (id: string, options: { readonly params: typeof ItemMediaSuggestionControllerPatchItemMediaSuggestionSpaceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateSpace.Encoded }) => Effect.Effect<typeof NullableReferencedSpace.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact List
*/
readonly "ItemImpactControllerGetItemImpactList": (options: typeof ItemImpactControllerGetItemImpactListParams.Encoded) => Effect.Effect<typeof ItemImpactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ItemImpact
*/
readonly "ItemImpactControllerCreateItemImpact": (options: { readonly params: typeof ItemImpactControllerCreateItemImpactParams.Encoded; readonly payload: typeof ItemImpactControllerCreateItemImpactRequest.Encoded }) => Effect.Effect<typeof ItemImpactControllerCreateItemImpact201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ItemImpact by ID
*/
readonly "ItemImpactControllerGetItemImpactById": (id: string, options: typeof ItemImpactControllerGetItemImpactByIdParams.Encoded) => Effect.Effect<typeof ItemImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ItemImpact by ID
*/
readonly "ItemImpactControllerDeleteItemImpactById": (id: string, options: typeof ItemImpactControllerDeleteItemImpactByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ItemImpact by ID
*/
readonly "ItemImpactControllerUpdateItemImpactById": (id: string, options: { readonly params: typeof ItemImpactControllerUpdateItemImpactByIdParams.Encoded; readonly payload: typeof UpdateItemImpact.Encoded }) => Effect.Effect<typeof ItemImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.metadata
*/
readonly "ItemImpactControllerGetItemImpactMetadata": (id: string, options: typeof ItemImpactControllerGetItemImpactMetadataParams.Encoded) => Effect.Effect<typeof EntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.metadata ref
*/
readonly "ItemImpactControllerGetItemImpactMetadataRef": (id: string, options: typeof ItemImpactControllerGetItemImpactMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.project
*/
readonly "ItemImpactControllerGetItemImpactProject": (id: string, options: typeof ItemImpactControllerGetItemImpactProjectParams.Encoded) => Effect.Effect<typeof NullableProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.project ref
*/
readonly "ItemImpactControllerGetItemImpactProjectRef": (id: string, options: typeof ItemImpactControllerGetItemImpactProjectRefParams.Encoded) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemImpact.project ref
*/
readonly "ItemImpactControllerPatchItemImpactProjectRef": (id: string, options: { readonly params: typeof ItemImpactControllerPatchItemImpactProjectRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateProject.Encoded }) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.account
*/
readonly "ItemImpactControllerGetItemImpactAccount": (id: string, options: typeof ItemImpactControllerGetItemImpactAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.account ref
*/
readonly "ItemImpactControllerGetItemImpactAccountRef": (id: string, options: typeof ItemImpactControllerGetItemImpactAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemImpact.account ref
*/
readonly "ItemImpactControllerPatchItemImpactAccountRef": (id: string, options: { readonly params: typeof ItemImpactControllerPatchItemImpactAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.currency
*/
readonly "ItemImpactControllerGetItemImpactCurrency": (id: string, options: typeof ItemImpactControllerGetItemImpactCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.currency ref
*/
readonly "ItemImpactControllerGetItemImpactCurrencyRef": (id: string, options: typeof ItemImpactControllerGetItemImpactCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemImpact.currency ref
*/
readonly "ItemImpactControllerPatchItemImpactCurrencyRef": (id: string, options: { readonly params: typeof ItemImpactControllerPatchItemImpactCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.entries
*/
readonly "ItemImpactControllerGetItemImpactEntries": (id: string, options: typeof ItemImpactControllerGetItemImpactEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.entries refs
*/
readonly "ItemImpactControllerGetItemImpactEntriesRef": (id: string, options: typeof ItemImpactControllerGetItemImpactEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.appraisals
*/
readonly "ItemImpactControllerGetItemImpactAppraisals": (id: string, options: typeof ItemImpactControllerGetItemImpactAppraisalsParams.Encoded) => Effect.Effect<typeof ItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.appraisals refs
*/
readonly "ItemImpactControllerGetItemImpactAppraisalsRef": (id: string, options: typeof ItemImpactControllerGetItemImpactAppraisalsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.selectedAppraisal
*/
readonly "ItemImpactControllerGetItemImpactSelectedAppraisal": (id: string, options: typeof ItemImpactControllerGetItemImpactSelectedAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.selectedAppraisal ref
*/
readonly "ItemImpactControllerGetItemImpactSelectedAppraisalRef": (id: string, options: typeof ItemImpactControllerGetItemImpactSelectedAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemImpact.selectedAppraisal ref
*/
readonly "ItemImpactControllerPatchItemImpactSelectedAppraisalRef": (id: string, options: { readonly params: typeof ItemImpactControllerPatchItemImpactSelectedAppraisalRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItemAppraisal.Encoded }) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.relevantAppraisal
*/
readonly "ItemImpactControllerGetItemImpactRelevantAppraisal": (id: string, options: typeof ItemImpactControllerGetItemImpactRelevantAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.relevantAppraisal ref
*/
readonly "ItemImpactControllerGetItemImpactRelevantAppraisalRef": (id: string, options: typeof ItemImpactControllerGetItemImpactRelevantAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.item
*/
readonly "ItemImpactControllerGetItemImpactItem": (id: string, options: typeof ItemImpactControllerGetItemImpactItemParams.Encoded) => Effect.Effect<typeof Item.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.item ref
*/
readonly "ItemImpactControllerGetItemImpactItemRef": (id: string, options: typeof ItemImpactControllerGetItemImpactItemRefParams.Encoded) => Effect.Effect<typeof ReferencedItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemImpact.item ref
*/
readonly "ItemImpactControllerPatchItemImpactItemRef": (id: string, options: { readonly params: typeof ItemImpactControllerPatchItemImpactItemRefParams.Encoded; readonly payload: typeof ReferencedUpdateItem.Encoded }) => Effect.Effect<typeof ReferencedItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.replacement
*/
readonly "ItemImpactControllerGetItemImpactReplacement": (id: string, options: typeof ItemImpactControllerGetItemImpactReplacementParams.Encoded) => Effect.Effect<typeof NullableItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.replacement ref
*/
readonly "ItemImpactControllerGetItemImpactReplacementRef": (id: string, options: typeof ItemImpactControllerGetItemImpactReplacementRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ItemImpact.replacement ref
*/
readonly "ItemImpactControllerPatchItemImpactReplacementRef": (id: string, options: { readonly params: typeof ItemImpactControllerPatchItemImpactReplacementRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItem.Encoded }) => Effect.Effect<typeof NullableReferencedItem.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.payments
*/
readonly "ItemImpactControllerGetItemImpactPayments": (id: string, options: typeof ItemImpactControllerGetItemImpactPaymentsParams.Encoded) => Effect.Effect<typeof PaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.payments refs
*/
readonly "ItemImpactControllerGetItemImpactPaymentsRef": (id: string, options: typeof ItemImpactControllerGetItemImpactPaymentsRefParams.Encoded) => Effect.Effect<typeof ReferencedPaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.invoices
*/
readonly "ItemImpactControllerGetItemImpactInvoices": (id: string, options: typeof ItemImpactControllerGetItemImpactInvoicesParams.Encoded) => Effect.Effect<typeof InvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.invoices refs
*/
readonly "ItemImpactControllerGetItemImpactInvoicesRef": (id: string, options: typeof ItemImpactControllerGetItemImpactInvoicesRefParams.Encoded) => Effect.Effect<typeof ReferencedInvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.estimates
*/
readonly "ItemImpactControllerGetItemImpactEstimates": (id: string, options: typeof ItemImpactControllerGetItemImpactEstimatesParams.Encoded) => Effect.Effect<typeof EstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.estimates refs
*/
readonly "ItemImpactControllerGetItemImpactEstimatesRef": (id: string, options: typeof ItemImpactControllerGetItemImpactEstimatesRefParams.Encoded) => Effect.Effect<typeof ReferencedEstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.changeOrders
*/
readonly "ItemImpactControllerGetItemImpactChangeOrders": (id: string, options: typeof ItemImpactControllerGetItemImpactChangeOrdersParams.Encoded) => Effect.Effect<typeof ChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.changeOrders refs
*/
readonly "ItemImpactControllerGetItemImpactChangeOrdersRef": (id: string, options: typeof ItemImpactControllerGetItemImpactChangeOrdersRefParams.Encoded) => Effect.Effect<typeof ReferencedChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.itemType
*/
readonly "ItemImpactControllerGetItemImpactItemType": (id: string, options: typeof ItemImpactControllerGetItemImpactItemTypeParams.Encoded) => Effect.Effect<typeof NullableItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemImpact.itemType ref
*/
readonly "ItemImpactControllerGetItemImpactItemTypeRef": (id: string, options: typeof ItemImpactControllerGetItemImpactItemTypeRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident List
*/
readonly "IncidentControllerGetIncidentList": (options: typeof IncidentControllerGetIncidentListParams.Encoded) => Effect.Effect<typeof IncidentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Incident
*/
readonly "IncidentControllerCreateIncident": (options: { readonly params: typeof IncidentControllerCreateIncidentParams.Encoded; readonly payload: typeof IncidentControllerCreateIncidentRequest.Encoded }) => Effect.Effect<typeof IncidentControllerCreateIncident201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Incident by ID
*/
readonly "IncidentControllerGetIncidentById": (id: string, options: typeof IncidentControllerGetIncidentByIdParams.Encoded) => Effect.Effect<typeof Incident.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Incident by ID
*/
readonly "IncidentControllerDeleteIncidentById": (id: string, options: typeof IncidentControllerDeleteIncidentByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Incident by ID
*/
readonly "IncidentControllerUpdateIncidentById": (id: string, options: { readonly params: typeof IncidentControllerUpdateIncidentByIdParams.Encoded; readonly payload: typeof UpdateIncident.Encoded }) => Effect.Effect<typeof Incident.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident.account
*/
readonly "IncidentControllerGetIncidentAccount": (id: string, options: typeof IncidentControllerGetIncidentAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident.account ref
*/
readonly "IncidentControllerGetIncidentAccountRef": (id: string, options: typeof IncidentControllerGetIncidentAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Incident.account ref
*/
readonly "IncidentControllerPatchIncidentAccountRef": (id: string, options: { readonly params: typeof IncidentControllerPatchIncidentAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident.mediaAttachments
*/
readonly "IncidentControllerGetIncidentMediaAttachments": (id: string, options: typeof IncidentControllerGetIncidentMediaAttachmentsParams.Encoded) => Effect.Effect<typeof ProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident.mediaAttachments refs
*/
readonly "IncidentControllerGetIncidentMediaAttachmentsRef": (id: string, options: typeof IncidentControllerGetIncidentMediaAttachmentsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Incident.mediaAttachments ref(s)
*/
readonly "IncidentControllerPostIncidentMediaAttachmentsRef": (id: string, options: { readonly params: typeof IncidentControllerPostIncidentMediaAttachmentsRefParams.Encoded; readonly payload: typeof IncidentControllerPostIncidentMediaAttachmentsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Incident.mediaAttachments ref(s)
*/
readonly "IncidentControllerDeleteIncidentMediaAttachmentsRef": (id: string, options: { readonly params: typeof IncidentControllerDeleteIncidentMediaAttachmentsRefParams.Encoded; readonly payload: typeof IncidentControllerDeleteIncidentMediaAttachmentsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Incident.mediaAttachments refs
*/
readonly "IncidentControllerPatchIncidentMediaAttachmentsRef": (id: string, options: { readonly params: typeof IncidentControllerPatchIncidentMediaAttachmentsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectMediaList.Encoded }) => Effect.Effect<typeof ReferencedProjectMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident.type
*/
readonly "IncidentControllerGetIncidentType": (id: string, options: typeof IncidentControllerGetIncidentTypeParams.Encoded) => Effect.Effect<typeof IncidentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident.type ref
*/
readonly "IncidentControllerGetIncidentTypeRef": (id: string, options: typeof IncidentControllerGetIncidentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedIncidentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Incident.type ref
*/
readonly "IncidentControllerPatchIncidentTypeRef": (id: string, options: { readonly params: typeof IncidentControllerPatchIncidentTypeRefParams.Encoded; readonly payload: typeof ReferencedUpdateIncidentType.Encoded }) => Effect.Effect<typeof ReferencedIncidentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident.disaster
*/
readonly "IncidentControllerGetIncidentDisaster": (id: string, options: typeof IncidentControllerGetIncidentDisasterParams.Encoded) => Effect.Effect<typeof NullableDisaster.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Incident.disaster ref
*/
readonly "IncidentControllerGetIncidentDisasterRef": (id: string, options: typeof IncidentControllerGetIncidentDisasterRefParams.Encoded) => Effect.Effect<typeof NullableReferencedDisaster.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Incident.disaster ref
*/
readonly "IncidentControllerPatchIncidentDisasterRef": (id: string, options: { readonly params: typeof IncidentControllerPatchIncidentDisasterRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateDisaster.Encoded }) => Effect.Effect<typeof NullableReferencedDisaster.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact List
*/
readonly "IncidentImpactControllerGetIncidentImpactList": (options: typeof IncidentImpactControllerGetIncidentImpactListParams.Encoded) => Effect.Effect<typeof IncidentImpactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create IncidentImpact
*/
readonly "IncidentImpactControllerCreateIncidentImpact": (options: { readonly params: typeof IncidentImpactControllerCreateIncidentImpactParams.Encoded; readonly payload: typeof IncidentImpactControllerCreateIncidentImpactRequest.Encoded }) => Effect.Effect<typeof IncidentImpactControllerCreateIncidentImpact201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get IncidentImpact by ID
*/
readonly "IncidentImpactControllerGetIncidentImpactById": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactByIdParams.Encoded) => Effect.Effect<typeof IncidentImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete IncidentImpact by ID
*/
readonly "IncidentImpactControllerDeleteIncidentImpactById": (id: string, options: typeof IncidentImpactControllerDeleteIncidentImpactByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update IncidentImpact by ID
*/
readonly "IncidentImpactControllerUpdateIncidentImpactById": (id: string, options: { readonly params: typeof IncidentImpactControllerUpdateIncidentImpactByIdParams.Encoded; readonly payload: typeof UpdateIncidentImpact.Encoded }) => Effect.Effect<typeof IncidentImpact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact.asset
*/
readonly "IncidentImpactControllerGetIncidentImpactAsset": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactAssetParams.Encoded) => Effect.Effect<typeof Asset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact.asset ref
*/
readonly "IncidentImpactControllerGetIncidentImpactAssetRef": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactAssetRefParams.Encoded) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace IncidentImpact.asset ref
*/
readonly "IncidentImpactControllerPatchIncidentImpactAssetRef": (id: string, options: { readonly params: typeof IncidentImpactControllerPatchIncidentImpactAssetRefParams.Encoded; readonly payload: typeof ReferencedUpdateAsset.Encoded }) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact.project
*/
readonly "IncidentImpactControllerGetIncidentImpactProject": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact.project ref
*/
readonly "IncidentImpactControllerGetIncidentImpactProjectRef": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace IncidentImpact.project ref
*/
readonly "IncidentImpactControllerPatchIncidentImpactProjectRef": (id: string, options: { readonly params: typeof IncidentImpactControllerPatchIncidentImpactProjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateProject.Encoded }) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact.spaces
*/
readonly "IncidentImpactControllerGetIncidentImpactSpaces": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact.spaces refs
*/
readonly "IncidentImpactControllerGetIncidentImpactSpacesRef": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add IncidentImpact.spaces ref(s)
*/
readonly "IncidentImpactControllerPostIncidentImpactSpacesRef": (id: string, options: { readonly params: typeof IncidentImpactControllerPostIncidentImpactSpacesRefParams.Encoded; readonly payload: typeof IncidentImpactControllerPostIncidentImpactSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove IncidentImpact.spaces ref(s)
*/
readonly "IncidentImpactControllerDeleteIncidentImpactSpacesRef": (id: string, options: { readonly params: typeof IncidentImpactControllerDeleteIncidentImpactSpacesRefParams.Encoded; readonly payload: typeof IncidentImpactControllerDeleteIncidentImpactSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all IncidentImpact.spaces refs
*/
readonly "IncidentImpactControllerPatchIncidentImpactSpacesRef": (id: string, options: { readonly params: typeof IncidentImpactControllerPatchIncidentImpactSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact.perils
*/
readonly "IncidentImpactControllerGetIncidentImpactPerils": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactPerilsParams.Encoded) => Effect.Effect<typeof PerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentImpact.perils refs
*/
readonly "IncidentImpactControllerGetIncidentImpactPerilsRef": (id: string, options: typeof IncidentImpactControllerGetIncidentImpactPerilsRefParams.Encoded) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add IncidentImpact.perils ref(s)
*/
readonly "IncidentImpactControllerPostIncidentImpactPerilsRef": (id: string, options: { readonly params: typeof IncidentImpactControllerPostIncidentImpactPerilsRefParams.Encoded; readonly payload: typeof IncidentImpactControllerPostIncidentImpactPerilsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove IncidentImpact.perils ref(s)
*/
readonly "IncidentImpactControllerDeleteIncidentImpactPerilsRef": (id: string, options: { readonly params: typeof IncidentImpactControllerDeleteIncidentImpactPerilsRefParams.Encoded; readonly payload: typeof IncidentImpactControllerDeleteIncidentImpactPerilsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all IncidentImpact.perils refs
*/
readonly "IncidentImpactControllerPatchIncidentImpactPerilsRef": (id: string, options: { readonly params: typeof IncidentImpactControllerPatchIncidentImpactPerilsRefParams.Encoded; readonly payload: typeof ReferencedUpdatePerilList.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource List
*/
readonly "FundingSourceControllerGetFundingSourceList": (options: typeof FundingSourceControllerGetFundingSourceListParams.Encoded) => Effect.Effect<typeof FundingSourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create FundingSource
*/
readonly "FundingSourceControllerCreateFundingSource": (options: { readonly params: typeof FundingSourceControllerCreateFundingSourceParams.Encoded; readonly payload: typeof FundingSourceControllerCreateFundingSourceRequest.Encoded }) => Effect.Effect<typeof FundingSourceControllerCreateFundingSource201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get FundingSource by ID
*/
readonly "FundingSourceControllerGetFundingSourceById": (id: string, options: typeof FundingSourceControllerGetFundingSourceByIdParams.Encoded) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete FundingSource by ID
*/
readonly "FundingSourceControllerDeleteFundingSourceById": (id: string, options: typeof FundingSourceControllerDeleteFundingSourceByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update FundingSource by ID
*/
readonly "FundingSourceControllerUpdateFundingSourceById": (id: string, options: { readonly params: typeof FundingSourceControllerUpdateFundingSourceByIdParams.Encoded; readonly payload: typeof UpdateFundingSource.Encoded }) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.project
*/
readonly "FundingSourceControllerGetFundingSourceProject": (id: string, options: typeof FundingSourceControllerGetFundingSourceProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.project ref
*/
readonly "FundingSourceControllerGetFundingSourceProjectRef": (id: string, options: typeof FundingSourceControllerGetFundingSourceProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace FundingSource.project ref
*/
readonly "FundingSourceControllerPatchFundingSourceProjectRef": (id: string, options: { readonly params: typeof FundingSourceControllerPatchFundingSourceProjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateProject.Encoded }) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.account
*/
readonly "FundingSourceControllerGetFundingSourceAccount": (id: string, options: typeof FundingSourceControllerGetFundingSourceAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.account ref
*/
readonly "FundingSourceControllerGetFundingSourceAccountRef": (id: string, options: typeof FundingSourceControllerGetFundingSourceAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.buckets
*/
readonly "FundingSourceControllerGetFundingSourceBuckets": (id: string, options: typeof FundingSourceControllerGetFundingSourceBucketsParams.Encoded) => Effect.Effect<typeof BaseBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.buckets refs
*/
readonly "FundingSourceControllerGetFundingSourceBucketsRef": (id: string, options: typeof FundingSourceControllerGetFundingSourceBucketsRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.fundings
*/
readonly "FundingSourceControllerGetFundingSourceFundings": (id: string, options: typeof FundingSourceControllerGetFundingSourceFundingsParams.Encoded) => Effect.Effect<typeof FundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.fundings refs
*/
readonly "FundingSourceControllerGetFundingSourceFundingsRef": (id: string, options: typeof FundingSourceControllerGetFundingSourceFundingsRefParams.Encoded) => Effect.Effect<typeof ReferencedFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.contacts
*/
readonly "FundingSourceControllerGetFundingSourceContacts": (id: string, options: typeof FundingSourceControllerGetFundingSourceContactsParams.Encoded) => Effect.Effect<typeof AccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.contacts refs
*/
readonly "FundingSourceControllerGetFundingSourceContactsRef": (id: string, options: typeof FundingSourceControllerGetFundingSourceContactsRefParams.Encoded) => Effect.Effect<typeof ReferencedAccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add FundingSource.contacts ref(s)
*/
readonly "FundingSourceControllerPostFundingSourceContactsRef": (id: string, options: { readonly params: typeof FundingSourceControllerPostFundingSourceContactsRefParams.Encoded; readonly payload: typeof FundingSourceControllerPostFundingSourceContactsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove FundingSource.contacts ref(s)
*/
readonly "FundingSourceControllerDeleteFundingSourceContactsRef": (id: string, options: { readonly params: typeof FundingSourceControllerDeleteFundingSourceContactsRefParams.Encoded; readonly payload: typeof FundingSourceControllerDeleteFundingSourceContactsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all FundingSource.contacts refs
*/
readonly "FundingSourceControllerPatchFundingSourceContactsRef": (id: string, options: { readonly params: typeof FundingSourceControllerPatchFundingSourceContactsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccountProviderContactList.Encoded }) => Effect.Effect<typeof ReferencedAccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.currency
*/
readonly "FundingSourceControllerGetFundingSourceCurrency": (id: string, options: typeof FundingSourceControllerGetFundingSourceCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FundingSource.currency ref
*/
readonly "FundingSourceControllerGetFundingSourceCurrencyRef": (id: string, options: typeof FundingSourceControllerGetFundingSourceCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace FundingSource.currency ref
*/
readonly "FundingSourceControllerPatchFundingSourceCurrencyRef": (id: string, options: { readonly params: typeof FundingSourceControllerPatchFundingSourceCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File List
*/
readonly "FileControllerGetFileList": (options: typeof FileControllerGetFileListParams.Encoded) => Effect.Effect<typeof FileList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get File by ID
*/
readonly "FileControllerGetFileById": (id: string, options: typeof FileControllerGetFileByIdParams.Encoded) => Effect.Effect<typeof File.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete File by ID
*/
readonly "FileControllerDeleteFileById": (id: string, options: typeof FileControllerDeleteFileByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update File by ID
*/
readonly "FileControllerUpdateFileById": (id: string, options: { readonly params: typeof FileControllerUpdateFileByIdParams.Encoded; readonly payload: typeof UpdateFile.Encoded }) => Effect.Effect<typeof File.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.account
*/
readonly "FileControllerGetFileAccount": (id: string, options: typeof FileControllerGetFileAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.account ref
*/
readonly "FileControllerGetFileAccountRef": (id: string, options: typeof FileControllerGetFileAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace File.account ref
*/
readonly "FileControllerPatchFileAccountRef": (id: string, options: { readonly params: typeof FileControllerPatchFileAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.projects
*/
readonly "FileControllerGetFileProjects": (id: string, options: typeof FileControllerGetFileProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.projects refs
*/
readonly "FileControllerGetFileProjectsRef": (id: string, options: typeof FileControllerGetFileProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add File.projects ref(s)
*/
readonly "FileControllerPostFileProjectsRef": (id: string, options: { readonly params: typeof FileControllerPostFileProjectsRefParams.Encoded; readonly payload: typeof FileControllerPostFileProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove File.projects ref(s)
*/
readonly "FileControllerDeleteFileProjectsRef": (id: string, options: { readonly params: typeof FileControllerDeleteFileProjectsRefParams.Encoded; readonly payload: typeof FileControllerDeleteFileProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all File.projects refs
*/
readonly "FileControllerPatchFileProjectsRef": (id: string, options: { readonly params: typeof FileControllerPatchFileProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.assets
*/
readonly "FileControllerGetFileAssets": (id: string, options: typeof FileControllerGetFileAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.assets refs
*/
readonly "FileControllerGetFileAssetsRef": (id: string, options: typeof FileControllerGetFileAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add File.assets ref(s)
*/
readonly "FileControllerPostFileAssetsRef": (id: string, options: { readonly params: typeof FileControllerPostFileAssetsRefParams.Encoded; readonly payload: typeof FileControllerPostFileAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove File.assets ref(s)
*/
readonly "FileControllerDeleteFileAssetsRef": (id: string, options: { readonly params: typeof FileControllerDeleteFileAssetsRefParams.Encoded; readonly payload: typeof FileControllerDeleteFileAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all File.assets refs
*/
readonly "FileControllerPatchFileAssetsRef": (id: string, options: { readonly params: typeof FileControllerPatchFileAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.processes
*/
readonly "FileControllerGetFileProcesses": (id: string, options: typeof FileControllerGetFileProcessesParams.Encoded) => Effect.Effect<typeof FileProcessList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.processes refs
*/
readonly "FileControllerGetFileProcessesRef": (id: string, options: typeof FileControllerGetFileProcessesRefParams.Encoded) => Effect.Effect<typeof ReferencedFileProcessList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.media
*/
readonly "FileControllerGetFileMedia": (id: string, options: typeof FileControllerGetFileMediaParams.Encoded) => Effect.Effect<typeof MediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.media refs
*/
readonly "FileControllerGetFileMediaRef": (id: string, options: typeof FileControllerGetFileMediaRefParams.Encoded) => Effect.Effect<typeof ReferencedMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.documents
*/
readonly "FileControllerGetFileDocuments": (id: string, options: typeof FileControllerGetFileDocumentsParams.Encoded) => Effect.Effect<typeof DocumentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.documents refs
*/
readonly "FileControllerGetFileDocumentsRef": (id: string, options: typeof FileControllerGetFileDocumentsRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.addedBy
*/
readonly "FileControllerGetFileAddedBy": (id: string, options: typeof FileControllerGetFileAddedByParams.Encoded) => Effect.Effect<typeof User.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch File.addedBy ref
*/
readonly "FileControllerGetFileAddedByRef": (id: string, options: typeof FileControllerGetFileAddedByRefParams.Encoded) => Effect.Effect<typeof ReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FileProcess List
*/
readonly "FileProcessControllerGetFileProcessList": (options: typeof FileProcessControllerGetFileProcessListParams.Encoded) => Effect.Effect<typeof FileProcessList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get FileProcess by ID
*/
readonly "FileProcessControllerGetFileProcessById": (id: string, options: typeof FileProcessControllerGetFileProcessByIdParams.Encoded) => Effect.Effect<typeof FileProcess.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FileProcess.file
*/
readonly "FileProcessControllerGetFileProcessFile": (id: string, options: typeof FileProcessControllerGetFileProcessFileParams.Encoded) => Effect.Effect<typeof File.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch FileProcess.file ref
*/
readonly "FileProcessControllerGetFileProcessFileRef": (id: string, options: typeof FileProcessControllerGetFileProcessFileRefParams.Encoded) => Effect.Effect<typeof ReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry List
*/
readonly "EntryControllerGetEntryList": (options: typeof EntryControllerGetEntryListParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Entry
*/
readonly "EntryControllerCreateEntry": (options: { readonly params: typeof EntryControllerCreateEntryParams.Encoded; readonly payload: typeof EntryControllerCreateEntryRequest.Encoded }) => Effect.Effect<typeof EntryControllerCreateEntry201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Entry by ID
*/
readonly "EntryControllerGetEntryById": (id: string, options: typeof EntryControllerGetEntryByIdParams.Encoded) => Effect.Effect<typeof Entry.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Entry by ID
*/
readonly "EntryControllerDeleteEntryById": (id: string, options: typeof EntryControllerDeleteEntryByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Entry by ID
*/
readonly "EntryControllerUpdateEntryById": (id: string, options: { readonly params: typeof EntryControllerUpdateEntryByIdParams.Encoded; readonly payload: typeof UpdateEntry.Encoded }) => Effect.Effect<typeof Entry.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.source
*/
readonly "EntryControllerGetEntrySource": (id: string, options: typeof EntryControllerGetEntrySourceParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.source ref
*/
readonly "EntryControllerGetEntrySourceRef": (id: string, options: typeof EntryControllerGetEntrySourceRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Entry.source ref
*/
readonly "EntryControllerPatchEntrySourceRef": (id: string, options: { readonly params: typeof EntryControllerPatchEntrySourceRefParams.Encoded; readonly payload: typeof ReferencedUpdateEntrySource.Encoded }) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.bucket
*/
readonly "EntryControllerGetEntryBucket": (id: string, options: typeof EntryControllerGetEntryBucketParams.Encoded) => Effect.Effect<typeof BaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.bucket ref
*/
readonly "EntryControllerGetEntryBucketRef": (id: string, options: typeof EntryControllerGetEntryBucketRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Entry.bucket ref
*/
readonly "EntryControllerPatchEntryBucketRef": (id: string, options: { readonly params: typeof EntryControllerPatchEntryBucketRefParams.Encoded; readonly payload: typeof ReferencedUpdateBaseBucket.Encoded }) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.subBucket
*/
readonly "EntryControllerGetEntrySubBucket": (id: string, options: typeof EntryControllerGetEntrySubBucketParams.Encoded) => Effect.Effect<typeof NullableBaseSubBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.subBucket ref
*/
readonly "EntryControllerGetEntrySubBucketRef": (id: string, options: typeof EntryControllerGetEntrySubBucketRefParams.Encoded) => Effect.Effect<typeof NullableReferencedBaseSubBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Entry.subBucket ref
*/
readonly "EntryControllerPatchEntrySubBucketRef": (id: string, options: { readonly params: typeof EntryControllerPatchEntrySubBucketRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateBaseSubBucket.Encoded }) => Effect.Effect<typeof NullableReferencedBaseSubBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.fundingSource
*/
readonly "EntryControllerGetEntryFundingSource": (id: string, options: typeof EntryControllerGetEntryFundingSourceParams.Encoded) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.fundingSource ref
*/
readonly "EntryControllerGetEntryFundingSourceRef": (id: string, options: typeof EntryControllerGetEntryFundingSourceRefParams.Encoded) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.project
*/
readonly "EntryControllerGetEntryProject": (id: string, options: typeof EntryControllerGetEntryProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.project ref
*/
readonly "EntryControllerGetEntryProjectRef": (id: string, options: typeof EntryControllerGetEntryProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.account
*/
readonly "EntryControllerGetEntryAccount": (id: string, options: typeof EntryControllerGetEntryAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.account ref
*/
readonly "EntryControllerGetEntryAccountRef": (id: string, options: typeof EntryControllerGetEntryAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.currency
*/
readonly "EntryControllerGetEntryCurrency": (id: string, options: typeof EntryControllerGetEntryCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Entry.currency ref
*/
readonly "EntryControllerGetEntryCurrencyRef": (id: string, options: typeof EntryControllerGetEntryCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource List
*/
readonly "EntrySourceControllerGetEntrySourceList": (options: typeof EntrySourceControllerGetEntrySourceListParams.Encoded) => Effect.Effect<typeof EntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create EntrySource
*/
readonly "EntrySourceControllerCreateEntrySource": (options: { readonly params: typeof EntrySourceControllerCreateEntrySourceParams.Encoded; readonly payload: typeof EntrySourceControllerCreateEntrySourceRequest.Encoded }) => Effect.Effect<typeof EntrySourceControllerCreateEntrySource201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get EntrySource by ID
*/
readonly "EntrySourceControllerGetEntrySourceById": (id: string, options: typeof EntrySourceControllerGetEntrySourceByIdParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete EntrySource by ID
*/
readonly "EntrySourceControllerDeleteEntrySourceById": (id: string, options: typeof EntrySourceControllerDeleteEntrySourceByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update EntrySource by ID
*/
readonly "EntrySourceControllerUpdateEntrySourceById": (id: string, options: { readonly params: typeof EntrySourceControllerUpdateEntrySourceByIdParams.Encoded; readonly payload: typeof UpdateEntrySource.Encoded }) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.metadata
*/
readonly "EntrySourceControllerGetEntrySourceMetadata": (id: string, options: typeof EntrySourceControllerGetEntrySourceMetadataParams.Encoded) => Effect.Effect<typeof EntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.metadata ref
*/
readonly "EntrySourceControllerGetEntrySourceMetadataRef": (id: string, options: typeof EntrySourceControllerGetEntrySourceMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.project
*/
readonly "EntrySourceControllerGetEntrySourceProject": (id: string, options: typeof EntrySourceControllerGetEntrySourceProjectParams.Encoded) => Effect.Effect<typeof NullableProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.project ref
*/
readonly "EntrySourceControllerGetEntrySourceProjectRef": (id: string, options: typeof EntrySourceControllerGetEntrySourceProjectRefParams.Encoded) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EntrySource.project ref
*/
readonly "EntrySourceControllerPatchEntrySourceProjectRef": (id: string, options: { readonly params: typeof EntrySourceControllerPatchEntrySourceProjectRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateProject.Encoded }) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.account
*/
readonly "EntrySourceControllerGetEntrySourceAccount": (id: string, options: typeof EntrySourceControllerGetEntrySourceAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.account ref
*/
readonly "EntrySourceControllerGetEntrySourceAccountRef": (id: string, options: typeof EntrySourceControllerGetEntrySourceAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EntrySource.account ref
*/
readonly "EntrySourceControllerPatchEntrySourceAccountRef": (id: string, options: { readonly params: typeof EntrySourceControllerPatchEntrySourceAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.currency
*/
readonly "EntrySourceControllerGetEntrySourceCurrency": (id: string, options: typeof EntrySourceControllerGetEntrySourceCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.currency ref
*/
readonly "EntrySourceControllerGetEntrySourceCurrencyRef": (id: string, options: typeof EntrySourceControllerGetEntrySourceCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EntrySource.currency ref
*/
readonly "EntrySourceControllerPatchEntrySourceCurrencyRef": (id: string, options: { readonly params: typeof EntrySourceControllerPatchEntrySourceCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.entries
*/
readonly "EntrySourceControllerGetEntrySourceEntries": (id: string, options: typeof EntrySourceControllerGetEntrySourceEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.entries refs
*/
readonly "EntrySourceControllerGetEntrySourceEntriesRef": (id: string, options: typeof EntrySourceControllerGetEntrySourceEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.appraisals
*/
readonly "EntrySourceControllerGetEntrySourceAppraisals": (id: string, options: typeof EntrySourceControllerGetEntrySourceAppraisalsParams.Encoded) => Effect.Effect<typeof ItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.appraisals refs
*/
readonly "EntrySourceControllerGetEntrySourceAppraisalsRef": (id: string, options: typeof EntrySourceControllerGetEntrySourceAppraisalsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.selectedAppraisal
*/
readonly "EntrySourceControllerGetEntrySourceSelectedAppraisal": (id: string, options: typeof EntrySourceControllerGetEntrySourceSelectedAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.selectedAppraisal ref
*/
readonly "EntrySourceControllerGetEntrySourceSelectedAppraisalRef": (id: string, options: typeof EntrySourceControllerGetEntrySourceSelectedAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EntrySource.selectedAppraisal ref
*/
readonly "EntrySourceControllerPatchEntrySourceSelectedAppraisalRef": (id: string, options: { readonly params: typeof EntrySourceControllerPatchEntrySourceSelectedAppraisalRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateItemAppraisal.Encoded }) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.relevantAppraisal
*/
readonly "EntrySourceControllerGetEntrySourceRelevantAppraisal": (id: string, options: typeof EntrySourceControllerGetEntrySourceRelevantAppraisalParams.Encoded) => Effect.Effect<typeof NullableItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySource.relevantAppraisal ref
*/
readonly "EntrySourceControllerGetEntrySourceRelevantAppraisalRef": (id: string, options: typeof EntrySourceControllerGetEntrySourceRelevantAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedItemAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata List
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataList": (options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataListParams.Encoded) => Effect.Effect<typeof EntrySourceMetadataList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get EntrySourceMetadata by ID
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataById": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataByIdParams.Encoded) => Effect.Effect<typeof EntrySourceMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata.object
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataObject": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataObjectParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata.object ref
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataObjectRef": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataObjectRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata.account
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataAccount": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata.account ref
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataAccountRef": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata.project
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataProject": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataProjectParams.Encoded) => Effect.Effect<typeof NullableProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata.project ref
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataProjectRef": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataProjectRefParams.Encoded) => Effect.Effect<typeof NullableReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata.currency
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataCurrency": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMetadata.currency ref
*/
readonly "EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyRef": (id: string, options: typeof EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMedia List
*/
readonly "EntrySourceMediaControllerGetEntrySourceMediaList": (options: typeof EntrySourceMediaControllerGetEntrySourceMediaListParams.Encoded) => Effect.Effect<typeof EntrySourceMediaList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create EntrySourceMedia
*/
readonly "EntrySourceMediaControllerCreateEntrySourceMedia": (options: { readonly params: typeof EntrySourceMediaControllerCreateEntrySourceMediaParams.Encoded; readonly payload: typeof EntrySourceMediaControllerCreateEntrySourceMediaRequest.Encoded }) => Effect.Effect<typeof EntrySourceMediaControllerCreateEntrySourceMedia201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get EntrySourceMedia by ID
*/
readonly "EntrySourceMediaControllerGetEntrySourceMediaById": (id: string, options: typeof EntrySourceMediaControllerGetEntrySourceMediaByIdParams.Encoded) => Effect.Effect<typeof EntrySourceMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete EntrySourceMedia by ID
*/
readonly "EntrySourceMediaControllerDeleteEntrySourceMediaById": (id: string, options: typeof EntrySourceMediaControllerDeleteEntrySourceMediaByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update EntrySourceMedia by ID
*/
readonly "EntrySourceMediaControllerUpdateEntrySourceMediaById": (id: string, options: { readonly params: typeof EntrySourceMediaControllerUpdateEntrySourceMediaByIdParams.Encoded; readonly payload: typeof UpdateEntrySourceMedia.Encoded }) => Effect.Effect<typeof EntrySourceMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMedia.entrySource
*/
readonly "EntrySourceMediaControllerGetEntrySourceMediaEntrySource": (id: string, options: typeof EntrySourceMediaControllerGetEntrySourceMediaEntrySourceParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMedia.entrySource ref
*/
readonly "EntrySourceMediaControllerGetEntrySourceMediaEntrySourceRef": (id: string, options: typeof EntrySourceMediaControllerGetEntrySourceMediaEntrySourceRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EntrySourceMedia.entrySource ref
*/
readonly "EntrySourceMediaControllerPatchEntrySourceMediaEntrySourceRef": (id: string, options: { readonly params: typeof EntrySourceMediaControllerPatchEntrySourceMediaEntrySourceRefParams.Encoded; readonly payload: typeof ReferencedUpdateEntrySource.Encoded }) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMedia.media
*/
readonly "EntrySourceMediaControllerGetEntrySourceMediaMedia": (id: string, options: typeof EntrySourceMediaControllerGetEntrySourceMediaMediaParams.Encoded) => Effect.Effect<typeof Media.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EntrySourceMedia.media ref
*/
readonly "EntrySourceMediaControllerGetEntrySourceMediaMediaRef": (id: string, options: typeof EntrySourceMediaControllerGetEntrySourceMediaMediaRefParams.Encoded) => Effect.Effect<typeof ReferencedMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EntrySourceMedia.media ref
*/
readonly "EntrySourceMediaControllerPatchEntrySourceMediaMediaRef": (id: string, options: { readonly params: typeof EntrySourceMediaControllerPatchEntrySourceMediaMediaRefParams.Encoded; readonly payload: typeof ReferencedUpdateMedia.Encoded }) => Effect.Effect<typeof ReferencedMedia.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement List
*/
readonly "EndorsementControllerGetEndorsementList": (options: typeof EndorsementControllerGetEndorsementListParams.Encoded) => Effect.Effect<typeof EndorsementList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Endorsement
*/
readonly "EndorsementControllerCreateEndorsement": (options: { readonly params: typeof EndorsementControllerCreateEndorsementParams.Encoded; readonly payload: typeof EndorsementControllerCreateEndorsementRequest.Encoded }) => Effect.Effect<typeof EndorsementControllerCreateEndorsement201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Endorsement by ID
*/
readonly "EndorsementControllerGetEndorsementById": (id: string, options: typeof EndorsementControllerGetEndorsementByIdParams.Encoded) => Effect.Effect<typeof Endorsement.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Endorsement by ID
*/
readonly "EndorsementControllerDeleteEndorsementById": (id: string, options: typeof EndorsementControllerDeleteEndorsementByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Endorsement by ID
*/
readonly "EndorsementControllerUpdateEndorsementById": (id: string, options: { readonly params: typeof EndorsementControllerUpdateEndorsementByIdParams.Encoded; readonly payload: typeof UpdateEndorsement.Encoded }) => Effect.Effect<typeof Endorsement.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.policyTerm
*/
readonly "EndorsementControllerGetEndorsementPolicyTerm": (id: string, options: typeof EndorsementControllerGetEndorsementPolicyTermParams.Encoded) => Effect.Effect<typeof PolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.policyTerm ref
*/
readonly "EndorsementControllerGetEndorsementPolicyTermRef": (id: string, options: typeof EndorsementControllerGetEndorsementPolicyTermRefParams.Encoded) => Effect.Effect<typeof ReferencedPolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Endorsement.policyTerm ref
*/
readonly "EndorsementControllerPatchEndorsementPolicyTermRef": (id: string, options: { readonly params: typeof EndorsementControllerPatchEndorsementPolicyTermRefParams.Encoded; readonly payload: typeof ReferencedUpdatePolicyTerm.Encoded }) => Effect.Effect<typeof ReferencedPolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.template
*/
readonly "EndorsementControllerGetEndorsementTemplate": (id: string, options: typeof EndorsementControllerGetEndorsementTemplateParams.Encoded) => Effect.Effect<typeof NullableEndorsementTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.template ref
*/
readonly "EndorsementControllerGetEndorsementTemplateRef": (id: string, options: typeof EndorsementControllerGetEndorsementTemplateRefParams.Encoded) => Effect.Effect<typeof NullableReferencedEndorsementTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Endorsement.template ref
*/
readonly "EndorsementControllerPatchEndorsementTemplateRef": (id: string, options: { readonly params: typeof EndorsementControllerPatchEndorsementTemplateRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateEndorsementTemplate.Encoded }) => Effect.Effect<typeof NullableReferencedEndorsementTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.coverages
*/
readonly "EndorsementControllerGetEndorsementCoverages": (id: string, options: typeof EndorsementControllerGetEndorsementCoveragesParams.Encoded) => Effect.Effect<typeof CoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.coverages refs
*/
readonly "EndorsementControllerGetEndorsementCoveragesRef": (id: string, options: typeof EndorsementControllerGetEndorsementCoveragesRefParams.Encoded) => Effect.Effect<typeof ReferencedCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Endorsement.coverages ref(s)
*/
readonly "EndorsementControllerPostEndorsementCoveragesRef": (id: string, options: { readonly params: typeof EndorsementControllerPostEndorsementCoveragesRefParams.Encoded; readonly payload: typeof EndorsementControllerPostEndorsementCoveragesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Endorsement.coverages ref(s)
*/
readonly "EndorsementControllerDeleteEndorsementCoveragesRef": (id: string, options: { readonly params: typeof EndorsementControllerDeleteEndorsementCoveragesRefParams.Encoded; readonly payload: typeof EndorsementControllerDeleteEndorsementCoveragesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Endorsement.coverages refs
*/
readonly "EndorsementControllerPatchEndorsementCoveragesRef": (id: string, options: { readonly params: typeof EndorsementControllerPatchEndorsementCoveragesRefParams.Encoded; readonly payload: typeof ReferencedUpdateCoverageList.Encoded }) => Effect.Effect<typeof ReferencedCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.subCoverages
*/
readonly "EndorsementControllerGetEndorsementSubCoverages": (id: string, options: typeof EndorsementControllerGetEndorsementSubCoveragesParams.Encoded) => Effect.Effect<typeof SubCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.subCoverages refs
*/
readonly "EndorsementControllerGetEndorsementSubCoveragesRef": (id: string, options: typeof EndorsementControllerGetEndorsementSubCoveragesRefParams.Encoded) => Effect.Effect<typeof ReferencedSubCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Endorsement.subCoverages ref(s)
*/
readonly "EndorsementControllerPostEndorsementSubCoveragesRef": (id: string, options: { readonly params: typeof EndorsementControllerPostEndorsementSubCoveragesRefParams.Encoded; readonly payload: typeof EndorsementControllerPostEndorsementSubCoveragesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSubCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Endorsement.subCoverages ref(s)
*/
readonly "EndorsementControllerDeleteEndorsementSubCoveragesRef": (id: string, options: { readonly params: typeof EndorsementControllerDeleteEndorsementSubCoveragesRefParams.Encoded; readonly payload: typeof EndorsementControllerDeleteEndorsementSubCoveragesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSubCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Endorsement.subCoverages refs
*/
readonly "EndorsementControllerPatchEndorsementSubCoveragesRef": (id: string, options: { readonly params: typeof EndorsementControllerPatchEndorsementSubCoveragesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSubCoverageList.Encoded }) => Effect.Effect<typeof ReferencedSubCoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.perils
*/
readonly "EndorsementControllerGetEndorsementPerils": (id: string, options: typeof EndorsementControllerGetEndorsementPerilsParams.Encoded) => Effect.Effect<typeof PerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Endorsement.perils refs
*/
readonly "EndorsementControllerGetEndorsementPerilsRef": (id: string, options: typeof EndorsementControllerGetEndorsementPerilsRefParams.Encoded) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Endorsement.perils ref(s)
*/
readonly "EndorsementControllerPostEndorsementPerilsRef": (id: string, options: { readonly params: typeof EndorsementControllerPostEndorsementPerilsRefParams.Encoded; readonly payload: typeof EndorsementControllerPostEndorsementPerilsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Endorsement.perils ref(s)
*/
readonly "EndorsementControllerDeleteEndorsementPerilsRef": (id: string, options: { readonly params: typeof EndorsementControllerDeleteEndorsementPerilsRefParams.Encoded; readonly payload: typeof EndorsementControllerDeleteEndorsementPerilsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Endorsement.perils refs
*/
readonly "EndorsementControllerPatchEndorsementPerilsRef": (id: string, options: { readonly params: typeof EndorsementControllerPatchEndorsementPerilsRefParams.Encoded; readonly payload: typeof ReferencedUpdatePerilList.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EmailAddress List
*/
readonly "EmailAddressControllerGetEmailAddressList": (options?: typeof EmailAddressControllerGetEmailAddressListParams.Encoded | undefined) => Effect.Effect<typeof EmailAddressList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create EmailAddress
*/
readonly "EmailAddressControllerCreateEmailAddress": (options: { readonly params?: typeof EmailAddressControllerCreateEmailAddressParams.Encoded | undefined; readonly payload: typeof EmailAddressControllerCreateEmailAddressRequest.Encoded }) => Effect.Effect<typeof EmailAddressControllerCreateEmailAddress201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get EmailAddress by ID
*/
readonly "EmailAddressControllerGetEmailAddressById": (id: string, options?: typeof EmailAddressControllerGetEmailAddressByIdParams.Encoded | undefined) => Effect.Effect<typeof EmailAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete EmailAddress by ID
*/
readonly "EmailAddressControllerDeleteEmailAddressById": (id: string) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update EmailAddress by ID
*/
readonly "EmailAddressControllerUpdateEmailAddressById": (id: string, options: { readonly params?: typeof EmailAddressControllerUpdateEmailAddressByIdParams.Encoded | undefined; readonly payload: typeof UpdateEmailAddress.Encoded }) => Effect.Effect<typeof EmailAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EmailAddress.identity
*/
readonly "EmailAddressControllerGetEmailAddressIdentity": (id: string, options?: typeof EmailAddressControllerGetEmailAddressIdentityParams.Encoded | undefined) => Effect.Effect<typeof Identity.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EmailAddress.identity ref
*/
readonly "EmailAddressControllerGetEmailAddressIdentityRef": (id: string) => Effect.Effect<typeof ReferencedIdentity.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EmailAddress.identity ref
*/
readonly "EmailAddressControllerPatchEmailAddressIdentityRef": (id: string, options: typeof ReferencedUpdateIdentity.Encoded) => Effect.Effect<typeof ReferencedIdentity.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling List
*/
readonly "DwellingControllerGetDwellingList": (options: typeof DwellingControllerGetDwellingListParams.Encoded) => Effect.Effect<typeof DwellingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Dwelling
*/
readonly "DwellingControllerCreateDwelling": (options: { readonly params: typeof DwellingControllerCreateDwellingParams.Encoded; readonly payload: typeof DwellingControllerCreateDwellingRequest.Encoded }) => Effect.Effect<typeof DwellingControllerCreateDwelling201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Dwelling by ID
*/
readonly "DwellingControllerGetDwellingById": (id: string, options: typeof DwellingControllerGetDwellingByIdParams.Encoded) => Effect.Effect<typeof Dwelling.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Dwelling by ID
*/
readonly "DwellingControllerDeleteDwellingById": (id: string, options: typeof DwellingControllerDeleteDwellingByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Dwelling by ID
*/
readonly "DwellingControllerUpdateDwellingById": (id: string, options: { readonly params: typeof DwellingControllerUpdateDwellingByIdParams.Encoded; readonly payload: typeof UpdateDwelling.Encoded }) => Effect.Effect<typeof Dwelling.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.assetType
*/
readonly "DwellingControllerGetDwellingAssetType": (id: string, options: typeof DwellingControllerGetDwellingAssetTypeParams.Encoded) => Effect.Effect<typeof AssetType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.assetType ref
*/
readonly "DwellingControllerGetDwellingAssetTypeRef": (id: string, options: typeof DwellingControllerGetDwellingAssetTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Dwelling.assetType ref
*/
readonly "DwellingControllerPatchDwellingAssetTypeRef": (id: string, options: { readonly params: typeof DwellingControllerPatchDwellingAssetTypeRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetType.Encoded }) => Effect.Effect<typeof ReferencedAssetType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.account
*/
readonly "DwellingControllerGetDwellingAccount": (id: string, options: typeof DwellingControllerGetDwellingAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.account ref
*/
readonly "DwellingControllerGetDwellingAccountRef": (id: string, options: typeof DwellingControllerGetDwellingAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Dwelling.account ref
*/
readonly "DwellingControllerPatchDwellingAccountRef": (id: string, options: { readonly params: typeof DwellingControllerPatchDwellingAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.appraisals
*/
readonly "DwellingControllerGetDwellingAppraisals": (id: string, options: typeof DwellingControllerGetDwellingAppraisalsParams.Encoded) => Effect.Effect<typeof AssetAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.appraisals refs
*/
readonly "DwellingControllerGetDwellingAppraisalsRef": (id: string, options: typeof DwellingControllerGetDwellingAppraisalsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.selectedAppraisal
*/
readonly "DwellingControllerGetDwellingSelectedAppraisal": (id: string, options: typeof DwellingControllerGetDwellingSelectedAppraisalParams.Encoded) => Effect.Effect<typeof NullableAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.selectedAppraisal ref
*/
readonly "DwellingControllerGetDwellingSelectedAppraisalRef": (id: string, options: typeof DwellingControllerGetDwellingSelectedAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Dwelling.selectedAppraisal ref
*/
readonly "DwellingControllerPatchDwellingSelectedAppraisalRef": (id: string, options: { readonly params: typeof DwellingControllerPatchDwellingSelectedAppraisalRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAssetAppraisal.Encoded }) => Effect.Effect<typeof NullableReferencedAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.relevantAppraisal
*/
readonly "DwellingControllerGetDwellingRelevantAppraisal": (id: string, options: typeof DwellingControllerGetDwellingRelevantAppraisalParams.Encoded) => Effect.Effect<typeof NullableAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.relevantAppraisal ref
*/
readonly "DwellingControllerGetDwellingRelevantAppraisalRef": (id: string, options: typeof DwellingControllerGetDwellingRelevantAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.address
*/
readonly "DwellingControllerGetDwellingAddress": (id: string, options: typeof DwellingControllerGetDwellingAddressParams.Encoded) => Effect.Effect<typeof Address.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Dwelling.address ref
*/
readonly "DwellingControllerGetDwellingAddressRef": (id: string, options: typeof DwellingControllerGetDwellingAddressRefParams.Encoded) => Effect.Effect<typeof ReferencedAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Dwelling.address ref
*/
readonly "DwellingControllerPatchDwellingAddressRef": (id: string, options: { readonly params: typeof DwellingControllerPatchDwellingAddressRefParams.Encoded; readonly payload: typeof ReferencedUpdateAddress.Encoded }) => Effect.Effect<typeof ReferencedAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deductible List
*/
readonly "DeductibleControllerGetDeductibleList": (options?: typeof DeductibleControllerGetDeductibleListParams.Encoded | undefined) => Effect.Effect<typeof DeductibleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Deductible
*/
readonly "DeductibleControllerCreateDeductible": (options: { readonly params?: typeof DeductibleControllerCreateDeductibleParams.Encoded | undefined; readonly payload: typeof DeductibleControllerCreateDeductibleRequest.Encoded }) => Effect.Effect<typeof DeductibleControllerCreateDeductible201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Deductible by ID
*/
readonly "DeductibleControllerGetDeductibleById": (id: string, options?: typeof DeductibleControllerGetDeductibleByIdParams.Encoded | undefined) => Effect.Effect<typeof Deductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Deductible by ID
*/
readonly "DeductibleControllerDeleteDeductibleById": (id: string) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Deductible by ID
*/
readonly "DeductibleControllerUpdateDeductibleById": (id: string, options: { readonly params?: typeof DeductibleControllerUpdateDeductibleByIdParams.Encoded | undefined; readonly payload: typeof UpdateDeductible.Encoded }) => Effect.Effect<typeof Deductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deductible.claimTarget
*/
readonly "DeductibleControllerGetDeductibleClaimTarget": (id: string, options?: typeof DeductibleControllerGetDeductibleClaimTargetParams.Encoded | undefined) => Effect.Effect<typeof ClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deductible.claimTarget ref
*/
readonly "DeductibleControllerGetDeductibleClaimTargetRef": (id: string) => Effect.Effect<typeof ReferencedClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Deductible.claimTarget ref
*/
readonly "DeductibleControllerPatchDeductibleClaimTargetRef": (id: string, options: typeof ReferencedUpdateClaimTarget.Encoded) => Effect.Effect<typeof ReferencedClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deductible.bucketDefinitions
*/
readonly "DeductibleControllerGetDeductibleBucketDefinitions": (id: string, options?: typeof DeductibleControllerGetDeductibleBucketDefinitionsParams.Encoded | undefined) => Effect.Effect<typeof BucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deductible.bucketDefinitions refs
*/
readonly "DeductibleControllerGetDeductibleBucketDefinitionsRef": (id: string) => Effect.Effect<typeof ReferencedBucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deductible.claimDeductibles
*/
readonly "DeductibleControllerGetDeductibleClaimDeductibles": (id: string, options?: typeof DeductibleControllerGetDeductibleClaimDeductiblesParams.Encoded | undefined) => Effect.Effect<typeof ClaimDeductibleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deductible.claimDeductibles refs
*/
readonly "DeductibleControllerGetDeductibleClaimDeductiblesRef": (id: string) => Effect.Effect<typeof ReferencedClaimDeductibleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage List
*/
readonly "CoverageControllerGetCoverageList": (options: typeof CoverageControllerGetCoverageListParams.Encoded) => Effect.Effect<typeof CoverageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Coverage
*/
readonly "CoverageControllerCreateCoverage": (options: { readonly params: typeof CoverageControllerCreateCoverageParams.Encoded; readonly payload: typeof CoverageControllerCreateCoverageRequest.Encoded }) => Effect.Effect<typeof CoverageControllerCreateCoverage201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Coverage by ID
*/
readonly "CoverageControllerGetCoverageById": (id: string, options: typeof CoverageControllerGetCoverageByIdParams.Encoded) => Effect.Effect<typeof Coverage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Coverage by ID
*/
readonly "CoverageControllerDeleteCoverageById": (id: string, options: typeof CoverageControllerDeleteCoverageByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Coverage by ID
*/
readonly "CoverageControllerUpdateCoverageById": (id: string, options: { readonly params: typeof CoverageControllerUpdateCoverageByIdParams.Encoded; readonly payload: typeof UpdateCoverage.Encoded }) => Effect.Effect<typeof Coverage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.basis
*/
readonly "CoverageControllerGetCoverageBasis": (id: string, options: typeof CoverageControllerGetCoverageBasisParams.Encoded) => Effect.Effect<typeof PolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.basis ref
*/
readonly "CoverageControllerGetCoverageBasisRef": (id: string, options: typeof CoverageControllerGetCoverageBasisRefParams.Encoded) => Effect.Effect<typeof ReferencedPolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Coverage.basis ref
*/
readonly "CoverageControllerPatchCoverageBasisRef": (id: string, options: { readonly params: typeof CoverageControllerPatchCoverageBasisRefParams.Encoded; readonly payload: typeof ReferencedUpdatePolicyTerm.Encoded }) => Effect.Effect<typeof ReferencedPolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.bucketType
*/
readonly "CoverageControllerGetCoverageBucketType": (id: string, options: typeof CoverageControllerGetCoverageBucketTypeParams.Encoded) => Effect.Effect<typeof NullableBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.bucketType ref
*/
readonly "CoverageControllerGetCoverageBucketTypeRef": (id: string, options: typeof CoverageControllerGetCoverageBucketTypeRefParams.Encoded) => Effect.Effect<typeof NullableReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Coverage.bucketType ref
*/
readonly "CoverageControllerPatchCoverageBucketTypeRef": (id: string, options: { readonly params: typeof CoverageControllerPatchCoverageBucketTypeRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateBucketType.Encoded }) => Effect.Effect<typeof NullableReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.deductible
*/
readonly "CoverageControllerGetCoverageDeductible": (id: string, options: typeof CoverageControllerGetCoverageDeductibleParams.Encoded) => Effect.Effect<typeof NullableDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.deductible ref
*/
readonly "CoverageControllerGetCoverageDeductibleRef": (id: string, options: typeof CoverageControllerGetCoverageDeductibleRefParams.Encoded) => Effect.Effect<typeof NullableReferencedDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Coverage.deductible ref
*/
readonly "CoverageControllerPatchCoverageDeductibleRef": (id: string, options: { readonly params: typeof CoverageControllerPatchCoverageDeductibleRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateDeductible.Encoded }) => Effect.Effect<typeof NullableReferencedDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.subBucketDefinitions
*/
readonly "CoverageControllerGetCoverageSubBucketDefinitions": (id: string, options: typeof CoverageControllerGetCoverageSubBucketDefinitionsParams.Encoded) => Effect.Effect<typeof SubBucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.subBucketDefinitions refs
*/
readonly "CoverageControllerGetCoverageSubBucketDefinitionsRef": (id: string, options: typeof CoverageControllerGetCoverageSubBucketDefinitionsRefParams.Encoded) => Effect.Effect<typeof ReferencedSubBucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.buckets
*/
readonly "CoverageControllerGetCoverageBuckets": (id: string, options: typeof CoverageControllerGetCoverageBucketsParams.Encoded) => Effect.Effect<typeof BucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.buckets refs
*/
readonly "CoverageControllerGetCoverageBucketsRef": (id: string, options: typeof CoverageControllerGetCoverageBucketsRefParams.Encoded) => Effect.Effect<typeof ReferencedBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.assets
*/
readonly "CoverageControllerGetCoverageAssets": (id: string, options: typeof CoverageControllerGetCoverageAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.assets refs
*/
readonly "CoverageControllerGetCoverageAssetsRef": (id: string, options: typeof CoverageControllerGetCoverageAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Coverage.assets ref(s)
*/
readonly "CoverageControllerPostCoverageAssetsRef": (id: string, options: { readonly params: typeof CoverageControllerPostCoverageAssetsRefParams.Encoded; readonly payload: typeof CoverageControllerPostCoverageAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Coverage.assets ref(s)
*/
readonly "CoverageControllerDeleteCoverageAssetsRef": (id: string, options: { readonly params: typeof CoverageControllerDeleteCoverageAssetsRefParams.Encoded; readonly payload: typeof CoverageControllerDeleteCoverageAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Coverage.assets refs
*/
readonly "CoverageControllerPatchCoverageAssetsRef": (id: string, options: { readonly params: typeof CoverageControllerPatchCoverageAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.template
*/
readonly "CoverageControllerGetCoverageTemplate": (id: string, options: typeof CoverageControllerGetCoverageTemplateParams.Encoded) => Effect.Effect<typeof NullableCoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.template ref
*/
readonly "CoverageControllerGetCoverageTemplateRef": (id: string, options: typeof CoverageControllerGetCoverageTemplateRefParams.Encoded) => Effect.Effect<typeof NullableReferencedCoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Coverage.template ref
*/
readonly "CoverageControllerPatchCoverageTemplateRef": (id: string, options: { readonly params: typeof CoverageControllerPatchCoverageTemplateRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateCoverageTemplate.Encoded }) => Effect.Effect<typeof NullableReferencedCoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.group
*/
readonly "CoverageControllerGetCoverageGroup": (id: string, options: typeof CoverageControllerGetCoverageGroupParams.Encoded) => Effect.Effect<typeof NullableCoverageGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.group ref
*/
readonly "CoverageControllerGetCoverageGroupRef": (id: string, options: typeof CoverageControllerGetCoverageGroupRefParams.Encoded) => Effect.Effect<typeof NullableReferencedCoverageGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Coverage.group ref
*/
readonly "CoverageControllerPatchCoverageGroupRef": (id: string, options: { readonly params: typeof CoverageControllerPatchCoverageGroupRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateCoverageGroup.Encoded }) => Effect.Effect<typeof NullableReferencedCoverageGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.perils
*/
readonly "CoverageControllerGetCoveragePerils": (id: string, options: typeof CoverageControllerGetCoveragePerilsParams.Encoded) => Effect.Effect<typeof PerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.perils refs
*/
readonly "CoverageControllerGetCoveragePerilsRef": (id: string, options: typeof CoverageControllerGetCoveragePerilsRefParams.Encoded) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Coverage.perils ref(s)
*/
readonly "CoverageControllerPostCoveragePerilsRef": (id: string, options: { readonly params: typeof CoverageControllerPostCoveragePerilsRefParams.Encoded; readonly payload: typeof CoverageControllerPostCoveragePerilsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Coverage.perils ref(s)
*/
readonly "CoverageControllerDeleteCoveragePerilsRef": (id: string, options: { readonly params: typeof CoverageControllerDeleteCoveragePerilsRefParams.Encoded; readonly payload: typeof CoverageControllerDeleteCoveragePerilsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Coverage.perils refs
*/
readonly "CoverageControllerPatchCoveragePerilsRef": (id: string, options: { readonly params: typeof CoverageControllerPatchCoveragePerilsRefParams.Encoded; readonly payload: typeof ReferencedUpdatePerilList.Encoded }) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.endorsements
*/
readonly "CoverageControllerGetCoverageEndorsements": (id: string, options: typeof CoverageControllerGetCoverageEndorsementsParams.Encoded) => Effect.Effect<typeof EndorsementList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Coverage.endorsements refs
*/
readonly "CoverageControllerGetCoverageEndorsementsRef": (id: string, options: typeof CoverageControllerGetCoverageEndorsementsRefParams.Encoded) => Effect.Effect<typeof ReferencedEndorsementList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageGroup List
*/
readonly "CoverageGroupControllerGetCoverageGroupList": (options: typeof CoverageGroupControllerGetCoverageGroupListParams.Encoded) => Effect.Effect<typeof CoverageGroupList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create CoverageGroup
*/
readonly "CoverageGroupControllerCreateCoverageGroup": (options: { readonly params: typeof CoverageGroupControllerCreateCoverageGroupParams.Encoded; readonly payload: typeof CoverageGroupControllerCreateCoverageGroupRequest.Encoded }) => Effect.Effect<typeof CoverageGroupControllerCreateCoverageGroup201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get CoverageGroup by ID
*/
readonly "CoverageGroupControllerGetCoverageGroupById": (id: string, options: typeof CoverageGroupControllerGetCoverageGroupByIdParams.Encoded) => Effect.Effect<typeof CoverageGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete CoverageGroup by ID
*/
readonly "CoverageGroupControllerDeleteCoverageGroupById": (id: string, options: typeof CoverageGroupControllerDeleteCoverageGroupByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update CoverageGroup by ID
*/
readonly "CoverageGroupControllerUpdateCoverageGroupById": (id: string, options: { readonly params: typeof CoverageGroupControllerUpdateCoverageGroupByIdParams.Encoded; readonly payload: typeof UpdateCoverageGroup.Encoded }) => Effect.Effect<typeof CoverageGroup.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageGroup.policyTerm
*/
readonly "CoverageGroupControllerGetCoverageGroupPolicyTerm": (id: string, options: typeof CoverageGroupControllerGetCoverageGroupPolicyTermParams.Encoded) => Effect.Effect<typeof PolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageGroup.policyTerm ref
*/
readonly "CoverageGroupControllerGetCoverageGroupPolicyTermRef": (id: string, options: typeof CoverageGroupControllerGetCoverageGroupPolicyTermRefParams.Encoded) => Effect.Effect<typeof ReferencedPolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace CoverageGroup.policyTerm ref
*/
readonly "CoverageGroupControllerPatchCoverageGroupPolicyTermRef": (id: string, options: { readonly params: typeof CoverageGroupControllerPatchCoverageGroupPolicyTermRefParams.Encoded; readonly payload: typeof ReferencedUpdatePolicyTerm.Encoded }) => Effect.Effect<typeof ReferencedPolicyTerm.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageGroup.template
*/
readonly "CoverageGroupControllerGetCoverageGroupTemplate": (id: string, options: typeof CoverageGroupControllerGetCoverageGroupTemplateParams.Encoded) => Effect.Effect<typeof NullableCoverageGroupTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageGroup.template ref
*/
readonly "CoverageGroupControllerGetCoverageGroupTemplateRef": (id: string, options: typeof CoverageGroupControllerGetCoverageGroupTemplateRefParams.Encoded) => Effect.Effect<typeof NullableReferencedCoverageGroupTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace CoverageGroup.template ref
*/
readonly "CoverageGroupControllerPatchCoverageGroupTemplateRef": (id: string, options: { readonly params: typeof CoverageGroupControllerPatchCoverageGroupTemplateRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateCoverageGroupTemplate.Encoded }) => Effect.Effect<typeof NullableReferencedCoverageGroupTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim List
*/
readonly "ClaimControllerGetClaimList": (options: typeof ClaimControllerGetClaimListParams.Encoded) => Effect.Effect<typeof ClaimList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Claim
*/
readonly "ClaimControllerCreateClaim": (options: { readonly params: typeof ClaimControllerCreateClaimParams.Encoded; readonly payload: typeof ClaimControllerCreateClaimRequest.Encoded }) => Effect.Effect<typeof ClaimControllerCreateClaim201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Claim by ID
*/
readonly "ClaimControllerGetClaimById": (id: string, options: typeof ClaimControllerGetClaimByIdParams.Encoded) => Effect.Effect<typeof Claim.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Claim by ID
*/
readonly "ClaimControllerDeleteClaimById": (id: string, options: typeof ClaimControllerDeleteClaimByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Claim by ID
*/
readonly "ClaimControllerUpdateClaimById": (id: string, options: { readonly params: typeof ClaimControllerUpdateClaimByIdParams.Encoded; readonly payload: typeof UpdateClaim.Encoded }) => Effect.Effect<typeof Claim.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.project
*/
readonly "ClaimControllerGetClaimProject": (id: string, options: typeof ClaimControllerGetClaimProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.project ref
*/
readonly "ClaimControllerGetClaimProjectRef": (id: string, options: typeof ClaimControllerGetClaimProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Claim.project ref
*/
readonly "ClaimControllerPatchClaimProjectRef": (id: string, options: { readonly params: typeof ClaimControllerPatchClaimProjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateProject.Encoded }) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.account
*/
readonly "ClaimControllerGetClaimAccount": (id: string, options: typeof ClaimControllerGetClaimAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.account ref
*/
readonly "ClaimControllerGetClaimAccountRef": (id: string, options: typeof ClaimControllerGetClaimAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.buckets
*/
readonly "ClaimControllerGetClaimBuckets": (id: string, options: typeof ClaimControllerGetClaimBucketsParams.Encoded) => Effect.Effect<typeof BaseBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.buckets refs
*/
readonly "ClaimControllerGetClaimBucketsRef": (id: string, options: typeof ClaimControllerGetClaimBucketsRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.fundings
*/
readonly "ClaimControllerGetClaimFundings": (id: string, options: typeof ClaimControllerGetClaimFundingsParams.Encoded) => Effect.Effect<typeof FundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.fundings refs
*/
readonly "ClaimControllerGetClaimFundingsRef": (id: string, options: typeof ClaimControllerGetClaimFundingsRefParams.Encoded) => Effect.Effect<typeof ReferencedFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.contacts
*/
readonly "ClaimControllerGetClaimContacts": (id: string, options: typeof ClaimControllerGetClaimContactsParams.Encoded) => Effect.Effect<typeof AccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.contacts refs
*/
readonly "ClaimControllerGetClaimContactsRef": (id: string, options: typeof ClaimControllerGetClaimContactsRefParams.Encoded) => Effect.Effect<typeof ReferencedAccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Claim.contacts ref(s)
*/
readonly "ClaimControllerPostClaimContactsRef": (id: string, options: { readonly params: typeof ClaimControllerPostClaimContactsRefParams.Encoded; readonly payload: typeof ClaimControllerPostClaimContactsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Claim.contacts ref(s)
*/
readonly "ClaimControllerDeleteClaimContactsRef": (id: string, options: { readonly params: typeof ClaimControllerDeleteClaimContactsRefParams.Encoded; readonly payload: typeof ClaimControllerDeleteClaimContactsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Claim.contacts refs
*/
readonly "ClaimControllerPatchClaimContactsRef": (id: string, options: { readonly params: typeof ClaimControllerPatchClaimContactsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccountProviderContactList.Encoded }) => Effect.Effect<typeof ReferencedAccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.currency
*/
readonly "ClaimControllerGetClaimCurrency": (id: string, options: typeof ClaimControllerGetClaimCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.currency ref
*/
readonly "ClaimControllerGetClaimCurrencyRef": (id: string, options: typeof ClaimControllerGetClaimCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Claim.currency ref
*/
readonly "ClaimControllerPatchClaimCurrencyRef": (id: string, options: { readonly params: typeof ClaimControllerPatchClaimCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.target
*/
readonly "ClaimControllerGetClaimTarget": (id: string, options: typeof ClaimControllerGetClaimTargetParams.Encoded) => Effect.Effect<typeof ClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.target ref
*/
readonly "ClaimControllerGetClaimTargetRef": (id: string, options: typeof ClaimControllerGetClaimTargetRefParams.Encoded) => Effect.Effect<typeof ReferencedClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Claim.target ref
*/
readonly "ClaimControllerPatchClaimTargetRef": (id: string, options: { readonly params: typeof ClaimControllerPatchClaimTargetRefParams.Encoded; readonly payload: typeof ReferencedUpdateClaimTarget.Encoded }) => Effect.Effect<typeof ReferencedClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.provider
*/
readonly "ClaimControllerGetClaimProvider": (id: string, options: typeof ClaimControllerGetClaimProviderParams.Encoded) => Effect.Effect<typeof Provider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.provider ref
*/
readonly "ClaimControllerGetClaimProviderRef": (id: string, options: typeof ClaimControllerGetClaimProviderRefParams.Encoded) => Effect.Effect<typeof ReferencedProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.deductibles
*/
readonly "ClaimControllerGetClaimDeductibles": (id: string, options: typeof ClaimControllerGetClaimDeductiblesParams.Encoded) => Effect.Effect<typeof DeductibleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Claim.deductibles refs
*/
readonly "ClaimControllerGetClaimDeductiblesRef": (id: string, options: typeof ClaimControllerGetClaimDeductiblesRefParams.Encoded) => Effect.Effect<typeof ReferencedDeductibleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible List
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleList": (options: typeof ClaimDeductibleControllerGetClaimDeductibleListParams.Encoded) => Effect.Effect<typeof ClaimDeductibleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ClaimDeductible
*/
readonly "ClaimDeductibleControllerCreateClaimDeductible": (options: { readonly params: typeof ClaimDeductibleControllerCreateClaimDeductibleParams.Encoded; readonly payload: typeof ClaimDeductibleControllerCreateClaimDeductibleRequest.Encoded }) => Effect.Effect<typeof ClaimDeductibleControllerCreateClaimDeductible201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ClaimDeductible by ID
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleById": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleByIdParams.Encoded) => Effect.Effect<typeof ClaimDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ClaimDeductible by ID
*/
readonly "ClaimDeductibleControllerDeleteClaimDeductibleById": (id: string, options: typeof ClaimDeductibleControllerDeleteClaimDeductibleByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ClaimDeductible by ID
*/
readonly "ClaimDeductibleControllerUpdateClaimDeductibleById": (id: string, options: { readonly params: typeof ClaimDeductibleControllerUpdateClaimDeductibleByIdParams.Encoded; readonly payload: typeof UpdateClaimDeductible.Encoded }) => Effect.Effect<typeof ClaimDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible.context
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleContext": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleContextParams.Encoded) => Effect.Effect<typeof Deductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible.context ref
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleContextRef": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleContextRefParams.Encoded) => Effect.Effect<typeof ReferencedDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ClaimDeductible.context ref
*/
readonly "ClaimDeductibleControllerPatchClaimDeductibleContextRef": (id: string, options: { readonly params: typeof ClaimDeductibleControllerPatchClaimDeductibleContextRefParams.Encoded; readonly payload: typeof ReferencedUpdateDeductible.Encoded }) => Effect.Effect<typeof ReferencedDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible.claim
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleClaim": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleClaimParams.Encoded) => Effect.Effect<typeof Claim.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible.claim ref
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleClaimRef": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleClaimRefParams.Encoded) => Effect.Effect<typeof ReferencedClaim.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ClaimDeductible.claim ref
*/
readonly "ClaimDeductibleControllerPatchClaimDeductibleClaimRef": (id: string, options: { readonly params: typeof ClaimDeductibleControllerPatchClaimDeductibleClaimRefParams.Encoded; readonly payload: typeof ReferencedUpdateClaim.Encoded }) => Effect.Effect<typeof ReferencedClaim.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible.target
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleTarget": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleTargetParams.Encoded) => Effect.Effect<typeof ClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible.target ref
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleTargetRef": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleTargetRefParams.Encoded) => Effect.Effect<typeof ReferencedClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible.buckets
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleBuckets": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleBucketsParams.Encoded) => Effect.Effect<typeof BucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ClaimDeductible.buckets refs
*/
readonly "ClaimDeductibleControllerGetClaimDeductibleBucketsRef": (id: string, options: typeof ClaimDeductibleControllerGetClaimDeductibleBucketsRefParams.Encoded) => Effect.Effect<typeof ReferencedBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket List
*/
readonly "BucketControllerGetBucketList": (options: typeof BucketControllerGetBucketListParams.Encoded) => Effect.Effect<typeof BucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Bucket
*/
readonly "BucketControllerCreateBucket": (options: { readonly params: typeof BucketControllerCreateBucketParams.Encoded; readonly payload: typeof BucketControllerCreateBucketRequest.Encoded }) => Effect.Effect<typeof BucketControllerCreateBucket201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Bucket by ID
*/
readonly "BucketControllerGetBucketById": (id: string, options: typeof BucketControllerGetBucketByIdParams.Encoded) => Effect.Effect<typeof Bucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Bucket by ID
*/
readonly "BucketControllerDeleteBucketById": (id: string, options: typeof BucketControllerDeleteBucketByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Bucket by ID
*/
readonly "BucketControllerUpdateBucketById": (id: string, options: { readonly params: typeof BucketControllerUpdateBucketByIdParams.Encoded; readonly payload: typeof UpdateBucket.Encoded }) => Effect.Effect<typeof Bucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.type
*/
readonly "BucketControllerGetBucketType": (id: string, options: typeof BucketControllerGetBucketTypeParams.Encoded) => Effect.Effect<typeof NullableBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.type ref
*/
readonly "BucketControllerGetBucketTypeRef": (id: string, options: typeof BucketControllerGetBucketTypeRefParams.Encoded) => Effect.Effect<typeof NullableReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Bucket.type ref
*/
readonly "BucketControllerPatchBucketTypeRef": (id: string, options: { readonly params: typeof BucketControllerPatchBucketTypeRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateBucketType.Encoded }) => Effect.Effect<typeof NullableReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.fundingSource
*/
readonly "BucketControllerGetBucketFundingSource": (id: string, options: typeof BucketControllerGetBucketFundingSourceParams.Encoded) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.fundingSource ref
*/
readonly "BucketControllerGetBucketFundingSourceRef": (id: string, options: typeof BucketControllerGetBucketFundingSourceRefParams.Encoded) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Bucket.fundingSource ref
*/
readonly "BucketControllerPatchBucketFundingSourceRef": (id: string, options: { readonly params: typeof BucketControllerPatchBucketFundingSourceRefParams.Encoded; readonly payload: typeof ReferencedUpdateFundingSource.Encoded }) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.metadata
*/
readonly "BucketControllerGetBucketMetadata": (id: string, options: typeof BucketControllerGetBucketMetadataParams.Encoded) => Effect.Effect<typeof BaseBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.metadata ref
*/
readonly "BucketControllerGetBucketMetadataRef": (id: string, options: typeof BucketControllerGetBucketMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.project
*/
readonly "BucketControllerGetBucketProject": (id: string, options: typeof BucketControllerGetBucketProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.project ref
*/
readonly "BucketControllerGetBucketProjectRef": (id: string, options: typeof BucketControllerGetBucketProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.account
*/
readonly "BucketControllerGetBucketAccount": (id: string, options: typeof BucketControllerGetBucketAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.account ref
*/
readonly "BucketControllerGetBucketAccountRef": (id: string, options: typeof BucketControllerGetBucketAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.entries
*/
readonly "BucketControllerGetBucketEntries": (id: string, options: typeof BucketControllerGetBucketEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.entries refs
*/
readonly "BucketControllerGetBucketEntriesRef": (id: string, options: typeof BucketControllerGetBucketEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.subBuckets
*/
readonly "BucketControllerGetBucketSubBuckets": (id: string, options: typeof BucketControllerGetBucketSubBucketsParams.Encoded) => Effect.Effect<typeof BaseSubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.subBuckets refs
*/
readonly "BucketControllerGetBucketSubBucketsRef": (id: string, options: typeof BucketControllerGetBucketSubBucketsRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseSubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.fundings
*/
readonly "BucketControllerGetBucketFundings": (id: string, options: typeof BucketControllerGetBucketFundingsParams.Encoded) => Effect.Effect<typeof BucketFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.fundings refs
*/
readonly "BucketControllerGetBucketFundingsRef": (id: string, options: typeof BucketControllerGetBucketFundingsRefParams.Encoded) => Effect.Effect<typeof ReferencedBucketFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.definition
*/
readonly "BucketControllerGetBucketDefinition": (id: string, options: typeof BucketControllerGetBucketDefinitionParams.Encoded) => Effect.Effect<typeof BucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.definition ref
*/
readonly "BucketControllerGetBucketDefinitionRef": (id: string, options: typeof BucketControllerGetBucketDefinitionRefParams.Encoded) => Effect.Effect<typeof ReferencedBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Bucket.definition ref
*/
readonly "BucketControllerPatchBucketDefinitionRef": (id: string, options: { readonly params: typeof BucketControllerPatchBucketDefinitionRefParams.Encoded; readonly payload: typeof ReferencedUpdateBucketDefinition.Encoded }) => Effect.Effect<typeof ReferencedBucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.deductible
*/
readonly "BucketControllerGetBucketDeductible": (id: string, options: typeof BucketControllerGetBucketDeductibleParams.Encoded) => Effect.Effect<typeof Deductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.deductible ref
*/
readonly "BucketControllerGetBucketDeductibleRef": (id: string, options: typeof BucketControllerGetBucketDeductibleRefParams.Encoded) => Effect.Effect<typeof ReferencedDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.claimDeductible
*/
readonly "BucketControllerGetBucketClaimDeductible": (id: string, options: typeof BucketControllerGetBucketClaimDeductibleParams.Encoded) => Effect.Effect<typeof ClaimDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Bucket.claimDeductible ref
*/
readonly "BucketControllerGetBucketClaimDeductibleRef": (id: string, options: typeof BucketControllerGetBucketClaimDeductibleRefParams.Encoded) => Effect.Effect<typeof ReferencedClaimDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding List
*/
readonly "BucketFundingControllerGetBucketFundingList": (options: typeof BucketFundingControllerGetBucketFundingListParams.Encoded) => Effect.Effect<typeof BucketFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create BucketFunding
*/
readonly "BucketFundingControllerCreateBucketFunding": (options: { readonly params: typeof BucketFundingControllerCreateBucketFundingParams.Encoded; readonly payload: typeof BucketFundingControllerCreateBucketFundingRequest.Encoded }) => Effect.Effect<typeof BucketFundingControllerCreateBucketFunding201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get BucketFunding by ID
*/
readonly "BucketFundingControllerGetBucketFundingById": (id: string, options: typeof BucketFundingControllerGetBucketFundingByIdParams.Encoded) => Effect.Effect<typeof BucketFunding.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete BucketFunding by ID
*/
readonly "BucketFundingControllerDeleteBucketFundingById": (id: string, options: typeof BucketFundingControllerDeleteBucketFundingByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update BucketFunding by ID
*/
readonly "BucketFundingControllerUpdateBucketFundingById": (id: string, options: { readonly params: typeof BucketFundingControllerUpdateBucketFundingByIdParams.Encoded; readonly payload: typeof UpdateBucketFunding.Encoded }) => Effect.Effect<typeof BucketFunding.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding.funding
*/
readonly "BucketFundingControllerGetBucketFundingFunding": (id: string, options: typeof BucketFundingControllerGetBucketFundingFundingParams.Encoded) => Effect.Effect<typeof Funding.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding.funding ref
*/
readonly "BucketFundingControllerGetBucketFundingFundingRef": (id: string, options: typeof BucketFundingControllerGetBucketFundingFundingRefParams.Encoded) => Effect.Effect<typeof ReferencedFunding.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace BucketFunding.funding ref
*/
readonly "BucketFundingControllerPatchBucketFundingFundingRef": (id: string, options: { readonly params: typeof BucketFundingControllerPatchBucketFundingFundingRefParams.Encoded; readonly payload: typeof ReferencedUpdateFunding.Encoded }) => Effect.Effect<typeof ReferencedFunding.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding.bucket
*/
readonly "BucketFundingControllerGetBucketFundingBucket": (id: string, options: typeof BucketFundingControllerGetBucketFundingBucketParams.Encoded) => Effect.Effect<typeof BaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding.bucket ref
*/
readonly "BucketFundingControllerGetBucketFundingBucketRef": (id: string, options: typeof BucketFundingControllerGetBucketFundingBucketRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace BucketFunding.bucket ref
*/
readonly "BucketFundingControllerPatchBucketFundingBucketRef": (id: string, options: { readonly params: typeof BucketFundingControllerPatchBucketFundingBucketRefParams.Encoded; readonly payload: typeof ReferencedUpdateBaseBucket.Encoded }) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding.fundingSource
*/
readonly "BucketFundingControllerGetBucketFundingFundingSource": (id: string, options: typeof BucketFundingControllerGetBucketFundingFundingSourceParams.Encoded) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding.fundingSource ref
*/
readonly "BucketFundingControllerGetBucketFundingFundingSourceRef": (id: string, options: typeof BucketFundingControllerGetBucketFundingFundingSourceRefParams.Encoded) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding.currency
*/
readonly "BucketFundingControllerGetBucketFundingCurrency": (id: string, options: typeof BucketFundingControllerGetBucketFundingCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketFunding.currency ref
*/
readonly "BucketFundingControllerGetBucketFundingCurrencyRef": (id: string, options: typeof BucketFundingControllerGetBucketFundingCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition List
*/
readonly "BucketDefinitionControllerGetBucketDefinitionList": (options?: typeof BucketDefinitionControllerGetBucketDefinitionListParams.Encoded | undefined) => Effect.Effect<typeof BucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create BucketDefinition
*/
readonly "BucketDefinitionControllerCreateBucketDefinition": (options: { readonly params?: typeof BucketDefinitionControllerCreateBucketDefinitionParams.Encoded | undefined; readonly payload: typeof BucketDefinitionControllerCreateBucketDefinitionRequest.Encoded }) => Effect.Effect<typeof BucketDefinitionControllerCreateBucketDefinition201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get BucketDefinition by ID
*/
readonly "BucketDefinitionControllerGetBucketDefinitionById": (id: string, options?: typeof BucketDefinitionControllerGetBucketDefinitionByIdParams.Encoded | undefined) => Effect.Effect<typeof BucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete BucketDefinition by ID
*/
readonly "BucketDefinitionControllerDeleteBucketDefinitionById": (id: string) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update BucketDefinition by ID
*/
readonly "BucketDefinitionControllerUpdateBucketDefinitionById": (id: string, options: { readonly params?: typeof BucketDefinitionControllerUpdateBucketDefinitionByIdParams.Encoded | undefined; readonly payload: typeof UpdateBucketDefinition.Encoded }) => Effect.Effect<typeof BucketDefinition.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.basis
*/
readonly "BucketDefinitionControllerGetBucketDefinitionBasis": (id: string, options?: typeof BucketDefinitionControllerGetBucketDefinitionBasisParams.Encoded | undefined) => Effect.Effect<typeof ClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.basis ref
*/
readonly "BucketDefinitionControllerGetBucketDefinitionBasisRef": (id: string) => Effect.Effect<typeof ReferencedClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace BucketDefinition.basis ref
*/
readonly "BucketDefinitionControllerPatchBucketDefinitionBasisRef": (id: string, options: typeof ReferencedUpdateClaimTarget.Encoded) => Effect.Effect<typeof ReferencedClaimTarget.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.bucketType
*/
readonly "BucketDefinitionControllerGetBucketDefinitionBucketType": (id: string, options?: typeof BucketDefinitionControllerGetBucketDefinitionBucketTypeParams.Encoded | undefined) => Effect.Effect<typeof NullableBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.bucketType ref
*/
readonly "BucketDefinitionControllerGetBucketDefinitionBucketTypeRef": (id: string) => Effect.Effect<typeof NullableReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace BucketDefinition.bucketType ref
*/
readonly "BucketDefinitionControllerPatchBucketDefinitionBucketTypeRef": (id: string, options: typeof NullableReferencedUpdateBucketType.Encoded) => Effect.Effect<typeof NullableReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.deductible
*/
readonly "BucketDefinitionControllerGetBucketDefinitionDeductible": (id: string, options?: typeof BucketDefinitionControllerGetBucketDefinitionDeductibleParams.Encoded | undefined) => Effect.Effect<typeof NullableDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.deductible ref
*/
readonly "BucketDefinitionControllerGetBucketDefinitionDeductibleRef": (id: string) => Effect.Effect<typeof NullableReferencedDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace BucketDefinition.deductible ref
*/
readonly "BucketDefinitionControllerPatchBucketDefinitionDeductibleRef": (id: string, options: typeof NullableReferencedUpdateDeductible.Encoded) => Effect.Effect<typeof NullableReferencedDeductible.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.subBucketDefinitions
*/
readonly "BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitions": (id: string, options?: typeof BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitionsParams.Encoded | undefined) => Effect.Effect<typeof SubBucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.subBucketDefinitions refs
*/
readonly "BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitionsRef": (id: string) => Effect.Effect<typeof ReferencedSubBucketDefinitionList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.buckets
*/
readonly "BucketDefinitionControllerGetBucketDefinitionBuckets": (id: string, options?: typeof BucketDefinitionControllerGetBucketDefinitionBucketsParams.Encoded | undefined) => Effect.Effect<typeof BucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketDefinition.buckets refs
*/
readonly "BucketDefinitionControllerGetBucketDefinitionBucketsRef": (id: string) => Effect.Effect<typeof ReferencedBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket List
*/
readonly "BaseSubBucketControllerGetBaseSubBucketList": (options: typeof BaseSubBucketControllerGetBaseSubBucketListParams.Encoded) => Effect.Effect<typeof BaseSubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create BaseSubBucket
*/
readonly "BaseSubBucketControllerCreateBaseSubBucket": (options: { readonly params: typeof BaseSubBucketControllerCreateBaseSubBucketParams.Encoded; readonly payload: typeof BaseSubBucketControllerCreateBaseSubBucketRequest.Encoded }) => Effect.Effect<typeof BaseSubBucketControllerCreateBaseSubBucket201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get BaseSubBucket by ID
*/
readonly "BaseSubBucketControllerGetBaseSubBucketById": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketByIdParams.Encoded) => Effect.Effect<typeof BaseSubBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete BaseSubBucket by ID
*/
readonly "BaseSubBucketControllerDeleteBaseSubBucketById": (id: string, options: typeof BaseSubBucketControllerDeleteBaseSubBucketByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update BaseSubBucket by ID
*/
readonly "BaseSubBucketControllerUpdateBaseSubBucketById": (id: string, options: { readonly params: typeof BaseSubBucketControllerUpdateBaseSubBucketByIdParams.Encoded; readonly payload: typeof UpdateBaseSubBucket.Encoded }) => Effect.Effect<typeof BaseSubBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.parent
*/
readonly "BaseSubBucketControllerGetBaseSubBucketParent": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketParentParams.Encoded) => Effect.Effect<typeof BaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.parent ref
*/
readonly "BaseSubBucketControllerGetBaseSubBucketParentRef": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketParentRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace BaseSubBucket.parent ref
*/
readonly "BaseSubBucketControllerPatchBaseSubBucketParentRef": (id: string, options: { readonly params: typeof BaseSubBucketControllerPatchBaseSubBucketParentRefParams.Encoded; readonly payload: typeof ReferencedUpdateBaseBucket.Encoded }) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.metadata
*/
readonly "BaseSubBucketControllerGetBaseSubBucketMetadata": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketMetadataParams.Encoded) => Effect.Effect<typeof BaseSubBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.metadata ref
*/
readonly "BaseSubBucketControllerGetBaseSubBucketMetadataRef": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseSubBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.fundingSource
*/
readonly "BaseSubBucketControllerGetBaseSubBucketFundingSource": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketFundingSourceParams.Encoded) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.fundingSource ref
*/
readonly "BaseSubBucketControllerGetBaseSubBucketFundingSourceRef": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketFundingSourceRefParams.Encoded) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.project
*/
readonly "BaseSubBucketControllerGetBaseSubBucketProject": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.project ref
*/
readonly "BaseSubBucketControllerGetBaseSubBucketProjectRef": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.account
*/
readonly "BaseSubBucketControllerGetBaseSubBucketAccount": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.account ref
*/
readonly "BaseSubBucketControllerGetBaseSubBucketAccountRef": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.entries
*/
readonly "BaseSubBucketControllerGetBaseSubBucketEntries": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucket.entries refs
*/
readonly "BaseSubBucketControllerGetBaseSubBucketEntriesRef": (id: string, options: typeof BaseSubBucketControllerGetBaseSubBucketEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucketMetadata List
*/
readonly "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataList": (options: typeof BaseSubBucketMetadataControllerGetBaseSubBucketMetadataListParams.Encoded) => Effect.Effect<typeof BaseSubBucketMetadataList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get BaseSubBucketMetadata by ID
*/
readonly "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataById": (id: string, options: typeof BaseSubBucketMetadataControllerGetBaseSubBucketMetadataByIdParams.Encoded) => Effect.Effect<typeof BaseSubBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucketMetadata.object
*/
readonly "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObject": (id: string, options: typeof BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectParams.Encoded) => Effect.Effect<typeof BaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseSubBucketMetadata.object ref
*/
readonly "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectRef": (id: string, options: typeof BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket List
*/
readonly "BaseBucketControllerGetBaseBucketList": (options: typeof BaseBucketControllerGetBaseBucketListParams.Encoded) => Effect.Effect<typeof BaseBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create BaseBucket
*/
readonly "BaseBucketControllerCreateBaseBucket": (options: { readonly params: typeof BaseBucketControllerCreateBaseBucketParams.Encoded; readonly payload: typeof BaseBucketControllerCreateBaseBucketRequest.Encoded }) => Effect.Effect<typeof BaseBucketControllerCreateBaseBucket201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get BaseBucket by ID
*/
readonly "BaseBucketControllerGetBaseBucketById": (id: string, options: typeof BaseBucketControllerGetBaseBucketByIdParams.Encoded) => Effect.Effect<typeof BaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete BaseBucket by ID
*/
readonly "BaseBucketControllerDeleteBaseBucketById": (id: string, options: typeof BaseBucketControllerDeleteBaseBucketByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update BaseBucket by ID
*/
readonly "BaseBucketControllerUpdateBaseBucketById": (id: string, options: { readonly params: typeof BaseBucketControllerUpdateBaseBucketByIdParams.Encoded; readonly payload: typeof UpdateBaseBucket.Encoded }) => Effect.Effect<typeof BaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.type
*/
readonly "BaseBucketControllerGetBaseBucketType": (id: string, options: typeof BaseBucketControllerGetBaseBucketTypeParams.Encoded) => Effect.Effect<typeof NullableBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.type ref
*/
readonly "BaseBucketControllerGetBaseBucketTypeRef": (id: string, options: typeof BaseBucketControllerGetBaseBucketTypeRefParams.Encoded) => Effect.Effect<typeof NullableReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace BaseBucket.type ref
*/
readonly "BaseBucketControllerPatchBaseBucketTypeRef": (id: string, options: { readonly params: typeof BaseBucketControllerPatchBaseBucketTypeRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateBucketType.Encoded }) => Effect.Effect<typeof NullableReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.fundingSource
*/
readonly "BaseBucketControllerGetBaseBucketFundingSource": (id: string, options: typeof BaseBucketControllerGetBaseBucketFundingSourceParams.Encoded) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.fundingSource ref
*/
readonly "BaseBucketControllerGetBaseBucketFundingSourceRef": (id: string, options: typeof BaseBucketControllerGetBaseBucketFundingSourceRefParams.Encoded) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace BaseBucket.fundingSource ref
*/
readonly "BaseBucketControllerPatchBaseBucketFundingSourceRef": (id: string, options: { readonly params: typeof BaseBucketControllerPatchBaseBucketFundingSourceRefParams.Encoded; readonly payload: typeof ReferencedUpdateFundingSource.Encoded }) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.metadata
*/
readonly "BaseBucketControllerGetBaseBucketMetadata": (id: string, options: typeof BaseBucketControllerGetBaseBucketMetadataParams.Encoded) => Effect.Effect<typeof BaseBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.metadata ref
*/
readonly "BaseBucketControllerGetBaseBucketMetadataRef": (id: string, options: typeof BaseBucketControllerGetBaseBucketMetadataRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.project
*/
readonly "BaseBucketControllerGetBaseBucketProject": (id: string, options: typeof BaseBucketControllerGetBaseBucketProjectParams.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.project ref
*/
readonly "BaseBucketControllerGetBaseBucketProjectRef": (id: string, options: typeof BaseBucketControllerGetBaseBucketProjectRefParams.Encoded) => Effect.Effect<typeof ReferencedProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.account
*/
readonly "BaseBucketControllerGetBaseBucketAccount": (id: string, options: typeof BaseBucketControllerGetBaseBucketAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.account ref
*/
readonly "BaseBucketControllerGetBaseBucketAccountRef": (id: string, options: typeof BaseBucketControllerGetBaseBucketAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.entries
*/
readonly "BaseBucketControllerGetBaseBucketEntries": (id: string, options: typeof BaseBucketControllerGetBaseBucketEntriesParams.Encoded) => Effect.Effect<typeof EntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.entries refs
*/
readonly "BaseBucketControllerGetBaseBucketEntriesRef": (id: string, options: typeof BaseBucketControllerGetBaseBucketEntriesRefParams.Encoded) => Effect.Effect<typeof ReferencedEntryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.subBuckets
*/
readonly "BaseBucketControllerGetBaseBucketSubBuckets": (id: string, options: typeof BaseBucketControllerGetBaseBucketSubBucketsParams.Encoded) => Effect.Effect<typeof BaseSubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.subBuckets refs
*/
readonly "BaseBucketControllerGetBaseBucketSubBucketsRef": (id: string, options: typeof BaseBucketControllerGetBaseBucketSubBucketsRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseSubBucketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.fundings
*/
readonly "BaseBucketControllerGetBaseBucketFundings": (id: string, options: typeof BaseBucketControllerGetBaseBucketFundingsParams.Encoded) => Effect.Effect<typeof BucketFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucket.fundings refs
*/
readonly "BaseBucketControllerGetBaseBucketFundingsRef": (id: string, options: typeof BaseBucketControllerGetBaseBucketFundingsRefParams.Encoded) => Effect.Effect<typeof ReferencedBucketFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucketMetadata List
*/
readonly "BaseBucketMetadataControllerGetBaseBucketMetadataList": (options: typeof BaseBucketMetadataControllerGetBaseBucketMetadataListParams.Encoded) => Effect.Effect<typeof BaseBucketMetadataList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get BaseBucketMetadata by ID
*/
readonly "BaseBucketMetadataControllerGetBaseBucketMetadataById": (id: string, options: typeof BaseBucketMetadataControllerGetBaseBucketMetadataByIdParams.Encoded) => Effect.Effect<typeof BaseBucketMetadata.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucketMetadata.object
*/
readonly "BaseBucketMetadataControllerGetBaseBucketMetadataObject": (id: string, options: typeof BaseBucketMetadataControllerGetBaseBucketMetadataObjectParams.Encoded) => Effect.Effect<typeof BaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BaseBucketMetadata.object ref
*/
readonly "BaseBucketMetadataControllerGetBaseBucketMetadataObjectRef": (id: string, options: typeof BaseBucketMetadataControllerGetBaseBucketMetadataObjectRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseBucket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset List
*/
readonly "AssetControllerGetAssetList": (options: typeof AssetControllerGetAssetListParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Asset
*/
readonly "AssetControllerCreateAsset": (options: { readonly params: typeof AssetControllerCreateAssetParams.Encoded; readonly payload: typeof AssetControllerCreateAssetRequest.Encoded }) => Effect.Effect<typeof AssetControllerCreateAsset201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Asset by ID
*/
readonly "AssetControllerGetAssetById": (id: string, options: typeof AssetControllerGetAssetByIdParams.Encoded) => Effect.Effect<typeof Asset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Asset by ID
*/
readonly "AssetControllerDeleteAssetById": (id: string, options: typeof AssetControllerDeleteAssetByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Asset by ID
*/
readonly "AssetControllerUpdateAssetById": (id: string, options: { readonly params: typeof AssetControllerUpdateAssetByIdParams.Encoded; readonly payload: typeof UpdateAsset.Encoded }) => Effect.Effect<typeof Asset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.assetType
*/
readonly "AssetControllerGetAssetAssetType": (id: string, options: typeof AssetControllerGetAssetAssetTypeParams.Encoded) => Effect.Effect<typeof AssetType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.assetType ref
*/
readonly "AssetControllerGetAssetAssetTypeRef": (id: string, options: typeof AssetControllerGetAssetAssetTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Asset.assetType ref
*/
readonly "AssetControllerPatchAssetAssetTypeRef": (id: string, options: { readonly params: typeof AssetControllerPatchAssetAssetTypeRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetType.Encoded }) => Effect.Effect<typeof ReferencedAssetType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.account
*/
readonly "AssetControllerGetAssetAccount": (id: string, options: typeof AssetControllerGetAssetAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.account ref
*/
readonly "AssetControllerGetAssetAccountRef": (id: string, options: typeof AssetControllerGetAssetAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Asset.account ref
*/
readonly "AssetControllerPatchAssetAccountRef": (id: string, options: { readonly params: typeof AssetControllerPatchAssetAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.appraisals
*/
readonly "AssetControllerGetAssetAppraisals": (id: string, options: typeof AssetControllerGetAssetAppraisalsParams.Encoded) => Effect.Effect<typeof AssetAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.appraisals refs
*/
readonly "AssetControllerGetAssetAppraisalsRef": (id: string, options: typeof AssetControllerGetAssetAppraisalsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.selectedAppraisal
*/
readonly "AssetControllerGetAssetSelectedAppraisal": (id: string, options: typeof AssetControllerGetAssetSelectedAppraisalParams.Encoded) => Effect.Effect<typeof NullableAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.selectedAppraisal ref
*/
readonly "AssetControllerGetAssetSelectedAppraisalRef": (id: string, options: typeof AssetControllerGetAssetSelectedAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Asset.selectedAppraisal ref
*/
readonly "AssetControllerPatchAssetSelectedAppraisalRef": (id: string, options: { readonly params: typeof AssetControllerPatchAssetSelectedAppraisalRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAssetAppraisal.Encoded }) => Effect.Effect<typeof NullableReferencedAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.relevantAppraisal
*/
readonly "AssetControllerGetAssetRelevantAppraisal": (id: string, options: typeof AssetControllerGetAssetRelevantAppraisalParams.Encoded) => Effect.Effect<typeof NullableAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Asset.relevantAppraisal ref
*/
readonly "AssetControllerGetAssetRelevantAppraisalRef": (id: string, options: typeof AssetControllerGetAssetRelevantAppraisalRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Address List
*/
readonly "AddressControllerGetAddressList": (options: typeof AddressControllerGetAddressListParams.Encoded) => Effect.Effect<typeof AddressList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Address
*/
readonly "AddressControllerCreateAddress": (options: { readonly params: typeof AddressControllerCreateAddressParams.Encoded; readonly payload: typeof AddressControllerCreateAddressRequest.Encoded }) => Effect.Effect<typeof AddressControllerCreateAddress201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Address by ID
*/
readonly "AddressControllerGetAddressById": (id: string, options: typeof AddressControllerGetAddressByIdParams.Encoded) => Effect.Effect<typeof Address.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Address by ID
*/
readonly "AddressControllerDeleteAddressById": (id: string, options: typeof AddressControllerDeleteAddressByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Address by ID
*/
readonly "AddressControllerUpdateAddressById": (id: string, options: { readonly params: typeof AddressControllerUpdateAddressByIdParams.Encoded; readonly payload: typeof UpdateAddress.Encoded }) => Effect.Effect<typeof Address.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Address.account
*/
readonly "AddressControllerGetAddressAccount": (id: string, options: typeof AddressControllerGetAddressAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Address.account ref
*/
readonly "AddressControllerGetAddressAccountRef": (id: string, options: typeof AddressControllerGetAddressAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Address.account ref
*/
readonly "AddressControllerPatchAddressAccountRef": (id: string, options: { readonly params: typeof AddressControllerPatchAddressAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Address.country
*/
readonly "AddressControllerGetAddressCountry": (id: string, options: typeof AddressControllerGetAddressCountryParams.Encoded) => Effect.Effect<typeof Country.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Address.country ref
*/
readonly "AddressControllerGetAddressCountryRef": (id: string, options: typeof AddressControllerGetAddressCountryRefParams.Encoded) => Effect.Effect<typeof ReferencedCountry.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Address.country ref
*/
readonly "AddressControllerPatchAddressCountryRef": (id: string, options: { readonly params: typeof AddressControllerPatchAddressCountryRefParams.Encoded; readonly payload: typeof ReferencedUpdateCountry.Encoded }) => Effect.Effect<typeof ReferencedCountry.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Account by ID
*/
readonly "AccountControllerGetAccountById": (id: string, options?: typeof AccountControllerGetAccountByIdParams.Encoded | undefined) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Update Account by ID
*/
readonly "AccountControllerUpdateAccountById": (id: string, options: { readonly params?: typeof AccountControllerUpdateAccountByIdParams.Encoded | undefined; readonly payload: typeof UpdateAccount.Encoded }) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.owner
*/
readonly "AccountControllerGetAccountOwner": (id: string, options?: typeof AccountControllerGetAccountOwnerParams.Encoded | undefined) => Effect.Effect<typeof User.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.owner ref
*/
readonly "AccountControllerGetAccountOwnerRef": (id: string) => Effect.Effect<typeof ReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Account.owner ref
*/
readonly "AccountControllerPatchAccountOwnerRef": (id: string, options: typeof ReferencedUpdateUser.Encoded) => Effect.Effect<typeof ReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.projects
*/
readonly "AccountControllerGetAccountProjects": (id: string, options?: typeof AccountControllerGetAccountProjectsParams.Encoded | undefined) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.projects refs
*/
readonly "AccountControllerGetAccountProjectsRef": (id: string) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.assets
*/
readonly "AccountControllerGetAccountAssets": (id: string, options?: typeof AccountControllerGetAccountAssetsParams.Encoded | undefined) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.assets refs
*/
readonly "AccountControllerGetAccountAssetsRef": (id: string) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.userRoles
*/
readonly "AccountControllerGetAccountUserRoles": (id: string, options?: typeof AccountControllerGetAccountUserRolesParams.Encoded | undefined) => Effect.Effect<typeof UserAccountRoleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.userRoles refs
*/
readonly "AccountControllerGetAccountUserRolesRef": (id: string) => Effect.Effect<typeof ReferencedUserAccountRoleList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.defaultCurrency
*/
readonly "AccountControllerGetAccountDefaultCurrency": (id: string, options?: typeof AccountControllerGetAccountDefaultCurrencyParams.Encoded | undefined) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Account.defaultCurrency ref
*/
readonly "AccountControllerGetAccountDefaultCurrencyRef": (id: string) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Account.defaultCurrency ref
*/
readonly "AccountControllerPatchAccountDefaultCurrencyRef": (id: string, options: typeof ReferencedUpdateCurrency.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProvider List
*/
readonly "AccountProviderControllerGetAccountProviderList": (options: typeof AccountProviderControllerGetAccountProviderListParams.Encoded) => Effect.Effect<typeof AccountProviderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create AccountProvider
*/
readonly "AccountProviderControllerCreateAccountProvider": (options: { readonly params: typeof AccountProviderControllerCreateAccountProviderParams.Encoded; readonly payload: typeof AccountProviderControllerCreateAccountProviderRequest.Encoded }) => Effect.Effect<typeof AccountProviderControllerCreateAccountProvider201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AccountProvider by ID
*/
readonly "AccountProviderControllerGetAccountProviderById": (id: string, options: typeof AccountProviderControllerGetAccountProviderByIdParams.Encoded) => Effect.Effect<typeof AccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete AccountProvider by ID
*/
readonly "AccountProviderControllerDeleteAccountProviderById": (id: string, options: typeof AccountProviderControllerDeleteAccountProviderByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update AccountProvider by ID
*/
readonly "AccountProviderControllerUpdateAccountProviderById": (id: string, options: { readonly params: typeof AccountProviderControllerUpdateAccountProviderByIdParams.Encoded; readonly payload: typeof UpdateAccountProvider.Encoded }) => Effect.Effect<typeof AccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProvider.account
*/
readonly "AccountProviderControllerGetAccountProviderAccount": (id: string, options: typeof AccountProviderControllerGetAccountProviderAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProvider.account ref
*/
readonly "AccountProviderControllerGetAccountProviderAccountRef": (id: string, options: typeof AccountProviderControllerGetAccountProviderAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AccountProvider.account ref
*/
readonly "AccountProviderControllerPatchAccountProviderAccountRef": (id: string, options: { readonly params: typeof AccountProviderControllerPatchAccountProviderAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProvider.provider
*/
readonly "AccountProviderControllerGetAccountProviderProvider": (id: string, options: typeof AccountProviderControllerGetAccountProviderProviderParams.Encoded) => Effect.Effect<typeof NullableProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProvider.provider ref
*/
readonly "AccountProviderControllerGetAccountProviderProviderRef": (id: string, options: typeof AccountProviderControllerGetAccountProviderProviderRefParams.Encoded) => Effect.Effect<typeof NullableReferencedProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AccountProvider.provider ref
*/
readonly "AccountProviderControllerPatchAccountProviderProviderRef": (id: string, options: { readonly params: typeof AccountProviderControllerPatchAccountProviderProviderRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateProvider.Encoded }) => Effect.Effect<typeof NullableReferencedProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact List
*/
readonly "AccountProviderContactControllerGetAccountProviderContactList": (options: typeof AccountProviderContactControllerGetAccountProviderContactListParams.Encoded) => Effect.Effect<typeof AccountProviderContactList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create AccountProviderContact
*/
readonly "AccountProviderContactControllerCreateAccountProviderContact": (options: { readonly params: typeof AccountProviderContactControllerCreateAccountProviderContactParams.Encoded; readonly payload: typeof AccountProviderContactControllerCreateAccountProviderContactRequest.Encoded }) => Effect.Effect<typeof AccountProviderContactControllerCreateAccountProviderContact201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AccountProviderContact by ID
*/
readonly "AccountProviderContactControllerGetAccountProviderContactById": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactByIdParams.Encoded) => Effect.Effect<typeof AccountProviderContact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete AccountProviderContact by ID
*/
readonly "AccountProviderContactControllerDeleteAccountProviderContactById": (id: string, options: typeof AccountProviderContactControllerDeleteAccountProviderContactByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update AccountProviderContact by ID
*/
readonly "AccountProviderContactControllerUpdateAccountProviderContactById": (id: string, options: { readonly params: typeof AccountProviderContactControllerUpdateAccountProviderContactByIdParams.Encoded; readonly payload: typeof UpdateAccountProviderContact.Encoded }) => Effect.Effect<typeof AccountProviderContact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact.primaryEmailAddress
*/
readonly "AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddress": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressParams.Encoded) => Effect.Effect<typeof NullableEmailAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact.primaryEmailAddress ref
*/
readonly "AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressRef": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressRefParams.Encoded) => Effect.Effect<typeof NullableReferencedEmailAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AccountProviderContact.primaryEmailAddress ref
*/
readonly "AccountProviderContactControllerPatchAccountProviderContactPrimaryEmailAddressRef": (id: string, options: { readonly params: typeof AccountProviderContactControllerPatchAccountProviderContactPrimaryEmailAddressRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateEmailAddress.Encoded }) => Effect.Effect<typeof NullableReferencedEmailAddress.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact.primaryPhoneNumber
*/
readonly "AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumber": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberParams.Encoded) => Effect.Effect<typeof NullablePhoneNumber.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact.primaryPhoneNumber ref
*/
readonly "AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberRef": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberRefParams.Encoded) => Effect.Effect<typeof NullableReferencedPhoneNumber.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AccountProviderContact.primaryPhoneNumber ref
*/
readonly "AccountProviderContactControllerPatchAccountProviderContactPrimaryPhoneNumberRef": (id: string, options: { readonly params: typeof AccountProviderContactControllerPatchAccountProviderContactPrimaryPhoneNumberRefParams.Encoded; readonly payload: typeof NullableReferencedUpdatePhoneNumber.Encoded }) => Effect.Effect<typeof NullableReferencedPhoneNumber.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact.provider
*/
readonly "AccountProviderContactControllerGetAccountProviderContactProvider": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactProviderParams.Encoded) => Effect.Effect<typeof AccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact.provider ref
*/
readonly "AccountProviderContactControllerGetAccountProviderContactProviderRef": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactProviderRefParams.Encoded) => Effect.Effect<typeof ReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AccountProviderContact.provider ref
*/
readonly "AccountProviderContactControllerPatchAccountProviderContactProviderRef": (id: string, options: { readonly params: typeof AccountProviderContactControllerPatchAccountProviderContactProviderRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof ReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact.user
*/
readonly "AccountProviderContactControllerGetAccountProviderContactUser": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactUserParams.Encoded) => Effect.Effect<typeof NullableUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountProviderContact.user ref
*/
readonly "AccountProviderContactControllerGetAccountProviderContactUserRef": (id: string, options: typeof AccountProviderContactControllerGetAccountProviderContactUserRefParams.Encoded) => Effect.Effect<typeof NullableReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AccountProviderContact.user ref
*/
readonly "AccountProviderContactControllerPatchAccountProviderContactUserRef": (id: string, options: { readonly params: typeof AccountProviderContactControllerPatchAccountProviderContactUserRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateUser.Encoded }) => Effect.Effect<typeof NullableReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountInvite List
*/
readonly "AccountInviteControllerGetAccountInviteList": (options: typeof AccountInviteControllerGetAccountInviteListParams.Encoded) => Effect.Effect<typeof AccountInviteList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create AccountInvite
*/
readonly "AccountInviteControllerCreateAccountInvite": (options: { readonly params: typeof AccountInviteControllerCreateAccountInviteParams.Encoded; readonly payload: typeof AccountInviteControllerCreateAccountInviteRequest.Encoded }) => Effect.Effect<typeof AccountInviteControllerCreateAccountInvite201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AccountInvite by ID
*/
readonly "AccountInviteControllerGetAccountInviteById": (id: string, options: typeof AccountInviteControllerGetAccountInviteByIdParams.Encoded) => Effect.Effect<typeof AccountInvite.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete AccountInvite by ID
*/
readonly "AccountInviteControllerDeleteAccountInviteById": (id: string, options: typeof AccountInviteControllerDeleteAccountInviteByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update AccountInvite by ID
*/
readonly "AccountInviteControllerUpdateAccountInviteById": (id: string, options: { readonly params: typeof AccountInviteControllerUpdateAccountInviteByIdParams.Encoded; readonly payload: typeof UpdateAccountInvite.Encoded }) => Effect.Effect<typeof AccountInvite.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountInvite.account
*/
readonly "AccountInviteControllerGetAccountInviteAccount": (id: string, options: typeof AccountInviteControllerGetAccountInviteAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountInvite.account ref
*/
readonly "AccountInviteControllerGetAccountInviteAccountRef": (id: string, options: typeof AccountInviteControllerGetAccountInviteAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AccountInvite.account ref
*/
readonly "AccountInviteControllerPatchAccountInviteAccountRef": (id: string, options: { readonly params: typeof AccountInviteControllerPatchAccountInviteAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountInvite.invitedBy
*/
readonly "AccountInviteControllerGetAccountInviteInvitedBy": (id: string, options: typeof AccountInviteControllerGetAccountInviteInvitedByParams.Encoded) => Effect.Effect<typeof User.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountInvite.invitedBy ref
*/
readonly "AccountInviteControllerGetAccountInviteInvitedByRef": (id: string, options: typeof AccountInviteControllerGetAccountInviteInvitedByRefParams.Encoded) => Effect.Effect<typeof ReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountInvite.acceptedBy
*/
readonly "AccountInviteControllerGetAccountInviteAcceptedBy": (id: string, options: typeof AccountInviteControllerGetAccountInviteAcceptedByParams.Encoded) => Effect.Effect<typeof NullableUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AccountInvite.acceptedBy ref
*/
readonly "AccountInviteControllerGetAccountInviteAcceptedByRef": (id: string, options: typeof AccountInviteControllerGetAccountInviteAcceptedByRefParams.Encoded) => Effect.Effect<typeof NullableReferencedUser.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceType List
*/
readonly "SpaceTypeControllerGetSpaceTypeList": (options?: typeof SpaceTypeControllerGetSpaceTypeListParams.Encoded | undefined) => Effect.Effect<typeof SpaceTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SpaceType by ID
*/
readonly "SpaceTypeControllerGetSpaceTypeById": (id: string, options?: typeof SpaceTypeControllerGetSpaceTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof SpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceType.classes
*/
readonly "SpaceTypeControllerGetSpaceTypeClasses": (id: string, options?: typeof SpaceTypeControllerGetSpaceTypeClassesParams.Encoded | undefined) => Effect.Effect<typeof SpaceClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceType.classes refs
*/
readonly "SpaceTypeControllerGetSpaceTypeClassesRef": (id: string) => Effect.Effect<typeof ReferencedSpaceClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceType.assetTypes
*/
readonly "SpaceTypeControllerGetSpaceTypeAssetTypes": (id: string, options?: typeof SpaceTypeControllerGetSpaceTypeAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceType.assetTypes refs
*/
readonly "SpaceTypeControllerGetSpaceTypeAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceType.groupTypes
*/
readonly "SpaceTypeControllerGetSpaceTypeGroupTypes": (id: string, options?: typeof SpaceTypeControllerGetSpaceTypeGroupTypesParams.Encoded | undefined) => Effect.Effect<typeof SpaceGroupTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceType.groupTypes refs
*/
readonly "SpaceTypeControllerGetSpaceTypeGroupTypesRef": (id: string) => Effect.Effect<typeof ReferencedSpaceGroupTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroupType List
*/
readonly "SpaceGroupTypeControllerGetSpaceGroupTypeList": (options?: typeof SpaceGroupTypeControllerGetSpaceGroupTypeListParams.Encoded | undefined) => Effect.Effect<typeof SpaceGroupTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SpaceGroupType by ID
*/
readonly "SpaceGroupTypeControllerGetSpaceGroupTypeById": (id: string, options?: typeof SpaceGroupTypeControllerGetSpaceGroupTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof SpaceGroupType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroupType.assetTypes
*/
readonly "SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypes": (id: string, options?: typeof SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroupType.assetTypes refs
*/
readonly "SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroupType.bucketTypes
*/
readonly "SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypes": (id: string, options?: typeof SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypesParams.Encoded | undefined) => Effect.Effect<typeof BucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceGroupType.bucketTypes refs
*/
readonly "SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypesRef": (id: string) => Effect.Effect<typeof ReferencedBucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass List
*/
readonly "SpaceClassControllerGetSpaceClassList": (options?: typeof SpaceClassControllerGetSpaceClassListParams.Encoded | undefined) => Effect.Effect<typeof SpaceClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SpaceClass by ID
*/
readonly "SpaceClassControllerGetSpaceClassById": (id: string, options?: typeof SpaceClassControllerGetSpaceClassByIdParams.Encoded | undefined) => Effect.Effect<typeof SpaceClass.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass.categories
*/
readonly "SpaceClassControllerGetSpaceClassCategories": (id: string, options?: typeof SpaceClassControllerGetSpaceClassCategoriesParams.Encoded | undefined) => Effect.Effect<typeof SpaceCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass.categories refs
*/
readonly "SpaceClassControllerGetSpaceClassCategoriesRef": (id: string) => Effect.Effect<typeof ReferencedSpaceCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass.types
*/
readonly "SpaceClassControllerGetSpaceClassTypes": (id: string, options?: typeof SpaceClassControllerGetSpaceClassTypesParams.Encoded | undefined) => Effect.Effect<typeof SpaceTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass.types refs
*/
readonly "SpaceClassControllerGetSpaceClassTypesRef": (id: string) => Effect.Effect<typeof ReferencedSpaceTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass.assetTypes
*/
readonly "SpaceClassControllerGetSpaceClassAssetTypes": (id: string, options?: typeof SpaceClassControllerGetSpaceClassAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass.assetTypes refs
*/
readonly "SpaceClassControllerGetSpaceClassAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass.groupTypes
*/
readonly "SpaceClassControllerGetSpaceClassGroupTypes": (id: string, options?: typeof SpaceClassControllerGetSpaceClassGroupTypesParams.Encoded | undefined) => Effect.Effect<typeof SpaceGroupTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceClass.groupTypes refs
*/
readonly "SpaceClassControllerGetSpaceClassGroupTypesRef": (id: string) => Effect.Effect<typeof ReferencedSpaceGroupTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceCategory List
*/
readonly "SpaceCategoryControllerGetSpaceCategoryList": (options?: typeof SpaceCategoryControllerGetSpaceCategoryListParams.Encoded | undefined) => Effect.Effect<typeof SpaceCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SpaceCategory by ID
*/
readonly "SpaceCategoryControllerGetSpaceCategoryById": (id: string, options?: typeof SpaceCategoryControllerGetSpaceCategoryByIdParams.Encoded | undefined) => Effect.Effect<typeof SpaceCategory.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceCategory.classes
*/
readonly "SpaceCategoryControllerGetSpaceCategoryClasses": (id: string, options?: typeof SpaceCategoryControllerGetSpaceCategoryClassesParams.Encoded | undefined) => Effect.Effect<typeof SpaceClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceCategory.classes refs
*/
readonly "SpaceCategoryControllerGetSpaceCategoryClassesRef": (id: string) => Effect.Effect<typeof ReferencedSpaceClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceCategory.assetTypes
*/
readonly "SpaceCategoryControllerGetSpaceCategoryAssetTypes": (id: string, options?: typeof SpaceCategoryControllerGetSpaceCategoryAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceCategory.assetTypes refs
*/
readonly "SpaceCategoryControllerGetSpaceCategoryAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceCategory.groupTypes
*/
readonly "SpaceCategoryControllerGetSpaceCategoryGroupTypes": (id: string, options?: typeof SpaceCategoryControllerGetSpaceCategoryGroupTypesParams.Encoded | undefined) => Effect.Effect<typeof SpaceGroupTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceCategory.groupTypes refs
*/
readonly "SpaceCategoryControllerGetSpaceCategoryGroupTypesRef": (id: string) => Effect.Effect<typeof ReferencedSpaceGroupTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceType List
*/
readonly "ServiceTypeControllerGetServiceTypeList": (options?: typeof ServiceTypeControllerGetServiceTypeListParams.Encoded | undefined) => Effect.Effect<typeof ServiceTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ServiceType by ID
*/
readonly "ServiceTypeControllerGetServiceTypeById": (id: string, options?: typeof ServiceTypeControllerGetServiceTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof ServiceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceType.assetTypes
*/
readonly "ServiceTypeControllerGetServiceTypeAssetTypes": (id: string, options?: typeof ServiceTypeControllerGetServiceTypeAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceType.assetTypes refs
*/
readonly "ServiceTypeControllerGetServiceTypeAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceClass List
*/
readonly "ServiceClassControllerGetServiceClassList": (options?: typeof ServiceClassControllerGetServiceClassListParams.Encoded | undefined) => Effect.Effect<typeof ServiceClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ServiceClass by ID
*/
readonly "ServiceClassControllerGetServiceClassById": (id: string, options?: typeof ServiceClassControllerGetServiceClassByIdParams.Encoded | undefined) => Effect.Effect<typeof ServiceClass.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceClass.categories
*/
readonly "ServiceClassControllerGetServiceClassCategories": (id: string, options?: typeof ServiceClassControllerGetServiceClassCategoriesParams.Encoded | undefined) => Effect.Effect<typeof ServiceCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceClass.categories refs
*/
readonly "ServiceClassControllerGetServiceClassCategoriesRef": (id: string) => Effect.Effect<typeof ReferencedServiceCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceClass.types
*/
readonly "ServiceClassControllerGetServiceClassTypes": (id: string, options?: typeof ServiceClassControllerGetServiceClassTypesParams.Encoded | undefined) => Effect.Effect<typeof ServiceTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceClass.types refs
*/
readonly "ServiceClassControllerGetServiceClassTypesRef": (id: string) => Effect.Effect<typeof ReferencedServiceTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceClass.assetTypes
*/
readonly "ServiceClassControllerGetServiceClassAssetTypes": (id: string, options?: typeof ServiceClassControllerGetServiceClassAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceClass.assetTypes refs
*/
readonly "ServiceClassControllerGetServiceClassAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceCategory List
*/
readonly "ServiceCategoryControllerGetServiceCategoryList": (options?: typeof ServiceCategoryControllerGetServiceCategoryListParams.Encoded | undefined) => Effect.Effect<typeof ServiceCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ServiceCategory by ID
*/
readonly "ServiceCategoryControllerGetServiceCategoryById": (id: string, options?: typeof ServiceCategoryControllerGetServiceCategoryByIdParams.Encoded | undefined) => Effect.Effect<typeof ServiceCategory.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceCategory.classes
*/
readonly "ServiceCategoryControllerGetServiceCategoryClasses": (id: string, options?: typeof ServiceCategoryControllerGetServiceCategoryClassesParams.Encoded | undefined) => Effect.Effect<typeof ServiceClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceCategory.classes refs
*/
readonly "ServiceCategoryControllerGetServiceCategoryClassesRef": (id: string) => Effect.Effect<typeof ReferencedServiceClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceCategory.assetTypes
*/
readonly "ServiceCategoryControllerGetServiceCategoryAssetTypes": (id: string, options?: typeof ServiceCategoryControllerGetServiceCategoryAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ServiceCategory.assetTypes refs
*/
readonly "ServiceCategoryControllerGetServiceCategoryAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType List
*/
readonly "ItemTypeControllerGetItemTypeList": (options?: typeof ItemTypeControllerGetItemTypeListParams.Encoded | undefined) => Effect.Effect<typeof ItemTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ItemType by ID
*/
readonly "ItemTypeControllerGetItemTypeById": (id: string, options?: typeof ItemTypeControllerGetItemTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof ItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType.depreciationModifiers
*/
readonly "ItemTypeControllerGetItemTypeDepreciationModifiers": (id: string, options?: typeof ItemTypeControllerGetItemTypeDepreciationModifiersParams.Encoded | undefined) => Effect.Effect<typeof DepreciationModifierList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType.depreciationModifiers refs
*/
readonly "ItemTypeControllerGetItemTypeDepreciationModifiersRef": (id: string) => Effect.Effect<typeof ReferencedDepreciationModifierList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType.depreciationOverrides
*/
readonly "ItemTypeControllerGetItemTypeDepreciationOverrides": (id: string, options?: typeof ItemTypeControllerGetItemTypeDepreciationOverridesParams.Encoded | undefined) => Effect.Effect<typeof DepreciationOverrideList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType.depreciationOverrides refs
*/
readonly "ItemTypeControllerGetItemTypeDepreciationOverridesRef": (id: string) => Effect.Effect<typeof ReferencedDepreciationOverrideList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType.classes
*/
readonly "ItemTypeControllerGetItemTypeClasses": (id: string, options?: typeof ItemTypeControllerGetItemTypeClassesParams.Encoded | undefined) => Effect.Effect<typeof ItemClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType.classes refs
*/
readonly "ItemTypeControllerGetItemTypeClassesRef": (id: string) => Effect.Effect<typeof ReferencedItemClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType.assetTypes
*/
readonly "ItemTypeControllerGetItemTypeAssetTypes": (id: string, options?: typeof ItemTypeControllerGetItemTypeAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemType.assetTypes refs
*/
readonly "ItemTypeControllerGetItemTypeAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemClass List
*/
readonly "ItemClassControllerGetItemClassList": (options?: typeof ItemClassControllerGetItemClassListParams.Encoded | undefined) => Effect.Effect<typeof ItemClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ItemClass by ID
*/
readonly "ItemClassControllerGetItemClassById": (id: string, options?: typeof ItemClassControllerGetItemClassByIdParams.Encoded | undefined) => Effect.Effect<typeof ItemClass.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemClass.categories
*/
readonly "ItemClassControllerGetItemClassCategories": (id: string, options?: typeof ItemClassControllerGetItemClassCategoriesParams.Encoded | undefined) => Effect.Effect<typeof ItemCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemClass.categories refs
*/
readonly "ItemClassControllerGetItemClassCategoriesRef": (id: string) => Effect.Effect<typeof ReferencedItemCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemClass.types
*/
readonly "ItemClassControllerGetItemClassTypes": (id: string, options?: typeof ItemClassControllerGetItemClassTypesParams.Encoded | undefined) => Effect.Effect<typeof ItemTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemClass.types refs
*/
readonly "ItemClassControllerGetItemClassTypesRef": (id: string) => Effect.Effect<typeof ReferencedItemTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemClass.assetTypes
*/
readonly "ItemClassControllerGetItemClassAssetTypes": (id: string, options?: typeof ItemClassControllerGetItemClassAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemClass.assetTypes refs
*/
readonly "ItemClassControllerGetItemClassAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemCategory List
*/
readonly "ItemCategoryControllerGetItemCategoryList": (options?: typeof ItemCategoryControllerGetItemCategoryListParams.Encoded | undefined) => Effect.Effect<typeof ItemCategoryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ItemCategory by ID
*/
readonly "ItemCategoryControllerGetItemCategoryById": (id: string, options?: typeof ItemCategoryControllerGetItemCategoryByIdParams.Encoded | undefined) => Effect.Effect<typeof ItemCategory.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemCategory.classes
*/
readonly "ItemCategoryControllerGetItemCategoryClasses": (id: string, options?: typeof ItemCategoryControllerGetItemCategoryClassesParams.Encoded | undefined) => Effect.Effect<typeof ItemClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemCategory.classes refs
*/
readonly "ItemCategoryControllerGetItemCategoryClassesRef": (id: string) => Effect.Effect<typeof ReferencedItemClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemCategory.assetTypes
*/
readonly "ItemCategoryControllerGetItemCategoryAssetTypes": (id: string, options?: typeof ItemCategoryControllerGetItemCategoryAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemCategory.assetTypes refs
*/
readonly "ItemCategoryControllerGetItemCategoryAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentType List
*/
readonly "IncidentTypeControllerGetIncidentTypeList": (options?: typeof IncidentTypeControllerGetIncidentTypeListParams.Encoded | undefined) => Effect.Effect<typeof IncidentTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get IncidentType by ID
*/
readonly "IncidentTypeControllerGetIncidentTypeById": (id: string, options?: typeof IncidentTypeControllerGetIncidentTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof IncidentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentType.classes
*/
readonly "IncidentTypeControllerGetIncidentTypeClasses": (id: string, options?: typeof IncidentTypeControllerGetIncidentTypeClassesParams.Encoded | undefined) => Effect.Effect<typeof IncidentClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentType.classes refs
*/
readonly "IncidentTypeControllerGetIncidentTypeClassesRef": (id: string) => Effect.Effect<typeof ReferencedIncidentClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentType.assetTypes
*/
readonly "IncidentTypeControllerGetIncidentTypeAssetTypes": (id: string, options?: typeof IncidentTypeControllerGetIncidentTypeAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentType.assetTypes refs
*/
readonly "IncidentTypeControllerGetIncidentTypeAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentType.perils
*/
readonly "IncidentTypeControllerGetIncidentTypePerils": (id: string, options?: typeof IncidentTypeControllerGetIncidentTypePerilsParams.Encoded | undefined) => Effect.Effect<typeof PerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentType.perils refs
*/
readonly "IncidentTypeControllerGetIncidentTypePerilsRef": (id: string) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentClass List
*/
readonly "IncidentClassControllerGetIncidentClassList": (options?: typeof IncidentClassControllerGetIncidentClassListParams.Encoded | undefined) => Effect.Effect<typeof IncidentClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get IncidentClass by ID
*/
readonly "IncidentClassControllerGetIncidentClassById": (id: string, options?: typeof IncidentClassControllerGetIncidentClassByIdParams.Encoded | undefined) => Effect.Effect<typeof IncidentClass.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentClass.types
*/
readonly "IncidentClassControllerGetIncidentClassTypes": (id: string, options?: typeof IncidentClassControllerGetIncidentClassTypesParams.Encoded | undefined) => Effect.Effect<typeof IncidentTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentClass.types refs
*/
readonly "IncidentClassControllerGetIncidentClassTypesRef": (id: string) => Effect.Effect<typeof ReferencedIncidentTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentClass.assetTypes
*/
readonly "IncidentClassControllerGetIncidentClassAssetTypes": (id: string, options?: typeof IncidentClassControllerGetIncidentClassAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentClass.assetTypes refs
*/
readonly "IncidentClassControllerGetIncidentClassAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentType List
*/
readonly "DocumentTypeControllerGetDocumentTypeList": (options?: typeof DocumentTypeControllerGetDocumentTypeListParams.Encoded | undefined) => Effect.Effect<typeof DocumentTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get DocumentType by ID
*/
readonly "DocumentTypeControllerGetDocumentTypeById": (id: string, options?: typeof DocumentTypeControllerGetDocumentTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentType.classes
*/
readonly "DocumentTypeControllerGetDocumentTypeClasses": (id: string, options?: typeof DocumentTypeControllerGetDocumentTypeClassesParams.Encoded | undefined) => Effect.Effect<typeof DocumentClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentType.classes refs
*/
readonly "DocumentTypeControllerGetDocumentTypeClassesRef": (id: string) => Effect.Effect<typeof ReferencedDocumentClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentType.assetTypes
*/
readonly "DocumentTypeControllerGetDocumentTypeAssetTypes": (id: string, options?: typeof DocumentTypeControllerGetDocumentTypeAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentType.assetTypes refs
*/
readonly "DocumentTypeControllerGetDocumentTypeAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentClass List
*/
readonly "DocumentClassControllerGetDocumentClassList": (options?: typeof DocumentClassControllerGetDocumentClassListParams.Encoded | undefined) => Effect.Effect<typeof DocumentClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get DocumentClass by ID
*/
readonly "DocumentClassControllerGetDocumentClassById": (id: string, options?: typeof DocumentClassControllerGetDocumentClassByIdParams.Encoded | undefined) => Effect.Effect<typeof DocumentClass.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentClass.types
*/
readonly "DocumentClassControllerGetDocumentClassTypes": (id: string, options?: typeof DocumentClassControllerGetDocumentClassTypesParams.Encoded | undefined) => Effect.Effect<typeof DocumentTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentClass.types refs
*/
readonly "DocumentClassControllerGetDocumentClassTypesRef": (id: string) => Effect.Effect<typeof ReferencedDocumentTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentClass.assetTypes
*/
readonly "DocumentClassControllerGetDocumentClassAssetTypes": (id: string, options?: typeof DocumentClassControllerGetDocumentClassAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DocumentClass.assetTypes refs
*/
readonly "DocumentClassControllerGetDocumentClassAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketType List
*/
readonly "BucketTypeControllerGetBucketTypeList": (options?: typeof BucketTypeControllerGetBucketTypeListParams.Encoded | undefined) => Effect.Effect<typeof BucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get BucketType by ID
*/
readonly "BucketTypeControllerGetBucketTypeById": (id: string, options?: typeof BucketTypeControllerGetBucketTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof BucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketType.classes
*/
readonly "BucketTypeControllerGetBucketTypeClasses": (id: string, options?: typeof BucketTypeControllerGetBucketTypeClassesParams.Encoded | undefined) => Effect.Effect<typeof BucketClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketType.classes refs
*/
readonly "BucketTypeControllerGetBucketTypeClassesRef": (id: string) => Effect.Effect<typeof ReferencedBucketClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketType.assetTypes
*/
readonly "BucketTypeControllerGetBucketTypeAssetTypes": (id: string, options?: typeof BucketTypeControllerGetBucketTypeAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketType.assetTypes refs
*/
readonly "BucketTypeControllerGetBucketTypeAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketClass List
*/
readonly "BucketClassControllerGetBucketClassList": (options?: typeof BucketClassControllerGetBucketClassListParams.Encoded | undefined) => Effect.Effect<typeof BucketClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get BucketClass by ID
*/
readonly "BucketClassControllerGetBucketClassById": (id: string, options?: typeof BucketClassControllerGetBucketClassByIdParams.Encoded | undefined) => Effect.Effect<typeof BucketClass.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketClass.types
*/
readonly "BucketClassControllerGetBucketClassTypes": (id: string, options?: typeof BucketClassControllerGetBucketClassTypesParams.Encoded | undefined) => Effect.Effect<typeof BucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketClass.types refs
*/
readonly "BucketClassControllerGetBucketClassTypesRef": (id: string) => Effect.Effect<typeof ReferencedBucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketClass.assetTypes
*/
readonly "BucketClassControllerGetBucketClassAssetTypes": (id: string, options?: typeof BucketClassControllerGetBucketClassAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch BucketClass.assetTypes refs
*/
readonly "BucketClassControllerGetBucketClassAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetType List
*/
readonly "AssetTypeControllerGetAssetTypeList": (options?: typeof AssetTypeControllerGetAssetTypeListParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AssetType by ID
*/
readonly "AssetTypeControllerGetAssetTypeById": (id: string, options?: typeof AssetTypeControllerGetAssetTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof AssetType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeType List
*/
readonly "AssetAttributeTypeControllerGetAssetAttributeTypeList": (options?: typeof AssetAttributeTypeControllerGetAssetAttributeTypeListParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AssetAttributeType by ID
*/
readonly "AssetAttributeTypeControllerGetAssetAttributeTypeById": (id: string, options?: typeof AssetAttributeTypeControllerGetAssetAttributeTypeByIdParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeType.classes
*/
readonly "AssetAttributeTypeControllerGetAssetAttributeTypeClasses": (id: string, options?: typeof AssetAttributeTypeControllerGetAssetAttributeTypeClassesParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeType.classes refs
*/
readonly "AssetAttributeTypeControllerGetAssetAttributeTypeClassesRef": (id: string) => Effect.Effect<typeof ReferencedAssetAttributeClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeType.assetTypes
*/
readonly "AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypes": (id: string, options?: typeof AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeType.assetTypes refs
*/
readonly "AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeClass List
*/
readonly "AssetAttributeClassControllerGetAssetAttributeClassList": (options?: typeof AssetAttributeClassControllerGetAssetAttributeClassListParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeClassList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AssetAttributeClass by ID
*/
readonly "AssetAttributeClassControllerGetAssetAttributeClassById": (id: string, options?: typeof AssetAttributeClassControllerGetAssetAttributeClassByIdParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeClass.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeClass.types
*/
readonly "AssetAttributeClassControllerGetAssetAttributeClassTypes": (id: string, options?: typeof AssetAttributeClassControllerGetAssetAttributeClassTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeClass.types refs
*/
readonly "AssetAttributeClassControllerGetAssetAttributeClassTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetAttributeTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeClass.assetTypes
*/
readonly "AssetAttributeClassControllerGetAssetAttributeClassAssetTypes": (id: string, options?: typeof AssetAttributeClassControllerGetAssetAttributeClassAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeClass.assetTypes refs
*/
readonly "AssetAttributeClassControllerGetAssetAttributeClassAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubmissionTrackTemplate List
*/
readonly "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateList": (options?: typeof SubmissionTrackTemplateControllerGetSubmissionTrackTemplateListParams.Encoded | undefined) => Effect.Effect<typeof SubmissionTrackTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SubmissionTrackTemplate by ID
*/
readonly "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateById": (id: string, options?: typeof SubmissionTrackTemplateControllerGetSubmissionTrackTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof SubmissionTrackTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubmissionTrackTemplate.policyTemplate
*/
readonly "SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplate": (id: string, options?: typeof SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplateParams.Encoded | undefined) => Effect.Effect<typeof PolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubmissionTrackTemplate.policyTemplate ref
*/
readonly "SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplateRef": (id: string) => Effect.Effect<typeof ReferencedPolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubmissionTrackTemplate.bucketTypes
*/
readonly "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypes": (id: string, options?: typeof SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypesParams.Encoded | undefined) => Effect.Effect<typeof BucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubmissionTrackTemplate.bucketTypes refs
*/
readonly "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypesRef": (id: string) => Effect.Effect<typeof ReferencedBucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverageTemplate List
*/
readonly "SubCoverageTemplateControllerGetSubCoverageTemplateList": (options?: typeof SubCoverageTemplateControllerGetSubCoverageTemplateListParams.Encoded | undefined) => Effect.Effect<typeof SubCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SubCoverageTemplate by ID
*/
readonly "SubCoverageTemplateControllerGetSubCoverageTemplateById": (id: string, options?: typeof SubCoverageTemplateControllerGetSubCoverageTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof SubCoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverageTemplate.coverageTemplate
*/
readonly "SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplate": (id: string, options?: typeof SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplateParams.Encoded | undefined) => Effect.Effect<typeof CoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverageTemplate.coverageTemplate ref
*/
readonly "SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplateRef": (id: string) => Effect.Effect<typeof ReferencedCoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverageTemplate.endorsementTemplates
*/
readonly "SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplates": (id: string, options?: typeof SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplatesParams.Encoded | undefined) => Effect.Effect<typeof EndorsementTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SubCoverageTemplate.endorsementTemplates refs
*/
readonly "SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedEndorsementTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceTypeItemTemplate List
*/
readonly "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateList": (options?: typeof SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateListParams.Encoded | undefined) => Effect.Effect<typeof SpaceTypeItemTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get SpaceTypeItemTemplate by ID
*/
readonly "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateById": (id: string, options?: typeof SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof SpaceTypeItemTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceTypeItemTemplate.spaceType
*/
readonly "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceType": (id: string, options?: typeof SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceTypeParams.Encoded | undefined) => Effect.Effect<typeof SpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceTypeItemTemplate.spaceType ref
*/
readonly "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceTypeRef": (id: string) => Effect.Effect<typeof ReferencedSpaceType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceTypeItemTemplate.itemTemplate
*/
readonly "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplate": (id: string, options?: typeof SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplateParams.Encoded | undefined) => Effect.Effect<typeof ItemTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch SpaceTypeItemTemplate.itemTemplate ref
*/
readonly "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplateRef": (id: string) => Effect.Effect<typeof ReferencedItemTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate List
*/
readonly "PolicyTemplateControllerGetPolicyTemplateList": (options?: typeof PolicyTemplateControllerGetPolicyTemplateListParams.Encoded | undefined) => Effect.Effect<typeof PolicyTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get PolicyTemplate by ID
*/
readonly "PolicyTemplateControllerGetPolicyTemplateById": (id: string, options?: typeof PolicyTemplateControllerGetPolicyTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof PolicyTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.assetTypes
*/
readonly "PolicyTemplateControllerGetPolicyTemplateAssetTypes": (id: string, options?: typeof PolicyTemplateControllerGetPolicyTemplateAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.assetTypes refs
*/
readonly "PolicyTemplateControllerGetPolicyTemplateAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.coverageGroupTemplates
*/
readonly "PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplates": (id: string, options?: typeof PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplatesParams.Encoded | undefined) => Effect.Effect<typeof CoverageGroupTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.coverageGroupTemplates refs
*/
readonly "PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedCoverageGroupTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.coverageTemplates
*/
readonly "PolicyTemplateControllerGetPolicyTemplateCoverageTemplates": (id: string, options?: typeof PolicyTemplateControllerGetPolicyTemplateCoverageTemplatesParams.Encoded | undefined) => Effect.Effect<typeof CoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.coverageTemplates refs
*/
readonly "PolicyTemplateControllerGetPolicyTemplateCoverageTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.subCoverageTemplates
*/
readonly "PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplates": (id: string, options?: typeof PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplatesParams.Encoded | undefined) => Effect.Effect<typeof SubCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.subCoverageTemplates refs
*/
readonly "PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedSubCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.endorsementTemplates
*/
readonly "PolicyTemplateControllerGetPolicyTemplateEndorsementTemplates": (id: string, options?: typeof PolicyTemplateControllerGetPolicyTemplateEndorsementTemplatesParams.Encoded | undefined) => Effect.Effect<typeof EndorsementTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.endorsementTemplates refs
*/
readonly "PolicyTemplateControllerGetPolicyTemplateEndorsementTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedEndorsementTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.perils
*/
readonly "PolicyTemplateControllerGetPolicyTemplatePerils": (id: string, options?: typeof PolicyTemplateControllerGetPolicyTemplatePerilsParams.Encoded | undefined) => Effect.Effect<typeof PerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyTemplate.perils refs
*/
readonly "PolicyTemplateControllerGetPolicyTemplatePerilsRef": (id: string) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemTemplate List
*/
readonly "ItemTemplateControllerGetItemTemplateList": (options?: typeof ItemTemplateControllerGetItemTemplateListParams.Encoded | undefined) => Effect.Effect<typeof ItemTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ItemTemplate by ID
*/
readonly "ItemTemplateControllerGetItemTemplateById": (id: string, options?: typeof ItemTemplateControllerGetItemTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof ItemTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemTemplate.itemType
*/
readonly "ItemTemplateControllerGetItemTemplateItemType": (id: string, options?: typeof ItemTemplateControllerGetItemTemplateItemTypeParams.Encoded | undefined) => Effect.Effect<typeof ItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemTemplate.itemType ref
*/
readonly "ItemTemplateControllerGetItemTemplateItemTypeRef": (id: string) => Effect.Effect<typeof ReferencedItemType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemTemplate.assetTypes
*/
readonly "ItemTemplateControllerGetItemTemplateAssetTypes": (id: string, options?: typeof ItemTemplateControllerGetItemTemplateAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ItemTemplate.assetTypes refs
*/
readonly "ItemTemplateControllerGetItemTemplateAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate List
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplateList": (options?: typeof EndorsementTemplateControllerGetEndorsementTemplateListParams.Encoded | undefined) => Effect.Effect<typeof EndorsementTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get EndorsementTemplate by ID
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplateById": (id: string, options?: typeof EndorsementTemplateControllerGetEndorsementTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof EndorsementTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate.perils
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplatePerils": (id: string, options?: typeof EndorsementTemplateControllerGetEndorsementTemplatePerilsParams.Encoded | undefined) => Effect.Effect<typeof PerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate.perils refs
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplatePerilsRef": (id: string) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate.coverageTemplates
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplates": (id: string, options?: typeof EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplatesParams.Encoded | undefined) => Effect.Effect<typeof CoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate.coverageTemplates refs
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate.subCoverageTemplatess
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatess": (id: string, options?: typeof EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatessParams.Encoded | undefined) => Effect.Effect<typeof SubCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate.subCoverageTemplatess refs
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatessRef": (id: string) => Effect.Effect<typeof ReferencedSubCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate.bucketTypes
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplateBucketTypes": (id: string, options?: typeof EndorsementTemplateControllerGetEndorsementTemplateBucketTypesParams.Encoded | undefined) => Effect.Effect<typeof BucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EndorsementTemplate.bucketTypes refs
*/
readonly "EndorsementTemplateControllerGetEndorsementTemplateBucketTypesRef": (id: string) => Effect.Effect<typeof ReferencedBucketTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate List
*/
readonly "CoverageTemplateControllerGetCoverageTemplateList": (options?: typeof CoverageTemplateControllerGetCoverageTemplateListParams.Encoded | undefined) => Effect.Effect<typeof CoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get CoverageTemplate by ID
*/
readonly "CoverageTemplateControllerGetCoverageTemplateById": (id: string, options?: typeof CoverageTemplateControllerGetCoverageTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof CoverageTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.group
*/
readonly "CoverageTemplateControllerGetCoverageTemplateGroup": (id: string, options?: typeof CoverageTemplateControllerGetCoverageTemplateGroupParams.Encoded | undefined) => Effect.Effect<typeof NullableCoverageGroupTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.group ref
*/
readonly "CoverageTemplateControllerGetCoverageTemplateGroupRef": (id: string) => Effect.Effect<typeof NullableReferencedCoverageGroupTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.perils
*/
readonly "CoverageTemplateControllerGetCoverageTemplatePerils": (id: string, options?: typeof CoverageTemplateControllerGetCoverageTemplatePerilsParams.Encoded | undefined) => Effect.Effect<typeof PerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.perils refs
*/
readonly "CoverageTemplateControllerGetCoverageTemplatePerilsRef": (id: string) => Effect.Effect<typeof ReferencedPerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.bucketType
*/
readonly "CoverageTemplateControllerGetCoverageTemplateBucketType": (id: string, options?: typeof CoverageTemplateControllerGetCoverageTemplateBucketTypeParams.Encoded | undefined) => Effect.Effect<typeof BucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.bucketType ref
*/
readonly "CoverageTemplateControllerGetCoverageTemplateBucketTypeRef": (id: string) => Effect.Effect<typeof ReferencedBucketType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.subCoverageTemplates
*/
readonly "CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplates": (id: string, options?: typeof CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplatesParams.Encoded | undefined) => Effect.Effect<typeof SubCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.subCoverageTemplates refs
*/
readonly "CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedSubCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.endorsementTemplates
*/
readonly "CoverageTemplateControllerGetCoverageTemplateEndorsementTemplates": (id: string, options?: typeof CoverageTemplateControllerGetCoverageTemplateEndorsementTemplatesParams.Encoded | undefined) => Effect.Effect<typeof EndorsementTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageTemplate.endorsementTemplates refs
*/
readonly "CoverageTemplateControllerGetCoverageTemplateEndorsementTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedEndorsementTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageGroupTemplate List
*/
readonly "CoverageGroupTemplateControllerGetCoverageGroupTemplateList": (options?: typeof CoverageGroupTemplateControllerGetCoverageGroupTemplateListParams.Encoded | undefined) => Effect.Effect<typeof CoverageGroupTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get CoverageGroupTemplate by ID
*/
readonly "CoverageGroupTemplateControllerGetCoverageGroupTemplateById": (id: string, options?: typeof CoverageGroupTemplateControllerGetCoverageGroupTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof CoverageGroupTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageGroupTemplate.coverageTemplates
*/
readonly "CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplates": (id: string, options?: typeof CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplatesParams.Encoded | undefined) => Effect.Effect<typeof CoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch CoverageGroupTemplate.coverageTemplates refs
*/
readonly "CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplatesRef": (id: string) => Effect.Effect<typeof ReferencedCoverageTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeTypeItemTemplate List
*/
readonly "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateList": (options?: typeof AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateListParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeTypeItemTemplateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AssetAttributeTypeItemTemplate by ID
*/
readonly "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateById": (id: string, options?: typeof AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateByIdParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeTypeItemTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeTypeItemTemplate.assetAttributeType
*/
readonly "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeType": (id: string, options?: typeof AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeTypeParams.Encoded | undefined) => Effect.Effect<typeof AssetAttributeType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeTypeItemTemplate.assetAttributeType ref
*/
readonly "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeTypeRef": (id: string) => Effect.Effect<typeof ReferencedAssetAttributeType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeTypeItemTemplate.itemTemplate
*/
readonly "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplate": (id: string, options?: typeof AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplateParams.Encoded | undefined) => Effect.Effect<typeof ItemTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAttributeTypeItemTemplate.itemTemplate ref
*/
readonly "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplateRef": (id: string) => Effect.Effect<typeof ReferencedItemTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Provider List
*/
readonly "ProviderControllerGetProviderList": (options?: typeof ProviderControllerGetProviderListParams.Encoded | undefined) => Effect.Effect<typeof ProviderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Provider by ID
*/
readonly "ProviderControllerGetProviderById": (id: string, options?: typeof ProviderControllerGetProviderByIdParams.Encoded | undefined) => Effect.Effect<typeof Provider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Peril List
*/
readonly "PerilControllerGetPerilList": (options?: typeof PerilControllerGetPerilListParams.Encoded | undefined) => Effect.Effect<typeof PerilList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Peril by ID
*/
readonly "PerilControllerGetPerilById": (id: string, options?: typeof PerilControllerGetPerilByIdParams.Encoded | undefined) => Effect.Effect<typeof Peril.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Peril.assetTypes
*/
readonly "PerilControllerGetPerilAssetTypes": (id: string, options?: typeof PerilControllerGetPerilAssetTypesParams.Encoded | undefined) => Effect.Effect<typeof AssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Peril.assetTypes refs
*/
readonly "PerilControllerGetPerilAssetTypesRef": (id: string) => Effect.Effect<typeof ReferencedAssetTypeList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Disaster List
*/
readonly "DisasterControllerGetDisasterList": (options?: typeof DisasterControllerGetDisasterListParams.Encoded | undefined) => Effect.Effect<typeof DisasterList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Disaster by ID
*/
readonly "DisasterControllerGetDisasterById": (id: string, options?: typeof DisasterControllerGetDisasterByIdParams.Encoded | undefined) => Effect.Effect<typeof Disaster.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Disaster.incidentType
*/
readonly "DisasterControllerGetDisasterIncidentType": (id: string, options?: typeof DisasterControllerGetDisasterIncidentTypeParams.Encoded | undefined) => Effect.Effect<typeof IncidentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Disaster.incidentType ref
*/
readonly "DisasterControllerGetDisasterIncidentTypeRef": (id: string) => Effect.Effect<typeof ReferencedIncidentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Currency List
*/
readonly "CurrencyControllerGetCurrencyList": (options?: typeof CurrencyControllerGetCurrencyListParams.Encoded | undefined) => Effect.Effect<typeof CurrencyList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Currency by ID
*/
readonly "CurrencyControllerGetCurrencyById": (id: string, options?: typeof CurrencyControllerGetCurrencyByIdParams.Encoded | undefined) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Country List
*/
readonly "CountryControllerGetCountryList": (options?: typeof CountryControllerGetCountryListParams.Encoded | undefined) => Effect.Effect<typeof CountryList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Country by ID
*/
readonly "CountryControllerGetCountryById": (id: string, options?: typeof CountryControllerGetCountryByIdParams.Encoded | undefined) => Effect.Effect<typeof Country.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty List
*/
readonly "WarrantyControllerGetWarrantyList": (options: typeof WarrantyControllerGetWarrantyListParams.Encoded) => Effect.Effect<typeof WarrantyList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Warranty
*/
readonly "WarrantyControllerCreateWarranty": (options: { readonly params: typeof WarrantyControllerCreateWarrantyParams.Encoded; readonly payload: typeof WarrantyControllerCreateWarrantyRequest.Encoded }) => Effect.Effect<typeof WarrantyControllerCreateWarranty201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Warranty by ID
*/
readonly "WarrantyControllerGetWarrantyById": (id: string, options: typeof WarrantyControllerGetWarrantyByIdParams.Encoded) => Effect.Effect<typeof Warranty.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Warranty by ID
*/
readonly "WarrantyControllerDeleteWarrantyById": (id: string, options: typeof WarrantyControllerDeleteWarrantyByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Warranty by ID
*/
readonly "WarrantyControllerUpdateWarrantyById": (id: string, options: { readonly params: typeof WarrantyControllerUpdateWarrantyByIdParams.Encoded; readonly payload: typeof UpdateWarranty.Encoded }) => Effect.Effect<typeof Warranty.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.documentType
*/
readonly "WarrantyControllerGetWarrantyDocumentType": (id: string, options: typeof WarrantyControllerGetWarrantyDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.documentType ref
*/
readonly "WarrantyControllerGetWarrantyDocumentTypeRef": (id: string, options: typeof WarrantyControllerGetWarrantyDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.account
*/
readonly "WarrantyControllerGetWarrantyAccount": (id: string, options: typeof WarrantyControllerGetWarrantyAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.account ref
*/
readonly "WarrantyControllerGetWarrantyAccountRef": (id: string, options: typeof WarrantyControllerGetWarrantyAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Warranty.account ref
*/
readonly "WarrantyControllerPatchWarrantyAccountRef": (id: string, options: { readonly params: typeof WarrantyControllerPatchWarrantyAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.file
*/
readonly "WarrantyControllerGetWarrantyFile": (id: string, options: typeof WarrantyControllerGetWarrantyFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.file ref
*/
readonly "WarrantyControllerGetWarrantyFileRef": (id: string, options: typeof WarrantyControllerGetWarrantyFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Warranty.file ref
*/
readonly "WarrantyControllerPatchWarrantyFileRef": (id: string, options: { readonly params: typeof WarrantyControllerPatchWarrantyFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.assets
*/
readonly "WarrantyControllerGetWarrantyAssets": (id: string, options: typeof WarrantyControllerGetWarrantyAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.assets refs
*/
readonly "WarrantyControllerGetWarrantyAssetsRef": (id: string, options: typeof WarrantyControllerGetWarrantyAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Warranty.assets ref(s)
*/
readonly "WarrantyControllerPostWarrantyAssetsRef": (id: string, options: { readonly params: typeof WarrantyControllerPostWarrantyAssetsRefParams.Encoded; readonly payload: typeof WarrantyControllerPostWarrantyAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Warranty.assets ref(s)
*/
readonly "WarrantyControllerDeleteWarrantyAssetsRef": (id: string, options: { readonly params: typeof WarrantyControllerDeleteWarrantyAssetsRefParams.Encoded; readonly payload: typeof WarrantyControllerDeleteWarrantyAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Warranty.assets refs
*/
readonly "WarrantyControllerPatchWarrantyAssetsRef": (id: string, options: { readonly params: typeof WarrantyControllerPatchWarrantyAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.spaces
*/
readonly "WarrantyControllerGetWarrantySpaces": (id: string, options: typeof WarrantyControllerGetWarrantySpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.spaces refs
*/
readonly "WarrantyControllerGetWarrantySpacesRef": (id: string, options: typeof WarrantyControllerGetWarrantySpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Warranty.spaces ref(s)
*/
readonly "WarrantyControllerPostWarrantySpacesRef": (id: string, options: { readonly params: typeof WarrantyControllerPostWarrantySpacesRefParams.Encoded; readonly payload: typeof WarrantyControllerPostWarrantySpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Warranty.spaces ref(s)
*/
readonly "WarrantyControllerDeleteWarrantySpacesRef": (id: string, options: { readonly params: typeof WarrantyControllerDeleteWarrantySpacesRefParams.Encoded; readonly payload: typeof WarrantyControllerDeleteWarrantySpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Warranty.spaces refs
*/
readonly "WarrantyControllerPatchWarrantySpacesRef": (id: string, options: { readonly params: typeof WarrantyControllerPatchWarrantySpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.projects
*/
readonly "WarrantyControllerGetWarrantyProjects": (id: string, options: typeof WarrantyControllerGetWarrantyProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Warranty.projects refs
*/
readonly "WarrantyControllerGetWarrantyProjectsRef": (id: string, options: typeof WarrantyControllerGetWarrantyProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Warranty.projects ref(s)
*/
readonly "WarrantyControllerPostWarrantyProjectsRef": (id: string, options: { readonly params: typeof WarrantyControllerPostWarrantyProjectsRefParams.Encoded; readonly payload: typeof WarrantyControllerPostWarrantyProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Warranty.projects ref(s)
*/
readonly "WarrantyControllerDeleteWarrantyProjectsRef": (id: string, options: { readonly params: typeof WarrantyControllerDeleteWarrantyProjectsRefParams.Encoded; readonly payload: typeof WarrantyControllerDeleteWarrantyProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Warranty.projects refs
*/
readonly "WarrantyControllerPatchWarrantyProjectsRef": (id: string, options: { readonly params: typeof WarrantyControllerPatchWarrantyProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual List
*/
readonly "UserManualControllerGetUserManualList": (options: typeof UserManualControllerGetUserManualListParams.Encoded) => Effect.Effect<typeof UserManualList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create UserManual
*/
readonly "UserManualControllerCreateUserManual": (options: { readonly params: typeof UserManualControllerCreateUserManualParams.Encoded; readonly payload: typeof UserManualControllerCreateUserManualRequest.Encoded }) => Effect.Effect<typeof UserManualControllerCreateUserManual201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get UserManual by ID
*/
readonly "UserManualControllerGetUserManualById": (id: string, options: typeof UserManualControllerGetUserManualByIdParams.Encoded) => Effect.Effect<typeof UserManual.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete UserManual by ID
*/
readonly "UserManualControllerDeleteUserManualById": (id: string, options: typeof UserManualControllerDeleteUserManualByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update UserManual by ID
*/
readonly "UserManualControllerUpdateUserManualById": (id: string, options: { readonly params: typeof UserManualControllerUpdateUserManualByIdParams.Encoded; readonly payload: typeof UpdateUserManual.Encoded }) => Effect.Effect<typeof UserManual.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.documentType
*/
readonly "UserManualControllerGetUserManualDocumentType": (id: string, options: typeof UserManualControllerGetUserManualDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.documentType ref
*/
readonly "UserManualControllerGetUserManualDocumentTypeRef": (id: string, options: typeof UserManualControllerGetUserManualDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.account
*/
readonly "UserManualControllerGetUserManualAccount": (id: string, options: typeof UserManualControllerGetUserManualAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.account ref
*/
readonly "UserManualControllerGetUserManualAccountRef": (id: string, options: typeof UserManualControllerGetUserManualAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace UserManual.account ref
*/
readonly "UserManualControllerPatchUserManualAccountRef": (id: string, options: { readonly params: typeof UserManualControllerPatchUserManualAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.file
*/
readonly "UserManualControllerGetUserManualFile": (id: string, options: typeof UserManualControllerGetUserManualFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.file ref
*/
readonly "UserManualControllerGetUserManualFileRef": (id: string, options: typeof UserManualControllerGetUserManualFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace UserManual.file ref
*/
readonly "UserManualControllerPatchUserManualFileRef": (id: string, options: { readonly params: typeof UserManualControllerPatchUserManualFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.assets
*/
readonly "UserManualControllerGetUserManualAssets": (id: string, options: typeof UserManualControllerGetUserManualAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.assets refs
*/
readonly "UserManualControllerGetUserManualAssetsRef": (id: string, options: typeof UserManualControllerGetUserManualAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add UserManual.assets ref(s)
*/
readonly "UserManualControllerPostUserManualAssetsRef": (id: string, options: { readonly params: typeof UserManualControllerPostUserManualAssetsRefParams.Encoded; readonly payload: typeof UserManualControllerPostUserManualAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove UserManual.assets ref(s)
*/
readonly "UserManualControllerDeleteUserManualAssetsRef": (id: string, options: { readonly params: typeof UserManualControllerDeleteUserManualAssetsRefParams.Encoded; readonly payload: typeof UserManualControllerDeleteUserManualAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all UserManual.assets refs
*/
readonly "UserManualControllerPatchUserManualAssetsRef": (id: string, options: { readonly params: typeof UserManualControllerPatchUserManualAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.spaces
*/
readonly "UserManualControllerGetUserManualSpaces": (id: string, options: typeof UserManualControllerGetUserManualSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.spaces refs
*/
readonly "UserManualControllerGetUserManualSpacesRef": (id: string, options: typeof UserManualControllerGetUserManualSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add UserManual.spaces ref(s)
*/
readonly "UserManualControllerPostUserManualSpacesRef": (id: string, options: { readonly params: typeof UserManualControllerPostUserManualSpacesRefParams.Encoded; readonly payload: typeof UserManualControllerPostUserManualSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove UserManual.spaces ref(s)
*/
readonly "UserManualControllerDeleteUserManualSpacesRef": (id: string, options: { readonly params: typeof UserManualControllerDeleteUserManualSpacesRefParams.Encoded; readonly payload: typeof UserManualControllerDeleteUserManualSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all UserManual.spaces refs
*/
readonly "UserManualControllerPatchUserManualSpacesRef": (id: string, options: { readonly params: typeof UserManualControllerPatchUserManualSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.projects
*/
readonly "UserManualControllerGetUserManualProjects": (id: string, options: typeof UserManualControllerGetUserManualProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch UserManual.projects refs
*/
readonly "UserManualControllerGetUserManualProjectsRef": (id: string, options: typeof UserManualControllerGetUserManualProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add UserManual.projects ref(s)
*/
readonly "UserManualControllerPostUserManualProjectsRef": (id: string, options: { readonly params: typeof UserManualControllerPostUserManualProjectsRefParams.Encoded; readonly payload: typeof UserManualControllerPostUserManualProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove UserManual.projects ref(s)
*/
readonly "UserManualControllerDeleteUserManualProjectsRef": (id: string, options: { readonly params: typeof UserManualControllerDeleteUserManualProjectsRefParams.Encoded; readonly payload: typeof UserManualControllerDeleteUserManualProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all UserManual.projects refs
*/
readonly "UserManualControllerPatchUserManualProjectsRef": (id: string, options: { readonly params: typeof UserManualControllerPatchUserManualProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss List
*/
readonly "ScopeOfLossControllerGetScopeOfLossList": (options: typeof ScopeOfLossControllerGetScopeOfLossListParams.Encoded) => Effect.Effect<typeof ScopeOfLossList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ScopeOfLoss
*/
readonly "ScopeOfLossControllerCreateScopeOfLoss": (options: { readonly params: typeof ScopeOfLossControllerCreateScopeOfLossParams.Encoded; readonly payload: typeof ScopeOfLossControllerCreateScopeOfLossRequest.Encoded }) => Effect.Effect<typeof ScopeOfLossControllerCreateScopeOfLoss201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ScopeOfLoss by ID
*/
readonly "ScopeOfLossControllerGetScopeOfLossById": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossByIdParams.Encoded) => Effect.Effect<typeof ScopeOfLoss.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ScopeOfLoss by ID
*/
readonly "ScopeOfLossControllerDeleteScopeOfLossById": (id: string, options: typeof ScopeOfLossControllerDeleteScopeOfLossByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ScopeOfLoss by ID
*/
readonly "ScopeOfLossControllerUpdateScopeOfLossById": (id: string, options: { readonly params: typeof ScopeOfLossControllerUpdateScopeOfLossByIdParams.Encoded; readonly payload: typeof UpdateScopeOfLoss.Encoded }) => Effect.Effect<typeof ScopeOfLoss.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.documentType
*/
readonly "ScopeOfLossControllerGetScopeOfLossDocumentType": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.documentType ref
*/
readonly "ScopeOfLossControllerGetScopeOfLossDocumentTypeRef": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.account
*/
readonly "ScopeOfLossControllerGetScopeOfLossAccount": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.account ref
*/
readonly "ScopeOfLossControllerGetScopeOfLossAccountRef": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ScopeOfLoss.account ref
*/
readonly "ScopeOfLossControllerPatchScopeOfLossAccountRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerPatchScopeOfLossAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.file
*/
readonly "ScopeOfLossControllerGetScopeOfLossFile": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.file ref
*/
readonly "ScopeOfLossControllerGetScopeOfLossFileRef": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ScopeOfLoss.file ref
*/
readonly "ScopeOfLossControllerPatchScopeOfLossFileRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerPatchScopeOfLossFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.assets
*/
readonly "ScopeOfLossControllerGetScopeOfLossAssets": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.assets refs
*/
readonly "ScopeOfLossControllerGetScopeOfLossAssetsRef": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ScopeOfLoss.assets ref(s)
*/
readonly "ScopeOfLossControllerPostScopeOfLossAssetsRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerPostScopeOfLossAssetsRefParams.Encoded; readonly payload: typeof ScopeOfLossControllerPostScopeOfLossAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ScopeOfLoss.assets ref(s)
*/
readonly "ScopeOfLossControllerDeleteScopeOfLossAssetsRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerDeleteScopeOfLossAssetsRefParams.Encoded; readonly payload: typeof ScopeOfLossControllerDeleteScopeOfLossAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ScopeOfLoss.assets refs
*/
readonly "ScopeOfLossControllerPatchScopeOfLossAssetsRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerPatchScopeOfLossAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.spaces
*/
readonly "ScopeOfLossControllerGetScopeOfLossSpaces": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.spaces refs
*/
readonly "ScopeOfLossControllerGetScopeOfLossSpacesRef": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ScopeOfLoss.spaces ref(s)
*/
readonly "ScopeOfLossControllerPostScopeOfLossSpacesRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerPostScopeOfLossSpacesRefParams.Encoded; readonly payload: typeof ScopeOfLossControllerPostScopeOfLossSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ScopeOfLoss.spaces ref(s)
*/
readonly "ScopeOfLossControllerDeleteScopeOfLossSpacesRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerDeleteScopeOfLossSpacesRefParams.Encoded; readonly payload: typeof ScopeOfLossControllerDeleteScopeOfLossSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ScopeOfLoss.spaces refs
*/
readonly "ScopeOfLossControllerPatchScopeOfLossSpacesRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerPatchScopeOfLossSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.projects
*/
readonly "ScopeOfLossControllerGetScopeOfLossProjects": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ScopeOfLoss.projects refs
*/
readonly "ScopeOfLossControllerGetScopeOfLossProjectsRef": (id: string, options: typeof ScopeOfLossControllerGetScopeOfLossProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ScopeOfLoss.projects ref(s)
*/
readonly "ScopeOfLossControllerPostScopeOfLossProjectsRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerPostScopeOfLossProjectsRefParams.Encoded; readonly payload: typeof ScopeOfLossControllerPostScopeOfLossProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ScopeOfLoss.projects ref(s)
*/
readonly "ScopeOfLossControllerDeleteScopeOfLossProjectsRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerDeleteScopeOfLossProjectsRefParams.Encoded; readonly payload: typeof ScopeOfLossControllerDeleteScopeOfLossProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ScopeOfLoss.projects refs
*/
readonly "ScopeOfLossControllerPatchScopeOfLossProjectsRef": (id: string, options: { readonly params: typeof ScopeOfLossControllerPatchScopeOfLossProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll List
*/
readonly "RentRollControllerGetRentRollList": (options: typeof RentRollControllerGetRentRollListParams.Encoded) => Effect.Effect<typeof RentRollList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create RentRoll
*/
readonly "RentRollControllerCreateRentRoll": (options: { readonly params: typeof RentRollControllerCreateRentRollParams.Encoded; readonly payload: typeof RentRollControllerCreateRentRollRequest.Encoded }) => Effect.Effect<typeof RentRollControllerCreateRentRoll201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get RentRoll by ID
*/
readonly "RentRollControllerGetRentRollById": (id: string, options: typeof RentRollControllerGetRentRollByIdParams.Encoded) => Effect.Effect<typeof RentRoll.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete RentRoll by ID
*/
readonly "RentRollControllerDeleteRentRollById": (id: string, options: typeof RentRollControllerDeleteRentRollByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update RentRoll by ID
*/
readonly "RentRollControllerUpdateRentRollById": (id: string, options: { readonly params: typeof RentRollControllerUpdateRentRollByIdParams.Encoded; readonly payload: typeof UpdateRentRoll.Encoded }) => Effect.Effect<typeof RentRoll.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.documentType
*/
readonly "RentRollControllerGetRentRollDocumentType": (id: string, options: typeof RentRollControllerGetRentRollDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.documentType ref
*/
readonly "RentRollControllerGetRentRollDocumentTypeRef": (id: string, options: typeof RentRollControllerGetRentRollDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.account
*/
readonly "RentRollControllerGetRentRollAccount": (id: string, options: typeof RentRollControllerGetRentRollAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.account ref
*/
readonly "RentRollControllerGetRentRollAccountRef": (id: string, options: typeof RentRollControllerGetRentRollAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace RentRoll.account ref
*/
readonly "RentRollControllerPatchRentRollAccountRef": (id: string, options: { readonly params: typeof RentRollControllerPatchRentRollAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.file
*/
readonly "RentRollControllerGetRentRollFile": (id: string, options: typeof RentRollControllerGetRentRollFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.file ref
*/
readonly "RentRollControllerGetRentRollFileRef": (id: string, options: typeof RentRollControllerGetRentRollFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace RentRoll.file ref
*/
readonly "RentRollControllerPatchRentRollFileRef": (id: string, options: { readonly params: typeof RentRollControllerPatchRentRollFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.assets
*/
readonly "RentRollControllerGetRentRollAssets": (id: string, options: typeof RentRollControllerGetRentRollAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.assets refs
*/
readonly "RentRollControllerGetRentRollAssetsRef": (id: string, options: typeof RentRollControllerGetRentRollAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add RentRoll.assets ref(s)
*/
readonly "RentRollControllerPostRentRollAssetsRef": (id: string, options: { readonly params: typeof RentRollControllerPostRentRollAssetsRefParams.Encoded; readonly payload: typeof RentRollControllerPostRentRollAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove RentRoll.assets ref(s)
*/
readonly "RentRollControllerDeleteRentRollAssetsRef": (id: string, options: { readonly params: typeof RentRollControllerDeleteRentRollAssetsRefParams.Encoded; readonly payload: typeof RentRollControllerDeleteRentRollAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all RentRoll.assets refs
*/
readonly "RentRollControllerPatchRentRollAssetsRef": (id: string, options: { readonly params: typeof RentRollControllerPatchRentRollAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.spaces
*/
readonly "RentRollControllerGetRentRollSpaces": (id: string, options: typeof RentRollControllerGetRentRollSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.spaces refs
*/
readonly "RentRollControllerGetRentRollSpacesRef": (id: string, options: typeof RentRollControllerGetRentRollSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add RentRoll.spaces ref(s)
*/
readonly "RentRollControllerPostRentRollSpacesRef": (id: string, options: { readonly params: typeof RentRollControllerPostRentRollSpacesRefParams.Encoded; readonly payload: typeof RentRollControllerPostRentRollSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove RentRoll.spaces ref(s)
*/
readonly "RentRollControllerDeleteRentRollSpacesRef": (id: string, options: { readonly params: typeof RentRollControllerDeleteRentRollSpacesRefParams.Encoded; readonly payload: typeof RentRollControllerDeleteRentRollSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all RentRoll.spaces refs
*/
readonly "RentRollControllerPatchRentRollSpacesRef": (id: string, options: { readonly params: typeof RentRollControllerPatchRentRollSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.projects
*/
readonly "RentRollControllerGetRentRollProjects": (id: string, options: typeof RentRollControllerGetRentRollProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch RentRoll.projects refs
*/
readonly "RentRollControllerGetRentRollProjectsRef": (id: string, options: typeof RentRollControllerGetRentRollProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add RentRoll.projects ref(s)
*/
readonly "RentRollControllerPostRentRollProjectsRef": (id: string, options: { readonly params: typeof RentRollControllerPostRentRollProjectsRefParams.Encoded; readonly payload: typeof RentRollControllerPostRentRollProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove RentRoll.projects ref(s)
*/
readonly "RentRollControllerDeleteRentRollProjectsRef": (id: string, options: { readonly params: typeof RentRollControllerDeleteRentRollProjectsRefParams.Encoded; readonly payload: typeof RentRollControllerDeleteRentRollProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all RentRoll.projects refs
*/
readonly "RentRollControllerPatchRentRollProjectsRef": (id: string, options: { readonly params: typeof RentRollControllerPatchRentRollProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec List
*/
readonly "ProductSpecControllerGetProductSpecList": (options: typeof ProductSpecControllerGetProductSpecListParams.Encoded) => Effect.Effect<typeof ProductSpecList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ProductSpec
*/
readonly "ProductSpecControllerCreateProductSpec": (options: { readonly params: typeof ProductSpecControllerCreateProductSpecParams.Encoded; readonly payload: typeof ProductSpecControllerCreateProductSpecRequest.Encoded }) => Effect.Effect<typeof ProductSpecControllerCreateProductSpec201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ProductSpec by ID
*/
readonly "ProductSpecControllerGetProductSpecById": (id: string, options: typeof ProductSpecControllerGetProductSpecByIdParams.Encoded) => Effect.Effect<typeof ProductSpec.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ProductSpec by ID
*/
readonly "ProductSpecControllerDeleteProductSpecById": (id: string, options: typeof ProductSpecControllerDeleteProductSpecByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ProductSpec by ID
*/
readonly "ProductSpecControllerUpdateProductSpecById": (id: string, options: { readonly params: typeof ProductSpecControllerUpdateProductSpecByIdParams.Encoded; readonly payload: typeof UpdateProductSpec.Encoded }) => Effect.Effect<typeof ProductSpec.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.documentType
*/
readonly "ProductSpecControllerGetProductSpecDocumentType": (id: string, options: typeof ProductSpecControllerGetProductSpecDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.documentType ref
*/
readonly "ProductSpecControllerGetProductSpecDocumentTypeRef": (id: string, options: typeof ProductSpecControllerGetProductSpecDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.account
*/
readonly "ProductSpecControllerGetProductSpecAccount": (id: string, options: typeof ProductSpecControllerGetProductSpecAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.account ref
*/
readonly "ProductSpecControllerGetProductSpecAccountRef": (id: string, options: typeof ProductSpecControllerGetProductSpecAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ProductSpec.account ref
*/
readonly "ProductSpecControllerPatchProductSpecAccountRef": (id: string, options: { readonly params: typeof ProductSpecControllerPatchProductSpecAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.file
*/
readonly "ProductSpecControllerGetProductSpecFile": (id: string, options: typeof ProductSpecControllerGetProductSpecFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.file ref
*/
readonly "ProductSpecControllerGetProductSpecFileRef": (id: string, options: typeof ProductSpecControllerGetProductSpecFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ProductSpec.file ref
*/
readonly "ProductSpecControllerPatchProductSpecFileRef": (id: string, options: { readonly params: typeof ProductSpecControllerPatchProductSpecFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.assets
*/
readonly "ProductSpecControllerGetProductSpecAssets": (id: string, options: typeof ProductSpecControllerGetProductSpecAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.assets refs
*/
readonly "ProductSpecControllerGetProductSpecAssetsRef": (id: string, options: typeof ProductSpecControllerGetProductSpecAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ProductSpec.assets ref(s)
*/
readonly "ProductSpecControllerPostProductSpecAssetsRef": (id: string, options: { readonly params: typeof ProductSpecControllerPostProductSpecAssetsRefParams.Encoded; readonly payload: typeof ProductSpecControllerPostProductSpecAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ProductSpec.assets ref(s)
*/
readonly "ProductSpecControllerDeleteProductSpecAssetsRef": (id: string, options: { readonly params: typeof ProductSpecControllerDeleteProductSpecAssetsRefParams.Encoded; readonly payload: typeof ProductSpecControllerDeleteProductSpecAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ProductSpec.assets refs
*/
readonly "ProductSpecControllerPatchProductSpecAssetsRef": (id: string, options: { readonly params: typeof ProductSpecControllerPatchProductSpecAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.spaces
*/
readonly "ProductSpecControllerGetProductSpecSpaces": (id: string, options: typeof ProductSpecControllerGetProductSpecSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.spaces refs
*/
readonly "ProductSpecControllerGetProductSpecSpacesRef": (id: string, options: typeof ProductSpecControllerGetProductSpecSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ProductSpec.spaces ref(s)
*/
readonly "ProductSpecControllerPostProductSpecSpacesRef": (id: string, options: { readonly params: typeof ProductSpecControllerPostProductSpecSpacesRefParams.Encoded; readonly payload: typeof ProductSpecControllerPostProductSpecSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ProductSpec.spaces ref(s)
*/
readonly "ProductSpecControllerDeleteProductSpecSpacesRef": (id: string, options: { readonly params: typeof ProductSpecControllerDeleteProductSpecSpacesRefParams.Encoded; readonly payload: typeof ProductSpecControllerDeleteProductSpecSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ProductSpec.spaces refs
*/
readonly "ProductSpecControllerPatchProductSpecSpacesRef": (id: string, options: { readonly params: typeof ProductSpecControllerPatchProductSpecSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.projects
*/
readonly "ProductSpecControllerGetProductSpecProjects": (id: string, options: typeof ProductSpecControllerGetProductSpecProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ProductSpec.projects refs
*/
readonly "ProductSpecControllerGetProductSpecProjectsRef": (id: string, options: typeof ProductSpecControllerGetProductSpecProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ProductSpec.projects ref(s)
*/
readonly "ProductSpecControllerPostProductSpecProjectsRef": (id: string, options: { readonly params: typeof ProductSpecControllerPostProductSpecProjectsRefParams.Encoded; readonly payload: typeof ProductSpecControllerPostProductSpecProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ProductSpec.projects ref(s)
*/
readonly "ProductSpecControllerDeleteProductSpecProjectsRef": (id: string, options: { readonly params: typeof ProductSpecControllerDeleteProductSpecProjectsRefParams.Encoded; readonly payload: typeof ProductSpecControllerDeleteProductSpecProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ProductSpec.projects refs
*/
readonly "ProductSpecControllerPatchProductSpecProjectsRef": (id: string, options: { readonly params: typeof ProductSpecControllerPatchProductSpecProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket List
*/
readonly "PolicyJacketControllerGetPolicyJacketList": (options: typeof PolicyJacketControllerGetPolicyJacketListParams.Encoded) => Effect.Effect<typeof PolicyJacketList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create PolicyJacket
*/
readonly "PolicyJacketControllerCreatePolicyJacket": (options: { readonly params: typeof PolicyJacketControllerCreatePolicyJacketParams.Encoded; readonly payload: typeof PolicyJacketControllerCreatePolicyJacketRequest.Encoded }) => Effect.Effect<typeof PolicyJacketControllerCreatePolicyJacket201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get PolicyJacket by ID
*/
readonly "PolicyJacketControllerGetPolicyJacketById": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketByIdParams.Encoded) => Effect.Effect<typeof PolicyJacket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete PolicyJacket by ID
*/
readonly "PolicyJacketControllerDeletePolicyJacketById": (id: string, options: typeof PolicyJacketControllerDeletePolicyJacketByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update PolicyJacket by ID
*/
readonly "PolicyJacketControllerUpdatePolicyJacketById": (id: string, options: { readonly params: typeof PolicyJacketControllerUpdatePolicyJacketByIdParams.Encoded; readonly payload: typeof UpdatePolicyJacket.Encoded }) => Effect.Effect<typeof PolicyJacket.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.documentType
*/
readonly "PolicyJacketControllerGetPolicyJacketDocumentType": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.documentType ref
*/
readonly "PolicyJacketControllerGetPolicyJacketDocumentTypeRef": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.account
*/
readonly "PolicyJacketControllerGetPolicyJacketAccount": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.account ref
*/
readonly "PolicyJacketControllerGetPolicyJacketAccountRef": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PolicyJacket.account ref
*/
readonly "PolicyJacketControllerPatchPolicyJacketAccountRef": (id: string, options: { readonly params: typeof PolicyJacketControllerPatchPolicyJacketAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.file
*/
readonly "PolicyJacketControllerGetPolicyJacketFile": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.file ref
*/
readonly "PolicyJacketControllerGetPolicyJacketFileRef": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PolicyJacket.file ref
*/
readonly "PolicyJacketControllerPatchPolicyJacketFileRef": (id: string, options: { readonly params: typeof PolicyJacketControllerPatchPolicyJacketFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.assets
*/
readonly "PolicyJacketControllerGetPolicyJacketAssets": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.assets refs
*/
readonly "PolicyJacketControllerGetPolicyJacketAssetsRef": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add PolicyJacket.assets ref(s)
*/
readonly "PolicyJacketControllerPostPolicyJacketAssetsRef": (id: string, options: { readonly params: typeof PolicyJacketControllerPostPolicyJacketAssetsRefParams.Encoded; readonly payload: typeof PolicyJacketControllerPostPolicyJacketAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove PolicyJacket.assets ref(s)
*/
readonly "PolicyJacketControllerDeletePolicyJacketAssetsRef": (id: string, options: { readonly params: typeof PolicyJacketControllerDeletePolicyJacketAssetsRefParams.Encoded; readonly payload: typeof PolicyJacketControllerDeletePolicyJacketAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all PolicyJacket.assets refs
*/
readonly "PolicyJacketControllerPatchPolicyJacketAssetsRef": (id: string, options: { readonly params: typeof PolicyJacketControllerPatchPolicyJacketAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.spaces
*/
readonly "PolicyJacketControllerGetPolicyJacketSpaces": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.spaces refs
*/
readonly "PolicyJacketControllerGetPolicyJacketSpacesRef": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add PolicyJacket.spaces ref(s)
*/
readonly "PolicyJacketControllerPostPolicyJacketSpacesRef": (id: string, options: { readonly params: typeof PolicyJacketControllerPostPolicyJacketSpacesRefParams.Encoded; readonly payload: typeof PolicyJacketControllerPostPolicyJacketSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove PolicyJacket.spaces ref(s)
*/
readonly "PolicyJacketControllerDeletePolicyJacketSpacesRef": (id: string, options: { readonly params: typeof PolicyJacketControllerDeletePolicyJacketSpacesRefParams.Encoded; readonly payload: typeof PolicyJacketControllerDeletePolicyJacketSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all PolicyJacket.spaces refs
*/
readonly "PolicyJacketControllerPatchPolicyJacketSpacesRef": (id: string, options: { readonly params: typeof PolicyJacketControllerPatchPolicyJacketSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.projects
*/
readonly "PolicyJacketControllerGetPolicyJacketProjects": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PolicyJacket.projects refs
*/
readonly "PolicyJacketControllerGetPolicyJacketProjectsRef": (id: string, options: typeof PolicyJacketControllerGetPolicyJacketProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add PolicyJacket.projects ref(s)
*/
readonly "PolicyJacketControllerPostPolicyJacketProjectsRef": (id: string, options: { readonly params: typeof PolicyJacketControllerPostPolicyJacketProjectsRefParams.Encoded; readonly payload: typeof PolicyJacketControllerPostPolicyJacketProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove PolicyJacket.projects ref(s)
*/
readonly "PolicyJacketControllerDeletePolicyJacketProjectsRef": (id: string, options: { readonly params: typeof PolicyJacketControllerDeletePolicyJacketProjectsRefParams.Encoded; readonly payload: typeof PolicyJacketControllerDeletePolicyJacketProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all PolicyJacket.projects refs
*/
readonly "PolicyJacketControllerPatchPolicyJacketProjectsRef": (id: string, options: { readonly params: typeof PolicyJacketControllerPatchPolicyJacketProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport List
*/
readonly "PoliceReportControllerGetPoliceReportList": (options: typeof PoliceReportControllerGetPoliceReportListParams.Encoded) => Effect.Effect<typeof PoliceReportList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create PoliceReport
*/
readonly "PoliceReportControllerCreatePoliceReport": (options: { readonly params: typeof PoliceReportControllerCreatePoliceReportParams.Encoded; readonly payload: typeof PoliceReportControllerCreatePoliceReportRequest.Encoded }) => Effect.Effect<typeof PoliceReportControllerCreatePoliceReport201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get PoliceReport by ID
*/
readonly "PoliceReportControllerGetPoliceReportById": (id: string, options: typeof PoliceReportControllerGetPoliceReportByIdParams.Encoded) => Effect.Effect<typeof PoliceReport.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete PoliceReport by ID
*/
readonly "PoliceReportControllerDeletePoliceReportById": (id: string, options: typeof PoliceReportControllerDeletePoliceReportByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update PoliceReport by ID
*/
readonly "PoliceReportControllerUpdatePoliceReportById": (id: string, options: { readonly params: typeof PoliceReportControllerUpdatePoliceReportByIdParams.Encoded; readonly payload: typeof UpdatePoliceReport.Encoded }) => Effect.Effect<typeof PoliceReport.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.documentType
*/
readonly "PoliceReportControllerGetPoliceReportDocumentType": (id: string, options: typeof PoliceReportControllerGetPoliceReportDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.documentType ref
*/
readonly "PoliceReportControllerGetPoliceReportDocumentTypeRef": (id: string, options: typeof PoliceReportControllerGetPoliceReportDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.account
*/
readonly "PoliceReportControllerGetPoliceReportAccount": (id: string, options: typeof PoliceReportControllerGetPoliceReportAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.account ref
*/
readonly "PoliceReportControllerGetPoliceReportAccountRef": (id: string, options: typeof PoliceReportControllerGetPoliceReportAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PoliceReport.account ref
*/
readonly "PoliceReportControllerPatchPoliceReportAccountRef": (id: string, options: { readonly params: typeof PoliceReportControllerPatchPoliceReportAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.file
*/
readonly "PoliceReportControllerGetPoliceReportFile": (id: string, options: typeof PoliceReportControllerGetPoliceReportFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.file ref
*/
readonly "PoliceReportControllerGetPoliceReportFileRef": (id: string, options: typeof PoliceReportControllerGetPoliceReportFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PoliceReport.file ref
*/
readonly "PoliceReportControllerPatchPoliceReportFileRef": (id: string, options: { readonly params: typeof PoliceReportControllerPatchPoliceReportFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.assets
*/
readonly "PoliceReportControllerGetPoliceReportAssets": (id: string, options: typeof PoliceReportControllerGetPoliceReportAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.assets refs
*/
readonly "PoliceReportControllerGetPoliceReportAssetsRef": (id: string, options: typeof PoliceReportControllerGetPoliceReportAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add PoliceReport.assets ref(s)
*/
readonly "PoliceReportControllerPostPoliceReportAssetsRef": (id: string, options: { readonly params: typeof PoliceReportControllerPostPoliceReportAssetsRefParams.Encoded; readonly payload: typeof PoliceReportControllerPostPoliceReportAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove PoliceReport.assets ref(s)
*/
readonly "PoliceReportControllerDeletePoliceReportAssetsRef": (id: string, options: { readonly params: typeof PoliceReportControllerDeletePoliceReportAssetsRefParams.Encoded; readonly payload: typeof PoliceReportControllerDeletePoliceReportAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all PoliceReport.assets refs
*/
readonly "PoliceReportControllerPatchPoliceReportAssetsRef": (id: string, options: { readonly params: typeof PoliceReportControllerPatchPoliceReportAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.spaces
*/
readonly "PoliceReportControllerGetPoliceReportSpaces": (id: string, options: typeof PoliceReportControllerGetPoliceReportSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.spaces refs
*/
readonly "PoliceReportControllerGetPoliceReportSpacesRef": (id: string, options: typeof PoliceReportControllerGetPoliceReportSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add PoliceReport.spaces ref(s)
*/
readonly "PoliceReportControllerPostPoliceReportSpacesRef": (id: string, options: { readonly params: typeof PoliceReportControllerPostPoliceReportSpacesRefParams.Encoded; readonly payload: typeof PoliceReportControllerPostPoliceReportSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove PoliceReport.spaces ref(s)
*/
readonly "PoliceReportControllerDeletePoliceReportSpacesRef": (id: string, options: { readonly params: typeof PoliceReportControllerDeletePoliceReportSpacesRefParams.Encoded; readonly payload: typeof PoliceReportControllerDeletePoliceReportSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all PoliceReport.spaces refs
*/
readonly "PoliceReportControllerPatchPoliceReportSpacesRef": (id: string, options: { readonly params: typeof PoliceReportControllerPatchPoliceReportSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.projects
*/
readonly "PoliceReportControllerGetPoliceReportProjects": (id: string, options: typeof PoliceReportControllerGetPoliceReportProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PoliceReport.projects refs
*/
readonly "PoliceReportControllerGetPoliceReportProjectsRef": (id: string, options: typeof PoliceReportControllerGetPoliceReportProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add PoliceReport.projects ref(s)
*/
readonly "PoliceReportControllerPostPoliceReportProjectsRef": (id: string, options: { readonly params: typeof PoliceReportControllerPostPoliceReportProjectsRefParams.Encoded; readonly payload: typeof PoliceReportControllerPostPoliceReportProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove PoliceReport.projects ref(s)
*/
readonly "PoliceReportControllerDeletePoliceReportProjectsRef": (id: string, options: { readonly params: typeof PoliceReportControllerDeletePoliceReportProjectsRefParams.Encoded; readonly payload: typeof PoliceReportControllerDeletePoliceReportProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all PoliceReport.projects refs
*/
readonly "PoliceReportControllerPatchPoliceReportProjectsRef": (id: string, options: { readonly params: typeof PoliceReportControllerPatchPoliceReportProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit List
*/
readonly "PermitControllerGetPermitList": (options: typeof PermitControllerGetPermitListParams.Encoded) => Effect.Effect<typeof PermitList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Permit
*/
readonly "PermitControllerCreatePermit": (options: { readonly params: typeof PermitControllerCreatePermitParams.Encoded; readonly payload: typeof PermitControllerCreatePermitRequest.Encoded }) => Effect.Effect<typeof PermitControllerCreatePermit201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Permit by ID
*/
readonly "PermitControllerGetPermitById": (id: string, options: typeof PermitControllerGetPermitByIdParams.Encoded) => Effect.Effect<typeof Permit.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Permit by ID
*/
readonly "PermitControllerDeletePermitById": (id: string, options: typeof PermitControllerDeletePermitByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Permit by ID
*/
readonly "PermitControllerUpdatePermitById": (id: string, options: { readonly params: typeof PermitControllerUpdatePermitByIdParams.Encoded; readonly payload: typeof UpdatePermit.Encoded }) => Effect.Effect<typeof Permit.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.documentType
*/
readonly "PermitControllerGetPermitDocumentType": (id: string, options: typeof PermitControllerGetPermitDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.documentType ref
*/
readonly "PermitControllerGetPermitDocumentTypeRef": (id: string, options: typeof PermitControllerGetPermitDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.account
*/
readonly "PermitControllerGetPermitAccount": (id: string, options: typeof PermitControllerGetPermitAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.account ref
*/
readonly "PermitControllerGetPermitAccountRef": (id: string, options: typeof PermitControllerGetPermitAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Permit.account ref
*/
readonly "PermitControllerPatchPermitAccountRef": (id: string, options: { readonly params: typeof PermitControllerPatchPermitAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.file
*/
readonly "PermitControllerGetPermitFile": (id: string, options: typeof PermitControllerGetPermitFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.file ref
*/
readonly "PermitControllerGetPermitFileRef": (id: string, options: typeof PermitControllerGetPermitFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Permit.file ref
*/
readonly "PermitControllerPatchPermitFileRef": (id: string, options: { readonly params: typeof PermitControllerPatchPermitFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.assets
*/
readonly "PermitControllerGetPermitAssets": (id: string, options: typeof PermitControllerGetPermitAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.assets refs
*/
readonly "PermitControllerGetPermitAssetsRef": (id: string, options: typeof PermitControllerGetPermitAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Permit.assets ref(s)
*/
readonly "PermitControllerPostPermitAssetsRef": (id: string, options: { readonly params: typeof PermitControllerPostPermitAssetsRefParams.Encoded; readonly payload: typeof PermitControllerPostPermitAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Permit.assets ref(s)
*/
readonly "PermitControllerDeletePermitAssetsRef": (id: string, options: { readonly params: typeof PermitControllerDeletePermitAssetsRefParams.Encoded; readonly payload: typeof PermitControllerDeletePermitAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Permit.assets refs
*/
readonly "PermitControllerPatchPermitAssetsRef": (id: string, options: { readonly params: typeof PermitControllerPatchPermitAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.spaces
*/
readonly "PermitControllerGetPermitSpaces": (id: string, options: typeof PermitControllerGetPermitSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.spaces refs
*/
readonly "PermitControllerGetPermitSpacesRef": (id: string, options: typeof PermitControllerGetPermitSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Permit.spaces ref(s)
*/
readonly "PermitControllerPostPermitSpacesRef": (id: string, options: { readonly params: typeof PermitControllerPostPermitSpacesRefParams.Encoded; readonly payload: typeof PermitControllerPostPermitSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Permit.spaces ref(s)
*/
readonly "PermitControllerDeletePermitSpacesRef": (id: string, options: { readonly params: typeof PermitControllerDeletePermitSpacesRefParams.Encoded; readonly payload: typeof PermitControllerDeletePermitSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Permit.spaces refs
*/
readonly "PermitControllerPatchPermitSpacesRef": (id: string, options: { readonly params: typeof PermitControllerPatchPermitSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.projects
*/
readonly "PermitControllerGetPermitProjects": (id: string, options: typeof PermitControllerGetPermitProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Permit.projects refs
*/
readonly "PermitControllerGetPermitProjectsRef": (id: string, options: typeof PermitControllerGetPermitProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Permit.projects ref(s)
*/
readonly "PermitControllerPostPermitProjectsRef": (id: string, options: { readonly params: typeof PermitControllerPostPermitProjectsRefParams.Encoded; readonly payload: typeof PermitControllerPostPermitProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Permit.projects ref(s)
*/
readonly "PermitControllerDeletePermitProjectsRef": (id: string, options: { readonly params: typeof PermitControllerDeletePermitProjectsRefParams.Encoded; readonly payload: typeof PermitControllerDeletePermitProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Permit.projects refs
*/
readonly "PermitControllerPatchPermitProjectsRef": (id: string, options: { readonly params: typeof PermitControllerPatchPermitProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment List
*/
readonly "PaymentControllerGetPaymentList": (options: typeof PaymentControllerGetPaymentListParams.Encoded) => Effect.Effect<typeof PaymentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Payment
*/
readonly "PaymentControllerCreatePayment": (options: { readonly params: typeof PaymentControllerCreatePaymentParams.Encoded; readonly payload: typeof PaymentControllerCreatePaymentRequest.Encoded }) => Effect.Effect<typeof PaymentControllerCreatePayment201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Payment by ID
*/
readonly "PaymentControllerGetPaymentById": (id: string, options: typeof PaymentControllerGetPaymentByIdParams.Encoded) => Effect.Effect<typeof Payment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Payment by ID
*/
readonly "PaymentControllerDeletePaymentById": (id: string, options: typeof PaymentControllerDeletePaymentByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Payment by ID
*/
readonly "PaymentControllerUpdatePaymentById": (id: string, options: { readonly params: typeof PaymentControllerUpdatePaymentByIdParams.Encoded; readonly payload: typeof UpdatePayment.Encoded }) => Effect.Effect<typeof Payment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.documentType
*/
readonly "PaymentControllerGetPaymentDocumentType": (id: string, options: typeof PaymentControllerGetPaymentDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.documentType ref
*/
readonly "PaymentControllerGetPaymentDocumentTypeRef": (id: string, options: typeof PaymentControllerGetPaymentDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.account
*/
readonly "PaymentControllerGetPaymentAccount": (id: string, options: typeof PaymentControllerGetPaymentAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.account ref
*/
readonly "PaymentControllerGetPaymentAccountRef": (id: string, options: typeof PaymentControllerGetPaymentAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Payment.account ref
*/
readonly "PaymentControllerPatchPaymentAccountRef": (id: string, options: { readonly params: typeof PaymentControllerPatchPaymentAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.file
*/
readonly "PaymentControllerGetPaymentFile": (id: string, options: typeof PaymentControllerGetPaymentFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.file ref
*/
readonly "PaymentControllerGetPaymentFileRef": (id: string, options: typeof PaymentControllerGetPaymentFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Payment.file ref
*/
readonly "PaymentControllerPatchPaymentFileRef": (id: string, options: { readonly params: typeof PaymentControllerPatchPaymentFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.assets
*/
readonly "PaymentControllerGetPaymentAssets": (id: string, options: typeof PaymentControllerGetPaymentAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.assets refs
*/
readonly "PaymentControllerGetPaymentAssetsRef": (id: string, options: typeof PaymentControllerGetPaymentAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Payment.assets ref(s)
*/
readonly "PaymentControllerPostPaymentAssetsRef": (id: string, options: { readonly params: typeof PaymentControllerPostPaymentAssetsRefParams.Encoded; readonly payload: typeof PaymentControllerPostPaymentAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Payment.assets ref(s)
*/
readonly "PaymentControllerDeletePaymentAssetsRef": (id: string, options: { readonly params: typeof PaymentControllerDeletePaymentAssetsRefParams.Encoded; readonly payload: typeof PaymentControllerDeletePaymentAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Payment.assets refs
*/
readonly "PaymentControllerPatchPaymentAssetsRef": (id: string, options: { readonly params: typeof PaymentControllerPatchPaymentAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.spaces
*/
readonly "PaymentControllerGetPaymentSpaces": (id: string, options: typeof PaymentControllerGetPaymentSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.spaces refs
*/
readonly "PaymentControllerGetPaymentSpacesRef": (id: string, options: typeof PaymentControllerGetPaymentSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Payment.spaces ref(s)
*/
readonly "PaymentControllerPostPaymentSpacesRef": (id: string, options: { readonly params: typeof PaymentControllerPostPaymentSpacesRefParams.Encoded; readonly payload: typeof PaymentControllerPostPaymentSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Payment.spaces ref(s)
*/
readonly "PaymentControllerDeletePaymentSpacesRef": (id: string, options: { readonly params: typeof PaymentControllerDeletePaymentSpacesRefParams.Encoded; readonly payload: typeof PaymentControllerDeletePaymentSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Payment.spaces refs
*/
readonly "PaymentControllerPatchPaymentSpacesRef": (id: string, options: { readonly params: typeof PaymentControllerPatchPaymentSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.projects
*/
readonly "PaymentControllerGetPaymentProjects": (id: string, options: typeof PaymentControllerGetPaymentProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.projects refs
*/
readonly "PaymentControllerGetPaymentProjectsRef": (id: string, options: typeof PaymentControllerGetPaymentProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Payment.projects ref(s)
*/
readonly "PaymentControllerPostPaymentProjectsRef": (id: string, options: { readonly params: typeof PaymentControllerPostPaymentProjectsRefParams.Encoded; readonly payload: typeof PaymentControllerPostPaymentProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Payment.projects ref(s)
*/
readonly "PaymentControllerDeletePaymentProjectsRef": (id: string, options: { readonly params: typeof PaymentControllerDeletePaymentProjectsRefParams.Encoded; readonly payload: typeof PaymentControllerDeletePaymentProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Payment.projects refs
*/
readonly "PaymentControllerPatchPaymentProjectsRef": (id: string, options: { readonly params: typeof PaymentControllerPatchPaymentProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.currency
*/
readonly "PaymentControllerGetPaymentCurrency": (id: string, options: typeof PaymentControllerGetPaymentCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.currency ref
*/
readonly "PaymentControllerGetPaymentCurrencyRef": (id: string, options: typeof PaymentControllerGetPaymentCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Payment.currency ref
*/
readonly "PaymentControllerPatchPaymentCurrencyRef": (id: string, options: { readonly params: typeof PaymentControllerPatchPaymentCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.stats
*/
readonly "PaymentControllerGetPaymentStats": (id: string, options: typeof PaymentControllerGetPaymentStatsParams.Encoded) => Effect.Effect<typeof ItemizableFinancialDocumentStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.stats ref
*/
readonly "PaymentControllerGetPaymentStatsRef": (id: string, options: typeof PaymentControllerGetPaymentStatsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemizableFinancialDocumentStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.vendor
*/
readonly "PaymentControllerGetPaymentVendor": (id: string, options: typeof PaymentControllerGetPaymentVendorParams.Encoded) => Effect.Effect<typeof NullableAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.vendor ref
*/
readonly "PaymentControllerGetPaymentVendorRef": (id: string, options: typeof PaymentControllerGetPaymentVendorRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Payment.vendor ref
*/
readonly "PaymentControllerPatchPaymentVendorRef": (id: string, options: { readonly params: typeof PaymentControllerPatchPaymentVendorRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.service
*/
readonly "PaymentControllerGetPaymentService": (id: string, options: typeof PaymentControllerGetPaymentServiceParams.Encoded) => Effect.Effect<typeof NullableService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.service ref
*/
readonly "PaymentControllerGetPaymentServiceRef": (id: string, options: typeof PaymentControllerGetPaymentServiceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Payment.service ref
*/
readonly "PaymentControllerPatchPaymentServiceRef": (id: string, options: { readonly params: typeof PaymentControllerPatchPaymentServiceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateService.Encoded }) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.lines
*/
readonly "PaymentControllerGetPaymentLines": (id: string, options: typeof PaymentControllerGetPaymentLinesParams.Encoded) => Effect.Effect<typeof PaymentLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.lines refs
*/
readonly "PaymentControllerGetPaymentLinesRef": (id: string, options: typeof PaymentControllerGetPaymentLinesRefParams.Encoded) => Effect.Effect<typeof ReferencedPaymentLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.lineSubjects
*/
readonly "PaymentControllerGetPaymentLineSubjects": (id: string, options: typeof PaymentControllerGetPaymentLineSubjectsParams.Encoded) => Effect.Effect<typeof EntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Payment.lineSubjects refs
*/
readonly "PaymentControllerGetPaymentLineSubjectsRef": (id: string, options: typeof PaymentControllerGetPaymentLineSubjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport List
*/
readonly "ParamedicReportControllerGetParamedicReportList": (options: typeof ParamedicReportControllerGetParamedicReportListParams.Encoded) => Effect.Effect<typeof ParamedicReportList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ParamedicReport
*/
readonly "ParamedicReportControllerCreateParamedicReport": (options: { readonly params: typeof ParamedicReportControllerCreateParamedicReportParams.Encoded; readonly payload: typeof ParamedicReportControllerCreateParamedicReportRequest.Encoded }) => Effect.Effect<typeof ParamedicReportControllerCreateParamedicReport201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ParamedicReport by ID
*/
readonly "ParamedicReportControllerGetParamedicReportById": (id: string, options: typeof ParamedicReportControllerGetParamedicReportByIdParams.Encoded) => Effect.Effect<typeof ParamedicReport.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ParamedicReport by ID
*/
readonly "ParamedicReportControllerDeleteParamedicReportById": (id: string, options: typeof ParamedicReportControllerDeleteParamedicReportByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ParamedicReport by ID
*/
readonly "ParamedicReportControllerUpdateParamedicReportById": (id: string, options: { readonly params: typeof ParamedicReportControllerUpdateParamedicReportByIdParams.Encoded; readonly payload: typeof UpdateParamedicReport.Encoded }) => Effect.Effect<typeof ParamedicReport.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.documentType
*/
readonly "ParamedicReportControllerGetParamedicReportDocumentType": (id: string, options: typeof ParamedicReportControllerGetParamedicReportDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.documentType ref
*/
readonly "ParamedicReportControllerGetParamedicReportDocumentTypeRef": (id: string, options: typeof ParamedicReportControllerGetParamedicReportDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.account
*/
readonly "ParamedicReportControllerGetParamedicReportAccount": (id: string, options: typeof ParamedicReportControllerGetParamedicReportAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.account ref
*/
readonly "ParamedicReportControllerGetParamedicReportAccountRef": (id: string, options: typeof ParamedicReportControllerGetParamedicReportAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ParamedicReport.account ref
*/
readonly "ParamedicReportControllerPatchParamedicReportAccountRef": (id: string, options: { readonly params: typeof ParamedicReportControllerPatchParamedicReportAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.file
*/
readonly "ParamedicReportControllerGetParamedicReportFile": (id: string, options: typeof ParamedicReportControllerGetParamedicReportFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.file ref
*/
readonly "ParamedicReportControllerGetParamedicReportFileRef": (id: string, options: typeof ParamedicReportControllerGetParamedicReportFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ParamedicReport.file ref
*/
readonly "ParamedicReportControllerPatchParamedicReportFileRef": (id: string, options: { readonly params: typeof ParamedicReportControllerPatchParamedicReportFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.assets
*/
readonly "ParamedicReportControllerGetParamedicReportAssets": (id: string, options: typeof ParamedicReportControllerGetParamedicReportAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.assets refs
*/
readonly "ParamedicReportControllerGetParamedicReportAssetsRef": (id: string, options: typeof ParamedicReportControllerGetParamedicReportAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ParamedicReport.assets ref(s)
*/
readonly "ParamedicReportControllerPostParamedicReportAssetsRef": (id: string, options: { readonly params: typeof ParamedicReportControllerPostParamedicReportAssetsRefParams.Encoded; readonly payload: typeof ParamedicReportControllerPostParamedicReportAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ParamedicReport.assets ref(s)
*/
readonly "ParamedicReportControllerDeleteParamedicReportAssetsRef": (id: string, options: { readonly params: typeof ParamedicReportControllerDeleteParamedicReportAssetsRefParams.Encoded; readonly payload: typeof ParamedicReportControllerDeleteParamedicReportAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ParamedicReport.assets refs
*/
readonly "ParamedicReportControllerPatchParamedicReportAssetsRef": (id: string, options: { readonly params: typeof ParamedicReportControllerPatchParamedicReportAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.spaces
*/
readonly "ParamedicReportControllerGetParamedicReportSpaces": (id: string, options: typeof ParamedicReportControllerGetParamedicReportSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.spaces refs
*/
readonly "ParamedicReportControllerGetParamedicReportSpacesRef": (id: string, options: typeof ParamedicReportControllerGetParamedicReportSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ParamedicReport.spaces ref(s)
*/
readonly "ParamedicReportControllerPostParamedicReportSpacesRef": (id: string, options: { readonly params: typeof ParamedicReportControllerPostParamedicReportSpacesRefParams.Encoded; readonly payload: typeof ParamedicReportControllerPostParamedicReportSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ParamedicReport.spaces ref(s)
*/
readonly "ParamedicReportControllerDeleteParamedicReportSpacesRef": (id: string, options: { readonly params: typeof ParamedicReportControllerDeleteParamedicReportSpacesRefParams.Encoded; readonly payload: typeof ParamedicReportControllerDeleteParamedicReportSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ParamedicReport.spaces refs
*/
readonly "ParamedicReportControllerPatchParamedicReportSpacesRef": (id: string, options: { readonly params: typeof ParamedicReportControllerPatchParamedicReportSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.projects
*/
readonly "ParamedicReportControllerGetParamedicReportProjects": (id: string, options: typeof ParamedicReportControllerGetParamedicReportProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ParamedicReport.projects refs
*/
readonly "ParamedicReportControllerGetParamedicReportProjectsRef": (id: string, options: typeof ParamedicReportControllerGetParamedicReportProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ParamedicReport.projects ref(s)
*/
readonly "ParamedicReportControllerPostParamedicReportProjectsRef": (id: string, options: { readonly params: typeof ParamedicReportControllerPostParamedicReportProjectsRefParams.Encoded; readonly payload: typeof ParamedicReportControllerPostParamedicReportProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ParamedicReport.projects ref(s)
*/
readonly "ParamedicReportControllerDeleteParamedicReportProjectsRef": (id: string, options: { readonly params: typeof ParamedicReportControllerDeleteParamedicReportProjectsRefParams.Encoded; readonly payload: typeof ParamedicReportControllerDeleteParamedicReportProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ParamedicReport.projects refs
*/
readonly "ParamedicReportControllerPatchParamedicReportProjectsRef": (id: string, options: { readonly params: typeof ParamedicReportControllerPatchParamedicReportProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice List
*/
readonly "InvoiceControllerGetInvoiceList": (options: typeof InvoiceControllerGetInvoiceListParams.Encoded) => Effect.Effect<typeof InvoiceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Invoice
*/
readonly "InvoiceControllerCreateInvoice": (options: { readonly params: typeof InvoiceControllerCreateInvoiceParams.Encoded; readonly payload: typeof InvoiceControllerCreateInvoiceRequest.Encoded }) => Effect.Effect<typeof InvoiceControllerCreateInvoice201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Invoice by ID
*/
readonly "InvoiceControllerGetInvoiceById": (id: string, options: typeof InvoiceControllerGetInvoiceByIdParams.Encoded) => Effect.Effect<typeof Invoice.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Invoice by ID
*/
readonly "InvoiceControllerDeleteInvoiceById": (id: string, options: typeof InvoiceControllerDeleteInvoiceByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Invoice by ID
*/
readonly "InvoiceControllerUpdateInvoiceById": (id: string, options: { readonly params: typeof InvoiceControllerUpdateInvoiceByIdParams.Encoded; readonly payload: typeof UpdateInvoice.Encoded }) => Effect.Effect<typeof Invoice.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.documentType
*/
readonly "InvoiceControllerGetInvoiceDocumentType": (id: string, options: typeof InvoiceControllerGetInvoiceDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.documentType ref
*/
readonly "InvoiceControllerGetInvoiceDocumentTypeRef": (id: string, options: typeof InvoiceControllerGetInvoiceDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.account
*/
readonly "InvoiceControllerGetInvoiceAccount": (id: string, options: typeof InvoiceControllerGetInvoiceAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.account ref
*/
readonly "InvoiceControllerGetInvoiceAccountRef": (id: string, options: typeof InvoiceControllerGetInvoiceAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Invoice.account ref
*/
readonly "InvoiceControllerPatchInvoiceAccountRef": (id: string, options: { readonly params: typeof InvoiceControllerPatchInvoiceAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.file
*/
readonly "InvoiceControllerGetInvoiceFile": (id: string, options: typeof InvoiceControllerGetInvoiceFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.file ref
*/
readonly "InvoiceControllerGetInvoiceFileRef": (id: string, options: typeof InvoiceControllerGetInvoiceFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Invoice.file ref
*/
readonly "InvoiceControllerPatchInvoiceFileRef": (id: string, options: { readonly params: typeof InvoiceControllerPatchInvoiceFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.assets
*/
readonly "InvoiceControllerGetInvoiceAssets": (id: string, options: typeof InvoiceControllerGetInvoiceAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.assets refs
*/
readonly "InvoiceControllerGetInvoiceAssetsRef": (id: string, options: typeof InvoiceControllerGetInvoiceAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Invoice.assets ref(s)
*/
readonly "InvoiceControllerPostInvoiceAssetsRef": (id: string, options: { readonly params: typeof InvoiceControllerPostInvoiceAssetsRefParams.Encoded; readonly payload: typeof InvoiceControllerPostInvoiceAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Invoice.assets ref(s)
*/
readonly "InvoiceControllerDeleteInvoiceAssetsRef": (id: string, options: { readonly params: typeof InvoiceControllerDeleteInvoiceAssetsRefParams.Encoded; readonly payload: typeof InvoiceControllerDeleteInvoiceAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Invoice.assets refs
*/
readonly "InvoiceControllerPatchInvoiceAssetsRef": (id: string, options: { readonly params: typeof InvoiceControllerPatchInvoiceAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.spaces
*/
readonly "InvoiceControllerGetInvoiceSpaces": (id: string, options: typeof InvoiceControllerGetInvoiceSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.spaces refs
*/
readonly "InvoiceControllerGetInvoiceSpacesRef": (id: string, options: typeof InvoiceControllerGetInvoiceSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Invoice.spaces ref(s)
*/
readonly "InvoiceControllerPostInvoiceSpacesRef": (id: string, options: { readonly params: typeof InvoiceControllerPostInvoiceSpacesRefParams.Encoded; readonly payload: typeof InvoiceControllerPostInvoiceSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Invoice.spaces ref(s)
*/
readonly "InvoiceControllerDeleteInvoiceSpacesRef": (id: string, options: { readonly params: typeof InvoiceControllerDeleteInvoiceSpacesRefParams.Encoded; readonly payload: typeof InvoiceControllerDeleteInvoiceSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Invoice.spaces refs
*/
readonly "InvoiceControllerPatchInvoiceSpacesRef": (id: string, options: { readonly params: typeof InvoiceControllerPatchInvoiceSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.projects
*/
readonly "InvoiceControllerGetInvoiceProjects": (id: string, options: typeof InvoiceControllerGetInvoiceProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.projects refs
*/
readonly "InvoiceControllerGetInvoiceProjectsRef": (id: string, options: typeof InvoiceControllerGetInvoiceProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Invoice.projects ref(s)
*/
readonly "InvoiceControllerPostInvoiceProjectsRef": (id: string, options: { readonly params: typeof InvoiceControllerPostInvoiceProjectsRefParams.Encoded; readonly payload: typeof InvoiceControllerPostInvoiceProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Invoice.projects ref(s)
*/
readonly "InvoiceControllerDeleteInvoiceProjectsRef": (id: string, options: { readonly params: typeof InvoiceControllerDeleteInvoiceProjectsRefParams.Encoded; readonly payload: typeof InvoiceControllerDeleteInvoiceProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Invoice.projects refs
*/
readonly "InvoiceControllerPatchInvoiceProjectsRef": (id: string, options: { readonly params: typeof InvoiceControllerPatchInvoiceProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.currency
*/
readonly "InvoiceControllerGetInvoiceCurrency": (id: string, options: typeof InvoiceControllerGetInvoiceCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.currency ref
*/
readonly "InvoiceControllerGetInvoiceCurrencyRef": (id: string, options: typeof InvoiceControllerGetInvoiceCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Invoice.currency ref
*/
readonly "InvoiceControllerPatchInvoiceCurrencyRef": (id: string, options: { readonly params: typeof InvoiceControllerPatchInvoiceCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.stats
*/
readonly "InvoiceControllerGetInvoiceStats": (id: string, options: typeof InvoiceControllerGetInvoiceStatsParams.Encoded) => Effect.Effect<typeof ItemizableFinancialDocumentStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.stats ref
*/
readonly "InvoiceControllerGetInvoiceStatsRef": (id: string, options: typeof InvoiceControllerGetInvoiceStatsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemizableFinancialDocumentStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.vendor
*/
readonly "InvoiceControllerGetInvoiceVendor": (id: string, options: typeof InvoiceControllerGetInvoiceVendorParams.Encoded) => Effect.Effect<typeof NullableAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.vendor ref
*/
readonly "InvoiceControllerGetInvoiceVendorRef": (id: string, options: typeof InvoiceControllerGetInvoiceVendorRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Invoice.vendor ref
*/
readonly "InvoiceControllerPatchInvoiceVendorRef": (id: string, options: { readonly params: typeof InvoiceControllerPatchInvoiceVendorRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.service
*/
readonly "InvoiceControllerGetInvoiceService": (id: string, options: typeof InvoiceControllerGetInvoiceServiceParams.Encoded) => Effect.Effect<typeof NullableService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.service ref
*/
readonly "InvoiceControllerGetInvoiceServiceRef": (id: string, options: typeof InvoiceControllerGetInvoiceServiceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Invoice.service ref
*/
readonly "InvoiceControllerPatchInvoiceServiceRef": (id: string, options: { readonly params: typeof InvoiceControllerPatchInvoiceServiceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateService.Encoded }) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.lines
*/
readonly "InvoiceControllerGetInvoiceLines": (id: string, options: typeof InvoiceControllerGetInvoiceLinesParams.Encoded) => Effect.Effect<typeof InvoiceLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.lines refs
*/
readonly "InvoiceControllerGetInvoiceLinesRef": (id: string, options: typeof InvoiceControllerGetInvoiceLinesRefParams.Encoded) => Effect.Effect<typeof ReferencedInvoiceLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.lineSubjects
*/
readonly "InvoiceControllerGetInvoiceLineSubjects": (id: string, options: typeof InvoiceControllerGetInvoiceLineSubjectsParams.Encoded) => Effect.Effect<typeof EntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Invoice.lineSubjects refs
*/
readonly "InvoiceControllerGetInvoiceLineSubjectsRef": (id: string, options: typeof InvoiceControllerGetInvoiceLineSubjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport List
*/
readonly "IncidentReportControllerGetIncidentReportList": (options: typeof IncidentReportControllerGetIncidentReportListParams.Encoded) => Effect.Effect<typeof IncidentReportList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create IncidentReport
*/
readonly "IncidentReportControllerCreateIncidentReport": (options: { readonly params: typeof IncidentReportControllerCreateIncidentReportParams.Encoded; readonly payload: typeof IncidentReportControllerCreateIncidentReportRequest.Encoded }) => Effect.Effect<typeof IncidentReportControllerCreateIncidentReport201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get IncidentReport by ID
*/
readonly "IncidentReportControllerGetIncidentReportById": (id: string, options: typeof IncidentReportControllerGetIncidentReportByIdParams.Encoded) => Effect.Effect<typeof IncidentReport.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete IncidentReport by ID
*/
readonly "IncidentReportControllerDeleteIncidentReportById": (id: string, options: typeof IncidentReportControllerDeleteIncidentReportByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update IncidentReport by ID
*/
readonly "IncidentReportControllerUpdateIncidentReportById": (id: string, options: { readonly params: typeof IncidentReportControllerUpdateIncidentReportByIdParams.Encoded; readonly payload: typeof UpdateIncidentReport.Encoded }) => Effect.Effect<typeof IncidentReport.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.documentType
*/
readonly "IncidentReportControllerGetIncidentReportDocumentType": (id: string, options: typeof IncidentReportControllerGetIncidentReportDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.documentType ref
*/
readonly "IncidentReportControllerGetIncidentReportDocumentTypeRef": (id: string, options: typeof IncidentReportControllerGetIncidentReportDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.account
*/
readonly "IncidentReportControllerGetIncidentReportAccount": (id: string, options: typeof IncidentReportControllerGetIncidentReportAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.account ref
*/
readonly "IncidentReportControllerGetIncidentReportAccountRef": (id: string, options: typeof IncidentReportControllerGetIncidentReportAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace IncidentReport.account ref
*/
readonly "IncidentReportControllerPatchIncidentReportAccountRef": (id: string, options: { readonly params: typeof IncidentReportControllerPatchIncidentReportAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.file
*/
readonly "IncidentReportControllerGetIncidentReportFile": (id: string, options: typeof IncidentReportControllerGetIncidentReportFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.file ref
*/
readonly "IncidentReportControllerGetIncidentReportFileRef": (id: string, options: typeof IncidentReportControllerGetIncidentReportFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace IncidentReport.file ref
*/
readonly "IncidentReportControllerPatchIncidentReportFileRef": (id: string, options: { readonly params: typeof IncidentReportControllerPatchIncidentReportFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.assets
*/
readonly "IncidentReportControllerGetIncidentReportAssets": (id: string, options: typeof IncidentReportControllerGetIncidentReportAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.assets refs
*/
readonly "IncidentReportControllerGetIncidentReportAssetsRef": (id: string, options: typeof IncidentReportControllerGetIncidentReportAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add IncidentReport.assets ref(s)
*/
readonly "IncidentReportControllerPostIncidentReportAssetsRef": (id: string, options: { readonly params: typeof IncidentReportControllerPostIncidentReportAssetsRefParams.Encoded; readonly payload: typeof IncidentReportControllerPostIncidentReportAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove IncidentReport.assets ref(s)
*/
readonly "IncidentReportControllerDeleteIncidentReportAssetsRef": (id: string, options: { readonly params: typeof IncidentReportControllerDeleteIncidentReportAssetsRefParams.Encoded; readonly payload: typeof IncidentReportControllerDeleteIncidentReportAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all IncidentReport.assets refs
*/
readonly "IncidentReportControllerPatchIncidentReportAssetsRef": (id: string, options: { readonly params: typeof IncidentReportControllerPatchIncidentReportAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.spaces
*/
readonly "IncidentReportControllerGetIncidentReportSpaces": (id: string, options: typeof IncidentReportControllerGetIncidentReportSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.spaces refs
*/
readonly "IncidentReportControllerGetIncidentReportSpacesRef": (id: string, options: typeof IncidentReportControllerGetIncidentReportSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add IncidentReport.spaces ref(s)
*/
readonly "IncidentReportControllerPostIncidentReportSpacesRef": (id: string, options: { readonly params: typeof IncidentReportControllerPostIncidentReportSpacesRefParams.Encoded; readonly payload: typeof IncidentReportControllerPostIncidentReportSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove IncidentReport.spaces ref(s)
*/
readonly "IncidentReportControllerDeleteIncidentReportSpacesRef": (id: string, options: { readonly params: typeof IncidentReportControllerDeleteIncidentReportSpacesRefParams.Encoded; readonly payload: typeof IncidentReportControllerDeleteIncidentReportSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all IncidentReport.spaces refs
*/
readonly "IncidentReportControllerPatchIncidentReportSpacesRef": (id: string, options: { readonly params: typeof IncidentReportControllerPatchIncidentReportSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.projects
*/
readonly "IncidentReportControllerGetIncidentReportProjects": (id: string, options: typeof IncidentReportControllerGetIncidentReportProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch IncidentReport.projects refs
*/
readonly "IncidentReportControllerGetIncidentReportProjectsRef": (id: string, options: typeof IncidentReportControllerGetIncidentReportProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add IncidentReport.projects ref(s)
*/
readonly "IncidentReportControllerPostIncidentReportProjectsRef": (id: string, options: { readonly params: typeof IncidentReportControllerPostIncidentReportProjectsRefParams.Encoded; readonly payload: typeof IncidentReportControllerPostIncidentReportProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove IncidentReport.projects ref(s)
*/
readonly "IncidentReportControllerDeleteIncidentReportProjectsRef": (id: string, options: { readonly params: typeof IncidentReportControllerDeleteIncidentReportProjectsRefParams.Encoded; readonly payload: typeof IncidentReportControllerDeleteIncidentReportProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all IncidentReport.projects refs
*/
readonly "IncidentReportControllerPatchIncidentReportProjectsRef": (id: string, options: { readonly params: typeof IncidentReportControllerPatchIncidentReportProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding List
*/
readonly "FundingControllerGetFundingList": (options?: typeof FundingControllerGetFundingListParams.Encoded | undefined) => Effect.Effect<typeof FundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Funding
*/
readonly "FundingControllerCreateFunding": (options: { readonly params?: typeof FundingControllerCreateFundingParams.Encoded | undefined; readonly payload: typeof FundingControllerCreateFundingRequest.Encoded }) => Effect.Effect<typeof FundingControllerCreateFunding201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Funding by ID
*/
readonly "FundingControllerGetFundingById": (id: string, options?: typeof FundingControllerGetFundingByIdParams.Encoded | undefined) => Effect.Effect<typeof Funding.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Funding by ID
*/
readonly "FundingControllerDeleteFundingById": (id: string) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Funding by ID
*/
readonly "FundingControllerUpdateFundingById": (id: string, options: { readonly params?: typeof FundingControllerUpdateFundingByIdParams.Encoded | undefined; readonly payload: typeof UpdateFunding.Encoded }) => Effect.Effect<typeof Funding.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.documentType
*/
readonly "FundingControllerGetFundingDocumentType": (id: string, options?: typeof FundingControllerGetFundingDocumentTypeParams.Encoded | undefined) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.documentType ref
*/
readonly "FundingControllerGetFundingDocumentTypeRef": (id: string) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.account
*/
readonly "FundingControllerGetFundingAccount": (id: string, options?: typeof FundingControllerGetFundingAccountParams.Encoded | undefined) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.account ref
*/
readonly "FundingControllerGetFundingAccountRef": (id: string) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Funding.account ref
*/
readonly "FundingControllerPatchFundingAccountRef": (id: string, options: typeof ReferencedUpdateAccount.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.file
*/
readonly "FundingControllerGetFundingFile": (id: string, options?: typeof FundingControllerGetFundingFileParams.Encoded | undefined) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.file ref
*/
readonly "FundingControllerGetFundingFileRef": (id: string) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Funding.file ref
*/
readonly "FundingControllerPatchFundingFileRef": (id: string, options: typeof NullableReferencedUpdateFile.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.assets
*/
readonly "FundingControllerGetFundingAssets": (id: string, options?: typeof FundingControllerGetFundingAssetsParams.Encoded | undefined) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.assets refs
*/
readonly "FundingControllerGetFundingAssetsRef": (id: string) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Funding.assets ref(s)
*/
readonly "FundingControllerPostFundingAssetsRef": (id: string, options: typeof FundingControllerPostFundingAssetsRefRequest.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Funding.assets ref(s)
*/
readonly "FundingControllerDeleteFundingAssetsRef": (id: string, options: typeof FundingControllerDeleteFundingAssetsRefRequest.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Funding.assets refs
*/
readonly "FundingControllerPatchFundingAssetsRef": (id: string, options: typeof ReferencedUpdateAssetList.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.spaces
*/
readonly "FundingControllerGetFundingSpaces": (id: string, options?: typeof FundingControllerGetFundingSpacesParams.Encoded | undefined) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.spaces refs
*/
readonly "FundingControllerGetFundingSpacesRef": (id: string) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Funding.spaces ref(s)
*/
readonly "FundingControllerPostFundingSpacesRef": (id: string, options: typeof FundingControllerPostFundingSpacesRefRequest.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Funding.spaces ref(s)
*/
readonly "FundingControllerDeleteFundingSpacesRef": (id: string, options: typeof FundingControllerDeleteFundingSpacesRefRequest.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Funding.spaces refs
*/
readonly "FundingControllerPatchFundingSpacesRef": (id: string, options: typeof ReferencedUpdateSpaceList.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.projects
*/
readonly "FundingControllerGetFundingProjects": (id: string, options?: typeof FundingControllerGetFundingProjectsParams.Encoded | undefined) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.projects refs
*/
readonly "FundingControllerGetFundingProjectsRef": (id: string) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Funding.projects ref(s)
*/
readonly "FundingControllerPostFundingProjectsRef": (id: string, options: typeof FundingControllerPostFundingProjectsRefRequest.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Funding.projects ref(s)
*/
readonly "FundingControllerDeleteFundingProjectsRef": (id: string, options: typeof FundingControllerDeleteFundingProjectsRefRequest.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Funding.projects refs
*/
readonly "FundingControllerPatchFundingProjectsRef": (id: string, options: typeof ReferencedUpdateProjectList.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.source
*/
readonly "FundingControllerGetFundingSource": (id: string, options?: typeof FundingControllerGetFundingSourceParams.Encoded | undefined) => Effect.Effect<typeof FundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.source ref
*/
readonly "FundingControllerGetFundingSourceRef": (id: string) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Funding.source ref
*/
readonly "FundingControllerPatchFundingSourceRef": (id: string, options: typeof ReferencedUpdateFundingSource.Encoded) => Effect.Effect<typeof ReferencedFundingSource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.allocations
*/
readonly "FundingControllerGetFundingAllocations": (id: string, options?: typeof FundingControllerGetFundingAllocationsParams.Encoded | undefined) => Effect.Effect<typeof BucketFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Funding.allocations refs
*/
readonly "FundingControllerGetFundingAllocationsRef": (id: string) => Effect.Effect<typeof ReferencedBucketFundingList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate List
*/
readonly "EstimateControllerGetEstimateList": (options: typeof EstimateControllerGetEstimateListParams.Encoded) => Effect.Effect<typeof EstimateList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Estimate
*/
readonly "EstimateControllerCreateEstimate": (options: { readonly params: typeof EstimateControllerCreateEstimateParams.Encoded; readonly payload: typeof EstimateControllerCreateEstimateRequest.Encoded }) => Effect.Effect<typeof EstimateControllerCreateEstimate201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Estimate by ID
*/
readonly "EstimateControllerGetEstimateById": (id: string, options: typeof EstimateControllerGetEstimateByIdParams.Encoded) => Effect.Effect<typeof Estimate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Estimate by ID
*/
readonly "EstimateControllerDeleteEstimateById": (id: string, options: typeof EstimateControllerDeleteEstimateByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Estimate by ID
*/
readonly "EstimateControllerUpdateEstimateById": (id: string, options: { readonly params: typeof EstimateControllerUpdateEstimateByIdParams.Encoded; readonly payload: typeof UpdateEstimate.Encoded }) => Effect.Effect<typeof Estimate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.documentType
*/
readonly "EstimateControllerGetEstimateDocumentType": (id: string, options: typeof EstimateControllerGetEstimateDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.documentType ref
*/
readonly "EstimateControllerGetEstimateDocumentTypeRef": (id: string, options: typeof EstimateControllerGetEstimateDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.account
*/
readonly "EstimateControllerGetEstimateAccount": (id: string, options: typeof EstimateControllerGetEstimateAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.account ref
*/
readonly "EstimateControllerGetEstimateAccountRef": (id: string, options: typeof EstimateControllerGetEstimateAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Estimate.account ref
*/
readonly "EstimateControllerPatchEstimateAccountRef": (id: string, options: { readonly params: typeof EstimateControllerPatchEstimateAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.file
*/
readonly "EstimateControllerGetEstimateFile": (id: string, options: typeof EstimateControllerGetEstimateFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.file ref
*/
readonly "EstimateControllerGetEstimateFileRef": (id: string, options: typeof EstimateControllerGetEstimateFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Estimate.file ref
*/
readonly "EstimateControllerPatchEstimateFileRef": (id: string, options: { readonly params: typeof EstimateControllerPatchEstimateFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.assets
*/
readonly "EstimateControllerGetEstimateAssets": (id: string, options: typeof EstimateControllerGetEstimateAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.assets refs
*/
readonly "EstimateControllerGetEstimateAssetsRef": (id: string, options: typeof EstimateControllerGetEstimateAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Estimate.assets ref(s)
*/
readonly "EstimateControllerPostEstimateAssetsRef": (id: string, options: { readonly params: typeof EstimateControllerPostEstimateAssetsRefParams.Encoded; readonly payload: typeof EstimateControllerPostEstimateAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Estimate.assets ref(s)
*/
readonly "EstimateControllerDeleteEstimateAssetsRef": (id: string, options: { readonly params: typeof EstimateControllerDeleteEstimateAssetsRefParams.Encoded; readonly payload: typeof EstimateControllerDeleteEstimateAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Estimate.assets refs
*/
readonly "EstimateControllerPatchEstimateAssetsRef": (id: string, options: { readonly params: typeof EstimateControllerPatchEstimateAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.spaces
*/
readonly "EstimateControllerGetEstimateSpaces": (id: string, options: typeof EstimateControllerGetEstimateSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.spaces refs
*/
readonly "EstimateControllerGetEstimateSpacesRef": (id: string, options: typeof EstimateControllerGetEstimateSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Estimate.spaces ref(s)
*/
readonly "EstimateControllerPostEstimateSpacesRef": (id: string, options: { readonly params: typeof EstimateControllerPostEstimateSpacesRefParams.Encoded; readonly payload: typeof EstimateControllerPostEstimateSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Estimate.spaces ref(s)
*/
readonly "EstimateControllerDeleteEstimateSpacesRef": (id: string, options: { readonly params: typeof EstimateControllerDeleteEstimateSpacesRefParams.Encoded; readonly payload: typeof EstimateControllerDeleteEstimateSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Estimate.spaces refs
*/
readonly "EstimateControllerPatchEstimateSpacesRef": (id: string, options: { readonly params: typeof EstimateControllerPatchEstimateSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.projects
*/
readonly "EstimateControllerGetEstimateProjects": (id: string, options: typeof EstimateControllerGetEstimateProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.projects refs
*/
readonly "EstimateControllerGetEstimateProjectsRef": (id: string, options: typeof EstimateControllerGetEstimateProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Estimate.projects ref(s)
*/
readonly "EstimateControllerPostEstimateProjectsRef": (id: string, options: { readonly params: typeof EstimateControllerPostEstimateProjectsRefParams.Encoded; readonly payload: typeof EstimateControllerPostEstimateProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Estimate.projects ref(s)
*/
readonly "EstimateControllerDeleteEstimateProjectsRef": (id: string, options: { readonly params: typeof EstimateControllerDeleteEstimateProjectsRefParams.Encoded; readonly payload: typeof EstimateControllerDeleteEstimateProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Estimate.projects refs
*/
readonly "EstimateControllerPatchEstimateProjectsRef": (id: string, options: { readonly params: typeof EstimateControllerPatchEstimateProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.currency
*/
readonly "EstimateControllerGetEstimateCurrency": (id: string, options: typeof EstimateControllerGetEstimateCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.currency ref
*/
readonly "EstimateControllerGetEstimateCurrencyRef": (id: string, options: typeof EstimateControllerGetEstimateCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Estimate.currency ref
*/
readonly "EstimateControllerPatchEstimateCurrencyRef": (id: string, options: { readonly params: typeof EstimateControllerPatchEstimateCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.stats
*/
readonly "EstimateControllerGetEstimateStats": (id: string, options: typeof EstimateControllerGetEstimateStatsParams.Encoded) => Effect.Effect<typeof ItemizableFinancialDocumentStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.stats ref
*/
readonly "EstimateControllerGetEstimateStatsRef": (id: string, options: typeof EstimateControllerGetEstimateStatsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemizableFinancialDocumentStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.vendor
*/
readonly "EstimateControllerGetEstimateVendor": (id: string, options: typeof EstimateControllerGetEstimateVendorParams.Encoded) => Effect.Effect<typeof NullableAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.vendor ref
*/
readonly "EstimateControllerGetEstimateVendorRef": (id: string, options: typeof EstimateControllerGetEstimateVendorRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Estimate.vendor ref
*/
readonly "EstimateControllerPatchEstimateVendorRef": (id: string, options: { readonly params: typeof EstimateControllerPatchEstimateVendorRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.service
*/
readonly "EstimateControllerGetEstimateService": (id: string, options: typeof EstimateControllerGetEstimateServiceParams.Encoded) => Effect.Effect<typeof NullableService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.service ref
*/
readonly "EstimateControllerGetEstimateServiceRef": (id: string, options: typeof EstimateControllerGetEstimateServiceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Estimate.service ref
*/
readonly "EstimateControllerPatchEstimateServiceRef": (id: string, options: { readonly params: typeof EstimateControllerPatchEstimateServiceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateService.Encoded }) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.lines
*/
readonly "EstimateControllerGetEstimateLines": (id: string, options: typeof EstimateControllerGetEstimateLinesParams.Encoded) => Effect.Effect<typeof EstimateLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.lines refs
*/
readonly "EstimateControllerGetEstimateLinesRef": (id: string, options: typeof EstimateControllerGetEstimateLinesRefParams.Encoded) => Effect.Effect<typeof ReferencedEstimateLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.lineSubjects
*/
readonly "EstimateControllerGetEstimateLineSubjects": (id: string, options: typeof EstimateControllerGetEstimateLineSubjectsParams.Encoded) => Effect.Effect<typeof EntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.lineSubjects refs
*/
readonly "EstimateControllerGetEstimateLineSubjectsRef": (id: string, options: typeof EstimateControllerGetEstimateLineSubjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.changeOrders
*/
readonly "EstimateControllerGetEstimateChangeOrders": (id: string, options: typeof EstimateControllerGetEstimateChangeOrdersParams.Encoded) => Effect.Effect<typeof ChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Estimate.changeOrders refs
*/
readonly "EstimateControllerGetEstimateChangeOrdersRef": (id: string, options: typeof EstimateControllerGetEstimateChangeOrdersRefParams.Encoded) => Effect.Effect<typeof ReferencedChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document List
*/
readonly "DocumentControllerGetDocumentList": (options: typeof DocumentControllerGetDocumentListParams.Encoded) => Effect.Effect<typeof DocumentList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Document
*/
readonly "DocumentControllerCreateDocument": (options: { readonly params: typeof DocumentControllerCreateDocumentParams.Encoded; readonly payload: typeof DocumentControllerCreateDocumentRequest.Encoded }) => Effect.Effect<typeof DocumentControllerCreateDocument201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Document by ID
*/
readonly "DocumentControllerGetDocumentById": (id: string, options: typeof DocumentControllerGetDocumentByIdParams.Encoded) => Effect.Effect<typeof Document.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Document by ID
*/
readonly "DocumentControllerDeleteDocumentById": (id: string, options: typeof DocumentControllerDeleteDocumentByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Document by ID
*/
readonly "DocumentControllerUpdateDocumentById": (id: string, options: { readonly params: typeof DocumentControllerUpdateDocumentByIdParams.Encoded; readonly payload: typeof UpdateDocument.Encoded }) => Effect.Effect<typeof Document.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.documentType
*/
readonly "DocumentControllerGetDocumentDocumentType": (id: string, options: typeof DocumentControllerGetDocumentDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.documentType ref
*/
readonly "DocumentControllerGetDocumentDocumentTypeRef": (id: string, options: typeof DocumentControllerGetDocumentDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.account
*/
readonly "DocumentControllerGetDocumentAccount": (id: string, options: typeof DocumentControllerGetDocumentAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.account ref
*/
readonly "DocumentControllerGetDocumentAccountRef": (id: string, options: typeof DocumentControllerGetDocumentAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Document.account ref
*/
readonly "DocumentControllerPatchDocumentAccountRef": (id: string, options: { readonly params: typeof DocumentControllerPatchDocumentAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.file
*/
readonly "DocumentControllerGetDocumentFile": (id: string, options: typeof DocumentControllerGetDocumentFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.file ref
*/
readonly "DocumentControllerGetDocumentFileRef": (id: string, options: typeof DocumentControllerGetDocumentFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Document.file ref
*/
readonly "DocumentControllerPatchDocumentFileRef": (id: string, options: { readonly params: typeof DocumentControllerPatchDocumentFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.assets
*/
readonly "DocumentControllerGetDocumentAssets": (id: string, options: typeof DocumentControllerGetDocumentAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.assets refs
*/
readonly "DocumentControllerGetDocumentAssetsRef": (id: string, options: typeof DocumentControllerGetDocumentAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Document.assets ref(s)
*/
readonly "DocumentControllerPostDocumentAssetsRef": (id: string, options: { readonly params: typeof DocumentControllerPostDocumentAssetsRefParams.Encoded; readonly payload: typeof DocumentControllerPostDocumentAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Document.assets ref(s)
*/
readonly "DocumentControllerDeleteDocumentAssetsRef": (id: string, options: { readonly params: typeof DocumentControllerDeleteDocumentAssetsRefParams.Encoded; readonly payload: typeof DocumentControllerDeleteDocumentAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Document.assets refs
*/
readonly "DocumentControllerPatchDocumentAssetsRef": (id: string, options: { readonly params: typeof DocumentControllerPatchDocumentAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.spaces
*/
readonly "DocumentControllerGetDocumentSpaces": (id: string, options: typeof DocumentControllerGetDocumentSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.spaces refs
*/
readonly "DocumentControllerGetDocumentSpacesRef": (id: string, options: typeof DocumentControllerGetDocumentSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Document.spaces ref(s)
*/
readonly "DocumentControllerPostDocumentSpacesRef": (id: string, options: { readonly params: typeof DocumentControllerPostDocumentSpacesRefParams.Encoded; readonly payload: typeof DocumentControllerPostDocumentSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Document.spaces ref(s)
*/
readonly "DocumentControllerDeleteDocumentSpacesRef": (id: string, options: { readonly params: typeof DocumentControllerDeleteDocumentSpacesRefParams.Encoded; readonly payload: typeof DocumentControllerDeleteDocumentSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Document.spaces refs
*/
readonly "DocumentControllerPatchDocumentSpacesRef": (id: string, options: { readonly params: typeof DocumentControllerPatchDocumentSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.projects
*/
readonly "DocumentControllerGetDocumentProjects": (id: string, options: typeof DocumentControllerGetDocumentProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Document.projects refs
*/
readonly "DocumentControllerGetDocumentProjectsRef": (id: string, options: typeof DocumentControllerGetDocumentProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Document.projects ref(s)
*/
readonly "DocumentControllerPostDocumentProjectsRef": (id: string, options: { readonly params: typeof DocumentControllerPostDocumentProjectsRefParams.Encoded; readonly payload: typeof DocumentControllerPostDocumentProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Document.projects ref(s)
*/
readonly "DocumentControllerDeleteDocumentProjectsRef": (id: string, options: { readonly params: typeof DocumentControllerDeleteDocumentProjectsRefParams.Encoded; readonly payload: typeof DocumentControllerDeleteDocumentProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Document.projects refs
*/
readonly "DocumentControllerPatchDocumentProjectsRef": (id: string, options: { readonly params: typeof DocumentControllerPatchDocumentProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork List
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkList": (options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkListParams.Encoded) => Effect.Effect<typeof DeliveryPaperworkList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create DeliveryPaperwork
*/
readonly "DeliveryPaperworkControllerCreateDeliveryPaperwork": (options: { readonly params: typeof DeliveryPaperworkControllerCreateDeliveryPaperworkParams.Encoded; readonly payload: typeof DeliveryPaperworkControllerCreateDeliveryPaperworkRequest.Encoded }) => Effect.Effect<typeof DeliveryPaperworkControllerCreateDeliveryPaperwork201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get DeliveryPaperwork by ID
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkById": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkByIdParams.Encoded) => Effect.Effect<typeof DeliveryPaperwork.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete DeliveryPaperwork by ID
*/
readonly "DeliveryPaperworkControllerDeleteDeliveryPaperworkById": (id: string, options: typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update DeliveryPaperwork by ID
*/
readonly "DeliveryPaperworkControllerUpdateDeliveryPaperworkById": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerUpdateDeliveryPaperworkByIdParams.Encoded; readonly payload: typeof UpdateDeliveryPaperwork.Encoded }) => Effect.Effect<typeof DeliveryPaperwork.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.documentType
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkDocumentType": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.documentType ref
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeRef": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.account
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkAccount": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.account ref
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkAccountRef": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace DeliveryPaperwork.account ref
*/
readonly "DeliveryPaperworkControllerPatchDeliveryPaperworkAccountRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerPatchDeliveryPaperworkAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.file
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkFile": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.file ref
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkFileRef": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace DeliveryPaperwork.file ref
*/
readonly "DeliveryPaperworkControllerPatchDeliveryPaperworkFileRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerPatchDeliveryPaperworkFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.assets
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkAssets": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.assets refs
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkAssetsRef": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add DeliveryPaperwork.assets ref(s)
*/
readonly "DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRefParams.Encoded; readonly payload: typeof DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove DeliveryPaperwork.assets ref(s)
*/
readonly "DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRefParams.Encoded; readonly payload: typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all DeliveryPaperwork.assets refs
*/
readonly "DeliveryPaperworkControllerPatchDeliveryPaperworkAssetsRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerPatchDeliveryPaperworkAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.spaces
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkSpaces": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.spaces refs
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkSpacesRef": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add DeliveryPaperwork.spaces ref(s)
*/
readonly "DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRefParams.Encoded; readonly payload: typeof DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove DeliveryPaperwork.spaces ref(s)
*/
readonly "DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRefParams.Encoded; readonly payload: typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all DeliveryPaperwork.spaces refs
*/
readonly "DeliveryPaperworkControllerPatchDeliveryPaperworkSpacesRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerPatchDeliveryPaperworkSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.projects
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkProjects": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeliveryPaperwork.projects refs
*/
readonly "DeliveryPaperworkControllerGetDeliveryPaperworkProjectsRef": (id: string, options: typeof DeliveryPaperworkControllerGetDeliveryPaperworkProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add DeliveryPaperwork.projects ref(s)
*/
readonly "DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRefParams.Encoded; readonly payload: typeof DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove DeliveryPaperwork.projects ref(s)
*/
readonly "DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRefParams.Encoded; readonly payload: typeof DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all DeliveryPaperwork.projects refs
*/
readonly "DeliveryPaperworkControllerPatchDeliveryPaperworkProjectsRef": (id: string, options: { readonly params: typeof DeliveryPaperworkControllerPatchDeliveryPaperworkProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed List
*/
readonly "DeedControllerGetDeedList": (options: typeof DeedControllerGetDeedListParams.Encoded) => Effect.Effect<typeof DeedList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Deed
*/
readonly "DeedControllerCreateDeed": (options: { readonly params: typeof DeedControllerCreateDeedParams.Encoded; readonly payload: typeof DeedControllerCreateDeedRequest.Encoded }) => Effect.Effect<typeof DeedControllerCreateDeed201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Deed by ID
*/
readonly "DeedControllerGetDeedById": (id: string, options: typeof DeedControllerGetDeedByIdParams.Encoded) => Effect.Effect<typeof Deed.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Deed by ID
*/
readonly "DeedControllerDeleteDeedById": (id: string, options: typeof DeedControllerDeleteDeedByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Deed by ID
*/
readonly "DeedControllerUpdateDeedById": (id: string, options: { readonly params: typeof DeedControllerUpdateDeedByIdParams.Encoded; readonly payload: typeof UpdateDeed.Encoded }) => Effect.Effect<typeof Deed.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.documentType
*/
readonly "DeedControllerGetDeedDocumentType": (id: string, options: typeof DeedControllerGetDeedDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.documentType ref
*/
readonly "DeedControllerGetDeedDocumentTypeRef": (id: string, options: typeof DeedControllerGetDeedDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.account
*/
readonly "DeedControllerGetDeedAccount": (id: string, options: typeof DeedControllerGetDeedAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.account ref
*/
readonly "DeedControllerGetDeedAccountRef": (id: string, options: typeof DeedControllerGetDeedAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Deed.account ref
*/
readonly "DeedControllerPatchDeedAccountRef": (id: string, options: { readonly params: typeof DeedControllerPatchDeedAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.file
*/
readonly "DeedControllerGetDeedFile": (id: string, options: typeof DeedControllerGetDeedFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.file ref
*/
readonly "DeedControllerGetDeedFileRef": (id: string, options: typeof DeedControllerGetDeedFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Deed.file ref
*/
readonly "DeedControllerPatchDeedFileRef": (id: string, options: { readonly params: typeof DeedControllerPatchDeedFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.assets
*/
readonly "DeedControllerGetDeedAssets": (id: string, options: typeof DeedControllerGetDeedAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.assets refs
*/
readonly "DeedControllerGetDeedAssetsRef": (id: string, options: typeof DeedControllerGetDeedAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Deed.assets ref(s)
*/
readonly "DeedControllerPostDeedAssetsRef": (id: string, options: { readonly params: typeof DeedControllerPostDeedAssetsRefParams.Encoded; readonly payload: typeof DeedControllerPostDeedAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Deed.assets ref(s)
*/
readonly "DeedControllerDeleteDeedAssetsRef": (id: string, options: { readonly params: typeof DeedControllerDeleteDeedAssetsRefParams.Encoded; readonly payload: typeof DeedControllerDeleteDeedAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Deed.assets refs
*/
readonly "DeedControllerPatchDeedAssetsRef": (id: string, options: { readonly params: typeof DeedControllerPatchDeedAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.spaces
*/
readonly "DeedControllerGetDeedSpaces": (id: string, options: typeof DeedControllerGetDeedSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.spaces refs
*/
readonly "DeedControllerGetDeedSpacesRef": (id: string, options: typeof DeedControllerGetDeedSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Deed.spaces ref(s)
*/
readonly "DeedControllerPostDeedSpacesRef": (id: string, options: { readonly params: typeof DeedControllerPostDeedSpacesRefParams.Encoded; readonly payload: typeof DeedControllerPostDeedSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Deed.spaces ref(s)
*/
readonly "DeedControllerDeleteDeedSpacesRef": (id: string, options: { readonly params: typeof DeedControllerDeleteDeedSpacesRefParams.Encoded; readonly payload: typeof DeedControllerDeleteDeedSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Deed.spaces refs
*/
readonly "DeedControllerPatchDeedSpacesRef": (id: string, options: { readonly params: typeof DeedControllerPatchDeedSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.projects
*/
readonly "DeedControllerGetDeedProjects": (id: string, options: typeof DeedControllerGetDeedProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Deed.projects refs
*/
readonly "DeedControllerGetDeedProjectsRef": (id: string, options: typeof DeedControllerGetDeedProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Deed.projects ref(s)
*/
readonly "DeedControllerPostDeedProjectsRef": (id: string, options: { readonly params: typeof DeedControllerPostDeedProjectsRefParams.Encoded; readonly payload: typeof DeedControllerPostDeedProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Deed.projects ref(s)
*/
readonly "DeedControllerDeleteDeedProjectsRef": (id: string, options: { readonly params: typeof DeedControllerDeleteDeedProjectsRefParams.Encoded; readonly payload: typeof DeedControllerDeleteDeedProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Deed.projects refs
*/
readonly "DeedControllerPatchDeedProjectsRef": (id: string, options: { readonly params: typeof DeedControllerPatchDeedProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage List
*/
readonly "DeclarationsPageControllerGetDeclarationsPageList": (options: typeof DeclarationsPageControllerGetDeclarationsPageListParams.Encoded) => Effect.Effect<typeof DeclarationsPageList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create DeclarationsPage
*/
readonly "DeclarationsPageControllerCreateDeclarationsPage": (options: { readonly params: typeof DeclarationsPageControllerCreateDeclarationsPageParams.Encoded; readonly payload: typeof DeclarationsPageControllerCreateDeclarationsPageRequest.Encoded }) => Effect.Effect<typeof DeclarationsPageControllerCreateDeclarationsPage201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get DeclarationsPage by ID
*/
readonly "DeclarationsPageControllerGetDeclarationsPageById": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageByIdParams.Encoded) => Effect.Effect<typeof DeclarationsPage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete DeclarationsPage by ID
*/
readonly "DeclarationsPageControllerDeleteDeclarationsPageById": (id: string, options: typeof DeclarationsPageControllerDeleteDeclarationsPageByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update DeclarationsPage by ID
*/
readonly "DeclarationsPageControllerUpdateDeclarationsPageById": (id: string, options: { readonly params: typeof DeclarationsPageControllerUpdateDeclarationsPageByIdParams.Encoded; readonly payload: typeof UpdateDeclarationsPage.Encoded }) => Effect.Effect<typeof DeclarationsPage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.documentType
*/
readonly "DeclarationsPageControllerGetDeclarationsPageDocumentType": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.documentType ref
*/
readonly "DeclarationsPageControllerGetDeclarationsPageDocumentTypeRef": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.account
*/
readonly "DeclarationsPageControllerGetDeclarationsPageAccount": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.account ref
*/
readonly "DeclarationsPageControllerGetDeclarationsPageAccountRef": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace DeclarationsPage.account ref
*/
readonly "DeclarationsPageControllerPatchDeclarationsPageAccountRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerPatchDeclarationsPageAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.file
*/
readonly "DeclarationsPageControllerGetDeclarationsPageFile": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.file ref
*/
readonly "DeclarationsPageControllerGetDeclarationsPageFileRef": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace DeclarationsPage.file ref
*/
readonly "DeclarationsPageControllerPatchDeclarationsPageFileRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerPatchDeclarationsPageFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.assets
*/
readonly "DeclarationsPageControllerGetDeclarationsPageAssets": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.assets refs
*/
readonly "DeclarationsPageControllerGetDeclarationsPageAssetsRef": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add DeclarationsPage.assets ref(s)
*/
readonly "DeclarationsPageControllerPostDeclarationsPageAssetsRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerPostDeclarationsPageAssetsRefParams.Encoded; readonly payload: typeof DeclarationsPageControllerPostDeclarationsPageAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove DeclarationsPage.assets ref(s)
*/
readonly "DeclarationsPageControllerDeleteDeclarationsPageAssetsRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerDeleteDeclarationsPageAssetsRefParams.Encoded; readonly payload: typeof DeclarationsPageControllerDeleteDeclarationsPageAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all DeclarationsPage.assets refs
*/
readonly "DeclarationsPageControllerPatchDeclarationsPageAssetsRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerPatchDeclarationsPageAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.spaces
*/
readonly "DeclarationsPageControllerGetDeclarationsPageSpaces": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.spaces refs
*/
readonly "DeclarationsPageControllerGetDeclarationsPageSpacesRef": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add DeclarationsPage.spaces ref(s)
*/
readonly "DeclarationsPageControllerPostDeclarationsPageSpacesRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerPostDeclarationsPageSpacesRefParams.Encoded; readonly payload: typeof DeclarationsPageControllerPostDeclarationsPageSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove DeclarationsPage.spaces ref(s)
*/
readonly "DeclarationsPageControllerDeleteDeclarationsPageSpacesRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerDeleteDeclarationsPageSpacesRefParams.Encoded; readonly payload: typeof DeclarationsPageControllerDeleteDeclarationsPageSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all DeclarationsPage.spaces refs
*/
readonly "DeclarationsPageControllerPatchDeclarationsPageSpacesRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerPatchDeclarationsPageSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.projects
*/
readonly "DeclarationsPageControllerGetDeclarationsPageProjects": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch DeclarationsPage.projects refs
*/
readonly "DeclarationsPageControllerGetDeclarationsPageProjectsRef": (id: string, options: typeof DeclarationsPageControllerGetDeclarationsPageProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add DeclarationsPage.projects ref(s)
*/
readonly "DeclarationsPageControllerPostDeclarationsPageProjectsRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerPostDeclarationsPageProjectsRefParams.Encoded; readonly payload: typeof DeclarationsPageControllerPostDeclarationsPageProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove DeclarationsPage.projects ref(s)
*/
readonly "DeclarationsPageControllerDeleteDeclarationsPageProjectsRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerDeleteDeclarationsPageProjectsRefParams.Encoded; readonly payload: typeof DeclarationsPageControllerDeleteDeclarationsPageProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all DeclarationsPage.projects refs
*/
readonly "DeclarationsPageControllerPatchDeclarationsPageProjectsRef": (id: string, options: { readonly params: typeof DeclarationsPageControllerPatchDeclarationsPageProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract List
*/
readonly "ContractControllerGetContractList": (options: typeof ContractControllerGetContractListParams.Encoded) => Effect.Effect<typeof ContractList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Contract
*/
readonly "ContractControllerCreateContract": (options: { readonly params: typeof ContractControllerCreateContractParams.Encoded; readonly payload: typeof ContractControllerCreateContractRequest.Encoded }) => Effect.Effect<typeof ContractControllerCreateContract201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Contract by ID
*/
readonly "ContractControllerGetContractById": (id: string, options: typeof ContractControllerGetContractByIdParams.Encoded) => Effect.Effect<typeof Contract.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Contract by ID
*/
readonly "ContractControllerDeleteContractById": (id: string, options: typeof ContractControllerDeleteContractByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Contract by ID
*/
readonly "ContractControllerUpdateContractById": (id: string, options: { readonly params: typeof ContractControllerUpdateContractByIdParams.Encoded; readonly payload: typeof UpdateContract.Encoded }) => Effect.Effect<typeof Contract.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.documentType
*/
readonly "ContractControllerGetContractDocumentType": (id: string, options: typeof ContractControllerGetContractDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.documentType ref
*/
readonly "ContractControllerGetContractDocumentTypeRef": (id: string, options: typeof ContractControllerGetContractDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.account
*/
readonly "ContractControllerGetContractAccount": (id: string, options: typeof ContractControllerGetContractAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.account ref
*/
readonly "ContractControllerGetContractAccountRef": (id: string, options: typeof ContractControllerGetContractAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Contract.account ref
*/
readonly "ContractControllerPatchContractAccountRef": (id: string, options: { readonly params: typeof ContractControllerPatchContractAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.file
*/
readonly "ContractControllerGetContractFile": (id: string, options: typeof ContractControllerGetContractFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.file ref
*/
readonly "ContractControllerGetContractFileRef": (id: string, options: typeof ContractControllerGetContractFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Contract.file ref
*/
readonly "ContractControllerPatchContractFileRef": (id: string, options: { readonly params: typeof ContractControllerPatchContractFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.assets
*/
readonly "ContractControllerGetContractAssets": (id: string, options: typeof ContractControllerGetContractAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.assets refs
*/
readonly "ContractControllerGetContractAssetsRef": (id: string, options: typeof ContractControllerGetContractAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Contract.assets ref(s)
*/
readonly "ContractControllerPostContractAssetsRef": (id: string, options: { readonly params: typeof ContractControllerPostContractAssetsRefParams.Encoded; readonly payload: typeof ContractControllerPostContractAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Contract.assets ref(s)
*/
readonly "ContractControllerDeleteContractAssetsRef": (id: string, options: { readonly params: typeof ContractControllerDeleteContractAssetsRefParams.Encoded; readonly payload: typeof ContractControllerDeleteContractAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Contract.assets refs
*/
readonly "ContractControllerPatchContractAssetsRef": (id: string, options: { readonly params: typeof ContractControllerPatchContractAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.spaces
*/
readonly "ContractControllerGetContractSpaces": (id: string, options: typeof ContractControllerGetContractSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.spaces refs
*/
readonly "ContractControllerGetContractSpacesRef": (id: string, options: typeof ContractControllerGetContractSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Contract.spaces ref(s)
*/
readonly "ContractControllerPostContractSpacesRef": (id: string, options: { readonly params: typeof ContractControllerPostContractSpacesRefParams.Encoded; readonly payload: typeof ContractControllerPostContractSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Contract.spaces ref(s)
*/
readonly "ContractControllerDeleteContractSpacesRef": (id: string, options: { readonly params: typeof ContractControllerDeleteContractSpacesRefParams.Encoded; readonly payload: typeof ContractControllerDeleteContractSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Contract.spaces refs
*/
readonly "ContractControllerPatchContractSpacesRef": (id: string, options: { readonly params: typeof ContractControllerPatchContractSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.projects
*/
readonly "ContractControllerGetContractProjects": (id: string, options: typeof ContractControllerGetContractProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Contract.projects refs
*/
readonly "ContractControllerGetContractProjectsRef": (id: string, options: typeof ContractControllerGetContractProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Contract.projects ref(s)
*/
readonly "ContractControllerPostContractProjectsRef": (id: string, options: { readonly params: typeof ContractControllerPostContractProjectsRefParams.Encoded; readonly payload: typeof ContractControllerPostContractProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Contract.projects ref(s)
*/
readonly "ContractControllerDeleteContractProjectsRef": (id: string, options: { readonly params: typeof ContractControllerDeleteContractProjectsRefParams.Encoded; readonly payload: typeof ContractControllerDeleteContractProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Contract.projects refs
*/
readonly "ContractControllerPatchContractProjectsRef": (id: string, options: { readonly params: typeof ContractControllerPatchContractProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder List
*/
readonly "ChangeOrderControllerGetChangeOrderList": (options: typeof ChangeOrderControllerGetChangeOrderListParams.Encoded) => Effect.Effect<typeof ChangeOrderList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ChangeOrder
*/
readonly "ChangeOrderControllerCreateChangeOrder": (options: { readonly params: typeof ChangeOrderControllerCreateChangeOrderParams.Encoded; readonly payload: typeof ChangeOrderControllerCreateChangeOrderRequest.Encoded }) => Effect.Effect<typeof ChangeOrderControllerCreateChangeOrder201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ChangeOrder by ID
*/
readonly "ChangeOrderControllerGetChangeOrderById": (id: string, options: typeof ChangeOrderControllerGetChangeOrderByIdParams.Encoded) => Effect.Effect<typeof ChangeOrder.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ChangeOrder by ID
*/
readonly "ChangeOrderControllerDeleteChangeOrderById": (id: string, options: typeof ChangeOrderControllerDeleteChangeOrderByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ChangeOrder by ID
*/
readonly "ChangeOrderControllerUpdateChangeOrderById": (id: string, options: { readonly params: typeof ChangeOrderControllerUpdateChangeOrderByIdParams.Encoded; readonly payload: typeof UpdateChangeOrder.Encoded }) => Effect.Effect<typeof ChangeOrder.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.documentType
*/
readonly "ChangeOrderControllerGetChangeOrderDocumentType": (id: string, options: typeof ChangeOrderControllerGetChangeOrderDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.documentType ref
*/
readonly "ChangeOrderControllerGetChangeOrderDocumentTypeRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.account
*/
readonly "ChangeOrderControllerGetChangeOrderAccount": (id: string, options: typeof ChangeOrderControllerGetChangeOrderAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.account ref
*/
readonly "ChangeOrderControllerGetChangeOrderAccountRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ChangeOrder.account ref
*/
readonly "ChangeOrderControllerPatchChangeOrderAccountRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPatchChangeOrderAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.file
*/
readonly "ChangeOrderControllerGetChangeOrderFile": (id: string, options: typeof ChangeOrderControllerGetChangeOrderFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.file ref
*/
readonly "ChangeOrderControllerGetChangeOrderFileRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ChangeOrder.file ref
*/
readonly "ChangeOrderControllerPatchChangeOrderFileRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPatchChangeOrderFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.assets
*/
readonly "ChangeOrderControllerGetChangeOrderAssets": (id: string, options: typeof ChangeOrderControllerGetChangeOrderAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.assets refs
*/
readonly "ChangeOrderControllerGetChangeOrderAssetsRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ChangeOrder.assets ref(s)
*/
readonly "ChangeOrderControllerPostChangeOrderAssetsRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPostChangeOrderAssetsRefParams.Encoded; readonly payload: typeof ChangeOrderControllerPostChangeOrderAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ChangeOrder.assets ref(s)
*/
readonly "ChangeOrderControllerDeleteChangeOrderAssetsRef": (id: string, options: { readonly params: typeof ChangeOrderControllerDeleteChangeOrderAssetsRefParams.Encoded; readonly payload: typeof ChangeOrderControllerDeleteChangeOrderAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ChangeOrder.assets refs
*/
readonly "ChangeOrderControllerPatchChangeOrderAssetsRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPatchChangeOrderAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.spaces
*/
readonly "ChangeOrderControllerGetChangeOrderSpaces": (id: string, options: typeof ChangeOrderControllerGetChangeOrderSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.spaces refs
*/
readonly "ChangeOrderControllerGetChangeOrderSpacesRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ChangeOrder.spaces ref(s)
*/
readonly "ChangeOrderControllerPostChangeOrderSpacesRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPostChangeOrderSpacesRefParams.Encoded; readonly payload: typeof ChangeOrderControllerPostChangeOrderSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ChangeOrder.spaces ref(s)
*/
readonly "ChangeOrderControllerDeleteChangeOrderSpacesRef": (id: string, options: { readonly params: typeof ChangeOrderControllerDeleteChangeOrderSpacesRefParams.Encoded; readonly payload: typeof ChangeOrderControllerDeleteChangeOrderSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ChangeOrder.spaces refs
*/
readonly "ChangeOrderControllerPatchChangeOrderSpacesRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPatchChangeOrderSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.projects
*/
readonly "ChangeOrderControllerGetChangeOrderProjects": (id: string, options: typeof ChangeOrderControllerGetChangeOrderProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.projects refs
*/
readonly "ChangeOrderControllerGetChangeOrderProjectsRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add ChangeOrder.projects ref(s)
*/
readonly "ChangeOrderControllerPostChangeOrderProjectsRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPostChangeOrderProjectsRefParams.Encoded; readonly payload: typeof ChangeOrderControllerPostChangeOrderProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove ChangeOrder.projects ref(s)
*/
readonly "ChangeOrderControllerDeleteChangeOrderProjectsRef": (id: string, options: { readonly params: typeof ChangeOrderControllerDeleteChangeOrderProjectsRefParams.Encoded; readonly payload: typeof ChangeOrderControllerDeleteChangeOrderProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all ChangeOrder.projects refs
*/
readonly "ChangeOrderControllerPatchChangeOrderProjectsRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPatchChangeOrderProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.currency
*/
readonly "ChangeOrderControllerGetChangeOrderCurrency": (id: string, options: typeof ChangeOrderControllerGetChangeOrderCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.currency ref
*/
readonly "ChangeOrderControllerGetChangeOrderCurrencyRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ChangeOrder.currency ref
*/
readonly "ChangeOrderControllerPatchChangeOrderCurrencyRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPatchChangeOrderCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.stats
*/
readonly "ChangeOrderControllerGetChangeOrderStats": (id: string, options: typeof ChangeOrderControllerGetChangeOrderStatsParams.Encoded) => Effect.Effect<typeof ItemizableFinancialDocumentStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.stats ref
*/
readonly "ChangeOrderControllerGetChangeOrderStatsRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderStatsRefParams.Encoded) => Effect.Effect<typeof ReferencedItemizableFinancialDocumentStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.estimate
*/
readonly "ChangeOrderControllerGetChangeOrderEstimate": (id: string, options: typeof ChangeOrderControllerGetChangeOrderEstimateParams.Encoded) => Effect.Effect<typeof Estimate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.estimate ref
*/
readonly "ChangeOrderControllerGetChangeOrderEstimateRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderEstimateRefParams.Encoded) => Effect.Effect<typeof ReferencedEstimate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ChangeOrder.estimate ref
*/
readonly "ChangeOrderControllerPatchChangeOrderEstimateRef": (id: string, options: { readonly params: typeof ChangeOrderControllerPatchChangeOrderEstimateRefParams.Encoded; readonly payload: typeof ReferencedUpdateEstimate.Encoded }) => Effect.Effect<typeof ReferencedEstimate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.vendor
*/
readonly "ChangeOrderControllerGetChangeOrderVendor": (id: string, options: typeof ChangeOrderControllerGetChangeOrderVendorParams.Encoded) => Effect.Effect<typeof AccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.vendor ref
*/
readonly "ChangeOrderControllerGetChangeOrderVendorRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderVendorRefParams.Encoded) => Effect.Effect<typeof ReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.service
*/
readonly "ChangeOrderControllerGetChangeOrderService": (id: string, options: typeof ChangeOrderControllerGetChangeOrderServiceParams.Encoded) => Effect.Effect<typeof Service.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.service ref
*/
readonly "ChangeOrderControllerGetChangeOrderServiceRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderServiceRefParams.Encoded) => Effect.Effect<typeof ReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.lines
*/
readonly "ChangeOrderControllerGetChangeOrderLines": (id: string, options: typeof ChangeOrderControllerGetChangeOrderLinesParams.Encoded) => Effect.Effect<typeof ChangeOrderLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.lines refs
*/
readonly "ChangeOrderControllerGetChangeOrderLinesRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderLinesRefParams.Encoded) => Effect.Effect<typeof ReferencedChangeOrderLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.lineSubjects
*/
readonly "ChangeOrderControllerGetChangeOrderLineSubjects": (id: string, options: typeof ChangeOrderControllerGetChangeOrderLineSubjectsParams.Encoded) => Effect.Effect<typeof EntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrder.lineSubjects refs
*/
readonly "ChangeOrderControllerGetChangeOrderLineSubjectsRef": (id: string, options: typeof ChangeOrderControllerGetChangeOrderLineSubjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySourceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint List
*/
readonly "BlueprintControllerGetBlueprintList": (options: typeof BlueprintControllerGetBlueprintListParams.Encoded) => Effect.Effect<typeof BlueprintList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Blueprint
*/
readonly "BlueprintControllerCreateBlueprint": (options: { readonly params: typeof BlueprintControllerCreateBlueprintParams.Encoded; readonly payload: typeof BlueprintControllerCreateBlueprintRequest.Encoded }) => Effect.Effect<typeof BlueprintControllerCreateBlueprint201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Blueprint by ID
*/
readonly "BlueprintControllerGetBlueprintById": (id: string, options: typeof BlueprintControllerGetBlueprintByIdParams.Encoded) => Effect.Effect<typeof Blueprint.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Blueprint by ID
*/
readonly "BlueprintControllerDeleteBlueprintById": (id: string, options: typeof BlueprintControllerDeleteBlueprintByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Blueprint by ID
*/
readonly "BlueprintControllerUpdateBlueprintById": (id: string, options: { readonly params: typeof BlueprintControllerUpdateBlueprintByIdParams.Encoded; readonly payload: typeof UpdateBlueprint.Encoded }) => Effect.Effect<typeof Blueprint.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.documentType
*/
readonly "BlueprintControllerGetBlueprintDocumentType": (id: string, options: typeof BlueprintControllerGetBlueprintDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.documentType ref
*/
readonly "BlueprintControllerGetBlueprintDocumentTypeRef": (id: string, options: typeof BlueprintControllerGetBlueprintDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.account
*/
readonly "BlueprintControllerGetBlueprintAccount": (id: string, options: typeof BlueprintControllerGetBlueprintAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.account ref
*/
readonly "BlueprintControllerGetBlueprintAccountRef": (id: string, options: typeof BlueprintControllerGetBlueprintAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Blueprint.account ref
*/
readonly "BlueprintControllerPatchBlueprintAccountRef": (id: string, options: { readonly params: typeof BlueprintControllerPatchBlueprintAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.file
*/
readonly "BlueprintControllerGetBlueprintFile": (id: string, options: typeof BlueprintControllerGetBlueprintFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.file ref
*/
readonly "BlueprintControllerGetBlueprintFileRef": (id: string, options: typeof BlueprintControllerGetBlueprintFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Blueprint.file ref
*/
readonly "BlueprintControllerPatchBlueprintFileRef": (id: string, options: { readonly params: typeof BlueprintControllerPatchBlueprintFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.assets
*/
readonly "BlueprintControllerGetBlueprintAssets": (id: string, options: typeof BlueprintControllerGetBlueprintAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.assets refs
*/
readonly "BlueprintControllerGetBlueprintAssetsRef": (id: string, options: typeof BlueprintControllerGetBlueprintAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Blueprint.assets ref(s)
*/
readonly "BlueprintControllerPostBlueprintAssetsRef": (id: string, options: { readonly params: typeof BlueprintControllerPostBlueprintAssetsRefParams.Encoded; readonly payload: typeof BlueprintControllerPostBlueprintAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Blueprint.assets ref(s)
*/
readonly "BlueprintControllerDeleteBlueprintAssetsRef": (id: string, options: { readonly params: typeof BlueprintControllerDeleteBlueprintAssetsRefParams.Encoded; readonly payload: typeof BlueprintControllerDeleteBlueprintAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Blueprint.assets refs
*/
readonly "BlueprintControllerPatchBlueprintAssetsRef": (id: string, options: { readonly params: typeof BlueprintControllerPatchBlueprintAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.spaces
*/
readonly "BlueprintControllerGetBlueprintSpaces": (id: string, options: typeof BlueprintControllerGetBlueprintSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.spaces refs
*/
readonly "BlueprintControllerGetBlueprintSpacesRef": (id: string, options: typeof BlueprintControllerGetBlueprintSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Blueprint.spaces ref(s)
*/
readonly "BlueprintControllerPostBlueprintSpacesRef": (id: string, options: { readonly params: typeof BlueprintControllerPostBlueprintSpacesRefParams.Encoded; readonly payload: typeof BlueprintControllerPostBlueprintSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Blueprint.spaces ref(s)
*/
readonly "BlueprintControllerDeleteBlueprintSpacesRef": (id: string, options: { readonly params: typeof BlueprintControllerDeleteBlueprintSpacesRefParams.Encoded; readonly payload: typeof BlueprintControllerDeleteBlueprintSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Blueprint.spaces refs
*/
readonly "BlueprintControllerPatchBlueprintSpacesRef": (id: string, options: { readonly params: typeof BlueprintControllerPatchBlueprintSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.projects
*/
readonly "BlueprintControllerGetBlueprintProjects": (id: string, options: typeof BlueprintControllerGetBlueprintProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Blueprint.projects refs
*/
readonly "BlueprintControllerGetBlueprintProjectsRef": (id: string, options: typeof BlueprintControllerGetBlueprintProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Blueprint.projects ref(s)
*/
readonly "BlueprintControllerPostBlueprintProjectsRef": (id: string, options: { readonly params: typeof BlueprintControllerPostBlueprintProjectsRefParams.Encoded; readonly payload: typeof BlueprintControllerPostBlueprintProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Blueprint.projects ref(s)
*/
readonly "BlueprintControllerDeleteBlueprintProjectsRef": (id: string, options: { readonly params: typeof BlueprintControllerDeleteBlueprintProjectsRefParams.Encoded; readonly payload: typeof BlueprintControllerDeleteBlueprintProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Blueprint.projects refs
*/
readonly "BlueprintControllerPatchBlueprintProjectsRef": (id: string, options: { readonly params: typeof BlueprintControllerPatchBlueprintProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal List
*/
readonly "AssetAppraisalControllerGetAssetAppraisalList": (options: typeof AssetAppraisalControllerGetAssetAppraisalListParams.Encoded) => Effect.Effect<typeof AssetAppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create AssetAppraisal
*/
readonly "AssetAppraisalControllerCreateAssetAppraisal": (options: { readonly params: typeof AssetAppraisalControllerCreateAssetAppraisalParams.Encoded; readonly payload: typeof AssetAppraisalControllerCreateAssetAppraisalRequest.Encoded }) => Effect.Effect<typeof AssetAppraisalControllerCreateAssetAppraisal201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AssetAppraisal by ID
*/
readonly "AssetAppraisalControllerGetAssetAppraisalById": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalByIdParams.Encoded) => Effect.Effect<typeof AssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete AssetAppraisal by ID
*/
readonly "AssetAppraisalControllerDeleteAssetAppraisalById": (id: string, options: typeof AssetAppraisalControllerDeleteAssetAppraisalByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update AssetAppraisal by ID
*/
readonly "AssetAppraisalControllerUpdateAssetAppraisalById": (id: string, options: { readonly params: typeof AssetAppraisalControllerUpdateAssetAppraisalByIdParams.Encoded; readonly payload: typeof UpdateAssetAppraisal.Encoded }) => Effect.Effect<typeof AssetAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.documentType
*/
readonly "AssetAppraisalControllerGetAssetAppraisalDocumentType": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.documentType ref
*/
readonly "AssetAppraisalControllerGetAssetAppraisalDocumentTypeRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.account
*/
readonly "AssetAppraisalControllerGetAssetAppraisalAccount": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.account ref
*/
readonly "AssetAppraisalControllerGetAssetAppraisalAccountRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AssetAppraisal.account ref
*/
readonly "AssetAppraisalControllerPatchAssetAppraisalAccountRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPatchAssetAppraisalAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.file
*/
readonly "AssetAppraisalControllerGetAssetAppraisalFile": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.file ref
*/
readonly "AssetAppraisalControllerGetAssetAppraisalFileRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AssetAppraisal.file ref
*/
readonly "AssetAppraisalControllerPatchAssetAppraisalFileRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPatchAssetAppraisalFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.assets
*/
readonly "AssetAppraisalControllerGetAssetAppraisalAssets": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.assets refs
*/
readonly "AssetAppraisalControllerGetAssetAppraisalAssetsRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add AssetAppraisal.assets ref(s)
*/
readonly "AssetAppraisalControllerPostAssetAppraisalAssetsRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPostAssetAppraisalAssetsRefParams.Encoded; readonly payload: typeof AssetAppraisalControllerPostAssetAppraisalAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove AssetAppraisal.assets ref(s)
*/
readonly "AssetAppraisalControllerDeleteAssetAppraisalAssetsRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerDeleteAssetAppraisalAssetsRefParams.Encoded; readonly payload: typeof AssetAppraisalControllerDeleteAssetAppraisalAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all AssetAppraisal.assets refs
*/
readonly "AssetAppraisalControllerPatchAssetAppraisalAssetsRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPatchAssetAppraisalAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.spaces
*/
readonly "AssetAppraisalControllerGetAssetAppraisalSpaces": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.spaces refs
*/
readonly "AssetAppraisalControllerGetAssetAppraisalSpacesRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add AssetAppraisal.spaces ref(s)
*/
readonly "AssetAppraisalControllerPostAssetAppraisalSpacesRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPostAssetAppraisalSpacesRefParams.Encoded; readonly payload: typeof AssetAppraisalControllerPostAssetAppraisalSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove AssetAppraisal.spaces ref(s)
*/
readonly "AssetAppraisalControllerDeleteAssetAppraisalSpacesRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerDeleteAssetAppraisalSpacesRefParams.Encoded; readonly payload: typeof AssetAppraisalControllerDeleteAssetAppraisalSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all AssetAppraisal.spaces refs
*/
readonly "AssetAppraisalControllerPatchAssetAppraisalSpacesRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPatchAssetAppraisalSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.projects
*/
readonly "AssetAppraisalControllerGetAssetAppraisalProjects": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.projects refs
*/
readonly "AssetAppraisalControllerGetAssetAppraisalProjectsRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add AssetAppraisal.projects ref(s)
*/
readonly "AssetAppraisalControllerPostAssetAppraisalProjectsRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPostAssetAppraisalProjectsRefParams.Encoded; readonly payload: typeof AssetAppraisalControllerPostAssetAppraisalProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove AssetAppraisal.projects ref(s)
*/
readonly "AssetAppraisalControllerDeleteAssetAppraisalProjectsRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerDeleteAssetAppraisalProjectsRefParams.Encoded; readonly payload: typeof AssetAppraisalControllerDeleteAssetAppraisalProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all AssetAppraisal.projects refs
*/
readonly "AssetAppraisalControllerPatchAssetAppraisalProjectsRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPatchAssetAppraisalProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.currency
*/
readonly "AssetAppraisalControllerGetAssetAppraisalCurrency": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.currency ref
*/
readonly "AssetAppraisalControllerGetAssetAppraisalCurrencyRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AssetAppraisal.currency ref
*/
readonly "AssetAppraisalControllerPatchAssetAppraisalCurrencyRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPatchAssetAppraisalCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.vendor
*/
readonly "AssetAppraisalControllerGetAssetAppraisalVendor": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalVendorParams.Encoded) => Effect.Effect<typeof NullableAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.vendor ref
*/
readonly "AssetAppraisalControllerGetAssetAppraisalVendorRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalVendorRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AssetAppraisal.vendor ref
*/
readonly "AssetAppraisalControllerPatchAssetAppraisalVendorRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPatchAssetAppraisalVendorRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.asset
*/
readonly "AssetAppraisalControllerGetAssetAppraisalAsset": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalAssetParams.Encoded) => Effect.Effect<typeof Asset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AssetAppraisal.asset ref
*/
readonly "AssetAppraisalControllerGetAssetAppraisalAssetRef": (id: string, options: typeof AssetAppraisalControllerGetAssetAppraisalAssetRefParams.Encoded) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AssetAppraisal.asset ref
*/
readonly "AssetAppraisalControllerPatchAssetAppraisalAssetRef": (id: string, options: { readonly params: typeof AssetAppraisalControllerPatchAssetAppraisalAssetRefParams.Encoded; readonly payload: typeof ReferencedUpdateAsset.Encoded }) => Effect.Effect<typeof ReferencedAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal List
*/
readonly "AppraisalControllerGetAppraisalList": (options: typeof AppraisalControllerGetAppraisalListParams.Encoded) => Effect.Effect<typeof AppraisalList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create Appraisal
*/
readonly "AppraisalControllerCreateAppraisal": (options: { readonly params: typeof AppraisalControllerCreateAppraisalParams.Encoded; readonly payload: typeof AppraisalControllerCreateAppraisalRequest.Encoded }) => Effect.Effect<typeof AppraisalControllerCreateAppraisal201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get Appraisal by ID
*/
readonly "AppraisalControllerGetAppraisalById": (id: string, options: typeof AppraisalControllerGetAppraisalByIdParams.Encoded) => Effect.Effect<typeof Appraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete Appraisal by ID
*/
readonly "AppraisalControllerDeleteAppraisalById": (id: string, options: typeof AppraisalControllerDeleteAppraisalByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update Appraisal by ID
*/
readonly "AppraisalControllerUpdateAppraisalById": (id: string, options: { readonly params: typeof AppraisalControllerUpdateAppraisalByIdParams.Encoded; readonly payload: typeof UpdateAppraisal.Encoded }) => Effect.Effect<typeof Appraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.documentType
*/
readonly "AppraisalControllerGetAppraisalDocumentType": (id: string, options: typeof AppraisalControllerGetAppraisalDocumentTypeParams.Encoded) => Effect.Effect<typeof DocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.documentType ref
*/
readonly "AppraisalControllerGetAppraisalDocumentTypeRef": (id: string, options: typeof AppraisalControllerGetAppraisalDocumentTypeRefParams.Encoded) => Effect.Effect<typeof ReferencedDocumentType.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.account
*/
readonly "AppraisalControllerGetAppraisalAccount": (id: string, options: typeof AppraisalControllerGetAppraisalAccountParams.Encoded) => Effect.Effect<typeof Account.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.account ref
*/
readonly "AppraisalControllerGetAppraisalAccountRef": (id: string, options: typeof AppraisalControllerGetAppraisalAccountRefParams.Encoded) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Appraisal.account ref
*/
readonly "AppraisalControllerPatchAppraisalAccountRef": (id: string, options: { readonly params: typeof AppraisalControllerPatchAppraisalAccountRefParams.Encoded; readonly payload: typeof ReferencedUpdateAccount.Encoded }) => Effect.Effect<typeof ReferencedAccount.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.file
*/
readonly "AppraisalControllerGetAppraisalFile": (id: string, options: typeof AppraisalControllerGetAppraisalFileParams.Encoded) => Effect.Effect<typeof NullableFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.file ref
*/
readonly "AppraisalControllerGetAppraisalFileRef": (id: string, options: typeof AppraisalControllerGetAppraisalFileRefParams.Encoded) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Appraisal.file ref
*/
readonly "AppraisalControllerPatchAppraisalFileRef": (id: string, options: { readonly params: typeof AppraisalControllerPatchAppraisalFileRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateFile.Encoded }) => Effect.Effect<typeof NullableReferencedFile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.assets
*/
readonly "AppraisalControllerGetAppraisalAssets": (id: string, options: typeof AppraisalControllerGetAppraisalAssetsParams.Encoded) => Effect.Effect<typeof AssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.assets refs
*/
readonly "AppraisalControllerGetAppraisalAssetsRef": (id: string, options: typeof AppraisalControllerGetAppraisalAssetsRefParams.Encoded) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Appraisal.assets ref(s)
*/
readonly "AppraisalControllerPostAppraisalAssetsRef": (id: string, options: { readonly params: typeof AppraisalControllerPostAppraisalAssetsRefParams.Encoded; readonly payload: typeof AppraisalControllerPostAppraisalAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Appraisal.assets ref(s)
*/
readonly "AppraisalControllerDeleteAppraisalAssetsRef": (id: string, options: { readonly params: typeof AppraisalControllerDeleteAppraisalAssetsRefParams.Encoded; readonly payload: typeof AppraisalControllerDeleteAppraisalAssetsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Appraisal.assets refs
*/
readonly "AppraisalControllerPatchAppraisalAssetsRef": (id: string, options: { readonly params: typeof AppraisalControllerPatchAppraisalAssetsRefParams.Encoded; readonly payload: typeof ReferencedUpdateAssetList.Encoded }) => Effect.Effect<typeof ReferencedAssetList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.spaces
*/
readonly "AppraisalControllerGetAppraisalSpaces": (id: string, options: typeof AppraisalControllerGetAppraisalSpacesParams.Encoded) => Effect.Effect<typeof SpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.spaces refs
*/
readonly "AppraisalControllerGetAppraisalSpacesRef": (id: string, options: typeof AppraisalControllerGetAppraisalSpacesRefParams.Encoded) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Appraisal.spaces ref(s)
*/
readonly "AppraisalControllerPostAppraisalSpacesRef": (id: string, options: { readonly params: typeof AppraisalControllerPostAppraisalSpacesRefParams.Encoded; readonly payload: typeof AppraisalControllerPostAppraisalSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Appraisal.spaces ref(s)
*/
readonly "AppraisalControllerDeleteAppraisalSpacesRef": (id: string, options: { readonly params: typeof AppraisalControllerDeleteAppraisalSpacesRefParams.Encoded; readonly payload: typeof AppraisalControllerDeleteAppraisalSpacesRefRequest.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Appraisal.spaces refs
*/
readonly "AppraisalControllerPatchAppraisalSpacesRef": (id: string, options: { readonly params: typeof AppraisalControllerPatchAppraisalSpacesRefParams.Encoded; readonly payload: typeof ReferencedUpdateSpaceList.Encoded }) => Effect.Effect<typeof ReferencedSpaceList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.projects
*/
readonly "AppraisalControllerGetAppraisalProjects": (id: string, options: typeof AppraisalControllerGetAppraisalProjectsParams.Encoded) => Effect.Effect<typeof ProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.projects refs
*/
readonly "AppraisalControllerGetAppraisalProjectsRef": (id: string, options: typeof AppraisalControllerGetAppraisalProjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add Appraisal.projects ref(s)
*/
readonly "AppraisalControllerPostAppraisalProjectsRef": (id: string, options: { readonly params: typeof AppraisalControllerPostAppraisalProjectsRefParams.Encoded; readonly payload: typeof AppraisalControllerPostAppraisalProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove Appraisal.projects ref(s)
*/
readonly "AppraisalControllerDeleteAppraisalProjectsRef": (id: string, options: { readonly params: typeof AppraisalControllerDeleteAppraisalProjectsRefParams.Encoded; readonly payload: typeof AppraisalControllerDeleteAppraisalProjectsRefRequest.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all Appraisal.projects refs
*/
readonly "AppraisalControllerPatchAppraisalProjectsRef": (id: string, options: { readonly params: typeof AppraisalControllerPatchAppraisalProjectsRefParams.Encoded; readonly payload: typeof ReferencedUpdateProjectList.Encoded }) => Effect.Effect<typeof ReferencedProjectList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.currency
*/
readonly "AppraisalControllerGetAppraisalCurrency": (id: string, options: typeof AppraisalControllerGetAppraisalCurrencyParams.Encoded) => Effect.Effect<typeof Currency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.currency ref
*/
readonly "AppraisalControllerGetAppraisalCurrencyRef": (id: string, options: typeof AppraisalControllerGetAppraisalCurrencyRefParams.Encoded) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Appraisal.currency ref
*/
readonly "AppraisalControllerPatchAppraisalCurrencyRef": (id: string, options: { readonly params: typeof AppraisalControllerPatchAppraisalCurrencyRefParams.Encoded; readonly payload: typeof ReferencedUpdateCurrency.Encoded }) => Effect.Effect<typeof ReferencedCurrency.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.vendor
*/
readonly "AppraisalControllerGetAppraisalVendor": (id: string, options: typeof AppraisalControllerGetAppraisalVendorParams.Encoded) => Effect.Effect<typeof NullableAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.vendor ref
*/
readonly "AppraisalControllerGetAppraisalVendorRef": (id: string, options: typeof AppraisalControllerGetAppraisalVendorRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace Appraisal.vendor ref
*/
readonly "AppraisalControllerPatchAppraisalVendorRef": (id: string, options: { readonly params: typeof AppraisalControllerPatchAppraisalVendorRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.lines
*/
readonly "AppraisalControllerGetAppraisalLines": (id: string, options: typeof AppraisalControllerGetAppraisalLinesParams.Encoded) => Effect.Effect<typeof AppraisalLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.lines refs
*/
readonly "AppraisalControllerGetAppraisalLinesRef": (id: string, options: typeof AppraisalControllerGetAppraisalLinesRefParams.Encoded) => Effect.Effect<typeof ReferencedAppraisalLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.subjects
*/
readonly "AppraisalControllerGetAppraisalSubjects": (id: string, options: typeof AppraisalControllerGetAppraisalSubjectsParams.Encoded) => Effect.Effect<typeof BaseEntityList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch Appraisal.subjects refs
*/
readonly "AppraisalControllerGetAppraisalSubjectsRef": (id: string, options: typeof AppraisalControllerGetAppraisalSubjectsRefParams.Encoded) => Effect.Effect<typeof ReferencedBaseEntityList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine List
*/
readonly "PaymentLineControllerGetPaymentLineList": (options: typeof PaymentLineControllerGetPaymentLineListParams.Encoded) => Effect.Effect<typeof PaymentLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create PaymentLine
*/
readonly "PaymentLineControllerCreatePaymentLine": (options: { readonly params: typeof PaymentLineControllerCreatePaymentLineParams.Encoded; readonly payload: typeof PaymentLineControllerCreatePaymentLineRequest.Encoded }) => Effect.Effect<typeof PaymentLineControllerCreatePaymentLine201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get PaymentLine by ID
*/
readonly "PaymentLineControllerGetPaymentLineById": (id: string, options: typeof PaymentLineControllerGetPaymentLineByIdParams.Encoded) => Effect.Effect<typeof PaymentLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete PaymentLine by ID
*/
readonly "PaymentLineControllerDeletePaymentLineById": (id: string, options: typeof PaymentLineControllerDeletePaymentLineByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update PaymentLine by ID
*/
readonly "PaymentLineControllerUpdatePaymentLineById": (id: string, options: { readonly params: typeof PaymentLineControllerUpdatePaymentLineByIdParams.Encoded; readonly payload: typeof UpdatePaymentLine.Encoded }) => Effect.Effect<typeof PaymentLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine.payment
*/
readonly "PaymentLineControllerGetPaymentLinePayment": (id: string, options: typeof PaymentLineControllerGetPaymentLinePaymentParams.Encoded) => Effect.Effect<typeof NullablePayment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine.payment ref
*/
readonly "PaymentLineControllerGetPaymentLinePaymentRef": (id: string, options: typeof PaymentLineControllerGetPaymentLinePaymentRefParams.Encoded) => Effect.Effect<typeof NullableReferencedPayment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PaymentLine.payment ref
*/
readonly "PaymentLineControllerPatchPaymentLinePaymentRef": (id: string, options: { readonly params: typeof PaymentLineControllerPatchPaymentLinePaymentRefParams.Encoded; readonly payload: typeof NullableReferencedUpdatePayment.Encoded }) => Effect.Effect<typeof NullableReferencedPayment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine.subject
*/
readonly "PaymentLineControllerGetPaymentLineSubject": (id: string, options: typeof PaymentLineControllerGetPaymentLineSubjectParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine.subject ref
*/
readonly "PaymentLineControllerGetPaymentLineSubjectRef": (id: string, options: typeof PaymentLineControllerGetPaymentLineSubjectRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PaymentLine.subject ref
*/
readonly "PaymentLineControllerPatchPaymentLineSubjectRef": (id: string, options: { readonly params: typeof PaymentLineControllerPatchPaymentLineSubjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateEntrySource.Encoded }) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine.service
*/
readonly "PaymentLineControllerGetPaymentLineService": (id: string, options: typeof PaymentLineControllerGetPaymentLineServiceParams.Encoded) => Effect.Effect<typeof NullableService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine.service ref
*/
readonly "PaymentLineControllerGetPaymentLineServiceRef": (id: string, options: typeof PaymentLineControllerGetPaymentLineServiceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PaymentLine.service ref
*/
readonly "PaymentLineControllerPatchPaymentLineServiceRef": (id: string, options: { readonly params: typeof PaymentLineControllerPatchPaymentLineServiceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateService.Encoded }) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine.vendor
*/
readonly "PaymentLineControllerGetPaymentLineVendor": (id: string, options: typeof PaymentLineControllerGetPaymentLineVendorParams.Encoded) => Effect.Effect<typeof NullableAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch PaymentLine.vendor ref
*/
readonly "PaymentLineControllerGetPaymentLineVendorRef": (id: string, options: typeof PaymentLineControllerGetPaymentLineVendorRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace PaymentLine.vendor ref
*/
readonly "PaymentLineControllerPatchPaymentLineVendorRef": (id: string, options: { readonly params: typeof PaymentLineControllerPatchPaymentLineVendorRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine List
*/
readonly "InvoiceLineControllerGetInvoiceLineList": (options: typeof InvoiceLineControllerGetInvoiceLineListParams.Encoded) => Effect.Effect<typeof InvoiceLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create InvoiceLine
*/
readonly "InvoiceLineControllerCreateInvoiceLine": (options: { readonly params: typeof InvoiceLineControllerCreateInvoiceLineParams.Encoded; readonly payload: typeof InvoiceLineControllerCreateInvoiceLineRequest.Encoded }) => Effect.Effect<typeof InvoiceLineControllerCreateInvoiceLine201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get InvoiceLine by ID
*/
readonly "InvoiceLineControllerGetInvoiceLineById": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineByIdParams.Encoded) => Effect.Effect<typeof InvoiceLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete InvoiceLine by ID
*/
readonly "InvoiceLineControllerDeleteInvoiceLineById": (id: string, options: typeof InvoiceLineControllerDeleteInvoiceLineByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update InvoiceLine by ID
*/
readonly "InvoiceLineControllerUpdateInvoiceLineById": (id: string, options: { readonly params: typeof InvoiceLineControllerUpdateInvoiceLineByIdParams.Encoded; readonly payload: typeof UpdateInvoiceLine.Encoded }) => Effect.Effect<typeof InvoiceLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine.invoice
*/
readonly "InvoiceLineControllerGetInvoiceLineInvoice": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineInvoiceParams.Encoded) => Effect.Effect<typeof NullableInvoice.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine.invoice ref
*/
readonly "InvoiceLineControllerGetInvoiceLineInvoiceRef": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineInvoiceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedInvoice.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace InvoiceLine.invoice ref
*/
readonly "InvoiceLineControllerPatchInvoiceLineInvoiceRef": (id: string, options: { readonly params: typeof InvoiceLineControllerPatchInvoiceLineInvoiceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateInvoice.Encoded }) => Effect.Effect<typeof NullableReferencedInvoice.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine.subject
*/
readonly "InvoiceLineControllerGetInvoiceLineSubject": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineSubjectParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine.subject ref
*/
readonly "InvoiceLineControllerGetInvoiceLineSubjectRef": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineSubjectRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace InvoiceLine.subject ref
*/
readonly "InvoiceLineControllerPatchInvoiceLineSubjectRef": (id: string, options: { readonly params: typeof InvoiceLineControllerPatchInvoiceLineSubjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateEntrySource.Encoded }) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine.service
*/
readonly "InvoiceLineControllerGetInvoiceLineService": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineServiceParams.Encoded) => Effect.Effect<typeof NullableService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine.service ref
*/
readonly "InvoiceLineControllerGetInvoiceLineServiceRef": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineServiceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace InvoiceLine.service ref
*/
readonly "InvoiceLineControllerPatchInvoiceLineServiceRef": (id: string, options: { readonly params: typeof InvoiceLineControllerPatchInvoiceLineServiceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateService.Encoded }) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine.vendor
*/
readonly "InvoiceLineControllerGetInvoiceLineVendor": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineVendorParams.Encoded) => Effect.Effect<typeof NullableAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch InvoiceLine.vendor ref
*/
readonly "InvoiceLineControllerGetInvoiceLineVendorRef": (id: string, options: typeof InvoiceLineControllerGetInvoiceLineVendorRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace InvoiceLine.vendor ref
*/
readonly "InvoiceLineControllerPatchInvoiceLineVendorRef": (id: string, options: { readonly params: typeof InvoiceLineControllerPatchInvoiceLineVendorRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine List
*/
readonly "EstimateLineControllerGetEstimateLineList": (options: typeof EstimateLineControllerGetEstimateLineListParams.Encoded) => Effect.Effect<typeof EstimateLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create EstimateLine
*/
readonly "EstimateLineControllerCreateEstimateLine": (options: { readonly params: typeof EstimateLineControllerCreateEstimateLineParams.Encoded; readonly payload: typeof EstimateLineControllerCreateEstimateLineRequest.Encoded }) => Effect.Effect<typeof EstimateLineControllerCreateEstimateLine201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get EstimateLine by ID
*/
readonly "EstimateLineControllerGetEstimateLineById": (id: string, options: typeof EstimateLineControllerGetEstimateLineByIdParams.Encoded) => Effect.Effect<typeof EstimateLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete EstimateLine by ID
*/
readonly "EstimateLineControllerDeleteEstimateLineById": (id: string, options: typeof EstimateLineControllerDeleteEstimateLineByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update EstimateLine by ID
*/
readonly "EstimateLineControllerUpdateEstimateLineById": (id: string, options: { readonly params: typeof EstimateLineControllerUpdateEstimateLineByIdParams.Encoded; readonly payload: typeof UpdateEstimateLine.Encoded }) => Effect.Effect<typeof EstimateLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.estimate
*/
readonly "EstimateLineControllerGetEstimateLineEstimate": (id: string, options: typeof EstimateLineControllerGetEstimateLineEstimateParams.Encoded) => Effect.Effect<typeof NullableEstimate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.estimate ref
*/
readonly "EstimateLineControllerGetEstimateLineEstimateRef": (id: string, options: typeof EstimateLineControllerGetEstimateLineEstimateRefParams.Encoded) => Effect.Effect<typeof NullableReferencedEstimate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EstimateLine.estimate ref
*/
readonly "EstimateLineControllerPatchEstimateLineEstimateRef": (id: string, options: { readonly params: typeof EstimateLineControllerPatchEstimateLineEstimateRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateEstimate.Encoded }) => Effect.Effect<typeof NullableReferencedEstimate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.subject
*/
readonly "EstimateLineControllerGetEstimateLineSubject": (id: string, options: typeof EstimateLineControllerGetEstimateLineSubjectParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.subject ref
*/
readonly "EstimateLineControllerGetEstimateLineSubjectRef": (id: string, options: typeof EstimateLineControllerGetEstimateLineSubjectRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EstimateLine.subject ref
*/
readonly "EstimateLineControllerPatchEstimateLineSubjectRef": (id: string, options: { readonly params: typeof EstimateLineControllerPatchEstimateLineSubjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateEntrySource.Encoded }) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.changeOrders
*/
readonly "EstimateLineControllerGetEstimateLineChangeOrders": (id: string, options: typeof EstimateLineControllerGetEstimateLineChangeOrdersParams.Encoded) => Effect.Effect<typeof ChangeOrderLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.changeOrders refs
*/
readonly "EstimateLineControllerGetEstimateLineChangeOrdersRef": (id: string, options: typeof EstimateLineControllerGetEstimateLineChangeOrdersRefParams.Encoded) => Effect.Effect<typeof ReferencedChangeOrderLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Add EstimateLine.changeOrders ref(s)
*/
readonly "EstimateLineControllerPostEstimateLineChangeOrdersRef": (id: string, options: { readonly params: typeof EstimateLineControllerPostEstimateLineChangeOrdersRefParams.Encoded; readonly payload: typeof EstimateLineControllerPostEstimateLineChangeOrdersRefRequest.Encoded }) => Effect.Effect<typeof ReferencedChangeOrderLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Remove EstimateLine.changeOrders ref(s)
*/
readonly "EstimateLineControllerDeleteEstimateLineChangeOrdersRef": (id: string, options: { readonly params: typeof EstimateLineControllerDeleteEstimateLineChangeOrdersRefParams.Encoded; readonly payload: typeof EstimateLineControllerDeleteEstimateLineChangeOrdersRefRequest.Encoded }) => Effect.Effect<typeof ReferencedChangeOrderLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace all EstimateLine.changeOrders refs
*/
readonly "EstimateLineControllerPatchEstimateLineChangeOrdersRef": (id: string, options: { readonly params: typeof EstimateLineControllerPatchEstimateLineChangeOrdersRefParams.Encoded; readonly payload: typeof ReferencedUpdateChangeOrderLineList.Encoded }) => Effect.Effect<typeof ReferencedChangeOrderLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.service
*/
readonly "EstimateLineControllerGetEstimateLineService": (id: string, options: typeof EstimateLineControllerGetEstimateLineServiceParams.Encoded) => Effect.Effect<typeof NullableService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.service ref
*/
readonly "EstimateLineControllerGetEstimateLineServiceRef": (id: string, options: typeof EstimateLineControllerGetEstimateLineServiceRefParams.Encoded) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EstimateLine.service ref
*/
readonly "EstimateLineControllerPatchEstimateLineServiceRef": (id: string, options: { readonly params: typeof EstimateLineControllerPatchEstimateLineServiceRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateService.Encoded }) => Effect.Effect<typeof NullableReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.vendor
*/
readonly "EstimateLineControllerGetEstimateLineVendor": (id: string, options: typeof EstimateLineControllerGetEstimateLineVendorParams.Encoded) => Effect.Effect<typeof NullableAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch EstimateLine.vendor ref
*/
readonly "EstimateLineControllerGetEstimateLineVendorRef": (id: string, options: typeof EstimateLineControllerGetEstimateLineVendorRefParams.Encoded) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace EstimateLine.vendor ref
*/
readonly "EstimateLineControllerPatchEstimateLineVendorRef": (id: string, options: { readonly params: typeof EstimateLineControllerPatchEstimateLineVendorRefParams.Encoded; readonly payload: typeof NullableReferencedUpdateAccountProvider.Encoded }) => Effect.Effect<typeof NullableReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine List
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineList": (options: typeof ChangeOrderLineControllerGetChangeOrderLineListParams.Encoded) => Effect.Effect<typeof ChangeOrderLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create ChangeOrderLine
*/
readonly "ChangeOrderLineControllerCreateChangeOrderLine": (options: { readonly params: typeof ChangeOrderLineControllerCreateChangeOrderLineParams.Encoded; readonly payload: typeof ChangeOrderLineControllerCreateChangeOrderLineRequest.Encoded }) => Effect.Effect<typeof ChangeOrderLineControllerCreateChangeOrderLine201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get ChangeOrderLine by ID
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineById": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineByIdParams.Encoded) => Effect.Effect<typeof ChangeOrderLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete ChangeOrderLine by ID
*/
readonly "ChangeOrderLineControllerDeleteChangeOrderLineById": (id: string, options: typeof ChangeOrderLineControllerDeleteChangeOrderLineByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update ChangeOrderLine by ID
*/
readonly "ChangeOrderLineControllerUpdateChangeOrderLineById": (id: string, options: { readonly params: typeof ChangeOrderLineControllerUpdateChangeOrderLineByIdParams.Encoded; readonly payload: typeof UpdateChangeOrderLine.Encoded }) => Effect.Effect<typeof ChangeOrderLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.estimateLine
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineEstimateLine": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineEstimateLineParams.Encoded) => Effect.Effect<typeof EstimateLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.estimateLine ref
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineEstimateLineRef": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineEstimateLineRefParams.Encoded) => Effect.Effect<typeof ReferencedEstimateLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ChangeOrderLine.estimateLine ref
*/
readonly "ChangeOrderLineControllerPatchChangeOrderLineEstimateLineRef": (id: string, options: { readonly params: typeof ChangeOrderLineControllerPatchChangeOrderLineEstimateLineRefParams.Encoded; readonly payload: typeof ReferencedUpdateEstimateLine.Encoded }) => Effect.Effect<typeof ReferencedEstimateLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.changeOrder
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineChangeOrder": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineChangeOrderParams.Encoded) => Effect.Effect<typeof ChangeOrder.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.changeOrder ref
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineChangeOrderRef": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineChangeOrderRefParams.Encoded) => Effect.Effect<typeof ReferencedChangeOrder.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace ChangeOrderLine.changeOrder ref
*/
readonly "ChangeOrderLineControllerPatchChangeOrderLineChangeOrderRef": (id: string, options: { readonly params: typeof ChangeOrderLineControllerPatchChangeOrderLineChangeOrderRefParams.Encoded; readonly payload: typeof ReferencedUpdateChangeOrder.Encoded }) => Effect.Effect<typeof ReferencedChangeOrder.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.vendor
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineVendor": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineVendorParams.Encoded) => Effect.Effect<typeof AccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.vendor ref
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineVendorRef": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineVendorRefParams.Encoded) => Effect.Effect<typeof ReferencedAccountProvider.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.service
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineService": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineServiceParams.Encoded) => Effect.Effect<typeof Service.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.service ref
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineServiceRef": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineServiceRefParams.Encoded) => Effect.Effect<typeof ReferencedService.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.subject
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineSubject": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineSubjectParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch ChangeOrderLine.subject ref
*/
readonly "ChangeOrderLineControllerGetChangeOrderLineSubjectRef": (id: string, options: typeof ChangeOrderLineControllerGetChangeOrderLineSubjectRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AppraisalLine List
*/
readonly "AppraisalLineControllerGetAppraisalLineList": (options: typeof AppraisalLineControllerGetAppraisalLineListParams.Encoded) => Effect.Effect<typeof AppraisalLineList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create AppraisalLine
*/
readonly "AppraisalLineControllerCreateAppraisalLine": (options: { readonly params: typeof AppraisalLineControllerCreateAppraisalLineParams.Encoded; readonly payload: typeof AppraisalLineControllerCreateAppraisalLineRequest.Encoded }) => Effect.Effect<typeof AppraisalLineControllerCreateAppraisalLine201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get AppraisalLine by ID
*/
readonly "AppraisalLineControllerGetAppraisalLineById": (id: string, options: typeof AppraisalLineControllerGetAppraisalLineByIdParams.Encoded) => Effect.Effect<typeof AppraisalLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete AppraisalLine by ID
*/
readonly "AppraisalLineControllerDeleteAppraisalLineById": (id: string, options: typeof AppraisalLineControllerDeleteAppraisalLineByIdParams.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update AppraisalLine by ID
*/
readonly "AppraisalLineControllerUpdateAppraisalLineById": (id: string, options: { readonly params: typeof AppraisalLineControllerUpdateAppraisalLineByIdParams.Encoded; readonly payload: typeof UpdateAppraisalLine.Encoded }) => Effect.Effect<typeof AppraisalLine.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AppraisalLine.appraisal
*/
readonly "AppraisalLineControllerGetAppraisalLineAppraisal": (id: string, options: typeof AppraisalLineControllerGetAppraisalLineAppraisalParams.Encoded) => Effect.Effect<typeof Appraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AppraisalLine.appraisal ref
*/
readonly "AppraisalLineControllerGetAppraisalLineAppraisalRef": (id: string, options: typeof AppraisalLineControllerGetAppraisalLineAppraisalRefParams.Encoded) => Effect.Effect<typeof ReferencedAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AppraisalLine.appraisal ref
*/
readonly "AppraisalLineControllerPatchAppraisalLineAppraisalRef": (id: string, options: { readonly params: typeof AppraisalLineControllerPatchAppraisalLineAppraisalRefParams.Encoded; readonly payload: typeof ReferencedUpdateAppraisal.Encoded }) => Effect.Effect<typeof ReferencedAppraisal.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AppraisalLine.subject
*/
readonly "AppraisalLineControllerGetAppraisalLineSubject": (id: string, options: typeof AppraisalLineControllerGetAppraisalLineSubjectParams.Encoded) => Effect.Effect<typeof EntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Fetch AppraisalLine.subject ref
*/
readonly "AppraisalLineControllerGetAppraisalLineSubjectRef": (id: string, options: typeof AppraisalLineControllerGetAppraisalLineSubjectRefParams.Encoded) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replace AppraisalLine.subject ref
*/
readonly "AppraisalLineControllerPatchAppraisalLineSubjectRef": (id: string, options: { readonly params: typeof AppraisalLineControllerPatchAppraisalLineSubjectRefParams.Encoded; readonly payload: typeof ReferencedUpdateEntrySource.Encoded }) => Effect.Effect<typeof ReferencedEntrySource.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Check whether the currently authed user/account can upsert data
*/
readonly "PermissionsControllerCheckUpsertPermissions": (options: { readonly params: typeof PermissionsControllerCheckUpsertPermissionsParams.Encoded; readonly payload: typeof PermissionsControllerCheckUpsertPermissionsRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Check whether the currently authed user/account can delete data
*/
readonly "PermissionsControllerCheckDeletePermissions": (options: { readonly params: typeof PermissionsControllerCheckDeletePermissionsParams.Encoded; readonly payload: typeof PermissionsControllerCheckDeletePermissionsRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Generates a signed configuration to pass into Uppy. Should be called within `assemblyOptions()` when uploading with Transloadit.
*/
readonly "UploadsControllerStartUpload": (options: { readonly params: typeof UploadsControllerStartUploadParams.Encoded; readonly payload: typeof TransloaditAssemblyOptionsDto.Encoded }) => Effect.Effect<typeof TransloaditAssemblyOptionsResponseDto.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Generates a placeholder "File" row. Used when uploading files via Uppy to assign a file id.
*/
readonly "UploadsControllerInitializeFileIds": (options: { readonly params: typeof UploadsControllerInitializeFileIdsParams.Encoded; readonly payload: typeof UploadFilesDto.Encoded }) => Effect.Effect<typeof UploadFilesResponseDto.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Call to set signed cookies on client to access relevant files from Files CDN
*/
readonly "CdnControllerSetCdnCookies": (options: { readonly params: typeof CdnControllerSetCdnCookiesParams.Encoded; readonly payload: typeof FilesCdnAccessDto.Encoded }) => Effect.Effect<typeof FilesCdnAccessResponseDto.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Retrieve a list of signed urls
*/
readonly "CdnControllerGetSignedUrls": (options: { readonly params: typeof CdnControllerGetSignedUrlsParams.Encoded; readonly payload: typeof FilesCdnSignedUrlsDto.Encoded }) => Effect.Effect<typeof FilesCdnSignedUrlsResponseDto.Type, HttpClientError.HttpClientError | ParseError>
}

export interface ClientError<Tag extends string, E> {
  readonly _tag: Tag
  readonly request: HttpClientRequest.HttpClientRequest
  readonly response: HttpClientResponse.HttpClientResponse
  readonly cause: E
}

class ClientErrorImpl extends Data.Error<{
  _tag: string
  cause: any
  request: HttpClientRequest.HttpClientRequest
  response: HttpClientResponse.HttpClientResponse
}> {}

export const ClientError = <Tag extends string, E>(
  tag: Tag,
  cause: E,
  response: HttpClientResponse.HttpClientResponse,
): ClientError<Tag, E> =>
  new ClientErrorImpl({
    _tag: tag,
    cause,
    response,
    request: response.request,
  }) as any
