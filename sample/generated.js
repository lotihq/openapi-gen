import * as HttpClientError from "@effect/platform/HttpClientError";
import * as HttpClientRequest from "@effect/platform/HttpClientRequest";
import * as HttpClientResponse from "@effect/platform/HttpClientResponse";
import * as Data from "effect/Data";
import * as Effect from "effect/Effect";
import * as S from "effect/Schema";
export class AccountControllerGetCurrentAccountParams extends S.Struct({
    "include": S.optionalWith(S.String, { nullable: true }),
    "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {
}
export class RedactedData extends S.Class("RedactedData")({
    /**
  * Fields removed from result
  */
    "fields": S.Array(S.String),
    /**
  * Reason for redaction
  */
    "message": S.String
}) {
}
export class LinkObject extends S.Class("LinkObject")({
    /**
  * Link to the current entity.
  */
    "self": S.optionalWith(S.String, { nullable: true })
}) {
}
export class AccountAttributes extends S.Class("AccountAttributes")({
    /**
  * The name for the account
  */
    "name": S.optionalWith(S.String, { nullable: true })
}) {
}
export class UserRef extends S.Class("UserRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("User")
}) {
}
export class ReferencedLinkObject extends S.Class("ReferencedLinkObject")({
    /**
  * Link to the current entity ref(s).
  */
    "self": S.optionalWith(S.String, { nullable: true }),
    /**
  * Link to full object(s).
  */
    "related": S.optionalWith(S.String, { nullable: true })
}) {
}
export class IncidentRef extends S.Class("IncidentRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Incident")
}) {
}
export class DwellingRef extends S.Class("DwellingRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Dwelling")
}) {
}
export class UserAccountRoleRef extends S.Class("UserAccountRoleRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserAccountRole")
}) {
}
export class CurrencyRef extends S.Class("CurrencyRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Currency")
}) {
}
export class CreateUserAttributes extends S.Class("CreateUserAttributes")({
    /**
  * The user's full legal name
  */
    "legalName": S.optionalWith(S.String, { nullable: true }),
    /**
  * The user's preferred name (e.g., first name)
  */
    "preferredName": S.optionalWith(S.String, { nullable: true }),
    "avatarKey": S.optionalWith(S.String, { nullable: true }),
    "avatarUrl": S.optionalWith(S.String, { nullable: true }),
    /**
  * Whether or not the user is an admin
  */
    "isAdmin": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class EmailAddressRef extends S.Class("EmailAddressRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EmailAddress")
}) {
}
export class PhoneNumberRef extends S.Class("PhoneNumberRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PhoneNumber")
}) {
}
export class AccountRef extends S.Class("AccountRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Account")
}) {
}
export class EmailAddressAttributes extends S.Class("EmailAddressAttributes")({
    "address": S.optionalWith(S.String, { nullable: true }),
    /**
  * Whether email address is verified.
  */
    "isVerified": S.optionalWith(S.Boolean, { nullable: true }),
    "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class AccountProviderContactRef extends S.Class("AccountProviderContactRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProviderContact")
}) {
}
export class AccountProviderContactAttributes extends S.Class("AccountProviderContactAttributes")({
    /**
  * The user's full legal name
  */
    "legalName": S.optionalWith(S.String, { nullable: true }),
    /**
  * The user's preferred name (e.g., first name)
  */
    "preferredName": S.optionalWith(S.String, { nullable: true }),
    "avatarKey": S.optionalWith(S.String, { nullable: true }),
    "avatarUrl": S.optionalWith(S.String, { nullable: true })
}) {
}
export class AccountProviderRef extends S.Class("AccountProviderRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProvider")
}) {
}
export class PhoneNumberAttributes extends S.Class("PhoneNumberAttributes")({
    "number": S.optionalWith(S.String, { nullable: true }),
    "isVerified": S.optionalWith(S.Boolean, { nullable: true }),
    "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class AccountProviderAttributes extends S.Class("AccountProviderAttributes")({
    /**
  * Required if provider not set.
  */
    "name": S.optionalWith(S.String, { nullable: true }),
    "offerings": S.optionalWith(S.Array(S.Literal("AID", "COVERAGE", "ITEM", "SERVICE")), { nullable: true })
}) {
}
export class ProviderRef extends S.Class("ProviderRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Provider")
}) {
}
export class ProjectMediaRef extends S.Class("ProjectMediaRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectMedia")
}) {
}
export class IncidentAttributes extends S.Class("IncidentAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "occurredDate": S.optionalWith(S.String, { nullable: true }),
    "isFemaDisaster": S.optionalWith(S.Boolean, { nullable: true }),
    "wasSomeoneInjured": S.optionalWith(S.Boolean, { nullable: true }),
    "isThereLiability": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class IncidentTypeRef extends S.Class("IncidentTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentType")
}) {
}
export class DisasterRef extends S.Class("DisasterRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Disaster")
}) {
}
export class CreateProjectMediaAttributesStage extends S.Literal("AFTER", "BEFORE", "DURING") {
}
export class MediaRef extends S.Class("MediaRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Media")
}) {
}
export class CreateMediaAttributesSubjectState extends S.Literal("DAMAGED", "INTACT", "IN_PROGRESS", "MISSING") {
}
export class FileRef extends S.Class("FileRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("File")
}) {
}
export class SpaceRef extends S.Class("SpaceRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Space")
}) {
}
export class EntrySourceMediaRef extends S.Class("EntrySourceMediaRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMedia")
}) {
}
export class FileAttributesType extends S.Literal("AUDIO", "DOCUMENT", "IMAGE", "VIDEO") {
}
export class FileProcessRef extends S.Class("FileProcessRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FileProcess")
}) {
}
export class ChangeOrderRef extends S.Class("ChangeOrderRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ChangeOrder")
}) {
}
export class EstimateRef extends S.Class("EstimateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Estimate")
}) {
}
export class InvoiceRef extends S.Class("InvoiceRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Invoice")
}) {
}
export class PaymentRef extends S.Class("PaymentRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Payment")
}) {
}
export class AssetAppraisalRef extends S.Class("AssetAppraisalRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAppraisal")
}) {
}
export class AppraisalRef extends S.Class("AppraisalRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Appraisal")
}) {
}
export class FundingRef extends S.Class("FundingRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Funding")
}) {
}
export class IncidentReportRef extends S.Class("IncidentReportRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentReport")
}) {
}
export class PoliceReportRef extends S.Class("PoliceReportRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PoliceReport")
}) {
}
export class ParamedicReportRef extends S.Class("ParamedicReportRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ParamedicReport")
}) {
}
export class ContractRef extends S.Class("ContractRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Contract")
}) {
}
export class RentRollRef extends S.Class("RentRollRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("RentRoll")
}) {
}
export class PermitRef extends S.Class("PermitRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Permit")
}) {
}
export class BlueprintRef extends S.Class("BlueprintRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Blueprint")
}) {
}
export class DeclarationsPageRef extends S.Class("DeclarationsPageRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeclarationsPage")
}) {
}
export class PolicyJacketRef extends S.Class("PolicyJacketRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyJacket")
}) {
}
export class ScopeOfLossRef extends S.Class("ScopeOfLossRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ScopeOfLoss")
}) {
}
export class DeliveryPaperworkRef extends S.Class("DeliveryPaperworkRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeliveryPaperwork")
}) {
}
export class ProductSpecRef extends S.Class("ProductSpecRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProductSpec")
}) {
}
export class UserManualRef extends S.Class("UserManualRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserManual")
}) {
}
export class WarrantyRef extends S.Class("WarrantyRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Warranty")
}) {
}
export class DeedRef extends S.Class("DeedRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deed")
}) {
}
export class AssetAttributes extends S.Class("AssetAttributes")({
    "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class AssetTypeRef extends S.Class("AssetTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetType")
}) {
}
export class AddressRef extends S.Class("AddressRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Address")
}) {
}
export class AssetTypeAttributes extends S.Class("AssetTypeAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true })
}) {
}
export class AssetAppraisalAttributes extends S.Class("AssetAppraisalAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.optionalWith(S.String, { nullable: true })
}) {
}
export class DocumentTypeRef extends S.Class("DocumentTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentType")
}) {
}
export class CreateDocumentTypeAttributes extends S.Class("CreateDocumentTypeAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {
}
export class DocumentClassRef extends S.Class("DocumentClassRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentClass")
}) {
}
export class CreateSpaceAttributesUse extends S.Literal("AGRICULTURAL", "BUSINESS", "LEASED", "PERSONAL", "SHORT_TERM_RENTAL", "UNUSED") {
}
export class SpaceTypeRef extends S.Class("SpaceTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceType")
}) {
}
export class SpaceGroupRef extends S.Class("SpaceGroupRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroup")
}) {
}
export class CreateSpaceCategoryAttributes extends S.Class("CreateSpaceCategoryAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {
}
export class SpaceClassRef extends S.Class("SpaceClassRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceClass")
}) {
}
export class SpaceGroupTypeRef extends S.Class("SpaceGroupTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroupType")
}) {
}
export class SpaceCategoryRef extends S.Class("SpaceCategoryRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceCategory")
}) {
}
export class BucketTypeRef extends S.Class("BucketTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketType")
}) {
}
export class BucketTypeAttributes extends S.Class("BucketTypeAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "articleUrl": S.optionalWith(S.String, { nullable: true })
}) {
}
export class BucketClassRef extends S.Class("BucketClassRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketClass")
}) {
}
export class CreateCurrencyAttributes extends S.Class("CreateCurrencyAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "iso": S.optionalWith(S.String, { nullable: true })
}) {
}
export class AddressAttributes extends S.Class("AddressAttributes")({
    "streetAddress": S.optionalWith(S.String, { nullable: true }),
    "streetAddress2": S.optionalWith(S.String, { nullable: true }),
    "city": S.optionalWith(S.String, { nullable: true }),
    "state": S.optionalWith(S.String, { nullable: true }),
    "postal": S.optionalWith(S.String, { nullable: true })
}) {
}
export class CountryRef extends S.Class("CountryRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Country")
}) {
}
export class CountryAttributes extends S.Class("CountryAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "callingCode": S.optionalWith(S.String, { nullable: true }),
    "iso2": S.optionalWith(S.String, { nullable: true })
}) {
}
export class CreateFileProcessAttributesType extends S.Literal("CONVERSION", "DATA_EXTRACTION") {
}
export class CreateFileProcessAttributesStatus extends S.Literal("COMPLETED", "FAILED", "PAUSED", "PROCESSING", "QUEUED") {
}
export class BlueprintAttributes extends S.Class("BlueprintAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true })
}) {
}
export class ChangeOrderAttributes extends S.Class("ChangeOrderAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ItemizableFinancialDocumentStatsRef extends S.Class("ItemizableFinancialDocumentStatsRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemizableFinancialDocumentStats")
}) {
}
export class ServiceRef extends S.Class("ServiceRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Service")
}) {
}
export class ItemChangeOrderRef extends S.Class("ItemChangeOrderRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemChangeOrder")
}) {
}
export class ItemImpactChangeOrderRef extends S.Class("ItemImpactChangeOrderRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactChangeOrder")
}) {
}
export class ServiceTaskChangeOrderRef extends S.Class("ServiceTaskChangeOrderRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskChangeOrder")
}) {
}
export class ItemImpactRef extends S.Class("ItemImpactRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpact")
}) {
}
export class ItemRef extends S.Class("ItemRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Item")
}) {
}
export class ServiceTaskRef extends S.Class("ServiceTaskRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTask")
}) {
}
export class ThirdPartyImpactRef extends S.Class("ThirdPartyImpactRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyImpact")
}) {
}
export class CreateItemizableFinancialDocumentStatsAttributes extends S.Class("CreateItemizableFinancialDocumentStatsAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "itemizedCount": S.optionalWith(S.Number, { nullable: true }),
    "itemizedAmount": S.optionalWith(S.Number, { nullable: true }),
    "itemizedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "itemizedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "itemizedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "isFullyItemized": S.optionalWith(S.Boolean, { nullable: true }),
    "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
    "isItemizationComplete": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class EstimateAttributes extends S.Class("EstimateAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "currentAmount": S.optionalWith(S.Number, { nullable: true }),
    "currentSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "currentTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "currentFeeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ItemEstimateRef extends S.Class("ItemEstimateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemEstimate")
}) {
}
export class ItemImpactEstimateRef extends S.Class("ItemImpactEstimateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactEstimate")
}) {
}
export class ServiceTaskEstimateRef extends S.Class("ServiceTaskEstimateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskEstimate")
}) {
}
export class ServiceAttributes extends S.Class("ServiceAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
    "paymentCount": S.optionalWith(S.Number, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "paidLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimatedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class EntrySourceMetadataRef extends S.Class("EntrySourceMetadataRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMetadata")
}) {
}
export class EntryRef extends S.Class("EntryRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Entry")
}) {
}
export class ItemAppraisalRef extends S.Class("ItemAppraisalRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemAppraisal")
}) {
}
export class ServiceTypeRef extends S.Class("ServiceTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceType")
}) {
}
export class ItemPaymentRef extends S.Class("ItemPaymentRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemPayment")
}) {
}
export class ItemImpactPaymentRef extends S.Class("ItemImpactPaymentRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactPayment")
}) {
}
export class ServiceTaskPaymentRef extends S.Class("ServiceTaskPaymentRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskPayment")
}) {
}
export class ItemInvoiceRef extends S.Class("ItemInvoiceRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemInvoice")
}) {
}
export class ItemImpactInvoiceRef extends S.Class("ItemImpactInvoiceRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactInvoice")
}) {
}
export class ServiceTaskInvoiceRef extends S.Class("ServiceTaskInvoiceRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskInvoice")
}) {
}
export class CreateEntrySourceMetadataAttributesEntrySourceType extends S.Literal("ITEM", "ITEM_IMPACT", "SERVICE", "SERVICE_TASK", "THIRD_PARTY_IMPACT") {
}
export class EntrySourceAttributes extends S.Class("EntrySourceAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemImpactAttributesConditionAtImpact extends S.Literal("AVERAGE", "EXCELLENT", "FAIR", "NEW", "POOR") {
}
export class CreateItemImpactAttributesItemQuality extends S.Literal("BESPOKE", "BUDGET", "GENERIC", "LUXURY", "MAINSTREAM") {
}
export class ItemTypeRef extends S.Class("ItemTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemType")
}) {
}
export class CreateEntryAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class CreateEntryAttributesSubmissionStatus extends S.Literal("NOT_SUBMITTED", "REVISED", "SUBMITTED") {
}
export class BucketRef extends S.Class("BucketRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Bucket")
}) {
}
export class SubBucketRef extends S.Class("SubBucketRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubBucket")
}) {
}
export class ClaimRef extends S.Class("ClaimRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Claim")
}) {
}
export class BaseBucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class BaseBucketMetadataRef extends S.Class("BaseBucketMetadataRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseBucketMetadata")
}) {
}
export class BucketFundingRef extends S.Class("BucketFundingRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketFunding")
}) {
}
export class BucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class CoverageRef extends S.Class("CoverageRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Coverage")
}) {
}
export class DeductibleRef extends S.Class("DeductibleRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deductible")
}) {
}
export class ClaimDeductibleRef extends S.Class("ClaimDeductibleRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ClaimDeductible")
}) {
}
export class FundingSourceAttributes extends S.Class("FundingSourceAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ClaimAttributesStatus extends S.Literal("CLOSED", "OPEN") {
}
export class PolicyTermRef extends S.Class("PolicyTermRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTerm")
}) {
}
export class CreateFundingAttributes extends S.Class("CreateFundingAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "isAllocated": S.optionalWith(S.Boolean, { nullable: true }),
    "allocatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "allocatedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAllocated": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class BucketFundingAttributes extends S.Class("BucketFundingAttributes")({
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ClaimTargetAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class PolicyTermAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class PolicyRef extends S.Class("PolicyRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Policy")
}) {
}
export class PolicyTemplateRef extends S.Class("PolicyTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTemplate")
}) {
}
export class CreateProviderAttributes extends S.Class("CreateProviderAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "offerings": S.optionalWith(S.Array(S.Literal("AID", "COVERAGE", "ITEM", "SERVICE")), { nullable: true })
}) {
}
export class DeductibleAttributes extends S.Class("DeductibleAttributes")({
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
    "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
    "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {
}
/**
* Is required if not set in .basis
*/
export class BucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class SubCoverageRef extends S.Class("SubCoverageRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverage")
}) {
}
export class CoverageTemplateRef extends S.Class("CoverageTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageTemplate")
}) {
}
export class CoverageGroupRef extends S.Class("CoverageGroupRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroup")
}) {
}
export class PerilRef extends S.Class("PerilRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Peril")
}) {
}
export class EndorsementRef extends S.Class("EndorsementRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Endorsement")
}) {
}
export class SubBucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class SubCoverageTemplateRef extends S.Class("SubCoverageTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverageTemplate")
}) {
}
export class CreateSubBucketAttributes extends S.Class("CreateSubBucketAttributes")({
    "limitAmount": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "entryCount": S.optionalWith(S.Number, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
    "name": S.optionalWith(S.String, { nullable: true })
}) {
}
export class BaseSubBucketMetadataRef extends S.Class("BaseSubBucketMetadataRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseSubBucketMetadata")
}) {
}
export class BaseBucketMetadataAttributes extends S.Class("BaseBucketMetadataAttributes")({
    "entryCount": S.optionalWith(S.Number, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true }),
    "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class EndorsementTemplateRef extends S.Class("EndorsementTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EndorsementTemplate")
}) {
}
export class CoverageGroupTemplateRef extends S.Class("CoverageGroupTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroupTemplate")
}) {
}
export class CreateEndorsementTemplateAttributesEffect extends S.Literal("ADJUSTMENT", "COVERAGE", "LOSS_SETTLEMENT_TYPE", "OTHER", "PERIL") {
}
export class CreateEndorsementTemplateAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class EndorsementAttributesEffect extends S.Literal("ADJUSTMENT", "COVERAGE", "LOSS_SETTLEMENT_TYPE", "OTHER", "PERIL") {
}
export class EndorsementAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class ClaimDeductibleAttributes extends S.Class("ClaimDeductibleAttributes")({
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
    "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreatePolicyAttributesStatus extends S.Literal("ACTIVE", "CANCELED", "EXPIRED", "PENDING_ACTIVATION", "PENDING_CANCELLATION", "RESCINDED", "UNVERIFIED") {
}
export class BaseSubBucketAttributes extends S.Class("BaseSubBucketAttributes")({
    "limitAmount": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "entryCount": S.optionalWith(S.Number, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class AppraisalLineAttributes extends S.Class("AppraisalLineAttributes")({
    "amount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class AppraisalAttributes extends S.Class("AppraisalAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.optionalWith(S.String, { nullable: true }),
    "lineCount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class DepreciationModifierRef extends S.Class("DepreciationModifierRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationModifier")
}) {
}
export class DepreciationOverrideRef extends S.Class("DepreciationOverrideRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationOverride")
}) {
}
export class AssetAttributeTypeItemTemplateRef extends S.Class("AssetAttributeTypeItemTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeTypeItemTemplate")
}) {
}
export class ItemTemplateRef extends S.Class("ItemTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemTemplate")
}) {
}
export class SpaceTypeItemTemplateRef extends S.Class("SpaceTypeItemTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceTypeItemTemplate")
}) {
}
export class SubmissionTrackTemplateRef extends S.Class("SubmissionTrackTemplateRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubmissionTrackTemplate")
}) {
}
export class AssetAttributeClassRef extends S.Class("AssetAttributeClassRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeClass")
}) {
}
export class AssetAttributeTypeRef extends S.Class("AssetAttributeTypeRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeType")
}) {
}
export class IncidentClassRef extends S.Class("IncidentClassRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentClass")
}) {
}
export class ItemCategoryRef extends S.Class("ItemCategoryRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemCategory")
}) {
}
export class ItemClassRef extends S.Class("ItemClassRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemClass")
}) {
}
export class ServiceCategoryRef extends S.Class("ServiceCategoryRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceCategory")
}) {
}
export class ServiceClassRef extends S.Class("ServiceClassRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceClass")
}) {
}
export class AccountInviteRef extends S.Class("AccountInviteRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountInvite")
}) {
}
export class AuthProfileRef extends S.Class("AuthProfileRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AuthProfile")
}) {
}
export class ProjectImpactRef extends S.Class("ProjectImpactRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectImpact")
}) {
}
export class IncidentImpactRef extends S.Class("IncidentImpactRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentImpact")
}) {
}
export class ItemMediaSuggestionRef extends S.Class("ItemMediaSuggestionRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemMediaSuggestion")
}) {
}
export class ItemProductSuggestionRef extends S.Class("ItemProductSuggestionRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemProductSuggestion")
}) {
}
export class ThirdPartyDwellingRef extends S.Class("ThirdPartyDwellingRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyDwelling")
}) {
}
export class ThirdPartyIndividualRef extends S.Class("ThirdPartyIndividualRef")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyIndividual")
}) {
}
export class InvoiceLineAttributes extends S.Class("InvoiceLineAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ItemInvoiceAttributesPurpose extends S.Literal("APPRAISAL", "BUILD", "INSPECTION", "MAINTENANCE", "MODIFICATION", "PURCHASE", "RELOCATION", "REMOVAL", "REPAIR", "SOURCING") {
}
export class ItemAttributesQuality extends S.Literal("BESPOKE", "BUDGET", "GENERIC", "LUXURY", "MAINSTREAM") {
}
export class ItemAttributesCondition extends S.Literal("AVERAGE", "EXCELLENT", "FAIR", "NEW", "POOR") {
}
export class CreateItemTypeAttributes extends S.Class("CreateItemTypeAttributes")({
    "lifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
    "monthlyDepreciationPercentage": S.optionalWith(S.Number, { nullable: true }),
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true })
}) {
}
export class CreateDepreciationModifierAttributesCondition extends S.Literal("AVERAGE", "EXCELLENT", "FAIR", "NEW", "POOR") {
}
export class CreateDepreciationModifierAttributesQuality extends S.Literal("BESPOKE", "BUDGET", "GENERIC", "LUXURY", "MAINSTREAM") {
}
export class CreateDepreciationScheduleAttributes extends S.Class("CreateDepreciationScheduleAttributes")({
    "lifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
    "monthlyDepreciationPercentage": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateDepreciationOverrideAttributes extends S.Class("CreateDepreciationOverrideAttributes")({
    "ageInMonths": S.optionalWith(S.Number, { nullable: true }),
    "valuePercentage": S.optionalWith(S.Number, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ItemPaymentAttributesPurpose extends S.Literal("APPRAISAL", "BUILD", "INSPECTION", "MAINTENANCE", "MODIFICATION", "PURCHASE", "RELOCATION", "REMOVAL", "REPAIR", "SOURCING") {
}
export class ServiceTaskAttributes extends S.Class("ServiceTaskAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
    "paymentCount": S.optionalWith(S.Number, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ItemChangeOrderAttributesPurpose extends S.Literal("APPRAISAL", "BUILD", "INSPECTION", "MAINTENANCE", "MODIFICATION", "PURCHASE", "RELOCATION", "REMOVAL", "REPAIR", "SOURCING") {
}
export class ItemEstimateAttributesPurpose extends S.Literal("APPRAISAL", "BUILD", "INSPECTION", "MAINTENANCE", "MODIFICATION", "PURCHASE", "RELOCATION", "REMOVAL", "REPAIR", "SOURCING") {
}
export class ChangeOrderLineAttributes extends S.Class("ChangeOrderLineAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class EstimateLineAttributes extends S.Class("EstimateLineAttributes")({
    "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
    "currentAmount": S.optionalWith(S.String, { nullable: true }),
    "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
    "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
    "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {
}
export class AssetAttributeTypeItemTemplateAttributes extends S.Class("AssetAttributeTypeItemTemplateAttributes")({
    "quantity": S.optionalWith(S.Number, { nullable: true }),
    "likelihood": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class AssetAttributeTypeAttributes extends S.Class("AssetAttributeTypeAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "question": S.optionalWith(S.String, { nullable: true }),
    "maxMagnitude": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class AssetAttributeClassAttributes extends S.Class("AssetAttributeClassAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "question": S.optionalWith(S.String, { nullable: true })
}) {
}
/**
* What level of permissions the user has for this account.
*/
export class AccountInviteAttributesRole extends S.Literal("COLLABORATOR", "MANAGER", "OWNER") {
}
export class AuthProfileAttributesProvider extends S.Literal("CLERK", "LOGTO", "TEST") {
}
export class CreateEntrySourceMediaAttributes extends S.Class("CreateEntrySourceMediaAttributes")({
    "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
    "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateIncidentImpactAttributesExtent extends S.Literal("PARTIAL", "TOTAL") {
}
export class ItemMediaSuggestionAttributesQuality extends S.Literal("BESPOKE", "BUDGET", "GENERIC", "LUXURY", "MAINSTREAM") {
}
export class ItemMediaSuggestionAttributesCondition extends S.Literal("AVERAGE", "EXCELLENT", "FAIR", "NEW", "POOR") {
}
export class ItemProductSuggestionAttributesSource extends S.Literal("AMAZON", "GOOGLE_SHOPPING") {
}
/**
* What level of permissions the user has for this account.
*/
export class UpdateUserAccountRoleAttributesRole extends S.Literal("COLLABORATOR", "MANAGER", "OWNER") {
}
export class HealthControllerInternalHealthCheck200 extends S.Struct({
    "status": S.optionalWith(S.String, { nullable: true }),
    "info": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "error": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "details": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {
}
export class CreateEmailAddressRef extends S.Class("CreateEmailAddressRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EmailAddress")
}) {
}
export class CreatePhoneNumberRef extends S.Class("CreatePhoneNumberRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PhoneNumber")
}) {
}
export class CreateAccountRef extends S.Class("CreateAccountRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Account")
}) {
}
export class CreateUserAccountRoleRef extends S.Class("CreateUserAccountRoleRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserAccountRole")
}) {
}
export class CreateEmailAddressAttributes extends S.Class("CreateEmailAddressAttributes")({
    "address": S.String,
    /**
  * Whether email address is verified.
  */
    "isVerified": S.optionalWith(S.Boolean, { nullable: true }),
    "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class CreateAccountProviderContactRef extends S.Class("CreateAccountProviderContactRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProviderContact")
}) {
}
export class CreateUserRef extends S.Class("CreateUserRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("User")
}) {
}
export class CreateAccountProviderRef extends S.Class("CreateAccountProviderRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProvider")
}) {
}
export class CreatePhoneNumberAttributes extends S.Class("CreatePhoneNumberAttributes")({
    "number": S.String,
    "isVerified": S.optionalWith(S.Boolean, { nullable: true }),
    "isPrimary": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class CreateProviderRef extends S.Class("CreateProviderRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Provider")
}) {
}
export class CreateAccountAttributes extends S.Class("CreateAccountAttributes")({
    /**
  * The name for the account
  */
    "name": S.String
}) {
}
export class CreateIncidentRef extends S.Class("CreateIncidentRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Incident")
}) {
}
export class CreateDwellingRef extends S.Class("CreateDwellingRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Dwelling")
}) {
}
export class CreateCurrencyRef extends S.Class("CreateCurrencyRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Currency")
}) {
}
export class CreateProjectMediaRef extends S.Class("CreateProjectMediaRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectMedia")
}) {
}
export class CreateIncidentAttributes extends S.Class("CreateIncidentAttributes")({
    "name": S.String,
    "description": S.optionalWith(S.String, { nullable: true }),
    "occurredDate": S.String,
    "isFemaDisaster": S.optionalWith(S.Boolean, { nullable: true }),
    "wasSomeoneInjured": S.optionalWith(S.Boolean, { nullable: true }),
    "isThereLiability": S.optionalWith(S.Boolean, { nullable: true })
}) {
}
export class CreateIncidentTypeRef extends S.Class("CreateIncidentTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentType")
}) {
}
export class CreateDisasterRef extends S.Class("CreateDisasterRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Disaster")
}) {
}
export class CreateMediaRef extends S.Class("CreateMediaRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Media")
}) {
}
export class CreateFileRef extends S.Class("CreateFileRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("File")
}) {
}
export class CreateSpaceRef extends S.Class("CreateSpaceRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Space")
}) {
}
export class CreateEntrySourceMediaRef extends S.Class("CreateEntrySourceMediaRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMedia")
}) {
}
export class CreateFileAttributesType extends S.Literal("AUDIO", "DOCUMENT", "IMAGE", "VIDEO") {
}
export class CreateFileProcessRef extends S.Class("CreateFileProcessRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FileProcess")
}) {
}
export class CreateChangeOrderRef extends S.Class("CreateChangeOrderRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ChangeOrder")
}) {
}
export class CreateEstimateRef extends S.Class("CreateEstimateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Estimate")
}) {
}
export class CreateInvoiceRef extends S.Class("CreateInvoiceRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Invoice")
}) {
}
export class CreatePaymentRef extends S.Class("CreatePaymentRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Payment")
}) {
}
export class CreateAssetAppraisalRef extends S.Class("CreateAssetAppraisalRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAppraisal")
}) {
}
export class CreateAppraisalRef extends S.Class("CreateAppraisalRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Appraisal")
}) {
}
export class CreateFundingRef extends S.Class("CreateFundingRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Funding")
}) {
}
export class CreateIncidentReportRef extends S.Class("CreateIncidentReportRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentReport")
}) {
}
export class CreatePoliceReportRef extends S.Class("CreatePoliceReportRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PoliceReport")
}) {
}
export class CreateParamedicReportRef extends S.Class("CreateParamedicReportRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ParamedicReport")
}) {
}
export class CreateContractRef extends S.Class("CreateContractRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Contract")
}) {
}
export class CreateRentRollRef extends S.Class("CreateRentRollRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("RentRoll")
}) {
}
export class CreatePermitRef extends S.Class("CreatePermitRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Permit")
}) {
}
export class CreateBlueprintRef extends S.Class("CreateBlueprintRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Blueprint")
}) {
}
export class CreateDeclarationsPageRef extends S.Class("CreateDeclarationsPageRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeclarationsPage")
}) {
}
export class CreatePolicyJacketRef extends S.Class("CreatePolicyJacketRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyJacket")
}) {
}
export class CreateScopeOfLossRef extends S.Class("CreateScopeOfLossRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ScopeOfLoss")
}) {
}
export class CreateDeliveryPaperworkRef extends S.Class("CreateDeliveryPaperworkRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeliveryPaperwork")
}) {
}
export class CreateProductSpecRef extends S.Class("CreateProductSpecRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProductSpec")
}) {
}
export class CreateUserManualRef extends S.Class("CreateUserManualRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserManual")
}) {
}
export class CreateWarrantyRef extends S.Class("CreateWarrantyRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Warranty")
}) {
}
export class CreateDeedRef extends S.Class("CreateDeedRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deed")
}) {
}
export class UpdateFileAttributesType extends S.Literal("AUDIO", "DOCUMENT", "IMAGE", "VIDEO") {
}
export class CreateAssetTypeRef extends S.Class("CreateAssetTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetType")
}) {
}
export class CreateAddressRef extends S.Class("CreateAddressRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Address")
}) {
}
export class CreateAssetAppraisalAttributes extends S.Class("CreateAssetAppraisalAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.String
}) {
}
export class CreateDocumentTypeRef extends S.Class("CreateDocumentTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentType")
}) {
}
export class CreateDocumentClassRef extends S.Class("CreateDocumentClassRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentClass")
}) {
}
export class CreateSpaceTypeRef extends S.Class("CreateSpaceTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceType")
}) {
}
export class CreateSpaceGroupRef extends S.Class("CreateSpaceGroupRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroup")
}) {
}
export class CreateSpaceClassRef extends S.Class("CreateSpaceClassRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceClass")
}) {
}
export class CreateSpaceGroupTypeRef extends S.Class("CreateSpaceGroupTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroupType")
}) {
}
export class CreateSpaceCategoryRef extends S.Class("CreateSpaceCategoryRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceCategory")
}) {
}
export class CreateBucketTypeRef extends S.Class("CreateBucketTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketType")
}) {
}
export class CreateBucketClassRef extends S.Class("CreateBucketClassRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketClass")
}) {
}
export class CreateAddressAttributes extends S.Class("CreateAddressAttributes")({
    "streetAddress": S.String,
    "streetAddress2": S.optionalWith(S.String, { nullable: true }),
    "city": S.String,
    "state": S.String,
    "postal": S.String
}) {
}
export class CreateCountryRef extends S.Class("CreateCountryRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Country")
}) {
}
export class CreateChangeOrderAttributes extends S.Class("CreateChangeOrderAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemizableFinancialDocumentStatsRef extends S.Class("CreateItemizableFinancialDocumentStatsRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemizableFinancialDocumentStats")
}) {
}
export class CreateServiceRef extends S.Class("CreateServiceRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Service")
}) {
}
export class CreateItemChangeOrderRef extends S.Class("CreateItemChangeOrderRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemChangeOrder")
}) {
}
export class CreateItemImpactChangeOrderRef extends S.Class("CreateItemImpactChangeOrderRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactChangeOrder")
}) {
}
export class CreateServiceTaskChangeOrderRef extends S.Class("CreateServiceTaskChangeOrderRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskChangeOrder")
}) {
}
export class CreateItemImpactRef extends S.Class("CreateItemImpactRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpact")
}) {
}
export class CreateItemRef extends S.Class("CreateItemRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Item")
}) {
}
export class CreateServiceTaskRef extends S.Class("CreateServiceTaskRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTask")
}) {
}
export class CreateThirdPartyImpactRef extends S.Class("CreateThirdPartyImpactRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyImpact")
}) {
}
export class CreateEstimateAttributes extends S.Class("CreateEstimateAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "isUserDoneItemizing": S.optionalWith(S.Boolean, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "currentAmount": S.optionalWith(S.Number, { nullable: true }),
    "currentSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "currentTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "currentFeeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemEstimateRef extends S.Class("CreateItemEstimateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemEstimate")
}) {
}
export class CreateItemImpactEstimateRef extends S.Class("CreateItemImpactEstimateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactEstimate")
}) {
}
export class CreateServiceTaskEstimateRef extends S.Class("CreateServiceTaskEstimateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskEstimate")
}) {
}
export class CreateServiceAttributes extends S.Class("CreateServiceAttributes")({
    "name": S.String,
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
    "paymentCount": S.optionalWith(S.Number, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "paidLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimatedLineItemsAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateEntrySourceMetadataRef extends S.Class("CreateEntrySourceMetadataRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMetadata")
}) {
}
export class CreateEntryRef extends S.Class("CreateEntryRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Entry")
}) {
}
export class CreateItemAppraisalRef extends S.Class("CreateItemAppraisalRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemAppraisal")
}) {
}
export class CreateServiceTypeRef extends S.Class("CreateServiceTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceType")
}) {
}
export class CreateItemPaymentRef extends S.Class("CreateItemPaymentRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemPayment")
}) {
}
export class CreateItemImpactPaymentRef extends S.Class("CreateItemImpactPaymentRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactPayment")
}) {
}
export class CreateServiceTaskPaymentRef extends S.Class("CreateServiceTaskPaymentRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskPayment")
}) {
}
export class CreateItemInvoiceRef extends S.Class("CreateItemInvoiceRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemInvoice")
}) {
}
export class CreateItemImpactInvoiceRef extends S.Class("CreateItemImpactInvoiceRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactInvoice")
}) {
}
export class CreateServiceTaskInvoiceRef extends S.Class("CreateServiceTaskInvoiceRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskInvoice")
}) {
}
export class CreateEntrySourceAttributes extends S.Class("CreateEntrySourceAttributes")({
    "name": S.String,
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemTypeRef extends S.Class("CreateItemTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemType")
}) {
}
export class CreateBucketRef extends S.Class("CreateBucketRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Bucket")
}) {
}
export class CreateSubBucketRef extends S.Class("CreateSubBucketRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubBucket")
}) {
}
export class CreateClaimRef extends S.Class("CreateClaimRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Claim")
}) {
}
export class CreateBaseBucketAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class CreateBaseBucketMetadataRef extends S.Class("CreateBaseBucketMetadataRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseBucketMetadata")
}) {
}
export class CreateBucketFundingRef extends S.Class("CreateBucketFundingRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketFunding")
}) {
}
export class CreateCoverageRef extends S.Class("CreateCoverageRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Coverage")
}) {
}
export class CreateDeductibleRef extends S.Class("CreateDeductibleRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deductible")
}) {
}
export class CreateClaimDeductibleRef extends S.Class("CreateClaimDeductibleRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ClaimDeductible")
}) {
}
export class CreateFundingSourceAttributes extends S.Class("CreateFundingSourceAttributes")({
    "name": S.String,
    "entryAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreatePolicyTermRef extends S.Class("CreatePolicyTermRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTerm")
}) {
}
export class CreateBucketFundingAttributes extends S.Class("CreateBucketFundingAttributes")({
    "amount": S.Number,
    "date": S.optionalWith(S.String, { nullable: true })
}) {
}
export class CreateClaimTargetAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class CreatePolicyTermAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class CreatePolicyRef extends S.Class("CreatePolicyRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Policy")
}) {
}
export class CreatePolicyTemplateRef extends S.Class("CreatePolicyTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTemplate")
}) {
}
export class CreateDeductibleAttributes extends S.Class("CreateDeductibleAttributes")({
    "amount": S.Number,
    "isDeductiblePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
    "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
    "accruedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "accruedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAccrued": S.optionalWith(S.Number, { nullable: true })
}) {
}
/**
* Is required if not set in .basis
*/
export class CreateBucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class CreateSubCoverageRef extends S.Class("CreateSubCoverageRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverage")
}) {
}
export class CreateCoverageTemplateRef extends S.Class("CreateCoverageTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageTemplate")
}) {
}
export class CreateCoverageGroupRef extends S.Class("CreateCoverageGroupRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroup")
}) {
}
export class CreatePerilRef extends S.Class("CreatePerilRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Peril")
}) {
}
export class CreateEndorsementRef extends S.Class("CreateEndorsementRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Endorsement")
}) {
}
export class CreateSubBucketDefinitionAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class CreateSubCoverageTemplateRef extends S.Class("CreateSubCoverageTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverageTemplate")
}) {
}
export class CreateBaseSubBucketMetadataRef extends S.Class("CreateBaseSubBucketMetadataRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseSubBucketMetadata")
}) {
}
export class CreateEndorsementTemplateRef extends S.Class("CreateEndorsementTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EndorsementTemplate")
}) {
}
export class CreateCoverageGroupTemplateRef extends S.Class("CreateCoverageGroupTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroupTemplate")
}) {
}
export class CreateEndorsementAttributesEffect extends S.Literal("ADJUSTMENT", "COVERAGE", "LOSS_SETTLEMENT_TYPE", "OTHER", "PERIL") {
}
export class CreateEndorsementAttributesLossSettlementType extends S.Literal("ACTUAL_CASH_VALUE", "AGREED_VALUE", "EXTENDED_REPLACEMENT_COST", "FUNCTIONAL_REPLACEMENT_COST", "GUARANTEED_REPLACEMENT_COST", "MARKET_VALUE", "REPLACEMENT_COST_VALUE", "STATED_AMOUNT") {
}
export class CreateBaseSubBucketAttributes extends S.Class("CreateBaseSubBucketAttributes")({
    "limitAmount": S.Number,
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "entryCount": S.optionalWith(S.Number, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateAppraisalAttributes extends S.Class("CreateAppraisalAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "amount": S.String,
    "lineCount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateDepreciationModifierRef extends S.Class("CreateDepreciationModifierRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationModifier")
}) {
}
export class CreateDepreciationOverrideRef extends S.Class("CreateDepreciationOverrideRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationOverride")
}) {
}
export class CreateAssetAttributeTypeItemTemplateRef extends S.Class("CreateAssetAttributeTypeItemTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeTypeItemTemplate")
}) {
}
export class CreateItemTemplateRef extends S.Class("CreateItemTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemTemplate")
}) {
}
export class CreateSpaceTypeItemTemplateRef extends S.Class("CreateSpaceTypeItemTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceTypeItemTemplate")
}) {
}
export class CreateSubmissionTrackTemplateRef extends S.Class("CreateSubmissionTrackTemplateRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubmissionTrackTemplate")
}) {
}
export class CreateAssetAttributeClassRef extends S.Class("CreateAssetAttributeClassRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeClass")
}) {
}
export class CreateAssetAttributeTypeRef extends S.Class("CreateAssetAttributeTypeRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeType")
}) {
}
export class CreateIncidentClassRef extends S.Class("CreateIncidentClassRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentClass")
}) {
}
export class CreateItemCategoryRef extends S.Class("CreateItemCategoryRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemCategory")
}) {
}
export class CreateItemClassRef extends S.Class("CreateItemClassRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemClass")
}) {
}
export class CreateServiceCategoryRef extends S.Class("CreateServiceCategoryRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceCategory")
}) {
}
export class CreateServiceClassRef extends S.Class("CreateServiceClassRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceClass")
}) {
}
export class CreateAccountInviteRef extends S.Class("CreateAccountInviteRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountInvite")
}) {
}
export class CreateAuthProfileRef extends S.Class("CreateAuthProfileRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AuthProfile")
}) {
}
export class CreateProjectImpactRef extends S.Class("CreateProjectImpactRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectImpact")
}) {
}
export class CreateIncidentImpactRef extends S.Class("CreateIncidentImpactRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentImpact")
}) {
}
export class CreateItemMediaSuggestionRef extends S.Class("CreateItemMediaSuggestionRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemMediaSuggestion")
}) {
}
export class CreateItemProductSuggestionRef extends S.Class("CreateItemProductSuggestionRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemProductSuggestion")
}) {
}
export class CreateThirdPartyDwellingRef extends S.Class("CreateThirdPartyDwellingRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyDwelling")
}) {
}
export class CreateThirdPartyIndividualRef extends S.Class("CreateThirdPartyIndividualRef")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyIndividual")
}) {
}
export class CreateBaseEntityData extends S.Class("CreateBaseEntityData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseEntity")
}) {
}
export class CreateInvoiceLineAttributes extends S.Class("CreateInvoiceLineAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemInvoiceAttributesPurpose extends S.Literal("APPRAISAL", "BUILD", "INSPECTION", "MAINTENANCE", "MODIFICATION", "PURCHASE", "RELOCATION", "REMOVAL", "REPAIR", "SOURCING") {
}
export class CreateItemAttributesQuality extends S.Literal("BESPOKE", "BUDGET", "GENERIC", "LUXURY", "MAINSTREAM") {
}
export class CreateItemAttributesCondition extends S.Literal("AVERAGE", "EXCELLENT", "FAIR", "NEW", "POOR") {
}
export class CreateItemPaymentAttributesPurpose extends S.Literal("APPRAISAL", "BUILD", "INSPECTION", "MAINTENANCE", "MODIFICATION", "PURCHASE", "RELOCATION", "REMOVAL", "REPAIR", "SOURCING") {
}
export class CreateServiceTaskAttributes extends S.Class("CreateServiceTaskAttributes")({
    "name": S.String,
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
    "paymentCount": S.optionalWith(S.Number, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemChangeOrderAttributesPurpose extends S.Literal("APPRAISAL", "BUILD", "INSPECTION", "MAINTENANCE", "MODIFICATION", "PURCHASE", "RELOCATION", "REMOVAL", "REPAIR", "SOURCING") {
}
export class CreateItemEstimateAttributesPurpose extends S.Literal("APPRAISAL", "BUILD", "INSPECTION", "MAINTENANCE", "MODIFICATION", "PURCHASE", "RELOCATION", "REMOVAL", "REPAIR", "SOURCING") {
}
export class CreateChangeOrderLineAttributes extends S.Class("CreateChangeOrderLineAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateEstimateLineAttributes extends S.Class("CreateEstimateLineAttributes")({
    "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
    "currentAmount": S.optionalWith(S.String, { nullable: true }),
    "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
    "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
    "currentFeeAmount": S.optionalWith(S.String, { nullable: true })
}) {
}
/**
* What level of permissions the user has for this account.
*/
export class CreateAccountInviteAttributesRole extends S.Literal("COLLABORATOR", "MANAGER", "OWNER") {
}
export class CreateAuthProfileAttributesProvider extends S.Literal("CLERK", "LOGTO", "TEST") {
}
export class CreateThirdPartyImpactAttributes extends S.Class("CreateThirdPartyImpactAttributes")({
    "name": S.String,
    "description": S.String,
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemMediaSuggestionAttributesQuality extends S.Literal("BESPOKE", "BUDGET", "GENERIC", "LUXURY", "MAINSTREAM") {
}
export class CreateItemMediaSuggestionAttributesCondition extends S.Literal("AVERAGE", "EXCELLENT", "FAIR", "NEW", "POOR") {
}
export class CreateItemProductSuggestionAttributesSource extends S.Literal("AMAZON", "GOOGLE_SHOPPING") {
}
/**
* What level of permissions the user has for this account.
*/
export class CreateUserAccountRoleAttributesRole extends S.Literal("COLLABORATOR", "MANAGER", "OWNER") {
}
export class UserControllerGetUserAccountRolesParams extends S.Struct({
    "include": S.optionalWith(S.String, { nullable: true }),
    "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "filter": S.optionalWith(S.String, { nullable: true }),
    "sort": S.optionalWith(S.String, { nullable: true }),
    "page[offset]": S.optionalWith(S.Number, { nullable: true }),
    "page[limit]": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ListLinkObject extends S.Class("ListLinkObject")({
    /**
  * Link to the current entity set.
  */
    "self": S.optionalWith(S.String, { nullable: true }),
    /**
  * Link to the next entity set, if available.
  */
    "next": S.optionalWith(S.String, { nullable: true }),
    /**
  * Link to the previous entity set, if available.
  */
    "prev": S.optionalWith(S.String, { nullable: true })
}) {
}
export class UserAccountRoleControllerGetUserAccountRoleListParams extends S.Struct({
    "include": S.optionalWith(S.String, { nullable: true }),
    "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "filter": S.optionalWith(S.String, { nullable: true }),
    "sort": S.optionalWith(S.String, { nullable: true }),
    "page[offset]": S.optionalWith(S.Number, { nullable: true }),
    "page[limit]": S.optionalWith(S.Number, { nullable: true }),
    "X-Account-Id": S.String
}) {
}
export class UserAccountRoleControllerCreateUserAccountRoleParams extends S.Struct({
    "include": S.optionalWith(S.String, { nullable: true }),
    "typeDepthLimit": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "fields": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
    "X-Account-Id": S.String
}) {
}
export class UserAccountRoleControllerDeleteUserAccountRoleByIdParams extends S.Struct({
    "X-Account-Id": S.String
}) {
}
export class EntityReference extends S.Class("EntityReference")({
    /**
  * UUID for the object
  */
    "id": S.String,
    /**
  * Object type
  */
    "type": S.String
}) {
}
/**
* The semantic type of file that is being uploaded.
*/
export class TransloaditAssemblyOptionsDtoType extends S.Literal("AVATAR", "FILE") {
}
export class TransloaditAssemblyAuth extends S.Class("TransloaditAssemblyAuth")({
    /**
  * Transloadit auth key
  */
    "key": S.String,
    /**
  * Expiration timestamp for the signed params (ISO 8601)
  */
    "expires": S.String
}) {
}
export class TransloaditStoreFileAssemblyFields extends S.Class("TransloaditStoreFileAssemblyFields")({
    /**
  * Account identifier
  */
    "accountId": S.String
}) {
}
export class TransloaditAvatarAssemblyFields extends S.Class("TransloaditAvatarAssemblyFields")({
    /**
  * User ID
  */
    "userId": S.String
}) {
}
export class UploadFilesDto extends S.Class("UploadFilesDto")({
    /**
  * An array of asset IDs that this file should belong to.
  */
    "assetIds": S.Array(S.String).pipe(S.propertySignature, S.withConstructorDefault(() => [])),
    /**
  * An array of project IDs that this file should belong to.
  */
    "projectIds": S.Array(S.String).pipe(S.propertySignature, S.withConstructorDefault(() => [])),
    /**
  * How many files should be initialized
  */
    "count": S.Number.pipe(S.propertySignature, S.withConstructorDefault(() => 1))
}) {
}
export class UploadFilesResponseDto extends S.Class("UploadFilesResponseDto")({
    /**
  * List of file IDs.
  */
    "ids": S.Array(S.String)
}) {
}
export class FilesCdnAccessDto extends S.Class("FilesCdnAccessDto")({
    /**
  * How long the ttl should be.
  */
    "ttlSeconds": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CdnResourceDto extends S.Class("CdnResourceDto")({
    /**
  * The resource path pattern this policy applies to
  */
    "resource": S.String,
    /**
  * Time-to-live in seconds for this signed policy
  */
    "ttl": S.Number,
    /**
  * When this resource policy expires (ISO 8601)
  */
    "expiresAt": S.String
}) {
}
/**
* HTTP action to sign for (GET for download, PUT for upload, HEAD for metadata).
*/
export class SignedUrlItemDtoAction extends S.Literal("GET", "HEAD", "PUT") {
}
/**
* Action for which this URL was issued
*/
export class SignedUrlResultDtoAction extends S.Literal("GET", "HEAD", "PUT") {
}
export class SignedUrlErrorDto extends S.Class("SignedUrlErrorDto")({
    /**
  * Error code describing the failure
  */
    "code": S.String,
    /**
  * Human-readable error message
  */
    "message": S.String
}) {
}
export class EntityMetadata extends S.Class("EntityMetadata")({
    /**
  * Object outlining any redacted fields, relative to expected
  */
    "redacted": S.optionalWith(RedactedData, { nullable: true })
}) {
}
export class ReferencedUpdateUser extends S.Class("ReferencedUpdateUser")({
    /**
  * Entity reference for User.
  */
    "data": UserRef
}) {
}
export class NullableReferencedUpdateUser extends S.Class("NullableReferencedUpdateUser")({
    /**
  * Nullable entity reference for User.
  */
    "data": S.NullOr(UserRef)
}) {
}
export class ReferencedUser extends S.Class("ReferencedUser")({
    /**
  * Entity reference for User.
  */
    "data": UserRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUser extends S.Class("NullableReferencedUser")({
    /**
  * Nullable entity reference for User.
  */
    "data": S.NullOr(UserRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedProjectList extends S.Class("ReferencedProjectList")({
    /**
  * A list of Project entity refs.
  */
    "data": S.Array(IncidentRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedProject extends S.Class("ReferencedProject")({
    /**
  * Entity reference for Project.
  */
    "data": IncidentRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedProject extends S.Class("NullableReferencedProject")({
    /**
  * Nullable entity reference for Project.
  */
    "data": S.NullOr(IncidentRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateProject extends S.Class("ReferencedUpdateProject")({
    /**
  * Entity reference for Project.
  */
    "data": IncidentRef
}) {
}
export class NullableReferencedUpdateProject extends S.Class("NullableReferencedUpdateProject")({
    /**
  * Nullable entity reference for Project.
  */
    "data": S.NullOr(IncidentRef)
}) {
}
export class ReferencedUpdateProjectList extends S.Class("ReferencedUpdateProjectList")({
    /**
  * A list of Project entity refs.
  */
    "data": S.Array(IncidentRef)
}) {
}
export class ReferencedAssetList extends S.Class("ReferencedAssetList")({
    /**
  * A list of Asset entity refs.
  */
    "data": S.Array(DwellingRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAsset extends S.Class("ReferencedAsset")({
    /**
  * Entity reference for Asset.
  */
    "data": DwellingRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedAsset extends S.Class("NullableReferencedAsset")({
    /**
  * Nullable entity reference for Asset.
  */
    "data": S.NullOr(DwellingRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateAsset extends S.Class("ReferencedUpdateAsset")({
    /**
  * Entity reference for Asset.
  */
    "data": DwellingRef
}) {
}
export class ReferencedUpdateAssetList extends S.Class("ReferencedUpdateAssetList")({
    /**
  * A list of Asset entity refs.
  */
    "data": S.Array(DwellingRef)
}) {
}
export class NullableReferencedUpdateAsset extends S.Class("NullableReferencedUpdateAsset")({
    /**
  * Nullable entity reference for Asset.
  */
    "data": S.NullOr(DwellingRef)
}) {
}
export class ReferencedUserAccountRoleList extends S.Class("ReferencedUserAccountRoleList")({
    /**
  * A list of UserAccountRole entity refs.
  */
    "data": S.Array(UserAccountRoleRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedCurrency extends S.Class("ReferencedCurrency")({
    /**
  * Entity reference for Currency.
  */
    "data": CurrencyRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateCurrency extends S.Class("ReferencedUpdateCurrency")({
    /**
  * Entity reference for Currency.
  */
    "data": CurrencyRef
}) {
}
export class NullableReferencedEmailAddress extends S.Class("NullableReferencedEmailAddress")({
    /**
  * Nullable entity reference for EmailAddress.
  */
    "data": S.NullOr(EmailAddressRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateEmailAddress extends S.Class("NullableReferencedUpdateEmailAddress")({
    /**
  * Nullable entity reference for EmailAddress.
  */
    "data": S.NullOr(EmailAddressRef)
}) {
}
export class NullableReferencedPhoneNumber extends S.Class("NullableReferencedPhoneNumber")({
    /**
  * Nullable entity reference for PhoneNumber.
  */
    "data": S.NullOr(PhoneNumberRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdatePhoneNumber extends S.Class("NullableReferencedUpdatePhoneNumber")({
    /**
  * Nullable entity reference for PhoneNumber.
  */
    "data": S.NullOr(PhoneNumberRef)
}) {
}
export class NullableReferencedAccount extends S.Class("NullableReferencedAccount")({
    /**
  * Nullable entity reference for Account.
  */
    "data": S.NullOr(AccountRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAccount extends S.Class("ReferencedAccount")({
    /**
  * Entity reference for Account.
  */
    "data": AccountRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateAccount extends S.Class("NullableReferencedUpdateAccount")({
    /**
  * Nullable entity reference for Account.
  */
    "data": S.NullOr(AccountRef)
}) {
}
export class ReferencedUpdateAccount extends S.Class("ReferencedUpdateAccount")({
    /**
  * Entity reference for Account.
  */
    "data": AccountRef
}) {
}
export class ReferencedIdentity extends S.Class("ReferencedIdentity")({
    /**
  * Entity reference for Identity.
  */
    "data": S.Union(AccountProviderContactRef, UserRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAccountProviderContactList extends S.Class("ReferencedAccountProviderContactList")({
    /**
  * A list of AccountProviderContact entity refs.
  */
    "data": S.Array(AccountProviderContactRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateIdentity extends S.Class("ReferencedUpdateIdentity")({
    /**
  * Entity reference for Identity.
  */
    "data": S.Union(AccountProviderContactRef, UserRef)
}) {
}
export class ReferencedUpdateAccountProviderContactList extends S.Class("ReferencedUpdateAccountProviderContactList")({
    /**
  * A list of AccountProviderContact entity refs.
  */
    "data": S.Array(AccountProviderContactRef)
}) {
}
export class ReferencedAccountProvider extends S.Class("ReferencedAccountProvider")({
    /**
  * Entity reference for AccountProvider.
  */
    "data": AccountProviderRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedAccountProvider extends S.Class("NullableReferencedAccountProvider")({
    /**
  * Nullable entity reference for AccountProvider.
  */
    "data": S.NullOr(AccountProviderRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateAccountProvider extends S.Class("ReferencedUpdateAccountProvider")({
    /**
  * Entity reference for AccountProvider.
  */
    "data": AccountProviderRef
}) {
}
export class NullableReferencedUpdateAccountProvider extends S.Class("NullableReferencedUpdateAccountProvider")({
    /**
  * Nullable entity reference for AccountProvider.
  */
    "data": S.NullOr(AccountProviderRef)
}) {
}
export class NullableReferencedProvider extends S.Class("NullableReferencedProvider")({
    /**
  * Nullable entity reference for Provider.
  */
    "data": S.NullOr(ProviderRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedProvider extends S.Class("ReferencedProvider")({
    /**
  * Entity reference for Provider.
  */
    "data": ProviderRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateProvider extends S.Class("ReferencedUpdateProvider")({
    /**
  * Entity reference for Provider.
  */
    "data": ProviderRef
}) {
}
export class NullableReferencedUpdateProvider extends S.Class("NullableReferencedUpdateProvider")({
    /**
  * Nullable entity reference for Provider.
  */
    "data": S.NullOr(ProviderRef)
}) {
}
export class ReferencedProjectMediaList extends S.Class("ReferencedProjectMediaList")({
    /**
  * A list of ProjectMedia entity refs.
  */
    "data": S.Array(ProjectMediaRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateProjectMediaList extends S.Class("ReferencedUpdateProjectMediaList")({
    /**
  * A list of ProjectMedia entity refs.
  */
    "data": S.Array(ProjectMediaRef)
}) {
}
export class ReferencedIncidentType extends S.Class("ReferencedIncidentType")({
    /**
  * Entity reference for IncidentType.
  */
    "data": IncidentTypeRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedIncidentTypeList extends S.Class("ReferencedIncidentTypeList")({
    /**
  * A list of IncidentType entity refs.
  */
    "data": S.Array(IncidentTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateIncidentType extends S.Class("ReferencedUpdateIncidentType")({
    /**
  * Entity reference for IncidentType.
  */
    "data": IncidentTypeRef
}) {
}
export class NullableReferencedDisaster extends S.Class("NullableReferencedDisaster")({
    /**
  * Nullable entity reference for Disaster.
  */
    "data": S.NullOr(DisasterRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateDisaster extends S.Class("NullableReferencedUpdateDisaster")({
    /**
  * Nullable entity reference for Disaster.
  */
    "data": S.NullOr(DisasterRef)
}) {
}
export class CreateProjectMediaAttributes extends S.Class("CreateProjectMediaAttributes")({
    "stage": S.optionalWith(CreateProjectMediaAttributesStage, { nullable: true })
}) {
}
export class ReferencedMedia extends S.Class("ReferencedMedia")({
    /**
  * Entity reference for Media.
  */
    "data": MediaRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedMediaList extends S.Class("ReferencedMediaList")({
    /**
  * A list of Media entity refs.
  */
    "data": S.Array(MediaRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateMedia extends S.Class("ReferencedUpdateMedia")({
    /**
  * Entity reference for Media.
  */
    "data": MediaRef
}) {
}
export class CreateMediaAttributes extends S.Class("CreateMediaAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "note": S.optionalWith(S.String, { nullable: true }),
    "subjectState": S.optionalWith(CreateMediaAttributesSubjectState, { nullable: true }),
    "isCurrent": S.optionalWith(S.Boolean, { nullable: true, default: () => true })
}) {
}
export class ReferencedFile extends S.Class("ReferencedFile")({
    /**
  * Entity reference for File.
  */
    "data": FileRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedFile extends S.Class("NullableReferencedFile")({
    /**
  * Nullable entity reference for File.
  */
    "data": S.NullOr(FileRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateFile extends S.Class("ReferencedUpdateFile")({
    /**
  * Entity reference for File.
  */
    "data": FileRef
}) {
}
export class NullableReferencedUpdateFile extends S.Class("NullableReferencedUpdateFile")({
    /**
  * Nullable entity reference for File.
  */
    "data": S.NullOr(FileRef)
}) {
}
export class ReferencedSpaceList extends S.Class("ReferencedSpaceList")({
    /**
  * A list of Space entity refs.
  */
    "data": S.Array(SpaceRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedSpace extends S.Class("NullableReferencedSpace")({
    /**
  * Nullable entity reference for Space.
  */
    "data": S.NullOr(SpaceRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateSpaceList extends S.Class("ReferencedUpdateSpaceList")({
    /**
  * A list of Space entity refs.
  */
    "data": S.Array(SpaceRef)
}) {
}
export class NullableReferencedUpdateSpace extends S.Class("NullableReferencedUpdateSpace")({
    /**
  * Nullable entity reference for Space.
  */
    "data": S.NullOr(SpaceRef)
}) {
}
export class ReferencedEntrySourceMediaList extends S.Class("ReferencedEntrySourceMediaList")({
    /**
  * A list of EntrySourceMedia entity refs.
  */
    "data": S.Array(EntrySourceMediaRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class FileAttributes extends S.Class("FileAttributes")({
    /**
  * The storage provider for this file.
  */
    "storageProvider": S.optionalWith(S.Literal("LOTI_S3"), { nullable: true }),
    "originalKey": S.optionalWith(S.String, { nullable: true }),
    "originalUrl": S.optionalWith(S.String, { nullable: true }),
    "presentationKey": S.optionalWith(S.String, { nullable: true }),
    "presentationUrl": S.optionalWith(S.String, { nullable: true }),
    "thumbnailKey": S.optionalWith(S.String, { nullable: true }),
    "thumbnailUrl": S.optionalWith(S.String, { nullable: true }),
    "type": S.optionalWith(FileAttributesType, { nullable: true }),
    "filename": S.optionalWith(S.String, { nullable: true }),
    "extension": S.optionalWith(S.String, { nullable: true }),
    "width": S.optionalWith(S.Number, { nullable: true }),
    "height": S.optionalWith(S.Number, { nullable: true }),
    "size": S.optionalWith(S.Number, { nullable: true }),
    "blurhash": S.optionalWith(S.String, { nullable: true }),
    "durationMs": S.optionalWith(S.Number, { nullable: true }),
    "pageCount": S.optionalWith(S.Number, { nullable: true }),
    "createdAt": S.optionalWith(S.String, { nullable: true }),
    "modifiedAt": S.optionalWith(S.String, { nullable: true }),
    "mediaCount": S.optionalWith(S.Number, { nullable: true }),
    "documentCount": S.optionalWith(S.Number, { nullable: true }),
    "addedAt": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ReferencedFileProcessList extends S.Class("ReferencedFileProcessList")({
    /**
  * A list of FileProcess entity refs.
  */
    "data": S.Array(FileProcessRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedChangeOrderList extends S.Class("ReferencedChangeOrderList")({
    /**
  * A list of ChangeOrder entity refs.
  */
    "data": S.Array(ChangeOrderRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedChangeOrder extends S.Class("ReferencedChangeOrder")({
    /**
  * Entity reference for ChangeOrder.
  */
    "data": ChangeOrderRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateChangeOrder extends S.Class("ReferencedUpdateChangeOrder")({
    /**
  * Entity reference for ChangeOrder.
  */
    "data": ChangeOrderRef
}) {
}
export class ReferencedEstimate extends S.Class("ReferencedEstimate")({
    /**
  * Entity reference for Estimate.
  */
    "data": EstimateRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedEstimateList extends S.Class("ReferencedEstimateList")({
    /**
  * A list of Estimate entity refs.
  */
    "data": S.Array(EstimateRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedEstimate extends S.Class("NullableReferencedEstimate")({
    /**
  * Nullable entity reference for Estimate.
  */
    "data": S.NullOr(EstimateRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateEstimate extends S.Class("ReferencedUpdateEstimate")({
    /**
  * Entity reference for Estimate.
  */
    "data": EstimateRef
}) {
}
export class NullableReferencedUpdateEstimate extends S.Class("NullableReferencedUpdateEstimate")({
    /**
  * Nullable entity reference for Estimate.
  */
    "data": S.NullOr(EstimateRef)
}) {
}
export class ReferencedInvoiceList extends S.Class("ReferencedInvoiceList")({
    /**
  * A list of Invoice entity refs.
  */
    "data": S.Array(InvoiceRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedInvoice extends S.Class("NullableReferencedInvoice")({
    /**
  * Nullable entity reference for Invoice.
  */
    "data": S.NullOr(InvoiceRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateInvoice extends S.Class("NullableReferencedUpdateInvoice")({
    /**
  * Nullable entity reference for Invoice.
  */
    "data": S.NullOr(InvoiceRef)
}) {
}
export class ReferencedItemizableFinancialDocument extends S.Class("ReferencedItemizableFinancialDocument")({
    /**
  * Entity reference for ItemizableFinancialDocument.
  */
    "data": S.Union(ChangeOrderRef, EstimateRef, InvoiceRef, PaymentRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedPaymentList extends S.Class("ReferencedPaymentList")({
    /**
  * A list of Payment entity refs.
  */
    "data": S.Array(PaymentRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedPayment extends S.Class("NullableReferencedPayment")({
    /**
  * Nullable entity reference for Payment.
  */
    "data": S.NullOr(PaymentRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdatePayment extends S.Class("NullableReferencedUpdatePayment")({
    /**
  * Nullable entity reference for Payment.
  */
    "data": S.NullOr(PaymentRef)
}) {
}
export class ReferencedAssetAppraisalList extends S.Class("ReferencedAssetAppraisalList")({
    /**
  * A list of AssetAppraisal entity refs.
  */
    "data": S.Array(AssetAppraisalRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedAssetAppraisal extends S.Class("NullableReferencedAssetAppraisal")({
    /**
  * Nullable entity reference for AssetAppraisal.
  */
    "data": S.NullOr(AssetAppraisalRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateAssetAppraisal extends S.Class("NullableReferencedUpdateAssetAppraisal")({
    /**
  * Nullable entity reference for AssetAppraisal.
  */
    "data": S.NullOr(AssetAppraisalRef)
}) {
}
export class ReferencedAppraisal extends S.Class("ReferencedAppraisal")({
    /**
  * Entity reference for Appraisal.
  */
    "data": AppraisalRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateAppraisal extends S.Class("ReferencedUpdateAppraisal")({
    /**
  * Entity reference for Appraisal.
  */
    "data": AppraisalRef
}) {
}
export class ReferencedFundingList extends S.Class("ReferencedFundingList")({
    /**
  * A list of Funding entity refs.
  */
    "data": S.Array(FundingRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedFunding extends S.Class("ReferencedFunding")({
    /**
  * Entity reference for Funding.
  */
    "data": FundingRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateFunding extends S.Class("ReferencedUpdateFunding")({
    /**
  * Entity reference for Funding.
  */
    "data": FundingRef
}) {
}
export class ReferencedDocumentList extends S.Class("ReferencedDocumentList")({
    /**
  * A list of Document entity refs.
  */
    "data": S.Array(S.Union(ChangeOrderRef, EstimateRef, InvoiceRef, PaymentRef, AssetAppraisalRef, AppraisalRef, FundingRef, IncidentReportRef, PoliceReportRef, ParamedicReportRef, ContractRef, RentRollRef, PermitRef, BlueprintRef, DeclarationsPageRef, PolicyJacketRef, ScopeOfLossRef, DeliveryPaperworkRef, ProductSpecRef, UserManualRef, WarrantyRef, DeedRef)),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAssetType extends S.Class("ReferencedAssetType")({
    /**
  * Entity reference for AssetType.
  */
    "data": AssetTypeRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAssetTypeList extends S.Class("ReferencedAssetTypeList")({
    /**
  * A list of AssetType entity refs.
  */
    "data": S.Array(AssetTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateAssetType extends S.Class("ReferencedUpdateAssetType")({
    /**
  * Entity reference for AssetType.
  */
    "data": AssetTypeRef
}) {
}
export class ReferencedAddress extends S.Class("ReferencedAddress")({
    /**
  * Entity reference for Address.
  */
    "data": AddressRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateAddress extends S.Class("ReferencedUpdateAddress")({
    /**
  * Entity reference for Address.
  */
    "data": AddressRef
}) {
}
export class CreateAssetTypeData extends S.Class("CreateAssetTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetType"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true })
}) {
}
export class ReferencedDocumentType extends S.Class("ReferencedDocumentType")({
    /**
  * Entity reference for DocumentType.
  */
    "data": DocumentTypeRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedDocumentTypeList extends S.Class("ReferencedDocumentTypeList")({
    /**
  * A list of DocumentType entity refs.
  */
    "data": S.Array(DocumentTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedDocumentClassList extends S.Class("ReferencedDocumentClassList")({
    /**
  * A list of DocumentClass entity refs.
  */
    "data": S.Array(DocumentClassRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class CreateSpaceAttributes extends S.Class("CreateSpaceAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "use": S.optionalWith(CreateSpaceAttributesUse, { nullable: true })
}) {
}
export class ReferencedSpaceType extends S.Class("ReferencedSpaceType")({
    /**
  * Entity reference for SpaceType.
  */
    "data": SpaceTypeRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedSpaceTypeList extends S.Class("ReferencedSpaceTypeList")({
    /**
  * A list of SpaceType entity refs.
  */
    "data": S.Array(SpaceTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateSpaceType extends S.Class("ReferencedUpdateSpaceType")({
    /**
  * Entity reference for SpaceType.
  */
    "data": SpaceTypeRef
}) {
}
export class ReferencedSpaceGroup extends S.Class("ReferencedSpaceGroup")({
    /**
  * Entity reference for SpaceGroup.
  */
    "data": SpaceGroupRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateSpaceGroup extends S.Class("ReferencedUpdateSpaceGroup")({
    /**
  * Entity reference for SpaceGroup.
  */
    "data": SpaceGroupRef
}) {
}
export class ReferencedSpaceClassList extends S.Class("ReferencedSpaceClassList")({
    /**
  * A list of SpaceClass entity refs.
  */
    "data": S.Array(SpaceClassRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedSpaceGroupTypeList extends S.Class("ReferencedSpaceGroupTypeList")({
    /**
  * A list of SpaceGroupType entity refs.
  */
    "data": S.Array(SpaceGroupTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedSpaceCategoryList extends S.Class("ReferencedSpaceCategoryList")({
    /**
  * A list of SpaceCategory entity refs.
  */
    "data": S.Array(SpaceCategoryRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedBucketTypeList extends S.Class("ReferencedBucketTypeList")({
    /**
  * A list of BucketType entity refs.
  */
    "data": S.Array(BucketTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedBucketType extends S.Class("NullableReferencedBucketType")({
    /**
  * Nullable entity reference for BucketType.
  */
    "data": S.NullOr(BucketTypeRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedBucketType extends S.Class("ReferencedBucketType")({
    /**
  * Entity reference for BucketType.
  */
    "data": BucketTypeRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateBucketType extends S.Class("NullableReferencedUpdateBucketType")({
    /**
  * Nullable entity reference for BucketType.
  */
    "data": S.NullOr(BucketTypeRef)
}) {
}
export class ReferencedBucketClassList extends S.Class("ReferencedBucketClassList")({
    /**
  * A list of BucketClass entity refs.
  */
    "data": S.Array(BucketClassRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class CreateCurrencyData extends S.Class("CreateCurrencyData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Currency"),
    "attributes": S.optionalWith(CreateCurrencyAttributes, { nullable: true })
}) {
}
export class ReferencedCountry extends S.Class("ReferencedCountry")({
    /**
  * Entity reference for Country.
  */
    "data": CountryRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateCountry extends S.Class("ReferencedUpdateCountry")({
    /**
  * Entity reference for Country.
  */
    "data": CountryRef
}) {
}
export class CreateCountryData extends S.Class("CreateCountryData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Country"),
    "attributes": S.optionalWith(CountryAttributes, { nullable: true })
}) {
}
export class CreateFileProcessAttributes extends S.Class("CreateFileProcessAttributes")({
    "processId": S.optionalWith(S.String, { nullable: true }),
    "provider": S.optionalWith(S.Literal("TRANSLOADIT"), { nullable: true }),
    "type": S.optionalWith(CreateFileProcessAttributesType, { nullable: true }),
    "status": S.optionalWith(CreateFileProcessAttributesStatus, { nullable: true }),
    "startedAt": S.optionalWith(S.String, { nullable: true }),
    "endedAt": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ReferencedItemizableFinancialDocumentStats extends S.Class("ReferencedItemizableFinancialDocumentStats")({
    /**
  * Entity reference for ItemizableFinancialDocumentStats.
  */
    "data": ItemizableFinancialDocumentStatsRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedService extends S.Class("ReferencedService")({
    /**
  * Entity reference for Service.
  */
    "data": ServiceRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedService extends S.Class("NullableReferencedService")({
    /**
  * Nullable entity reference for Service.
  */
    "data": S.NullOr(ServiceRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateService extends S.Class("ReferencedUpdateService")({
    /**
  * Entity reference for Service.
  */
    "data": ServiceRef
}) {
}
export class NullableReferencedUpdateService extends S.Class("NullableReferencedUpdateService")({
    /**
  * Nullable entity reference for Service.
  */
    "data": S.NullOr(ServiceRef)
}) {
}
export class ReferencedChangeOrderLineList extends S.Class("ReferencedChangeOrderLineList")({
    /**
  * A list of ChangeOrderLine entity refs.
  */
    "data": S.Array(S.Union(ItemChangeOrderRef, ItemImpactChangeOrderRef, ServiceTaskChangeOrderRef)),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateChangeOrderLineList extends S.Class("ReferencedUpdateChangeOrderLineList")({
    /**
  * A list of ChangeOrderLine entity refs.
  */
    "data": S.Array(S.Union(ItemChangeOrderRef, ItemImpactChangeOrderRef, ServiceTaskChangeOrderRef))
}) {
}
export class NullableReferencedItemImpact extends S.Class("NullableReferencedItemImpact")({
    /**
  * Nullable entity reference for ItemImpact.
  */
    "data": S.NullOr(ItemImpactRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemImpactList extends S.Class("ReferencedItemImpactList")({
    /**
  * A list of ItemImpact entity refs.
  */
    "data": S.Array(ItemImpactRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemImpact extends S.Class("ReferencedItemImpact")({
    /**
  * Entity reference for ItemImpact.
  */
    "data": ItemImpactRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItem extends S.Class("ReferencedItem")({
    /**
  * Entity reference for Item.
  */
    "data": ItemRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedItem extends S.Class("NullableReferencedItem")({
    /**
  * Nullable entity reference for Item.
  */
    "data": S.NullOr(ItemRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemList extends S.Class("ReferencedItemList")({
    /**
  * A list of Item entity refs.
  */
    "data": S.Array(ItemRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateItem extends S.Class("ReferencedUpdateItem")({
    /**
  * Entity reference for Item.
  */
    "data": ItemRef
}) {
}
export class NullableReferencedUpdateItem extends S.Class("NullableReferencedUpdateItem")({
    /**
  * Nullable entity reference for Item.
  */
    "data": S.NullOr(ItemRef)
}) {
}
export class ReferencedUpdateItemList extends S.Class("ReferencedUpdateItemList")({
    /**
  * A list of Item entity refs.
  */
    "data": S.Array(ItemRef)
}) {
}
export class ReferencedServiceTask extends S.Class("ReferencedServiceTask")({
    /**
  * Entity reference for ServiceTask.
  */
    "data": ServiceTaskRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedEntrySourceList extends S.Class("ReferencedEntrySourceList")({
    /**
  * A list of EntrySource entity refs.
  */
    "data": S.Array(S.Union(ItemImpactRef, ItemRef, ServiceTaskRef, ServiceRef, ThirdPartyImpactRef)),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedEntrySource extends S.Class("ReferencedEntrySource")({
    /**
  * Entity reference for EntrySource.
  */
    "data": S.Union(ItemImpactRef, ItemRef, ServiceTaskRef, ServiceRef, ThirdPartyImpactRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateEntrySource extends S.Class("ReferencedUpdateEntrySource")({
    /**
  * Entity reference for EntrySource.
  */
    "data": S.Union(ItemImpactRef, ItemRef, ServiceTaskRef, ServiceRef, ThirdPartyImpactRef)
}) {
}
export class ReferencedItemEstimate extends S.Class("ReferencedItemEstimate")({
    /**
  * Entity reference for ItemEstimate.
  */
    "data": ItemEstimateRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemImpactEstimate extends S.Class("ReferencedItemImpactEstimate")({
    /**
  * Entity reference for ItemImpactEstimate.
  */
    "data": ItemImpactEstimateRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedEstimateLineList extends S.Class("ReferencedEstimateLineList")({
    /**
  * A list of EstimateLine entity refs.
  */
    "data": S.Array(S.Union(ItemEstimateRef, ItemImpactEstimateRef, ServiceTaskEstimateRef)),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedEstimateLine extends S.Class("ReferencedEstimateLine")({
    /**
  * Entity reference for EstimateLine.
  */
    "data": S.Union(ItemEstimateRef, ItemImpactEstimateRef, ServiceTaskEstimateRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedServiceTaskEstimate extends S.Class("ReferencedServiceTaskEstimate")({
    /**
  * Entity reference for ServiceTaskEstimate.
  */
    "data": ServiceTaskEstimateRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateEstimateLine extends S.Class("ReferencedUpdateEstimateLine")({
    /**
  * Entity reference for EstimateLine.
  */
    "data": S.Union(ItemEstimateRef, ItemImpactEstimateRef, ServiceTaskEstimateRef)
}) {
}
export class ReferencedEntrySourceMetadata extends S.Class("ReferencedEntrySourceMetadata")({
    /**
  * Entity reference for EntrySourceMetadata.
  */
    "data": EntrySourceMetadataRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedEntryList extends S.Class("ReferencedEntryList")({
    /**
  * A list of Entry entity refs.
  */
    "data": S.Array(EntryRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemAppraisalList extends S.Class("ReferencedItemAppraisalList")({
    /**
  * A list of ItemAppraisal entity refs.
  */
    "data": S.Array(ItemAppraisalRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedItemAppraisal extends S.Class("NullableReferencedItemAppraisal")({
    /**
  * Nullable entity reference for ItemAppraisal.
  */
    "data": S.NullOr(ItemAppraisalRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAppraisalLineList extends S.Class("ReferencedAppraisalLineList")({
    /**
  * A list of AppraisalLine entity refs.
  */
    "data": S.Array(ItemAppraisalRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateItemAppraisal extends S.Class("NullableReferencedUpdateItemAppraisal")({
    /**
  * Nullable entity reference for ItemAppraisal.
  */
    "data": S.NullOr(ItemAppraisalRef)
}) {
}
export class NullableReferencedServiceType extends S.Class("NullableReferencedServiceType")({
    /**
  * Nullable entity reference for ServiceType.
  */
    "data": S.NullOr(ServiceTypeRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedServiceTypeList extends S.Class("ReferencedServiceTypeList")({
    /**
  * A list of ServiceType entity refs.
  */
    "data": S.Array(ServiceTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateServiceType extends S.Class("NullableReferencedUpdateServiceType")({
    /**
  * Nullable entity reference for ServiceType.
  */
    "data": S.NullOr(ServiceTypeRef)
}) {
}
export class ReferencedPaymentLineList extends S.Class("ReferencedPaymentLineList")({
    /**
  * A list of PaymentLine entity refs.
  */
    "data": S.Array(S.Union(ItemPaymentRef, ItemImpactPaymentRef, ServiceTaskPaymentRef)),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedInvoiceLineList extends S.Class("ReferencedInvoiceLineList")({
    /**
  * A list of InvoiceLine entity refs.
  */
    "data": S.Array(S.Union(ItemInvoiceRef, ItemImpactInvoiceRef, ServiceTaskInvoiceRef)),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class CreateEntrySourceMetadataAttributes extends S.Class("CreateEntrySourceMetadataAttributes")({
    "entrySourceType": S.optionalWith(CreateEntrySourceMetadataAttributesEntrySourceType, { nullable: true }),
    "assignedEntryCount": S.optionalWith(S.Number, { nullable: true }),
    "assignedEntryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedEntryProjectedAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemImpactAttributes extends S.Class("CreateItemImpactAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Struct({
        "item.type": S.optionalWith(S.Boolean, { nullable: true }),
        "impactDate": S.optionalWith(S.Boolean, { nullable: true }),
        "item.quality": S.optionalWith(S.Boolean, { nullable: true }),
        "item.acquiredDate": S.optionalWith(S.Boolean, { nullable: true }),
        "conditionAtImpact": S.optionalWith(S.Boolean, { nullable: true })
    }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
    "isExactReplacement": S.optionalWith(S.Boolean, { nullable: true }),
    "impactDate": S.optionalWith(S.String, { nullable: true }),
    "isLost": S.optionalWith(S.Boolean, { nullable: true }),
    "conditionAtImpact": S.optionalWith(CreateItemImpactAttributesConditionAtImpact, { nullable: true }),
    "quantity": S.optionalWith(S.Number, { nullable: true }),
    "paymentCount": S.optionalWith(S.Number, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "replacementPaidAmount": S.optionalWith(S.Number, { nullable: true }),
    "replacementInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "replacementEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "itemDepreciableAmount": S.optionalWith(S.Number, { nullable: true }),
    "itemAppraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "itemRcvAmount": S.optionalWith(S.Number, { nullable: true }),
    "customDepreciationLifespanInMonths": S.optionalWith(S.Number, { nullable: true, default: () => -1 }),
    "customDepreciationAccelerationFactor": S.optionalWith(S.Number, { nullable: true, default: () => -1 }),
    "customDepreciationMinimumValuePercentage": S.optionalWith(S.Number, { nullable: true, default: () => -1 }),
    "customDepreciationOverrideAgeInMonths": S.optionalWith(S.Number, { nullable: true, default: () => -1 }),
    "customDepreciationOverrideValuePercentage": S.optionalWith(S.Number, { nullable: true, default: () => -1 }),
    "customDepreciationOverrideDescription": S.optionalWith(S.String, { nullable: true }),
    "isDepreciationCustom": S.optionalWith(S.Boolean, { nullable: true }),
    "customDepreciationFieldsSetBySystem": S.optionalWith(S.Array(S.String), { nullable: true }),
    "itemQuality": S.optionalWith(CreateItemImpactAttributesItemQuality, { nullable: true }),
    "itemAcquiredDate": S.optionalWith(S.String, { nullable: true }),
    "itemAcquiredQuantity": S.optionalWith(S.Number, { nullable: true }),
    "itemIsDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
    "depreciationLifespanInMonths": S.optionalWith(S.Number, { nullable: true }),
    "depreciationMinimumValuePercentage": S.optionalWith(S.Number, { nullable: true }),
    "depreciationAccelerationFactor": S.optionalWith(S.Number, { nullable: true }),
    "monthlyDepreciationRate": S.optionalWith(S.Number, { nullable: true }),
    "ageInMonths": S.optionalWith(S.Number, { nullable: true }),
    "depreciationOverrideAgeInMonths": S.optionalWith(S.Number, { nullable: true }),
    "depreciationOverrideValuePercentage": S.optionalWith(S.Number, { nullable: true }),
    "rcvAmount": S.optionalWith(S.Number, { nullable: true }),
    "acvAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableProjectedRcvAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableIncurredRcvAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableProjectedAcvAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableIncurredAcvAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class NullableReferencedItemType extends S.Class("NullableReferencedItemType")({
    /**
  * Nullable entity reference for ItemType.
  */
    "data": S.NullOr(ItemTypeRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedDepreciationSchedule extends S.Class("ReferencedDepreciationSchedule")({
    /**
  * Entity reference for DepreciationSchedule.
  */
    "data": ItemTypeRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemTypeList extends S.Class("ReferencedItemTypeList")({
    /**
  * A list of ItemType entity refs.
  */
    "data": S.Array(ItemTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemType extends S.Class("ReferencedItemType")({
    /**
  * Entity reference for ItemType.
  */
    "data": ItemTypeRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateItemType extends S.Class("NullableReferencedUpdateItemType")({
    /**
  * Nullable entity reference for ItemType.
  */
    "data": S.NullOr(ItemTypeRef)
}) {
}
export class CreateEntryAttributes extends S.Class("CreateEntryAttributes")({
    "lossSettlementType": S.optionalWith(CreateEntryAttributesLossSettlementType, { nullable: true }),
    "incurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "projectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "overriddenIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "overriddenProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "approvedAmount": S.optionalWith(S.Number, { nullable: true }),
    "isResolved": S.optionalWith(S.Boolean, { nullable: true }),
    "number": S.optionalWith(S.Number, { nullable: true }),
    "targetAssignmentPercentage": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "submissionStatus": S.optionalWith(CreateEntryAttributesSubmissionStatus, { nullable: true, default: () => "NOT_SUBMITTED" }),
    "lastSubmittedAmount": S.optionalWith(S.Number, { nullable: true }),
    "lastSubmittedIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "lastSubmittedProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submissionAmount": S.optionalWith(S.Number, { nullable: true }),
    "submissionIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "submissionProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submissionAmountDelta": S.optionalWith(S.Number, { nullable: true }),
    "submissionIncurredAmountDelta": S.optionalWith(S.Number, { nullable: true }),
    "submissionProjectedAmountDelta": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ReferencedBaseBucket extends S.Class("ReferencedBaseBucket")({
    /**
  * Entity reference for BaseBucket.
  */
    "data": BucketRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedBaseBucketList extends S.Class("ReferencedBaseBucketList")({
    /**
  * A list of BaseBucket entity refs.
  */
    "data": S.Array(BucketRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedBucketList extends S.Class("ReferencedBucketList")({
    /**
  * A list of Bucket entity refs.
  */
    "data": S.Array(BucketRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateBaseBucket extends S.Class("ReferencedUpdateBaseBucket")({
    /**
  * Entity reference for BaseBucket.
  */
    "data": BucketRef
}) {
}
export class NullableReferencedBaseSubBucket extends S.Class("NullableReferencedBaseSubBucket")({
    /**
  * Nullable entity reference for BaseSubBucket.
  */
    "data": S.NullOr(SubBucketRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedBaseSubBucketList extends S.Class("ReferencedBaseSubBucketList")({
    /**
  * A list of BaseSubBucket entity refs.
  */
    "data": S.Array(SubBucketRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedSubBucketList extends S.Class("ReferencedSubBucketList")({
    /**
  * A list of SubBucket entity refs.
  */
    "data": S.Array(SubBucketRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateBaseSubBucket extends S.Class("NullableReferencedUpdateBaseSubBucket")({
    /**
  * Nullable entity reference for BaseSubBucket.
  */
    "data": S.NullOr(SubBucketRef)
}) {
}
export class ReferencedFundingSource extends S.Class("ReferencedFundingSource")({
    /**
  * Entity reference for FundingSource.
  */
    "data": ClaimRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedClaim extends S.Class("ReferencedClaim")({
    /**
  * Entity reference for Claim.
  */
    "data": ClaimRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateClaim extends S.Class("ReferencedUpdateClaim")({
    /**
  * Entity reference for Claim.
  */
    "data": ClaimRef
}) {
}
export class ReferencedUpdateFundingSource extends S.Class("ReferencedUpdateFundingSource")({
    /**
  * Entity reference for FundingSource.
  */
    "data": ClaimRef
}) {
}
export class BaseBucketAttributes extends S.Class("BaseBucketAttributes")({
    "limitAmount": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "lossSettlementType": S.optionalWith(BaseBucketAttributesLossSettlementType, { nullable: true, default: () => "REPLACEMENT_COST_VALUE" }),
    "entryCount": S.optionalWith(S.Number, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true }),
    "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
    "fundingCount": S.optionalWith(S.Number, { nullable: true }),
    "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
    "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyFunded": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ReferencedBaseBucketMetadata extends S.Class("ReferencedBaseBucketMetadata")({
    /**
  * Entity reference for BaseBucketMetadata.
  */
    "data": BaseBucketMetadataRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedBucketFundingList extends S.Class("ReferencedBucketFundingList")({
    /**
  * A list of BucketFunding entity refs.
  */
    "data": S.Array(BucketFundingRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class BucketAttributes extends S.Class("BucketAttributes")({
    "limitAmount": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "lossSettlementType": S.optionalWith(BucketAttributesLossSettlementType, { nullable: true }),
    "entryCount": S.optionalWith(S.Number, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true }),
    "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
    "fundingCount": S.optionalWith(S.Number, { nullable: true }),
    "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
    "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyFunded": S.optionalWith(S.Number, { nullable: true }),
    "name": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ReferencedBucketDefinition extends S.Class("ReferencedBucketDefinition")({
    /**
  * Entity reference for BucketDefinition.
  */
    "data": CoverageRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedBucketDefinitionList extends S.Class("ReferencedBucketDefinitionList")({
    /**
  * A list of BucketDefinition entity refs.
  */
    "data": S.Array(CoverageRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedCoverage extends S.Class("ReferencedCoverage")({
    /**
  * Entity reference for Coverage.
  */
    "data": CoverageRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedCoverageList extends S.Class("ReferencedCoverageList")({
    /**
  * A list of Coverage entity refs.
  */
    "data": S.Array(CoverageRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateCoverage extends S.Class("ReferencedUpdateCoverage")({
    /**
  * Entity reference for Coverage.
  */
    "data": CoverageRef
}) {
}
export class ReferencedUpdateBucketDefinition extends S.Class("ReferencedUpdateBucketDefinition")({
    /**
  * Entity reference for BucketDefinition.
  */
    "data": CoverageRef
}) {
}
export class ReferencedUpdateCoverageList extends S.Class("ReferencedUpdateCoverageList")({
    /**
  * A list of Coverage entity refs.
  */
    "data": S.Array(CoverageRef)
}) {
}
export class ReferencedDeductible extends S.Class("ReferencedDeductible")({
    /**
  * Entity reference for Deductible.
  */
    "data": DeductibleRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedDeductibleList extends S.Class("ReferencedDeductibleList")({
    /**
  * A list of Deductible entity refs.
  */
    "data": S.Array(DeductibleRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedDeductible extends S.Class("NullableReferencedDeductible")({
    /**
  * Nullable entity reference for Deductible.
  */
    "data": S.NullOr(DeductibleRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateDeductible extends S.Class("NullableReferencedUpdateDeductible")({
    /**
  * Nullable entity reference for Deductible.
  */
    "data": S.NullOr(DeductibleRef)
}) {
}
export class ReferencedUpdateDeductible extends S.Class("ReferencedUpdateDeductible")({
    /**
  * Entity reference for Deductible.
  */
    "data": DeductibleRef
}) {
}
export class ReferencedClaimDeductible extends S.Class("ReferencedClaimDeductible")({
    /**
  * Entity reference for ClaimDeductible.
  */
    "data": ClaimDeductibleRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedClaimDeductibleList extends S.Class("ReferencedClaimDeductibleList")({
    /**
  * A list of ClaimDeductible entity refs.
  */
    "data": S.Array(ClaimDeductibleRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ClaimAttributes extends S.Class("ClaimAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true }),
    "claimId": S.optionalWith(S.String, { nullable: true }),
    "status": S.optionalWith(ClaimAttributesStatus, { nullable: true, default: () => "OPEN" }),
    "openedDate": S.optionalWith(S.String, { nullable: true }),
    "closedDate": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ReferencedClaimTarget extends S.Class("ReferencedClaimTarget")({
    /**
  * Entity reference for ClaimTarget.
  */
    "data": PolicyTermRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedPolicyTerm extends S.Class("ReferencedPolicyTerm")({
    /**
  * Entity reference for PolicyTerm.
  */
    "data": PolicyTermRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedPolicyTermList extends S.Class("ReferencedPolicyTermList")({
    /**
  * A list of PolicyTerm entity refs.
  */
    "data": S.Array(PolicyTermRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdatePolicyTerm extends S.Class("ReferencedUpdatePolicyTerm")({
    /**
  * Entity reference for PolicyTerm.
  */
    "data": PolicyTermRef
}) {
}
export class ReferencedUpdateClaimTarget extends S.Class("ReferencedUpdateClaimTarget")({
    /**
  * Entity reference for ClaimTarget.
  */
    "data": PolicyTermRef
}) {
}
export class ClaimTargetAttributes extends S.Class("ClaimTargetAttributes")({
    "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
    "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "lossSettlementType": S.optionalWith(ClaimTargetAttributesLossSettlementType, { nullable: true })
}) {
}
export class PolicyTermAttributes extends S.Class("PolicyTermAttributes")({
    "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
    "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "lossSettlementType": S.optionalWith(PolicyTermAttributesLossSettlementType, { nullable: true }),
    "premiumAmount": S.optionalWith(S.Number, { nullable: true }),
    "paymentDueDate": S.optionalWith(S.String, { nullable: true }),
    "isFullyPaid": S.optionalWith(S.Boolean, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "dueAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ReferencedPolicy extends S.Class("ReferencedPolicy")({
    /**
  * Entity reference for Policy.
  */
    "data": PolicyRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdatePolicy extends S.Class("ReferencedUpdatePolicy")({
    /**
  * Entity reference for Policy.
  */
    "data": PolicyRef
}) {
}
export class NullableReferencedPolicyTemplate extends S.Class("NullableReferencedPolicyTemplate")({
    /**
  * Nullable entity reference for PolicyTemplate.
  */
    "data": S.NullOr(PolicyTemplateRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedPolicyTemplate extends S.Class("ReferencedPolicyTemplate")({
    /**
  * Entity reference for PolicyTemplate.
  */
    "data": PolicyTemplateRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdatePolicyTemplate extends S.Class("NullableReferencedUpdatePolicyTemplate")({
    /**
  * Nullable entity reference for PolicyTemplate.
  */
    "data": S.NullOr(PolicyTemplateRef)
}) {
}
export class CreateProviderData extends S.Class("CreateProviderData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Provider"),
    "attributes": S.optionalWith(CreateProviderAttributes, { nullable: true })
}) {
}
export class BucketDefinitionAttributes extends S.Class("BucketDefinitionAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "limitAmount": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    /**
  * Is required if not set in .basis
  */
    "lossSettlementType": S.optionalWith(BucketDefinitionAttributesLossSettlementType, { nullable: true }),
    "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
    "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
    "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ReferencedSubBucketDefinitionList extends S.Class("ReferencedSubBucketDefinitionList")({
    /**
  * A list of SubBucketDefinition entity refs.
  */
    "data": S.Array(SubCoverageRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedSubBucketDefinition extends S.Class("ReferencedSubBucketDefinition")({
    /**
  * Entity reference for SubBucketDefinition.
  */
    "data": SubCoverageRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedSubCoverageList extends S.Class("ReferencedSubCoverageList")({
    /**
  * A list of SubCoverage entity refs.
  */
    "data": S.Array(SubCoverageRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateSubBucketDefinition extends S.Class("ReferencedUpdateSubBucketDefinition")({
    /**
  * Entity reference for SubBucketDefinition.
  */
    "data": SubCoverageRef
}) {
}
export class ReferencedUpdateSubCoverageList extends S.Class("ReferencedUpdateSubCoverageList")({
    /**
  * A list of SubCoverage entity refs.
  */
    "data": S.Array(SubCoverageRef)
}) {
}
export class NullableReferencedCoverageTemplate extends S.Class("NullableReferencedCoverageTemplate")({
    /**
  * Nullable entity reference for CoverageTemplate.
  */
    "data": S.NullOr(CoverageTemplateRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedCoverageTemplate extends S.Class("ReferencedCoverageTemplate")({
    /**
  * Entity reference for CoverageTemplate.
  */
    "data": CoverageTemplateRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedCoverageTemplateList extends S.Class("ReferencedCoverageTemplateList")({
    /**
  * A list of CoverageTemplate entity refs.
  */
    "data": S.Array(CoverageTemplateRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateCoverageTemplate extends S.Class("NullableReferencedUpdateCoverageTemplate")({
    /**
  * Nullable entity reference for CoverageTemplate.
  */
    "data": S.NullOr(CoverageTemplateRef)
}) {
}
export class NullableReferencedCoverageGroup extends S.Class("NullableReferencedCoverageGroup")({
    /**
  * Nullable entity reference for CoverageGroup.
  */
    "data": S.NullOr(CoverageGroupRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateCoverageGroup extends S.Class("NullableReferencedUpdateCoverageGroup")({
    /**
  * Nullable entity reference for CoverageGroup.
  */
    "data": S.NullOr(CoverageGroupRef)
}) {
}
export class ReferencedPerilList extends S.Class("ReferencedPerilList")({
    /**
  * A list of Peril entity refs.
  */
    "data": S.Array(PerilRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdatePerilList extends S.Class("ReferencedUpdatePerilList")({
    /**
  * A list of Peril entity refs.
  */
    "data": S.Array(PerilRef)
}) {
}
export class ReferencedEndorsementList extends S.Class("ReferencedEndorsementList")({
    /**
  * A list of Endorsement entity refs.
  */
    "data": S.Array(EndorsementRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateEndorsementList extends S.Class("ReferencedUpdateEndorsementList")({
    /**
  * A list of Endorsement entity refs.
  */
    "data": S.Array(EndorsementRef)
}) {
}
export class SubBucketDefinitionAttributes extends S.Class("SubBucketDefinitionAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "limitAmount": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "lossSettlementType": S.optionalWith(SubBucketDefinitionAttributesLossSettlementType, { nullable: true }),
    "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class NullableReferencedSubCoverageTemplate extends S.Class("NullableReferencedSubCoverageTemplate")({
    /**
  * Nullable entity reference for SubCoverageTemplate.
  */
    "data": S.NullOr(SubCoverageTemplateRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedSubCoverageTemplateList extends S.Class("ReferencedSubCoverageTemplateList")({
    /**
  * A list of SubCoverageTemplate entity refs.
  */
    "data": S.Array(SubCoverageTemplateRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateSubCoverageTemplate extends S.Class("NullableReferencedUpdateSubCoverageTemplate")({
    /**
  * Nullable entity reference for SubCoverageTemplate.
  */
    "data": S.NullOr(SubCoverageTemplateRef)
}) {
}
export class ReferencedBaseSubBucketMetadata extends S.Class("ReferencedBaseSubBucketMetadata")({
    /**
  * Entity reference for BaseSubBucketMetadata.
  */
    "data": BaseSubBucketMetadataRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedEndorsementTemplateList extends S.Class("ReferencedEndorsementTemplateList")({
    /**
  * A list of EndorsementTemplate entity refs.
  */
    "data": S.Array(EndorsementTemplateRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedEndorsementTemplate extends S.Class("NullableReferencedEndorsementTemplate")({
    /**
  * Nullable entity reference for EndorsementTemplate.
  */
    "data": S.NullOr(EndorsementTemplateRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateEndorsementTemplate extends S.Class("NullableReferencedUpdateEndorsementTemplate")({
    /**
  * Nullable entity reference for EndorsementTemplate.
  */
    "data": S.NullOr(EndorsementTemplateRef)
}) {
}
export class NullableReferencedCoverageGroupTemplate extends S.Class("NullableReferencedCoverageGroupTemplate")({
    /**
  * Nullable entity reference for CoverageGroupTemplate.
  */
    "data": S.NullOr(CoverageGroupTemplateRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedCoverageGroupTemplateList extends S.Class("ReferencedCoverageGroupTemplateList")({
    /**
  * A list of CoverageGroupTemplate entity refs.
  */
    "data": S.Array(CoverageGroupTemplateRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class NullableReferencedUpdateCoverageGroupTemplate extends S.Class("NullableReferencedUpdateCoverageGroupTemplate")({
    /**
  * Nullable entity reference for CoverageGroupTemplate.
  */
    "data": S.NullOr(CoverageGroupTemplateRef)
}) {
}
export class CreateEndorsementTemplateAttributes extends S.Class("CreateEndorsementTemplateAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "slug": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "articleUrl": S.optionalWith(S.String, { nullable: true }),
    "canopyApiTerm": S.optionalWith(S.String, { nullable: true }),
    "effect": S.optionalWith(CreateEndorsementTemplateAttributesEffect, { nullable: true }),
    "lossSettlementType": S.optionalWith(CreateEndorsementTemplateAttributesLossSettlementType, { nullable: true }),
    "tags": S.optionalWith(S.Array(S.String), { nullable: true })
}) {
}
export class EndorsementAttributes extends S.Class("EndorsementAttributes")({
    "formNumber": S.optionalWith(S.String, { nullable: true }),
    "effect": S.optionalWith(EndorsementAttributesEffect, { nullable: true }),
    "limitAmount": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntryUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntryUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
    "lossSettlementType": S.optionalWith(EndorsementAttributesLossSettlementType, { nullable: true })
}) {
}
export class CreatePolicyAttributes extends S.Class("CreatePolicyAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "status": S.optionalWith(CreatePolicyAttributesStatus, { nullable: true, default: () => "ACTIVE" }),
    "policyId": S.optionalWith(S.String, { nullable: true }),
    "isActive": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "startDate": S.optionalWith(S.String, { nullable: true }),
    "renewalDate": S.optionalWith(S.String, { nullable: true }),
    "canceledDate": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ReferencedDepreciationModifierList extends S.Class("ReferencedDepreciationModifierList")({
    /**
  * A list of DepreciationModifier entity refs.
  */
    "data": S.Array(DepreciationModifierRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedDepreciationOverrideList extends S.Class("ReferencedDepreciationOverrideList")({
    /**
  * A list of DepreciationOverride entity refs.
  */
    "data": S.Array(DepreciationOverrideRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemTemplate extends S.Class("ReferencedItemTemplate")({
    /**
  * Entity reference for ItemTemplate.
  */
    "data": ItemTemplateRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAssetAttributeClassList extends S.Class("ReferencedAssetAttributeClassList")({
    /**
  * A list of AssetAttributeClass entity refs.
  */
    "data": S.Array(AssetAttributeClassRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAssetAttributeType extends S.Class("ReferencedAssetAttributeType")({
    /**
  * Entity reference for AssetAttributeType.
  */
    "data": AssetAttributeTypeRef,
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedAssetAttributeTypeList extends S.Class("ReferencedAssetAttributeTypeList")({
    /**
  * A list of AssetAttributeType entity refs.
  */
    "data": S.Array(AssetAttributeTypeRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedIncidentClassList extends S.Class("ReferencedIncidentClassList")({
    /**
  * A list of IncidentClass entity refs.
  */
    "data": S.Array(IncidentClassRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemCategoryList extends S.Class("ReferencedItemCategoryList")({
    /**
  * A list of ItemCategory entity refs.
  */
    "data": S.Array(ItemCategoryRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedItemClassList extends S.Class("ReferencedItemClassList")({
    /**
  * A list of ItemClass entity refs.
  */
    "data": S.Array(ItemClassRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedServiceCategoryList extends S.Class("ReferencedServiceCategoryList")({
    /**
  * A list of ServiceCategory entity refs.
  */
    "data": S.Array(ServiceCategoryRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedServiceClassList extends S.Class("ReferencedServiceClassList")({
    /**
  * A list of ServiceClass entity refs.
  */
    "data": S.Array(ServiceClassRef),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedBaseEntityList extends S.Class("ReferencedBaseEntityList")({
    /**
  * A list of BaseEntity entity refs.
  */
    "data": S.Array(S.Union(ChangeOrderRef, EstimateRef, InvoiceRef, PaymentRef, AssetAppraisalRef, AppraisalRef, FundingRef, IncidentReportRef, PoliceReportRef, ParamedicReportRef, ContractRef, RentRollRef, PermitRef, BlueprintRef, DeclarationsPageRef, PolicyJacketRef, ScopeOfLossRef, DeliveryPaperworkRef, ProductSpecRef, UserManualRef, WarrantyRef, DeedRef, ItemChangeOrderRef, ItemImpactChangeOrderRef, ServiceTaskChangeOrderRef, ItemEstimateRef, ItemImpactEstimateRef, ServiceTaskEstimateRef, ItemInvoiceRef, ItemImpactInvoiceRef, ServiceTaskInvoiceRef, ItemPaymentRef, ItemImpactPaymentRef, ServiceTaskPaymentRef, ItemAppraisalRef, ItemizableFinancialDocumentStatsRef, ProviderRef, CountryRef, CurrencyRef, DepreciationModifierRef, DepreciationOverrideRef, ItemTypeRef, DisasterRef, PerilRef, AssetAttributeTypeItemTemplateRef, CoverageGroupTemplateRef, CoverageTemplateRef, EndorsementTemplateRef, ItemTemplateRef, PolicyTemplateRef, SpaceTypeItemTemplateRef, SubCoverageTemplateRef, SubmissionTrackTemplateRef, AssetAttributeClassRef, AssetAttributeTypeRef, AssetTypeRef, BucketClassRef, BucketTypeRef, DocumentClassRef, DocumentTypeRef, IncidentClassRef, IncidentTypeRef, ItemCategoryRef, ItemClassRef, ServiceCategoryRef, ServiceClassRef, ServiceTypeRef, SpaceGroupTypeRef, SpaceCategoryRef, SpaceClassRef, SpaceTypeRef, AccountInviteRef, AccountProviderContactRef, UserRef, AccountProviderRef, AccountRef, AddressRef, DwellingRef, AuthProfileRef, BaseBucketMetadataRef, EntryRef, BucketRef, SubBucketRef, BaseSubBucketMetadataRef, CoverageRef, BucketFundingRef, ClaimDeductibleRef, PolicyTermRef, ClaimRef, CoverageGroupRef, DeductibleRef, EmailAddressRef, EndorsementRef, EntrySourceMediaRef, EntrySourceMetadataRef, ItemImpactRef, ItemRef, ServiceTaskRef, ServiceRef, ThirdPartyImpactRef, FileProcessRef, FileRef, ProjectImpactRef, IncidentImpactRef, IncidentRef, ItemMediaSuggestionRef, ItemProductSuggestionRef, MediaRef, PhoneNumberRef, PolicyRef, ProjectMediaRef, SpaceGroupRef, SpaceRef, SubCoverageRef, ThirdPartyDwellingRef, ThirdPartyIndividualRef, UserAccountRoleRef)),
    /**
  * Relevant links for the refs and full entities.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedThirdParty extends S.Class("ReferencedThirdParty")({
    /**
  * Entity reference for ThirdParty.
  */
    "data": S.Union(ThirdPartyDwellingRef, ThirdPartyIndividualRef),
    /**
  * Relevant links for the ref and full entity.
  */
    "links": S.optionalWith(ReferencedLinkObject, { nullable: true })
}) {
}
export class ReferencedUpdateThirdParty extends S.Class("ReferencedUpdateThirdParty")({
    /**
  * Entity reference for ThirdParty.
  */
    "data": S.Union(ThirdPartyDwellingRef, ThirdPartyIndividualRef)
}) {
}
export class ItemInvoiceAttributes extends S.Class("ItemInvoiceAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "purpose": S.optionalWith(ItemInvoiceAttributesPurpose, { nullable: true, default: () => "PURCHASE" }),
    "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ItemAttributes extends S.Class("ItemAttributes")({
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Struct({
        "type": S.optionalWith(S.Boolean, { nullable: true }),
        "quality": S.optionalWith(S.Boolean, { nullable: true }),
        "acquiredDate": S.optionalWith(S.Boolean, { nullable: true })
    }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
    "quality": S.optionalWith(ItemAttributesQuality, { nullable: true }),
    "condition": S.optionalWith(ItemAttributesCondition, { nullable: true }),
    "isDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
    "acquiredDate": S.optionalWith(S.String, { nullable: true }),
    "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "currentQuantity": S.optionalWith(S.Number, { nullable: true }),
    "paymentCount": S.optionalWith(S.Number, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
    "acquisitionPaidAmount": S.optionalWith(S.Number, { nullable: true }),
    "acquisitionInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acquisitionEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateDepreciationModifierAttributes extends S.Class("CreateDepreciationModifierAttributes")({
    "condition": S.optionalWith(CreateDepreciationModifierAttributesCondition, { nullable: true }),
    "quality": S.optionalWith(CreateDepreciationModifierAttributesQuality, { nullable: true }),
    "minimumValuePercentage": S.optionalWith(S.Number, { nullable: true }),
    "accelerationFactor": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ItemPaymentAttributes extends S.Class("ItemPaymentAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "purpose": S.optionalWith(ItemPaymentAttributesPurpose, { nullable: true, default: () => "PURCHASE" }),
    "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
    "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ItemChangeOrderAttributes extends S.Class("ItemChangeOrderAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "purpose": S.optionalWith(ItemChangeOrderAttributesPurpose, { nullable: true })
}) {
}
export class ItemEstimateAttributes extends S.Class("ItemEstimateAttributes")({
    "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
    "currentAmount": S.optionalWith(S.String, { nullable: true }),
    "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
    "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
    "currentFeeAmount": S.optionalWith(S.String, { nullable: true }),
    "purpose": S.optionalWith(ItemEstimateAttributesPurpose, { nullable: true, default: () => "PURCHASE" }),
    "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class AccountInviteAttributes extends S.Class("AccountInviteAttributes")({
    /**
  * What level of permissions the user has for this account.
  */
    "role": S.optionalWith(AccountInviteAttributesRole, { nullable: true }),
    /**
  * The user's email
  */
    "email": S.optionalWith(S.String, { nullable: true }),
    "phone": S.optionalWith(S.String, { nullable: true }),
    "invitedAt": S.optionalWith(S.String, { nullable: true }),
    "acceptedAt": S.optionalWith(S.String, { nullable: true })
}) {
}
export class AuthProfileAttributes extends S.Class("AuthProfileAttributes")({
    "provider": S.optionalWith(AuthProfileAttributesProvider, { nullable: true }),
    "externalId": S.optionalWith(S.String, { nullable: true })
}) {
}
export class CreateIncidentImpactAttributes extends S.Class("CreateIncidentImpactAttributes")({
    "extent": S.optionalWith(CreateIncidentImpactAttributesExtent, { nullable: true })
}) {
}
export class ItemMediaSuggestionAttributes extends S.Class("ItemMediaSuggestionAttributes")({
    "data_key": S.optionalWith(S.String, { nullable: true }),
    "name": S.optionalWith(S.String, { nullable: true }),
    "quality": S.optionalWith(ItemMediaSuggestionAttributesQuality, { nullable: true }),
    "condition": S.optionalWith(ItemMediaSuggestionAttributesCondition, { nullable: true }),
    "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
    "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ItemProductSuggestionAttributes extends S.Class("ItemProductSuggestionAttributes")({
    "source": S.optionalWith(ItemProductSuggestionAttributesSource, { nullable: true }),
    "source_id": S.optionalWith(S.String, { nullable: true }),
    "data_key": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "sellerName": S.optionalWith(S.String, { nullable: true }),
    "sellerLink": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class UpdateUserAccountRoleAttributes extends S.Class("UpdateUserAccountRoleAttributes")({
    /**
  * What level of permissions the user has for this account.
  */
    "role": S.optionalWith(UpdateUserAccountRoleAttributesRole, { nullable: true })
}) {
}
export class NullableReferencedUpsertEmailAddress extends S.Class("NullableReferencedUpsertEmailAddress")({
    /**
  * Nullable entity reference for EmailAddress.
  */
    "data": S.NullOr(S.Union(CreateEmailAddressRef, EmailAddressRef))
}) {
}
export class NullableReferencedUpsertPhoneNumber extends S.Class("NullableReferencedUpsertPhoneNumber")({
    /**
  * Nullable entity reference for PhoneNumber.
  */
    "data": S.NullOr(S.Union(CreatePhoneNumberRef, PhoneNumberRef))
}) {
}
export class NullableReferencedUpsertAccount extends S.Class("NullableReferencedUpsertAccount")({
    /**
  * Nullable entity reference for Account.
  */
    "data": S.NullOr(S.Union(CreateAccountRef, AccountRef))
}) {
}
export class ReferencedUpsertAccount extends S.Class("ReferencedUpsertAccount")({
    /**
  * Entity reference for Account.
  */
    "data": S.Union(CreateAccountRef, AccountRef)
}) {
}
export class ReferencedUpsertUserAccountRoleList extends S.Class("ReferencedUpsertUserAccountRoleList")({
    /**
  * A list of UserAccountRole entity refs.
  */
    "data": S.Array(S.Union(CreateUserAccountRoleRef, UserAccountRoleRef))
}) {
}
export class ReferencedUpsertAccountProviderContactList extends S.Class("ReferencedUpsertAccountProviderContactList")({
    /**
  * A list of AccountProviderContact entity refs.
  */
    "data": S.Array(S.Union(CreateAccountProviderContactRef, AccountProviderContactRef))
}) {
}
export class ReferencedUpsertAccountProviderContact extends S.Class("ReferencedUpsertAccountProviderContact")({
    /**
  * Entity reference for AccountProviderContact.
  */
    "data": S.Union(CreateAccountProviderContactRef, AccountProviderContactRef)
}) {
}
export class ReferencedUpsertIdentity extends S.Class("ReferencedUpsertIdentity")({
    /**
  * Entity reference for Identity.
  */
    "data": S.Union(CreateAccountProviderContactRef, CreateUserRef, AccountProviderContactRef, UserRef)
}) {
}
export class NullableReferencedUpsertUser extends S.Class("NullableReferencedUpsertUser")({
    /**
  * Nullable entity reference for User.
  */
    "data": S.NullOr(S.Union(CreateUserRef, UserRef))
}) {
}
export class ReferencedUpsertUser extends S.Class("ReferencedUpsertUser")({
    /**
  * Entity reference for User.
  */
    "data": S.Union(CreateUserRef, UserRef)
}) {
}
export class ReferencedUpsertAccountProvider extends S.Class("ReferencedUpsertAccountProvider")({
    /**
  * Entity reference for AccountProvider.
  */
    "data": S.Union(CreateAccountProviderRef, AccountProviderRef)
}) {
}
export class NullableReferencedUpsertAccountProvider extends S.Class("NullableReferencedUpsertAccountProvider")({
    /**
  * Nullable entity reference for AccountProvider.
  */
    "data": S.NullOr(S.Union(CreateAccountProviderRef, AccountProviderRef))
}) {
}
export class NullableReferencedUpsertProvider extends S.Class("NullableReferencedUpsertProvider")({
    /**
  * Nullable entity reference for Provider.
  */
    "data": S.NullOr(S.Union(CreateProviderRef, ProviderRef))
}) {
}
export class ReferencedUpsertProvider extends S.Class("ReferencedUpsertProvider")({
    /**
  * Entity reference for Provider.
  */
    "data": S.Union(CreateProviderRef, ProviderRef)
}) {
}
export class ReferencedUpsertProjectList extends S.Class("ReferencedUpsertProjectList")({
    /**
  * A list of Project entity refs.
  */
    "data": S.Array(S.Union(CreateIncidentRef, IncidentRef))
}) {
}
export class ReferencedUpsertProject extends S.Class("ReferencedUpsertProject")({
    /**
  * Entity reference for Project.
  */
    "data": S.Union(CreateIncidentRef, IncidentRef)
}) {
}
export class NullableReferencedUpsertProject extends S.Class("NullableReferencedUpsertProject")({
    /**
  * Nullable entity reference for Project.
  */
    "data": S.NullOr(S.Union(CreateIncidentRef, IncidentRef))
}) {
}
export class ReferencedUpsertAssetList extends S.Class("ReferencedUpsertAssetList")({
    /**
  * A list of Asset entity refs.
  */
    "data": S.Array(S.Union(CreateDwellingRef, DwellingRef))
}) {
}
export class ReferencedUpsertAsset extends S.Class("ReferencedUpsertAsset")({
    /**
  * Entity reference for Asset.
  */
    "data": S.Union(CreateDwellingRef, DwellingRef)
}) {
}
export class NullableReferencedUpsertAsset extends S.Class("NullableReferencedUpsertAsset")({
    /**
  * Nullable entity reference for Asset.
  */
    "data": S.NullOr(S.Union(CreateDwellingRef, DwellingRef))
}) {
}
export class ReferencedUpsertCurrency extends S.Class("ReferencedUpsertCurrency")({
    /**
  * Entity reference for Currency.
  */
    "data": S.Union(CreateCurrencyRef, CurrencyRef)
}) {
}
export class ReferencedUpsertProjectMediaList extends S.Class("ReferencedUpsertProjectMediaList")({
    /**
  * A list of ProjectMedia entity refs.
  */
    "data": S.Array(S.Union(CreateProjectMediaRef, ProjectMediaRef))
}) {
}
export class ReferencedUpsertProjectMedia extends S.Class("ReferencedUpsertProjectMedia")({
    /**
  * Entity reference for ProjectMedia.
  */
    "data": S.Union(CreateProjectMediaRef, ProjectMediaRef)
}) {
}
export class ReferencedUpsertIncidentType extends S.Class("ReferencedUpsertIncidentType")({
    /**
  * Entity reference for IncidentType.
  */
    "data": S.Union(CreateIncidentTypeRef, IncidentTypeRef)
}) {
}
export class ReferencedUpsertIncidentTypeList extends S.Class("ReferencedUpsertIncidentTypeList")({
    /**
  * A list of IncidentType entity refs.
  */
    "data": S.Array(S.Union(CreateIncidentTypeRef, IncidentTypeRef))
}) {
}
export class NullableReferencedUpsertDisaster extends S.Class("NullableReferencedUpsertDisaster")({
    /**
  * Nullable entity reference for Disaster.
  */
    "data": S.NullOr(S.Union(CreateDisasterRef, DisasterRef))
}) {
}
export class ReferencedUpsertMedia extends S.Class("ReferencedUpsertMedia")({
    /**
  * Entity reference for Media.
  */
    "data": S.Union(CreateMediaRef, MediaRef)
}) {
}
export class ReferencedUpsertMediaList extends S.Class("ReferencedUpsertMediaList")({
    /**
  * A list of Media entity refs.
  */
    "data": S.Array(S.Union(CreateMediaRef, MediaRef))
}) {
}
export class ReferencedUpsertFile extends S.Class("ReferencedUpsertFile")({
    /**
  * Entity reference for File.
  */
    "data": S.Union(CreateFileRef, FileRef)
}) {
}
export class NullableReferencedUpsertFile extends S.Class("NullableReferencedUpsertFile")({
    /**
  * Nullable entity reference for File.
  */
    "data": S.NullOr(S.Union(CreateFileRef, FileRef))
}) {
}
export class ReferencedUpsertSpaceList extends S.Class("ReferencedUpsertSpaceList")({
    /**
  * A list of Space entity refs.
  */
    "data": S.Array(S.Union(CreateSpaceRef, SpaceRef))
}) {
}
export class NullableReferencedUpsertSpace extends S.Class("NullableReferencedUpsertSpace")({
    /**
  * Nullable entity reference for Space.
  */
    "data": S.NullOr(S.Union(CreateSpaceRef, SpaceRef))
}) {
}
export class ReferencedUpsertSpace extends S.Class("ReferencedUpsertSpace")({
    /**
  * Entity reference for Space.
  */
    "data": S.Union(CreateSpaceRef, SpaceRef)
}) {
}
export class ReferencedUpsertEntrySourceMediaList extends S.Class("ReferencedUpsertEntrySourceMediaList")({
    /**
  * A list of EntrySourceMedia entity refs.
  */
    "data": S.Array(S.Union(CreateEntrySourceMediaRef, EntrySourceMediaRef))
}) {
}
export class CreateFileAttributes extends S.Class("CreateFileAttributes")({
    /**
  * The storage provider for this file.
  */
    "storageProvider": S.Literal("LOTI_S3"),
    "originalKey": S.optionalWith(S.String, { nullable: true }),
    "originalUrl": S.optionalWith(S.String, { nullable: true }),
    "presentationKey": S.optionalWith(S.String, { nullable: true }),
    "presentationUrl": S.optionalWith(S.String, { nullable: true }),
    "thumbnailKey": S.optionalWith(S.String, { nullable: true }),
    "thumbnailUrl": S.optionalWith(S.String, { nullable: true }),
    "type": S.optionalWith(CreateFileAttributesType, { nullable: true }),
    "filename": S.optionalWith(S.String, { nullable: true }),
    "extension": S.optionalWith(S.String, { nullable: true }),
    "width": S.optionalWith(S.Number, { nullable: true }),
    "height": S.optionalWith(S.Number, { nullable: true }),
    "size": S.optionalWith(S.Number, { nullable: true }),
    "blurhash": S.optionalWith(S.String, { nullable: true }),
    "durationMs": S.optionalWith(S.Number, { nullable: true }),
    "pageCount": S.optionalWith(S.Number, { nullable: true }),
    "createdAt": S.optionalWith(S.String, { nullable: true }),
    "modifiedAt": S.optionalWith(S.String, { nullable: true }),
    "mediaCount": S.optionalWith(S.Number, { nullable: true }),
    "documentCount": S.optionalWith(S.Number, { nullable: true }),
    "addedAt": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ReferencedUpsertFileProcessList extends S.Class("ReferencedUpsertFileProcessList")({
    /**
  * A list of FileProcess entity refs.
  */
    "data": S.Array(S.Union(CreateFileProcessRef, FileProcessRef))
}) {
}
export class ReferencedUpsertChangeOrderList extends S.Class("ReferencedUpsertChangeOrderList")({
    /**
  * A list of ChangeOrder entity refs.
  */
    "data": S.Array(S.Union(CreateChangeOrderRef, ChangeOrderRef))
}) {
}
export class ReferencedUpsertChangeOrder extends S.Class("ReferencedUpsertChangeOrder")({
    /**
  * Entity reference for ChangeOrder.
  */
    "data": S.Union(CreateChangeOrderRef, ChangeOrderRef)
}) {
}
export class ReferencedUpsertEstimate extends S.Class("ReferencedUpsertEstimate")({
    /**
  * Entity reference for Estimate.
  */
    "data": S.Union(CreateEstimateRef, EstimateRef)
}) {
}
export class ReferencedUpsertEstimateList extends S.Class("ReferencedUpsertEstimateList")({
    /**
  * A list of Estimate entity refs.
  */
    "data": S.Array(S.Union(CreateEstimateRef, EstimateRef))
}) {
}
export class NullableReferencedUpsertEstimate extends S.Class("NullableReferencedUpsertEstimate")({
    /**
  * Nullable entity reference for Estimate.
  */
    "data": S.NullOr(S.Union(CreateEstimateRef, EstimateRef))
}) {
}
export class ReferencedUpsertInvoiceList extends S.Class("ReferencedUpsertInvoiceList")({
    /**
  * A list of Invoice entity refs.
  */
    "data": S.Array(S.Union(CreateInvoiceRef, InvoiceRef))
}) {
}
export class NullableReferencedUpsertInvoice extends S.Class("NullableReferencedUpsertInvoice")({
    /**
  * Nullable entity reference for Invoice.
  */
    "data": S.NullOr(S.Union(CreateInvoiceRef, InvoiceRef))
}) {
}
export class ReferencedUpsertItemizableFinancialDocument extends S.Class("ReferencedUpsertItemizableFinancialDocument")({
    /**
  * Entity reference for ItemizableFinancialDocument.
  */
    "data": S.Union(CreateChangeOrderRef, CreateEstimateRef, CreateInvoiceRef, CreatePaymentRef, ChangeOrderRef, EstimateRef, InvoiceRef, PaymentRef)
}) {
}
export class ReferencedUpsertPaymentList extends S.Class("ReferencedUpsertPaymentList")({
    /**
  * A list of Payment entity refs.
  */
    "data": S.Array(S.Union(CreatePaymentRef, PaymentRef))
}) {
}
export class NullableReferencedUpsertPayment extends S.Class("NullableReferencedUpsertPayment")({
    /**
  * Nullable entity reference for Payment.
  */
    "data": S.NullOr(S.Union(CreatePaymentRef, PaymentRef))
}) {
}
export class ReferencedUpsertAssetAppraisalList extends S.Class("ReferencedUpsertAssetAppraisalList")({
    /**
  * A list of AssetAppraisal entity refs.
  */
    "data": S.Array(S.Union(CreateAssetAppraisalRef, AssetAppraisalRef))
}) {
}
export class NullableReferencedUpsertAssetAppraisal extends S.Class("NullableReferencedUpsertAssetAppraisal")({
    /**
  * Nullable entity reference for AssetAppraisal.
  */
    "data": S.NullOr(S.Union(CreateAssetAppraisalRef, AssetAppraisalRef))
}) {
}
export class ReferencedUpsertAppraisal extends S.Class("ReferencedUpsertAppraisal")({
    /**
  * Entity reference for Appraisal.
  */
    "data": S.Union(CreateAppraisalRef, AppraisalRef)
}) {
}
export class ReferencedUpsertFundingList extends S.Class("ReferencedUpsertFundingList")({
    /**
  * A list of Funding entity refs.
  */
    "data": S.Array(S.Union(CreateFundingRef, FundingRef))
}) {
}
export class ReferencedUpsertFunding extends S.Class("ReferencedUpsertFunding")({
    /**
  * Entity reference for Funding.
  */
    "data": S.Union(CreateFundingRef, FundingRef)
}) {
}
export class ReferencedUpsertDocumentList extends S.Class("ReferencedUpsertDocumentList")({
    /**
  * A list of Document entity refs.
  */
    "data": S.Array(S.Union(CreateChangeOrderRef, CreateEstimateRef, CreateInvoiceRef, CreatePaymentRef, CreateAssetAppraisalRef, CreateAppraisalRef, CreateFundingRef, CreateIncidentReportRef, CreatePoliceReportRef, CreateParamedicReportRef, CreateContractRef, CreateRentRollRef, CreatePermitRef, CreateBlueprintRef, CreateDeclarationsPageRef, CreatePolicyJacketRef, CreateScopeOfLossRef, CreateDeliveryPaperworkRef, CreateProductSpecRef, CreateUserManualRef, CreateWarrantyRef, CreateDeedRef, ChangeOrderRef, EstimateRef, InvoiceRef, PaymentRef, AssetAppraisalRef, AppraisalRef, FundingRef, IncidentReportRef, PoliceReportRef, ParamedicReportRef, ContractRef, RentRollRef, PermitRef, BlueprintRef, DeclarationsPageRef, PolicyJacketRef, ScopeOfLossRef, DeliveryPaperworkRef, ProductSpecRef, UserManualRef, WarrantyRef, DeedRef))
}) {
}
export class UpdateFileAttributes extends S.Class("UpdateFileAttributes")({
    /**
  * The storage provider for this file.
  */
    "storageProvider": S.optionalWith(S.Literal("LOTI_S3"), { nullable: true }),
    "originalKey": S.optionalWith(S.String, { nullable: true }),
    "originalUrl": S.optionalWith(S.String, { nullable: true }),
    "presentationKey": S.optionalWith(S.String, { nullable: true }),
    "presentationUrl": S.optionalWith(S.String, { nullable: true }),
    "thumbnailKey": S.optionalWith(S.String, { nullable: true }),
    "thumbnailUrl": S.optionalWith(S.String, { nullable: true }),
    "type": S.optionalWith(UpdateFileAttributesType, { nullable: true }),
    "filename": S.optionalWith(S.String, { nullable: true }),
    "extension": S.optionalWith(S.String, { nullable: true }),
    "width": S.optionalWith(S.Number, { nullable: true }),
    "height": S.optionalWith(S.Number, { nullable: true }),
    "size": S.optionalWith(S.Number, { nullable: true }),
    "blurhash": S.optionalWith(S.String, { nullable: true }),
    "durationMs": S.optionalWith(S.Number, { nullable: true }),
    "pageCount": S.optionalWith(S.Number, { nullable: true }),
    "createdAt": S.optionalWith(S.String, { nullable: true }),
    "modifiedAt": S.optionalWith(S.String, { nullable: true }),
    "mediaCount": S.optionalWith(S.Number, { nullable: true }),
    "documentCount": S.optionalWith(S.Number, { nullable: true }),
    "addedAt": S.optionalWith(S.String, { nullable: true })
}) {
}
export class ReferencedUpsertAssetType extends S.Class("ReferencedUpsertAssetType")({
    /**
  * Entity reference for AssetType.
  */
    "data": S.Union(CreateAssetTypeRef, AssetTypeRef)
}) {
}
export class ReferencedUpsertAssetTypeList extends S.Class("ReferencedUpsertAssetTypeList")({
    /**
  * A list of AssetType entity refs.
  */
    "data": S.Array(S.Union(CreateAssetTypeRef, AssetTypeRef))
}) {
}
export class ReferencedUpsertAddress extends S.Class("ReferencedUpsertAddress")({
    /**
  * Entity reference for Address.
  */
    "data": S.Union(CreateAddressRef, AddressRef)
}) {
}
export class ReferencedUpsertDocumentType extends S.Class("ReferencedUpsertDocumentType")({
    /**
  * Entity reference for DocumentType.
  */
    "data": S.Union(CreateDocumentTypeRef, DocumentTypeRef)
}) {
}
export class ReferencedUpsertDocumentTypeList extends S.Class("ReferencedUpsertDocumentTypeList")({
    /**
  * A list of DocumentType entity refs.
  */
    "data": S.Array(S.Union(CreateDocumentTypeRef, DocumentTypeRef))
}) {
}
export class ReferencedUpsertDocumentClassList extends S.Class("ReferencedUpsertDocumentClassList")({
    /**
  * A list of DocumentClass entity refs.
  */
    "data": S.Array(S.Union(CreateDocumentClassRef, DocumentClassRef))
}) {
}
export class ReferencedUpsertSpaceType extends S.Class("ReferencedUpsertSpaceType")({
    /**
  * Entity reference for SpaceType.
  */
    "data": S.Union(CreateSpaceTypeRef, SpaceTypeRef)
}) {
}
export class ReferencedUpsertSpaceTypeList extends S.Class("ReferencedUpsertSpaceTypeList")({
    /**
  * A list of SpaceType entity refs.
  */
    "data": S.Array(S.Union(CreateSpaceTypeRef, SpaceTypeRef))
}) {
}
export class ReferencedUpsertSpaceGroup extends S.Class("ReferencedUpsertSpaceGroup")({
    /**
  * Entity reference for SpaceGroup.
  */
    "data": S.Union(CreateSpaceGroupRef, SpaceGroupRef)
}) {
}
export class ReferencedUpsertSpaceClassList extends S.Class("ReferencedUpsertSpaceClassList")({
    /**
  * A list of SpaceClass entity refs.
  */
    "data": S.Array(S.Union(CreateSpaceClassRef, SpaceClassRef))
}) {
}
export class ReferencedUpsertSpaceGroupTypeList extends S.Class("ReferencedUpsertSpaceGroupTypeList")({
    /**
  * A list of SpaceGroupType entity refs.
  */
    "data": S.Array(S.Union(CreateSpaceGroupTypeRef, SpaceGroupTypeRef))
}) {
}
export class ReferencedUpsertSpaceCategoryList extends S.Class("ReferencedUpsertSpaceCategoryList")({
    /**
  * A list of SpaceCategory entity refs.
  */
    "data": S.Array(S.Union(CreateSpaceCategoryRef, SpaceCategoryRef))
}) {
}
export class ReferencedUpsertBucketTypeList extends S.Class("ReferencedUpsertBucketTypeList")({
    /**
  * A list of BucketType entity refs.
  */
    "data": S.Array(S.Union(CreateBucketTypeRef, BucketTypeRef))
}) {
}
export class NullableReferencedUpsertBucketType extends S.Class("NullableReferencedUpsertBucketType")({
    /**
  * Nullable entity reference for BucketType.
  */
    "data": S.NullOr(S.Union(CreateBucketTypeRef, BucketTypeRef))
}) {
}
export class ReferencedUpsertBucketType extends S.Class("ReferencedUpsertBucketType")({
    /**
  * Entity reference for BucketType.
  */
    "data": S.Union(CreateBucketTypeRef, BucketTypeRef)
}) {
}
export class ReferencedUpsertBucketClassList extends S.Class("ReferencedUpsertBucketClassList")({
    /**
  * A list of BucketClass entity refs.
  */
    "data": S.Array(S.Union(CreateBucketClassRef, BucketClassRef))
}) {
}
export class ReferencedUpsertCountry extends S.Class("ReferencedUpsertCountry")({
    /**
  * Entity reference for Country.
  */
    "data": S.Union(CreateCountryRef, CountryRef)
}) {
}
export class ReferencedUpsertItemizableFinancialDocumentStats extends S.Class("ReferencedUpsertItemizableFinancialDocumentStats")({
    /**
  * Entity reference for ItemizableFinancialDocumentStats.
  */
    "data": S.Union(CreateItemizableFinancialDocumentStatsRef, ItemizableFinancialDocumentStatsRef)
}) {
}
export class ReferencedUpsertService extends S.Class("ReferencedUpsertService")({
    /**
  * Entity reference for Service.
  */
    "data": S.Union(CreateServiceRef, ServiceRef)
}) {
}
export class NullableReferencedUpsertService extends S.Class("NullableReferencedUpsertService")({
    /**
  * Nullable entity reference for Service.
  */
    "data": S.NullOr(S.Union(CreateServiceRef, ServiceRef))
}) {
}
export class ReferencedUpsertChangeOrderLineList extends S.Class("ReferencedUpsertChangeOrderLineList")({
    /**
  * A list of ChangeOrderLine entity refs.
  */
    "data": S.Array(S.Union(CreateItemChangeOrderRef, CreateItemImpactChangeOrderRef, CreateServiceTaskChangeOrderRef, ItemChangeOrderRef, ItemImpactChangeOrderRef, ServiceTaskChangeOrderRef))
}) {
}
export class ReferencedUpsertChangeOrderLine extends S.Class("ReferencedUpsertChangeOrderLine")({
    /**
  * Entity reference for ChangeOrderLine.
  */
    "data": S.Union(CreateItemChangeOrderRef, CreateItemImpactChangeOrderRef, CreateServiceTaskChangeOrderRef, ItemChangeOrderRef, ItemImpactChangeOrderRef, ServiceTaskChangeOrderRef)
}) {
}
export class NullableReferencedUpsertItemImpact extends S.Class("NullableReferencedUpsertItemImpact")({
    /**
  * Nullable entity reference for ItemImpact.
  */
    "data": S.NullOr(S.Union(CreateItemImpactRef, ItemImpactRef))
}) {
}
export class ReferencedUpsertItemImpactList extends S.Class("ReferencedUpsertItemImpactList")({
    /**
  * A list of ItemImpact entity refs.
  */
    "data": S.Array(S.Union(CreateItemImpactRef, ItemImpactRef))
}) {
}
export class ReferencedUpsertItemImpact extends S.Class("ReferencedUpsertItemImpact")({
    /**
  * Entity reference for ItemImpact.
  */
    "data": S.Union(CreateItemImpactRef, ItemImpactRef)
}) {
}
export class ReferencedUpsertItem extends S.Class("ReferencedUpsertItem")({
    /**
  * Entity reference for Item.
  */
    "data": S.Union(CreateItemRef, ItemRef)
}) {
}
export class NullableReferencedUpsertItem extends S.Class("NullableReferencedUpsertItem")({
    /**
  * Nullable entity reference for Item.
  */
    "data": S.NullOr(S.Union(CreateItemRef, ItemRef))
}) {
}
export class ReferencedUpsertItemList extends S.Class("ReferencedUpsertItemList")({
    /**
  * A list of Item entity refs.
  */
    "data": S.Array(S.Union(CreateItemRef, ItemRef))
}) {
}
export class ReferencedUpsertServiceTask extends S.Class("ReferencedUpsertServiceTask")({
    /**
  * Entity reference for ServiceTask.
  */
    "data": S.Union(CreateServiceTaskRef, ServiceTaskRef)
}) {
}
export class ReferencedUpsertEntrySourceList extends S.Class("ReferencedUpsertEntrySourceList")({
    /**
  * A list of EntrySource entity refs.
  */
    "data": S.Array(S.Union(CreateItemImpactRef, CreateItemRef, CreateServiceTaskRef, CreateServiceRef, CreateThirdPartyImpactRef, ItemImpactRef, ItemRef, ServiceTaskRef, ServiceRef, ThirdPartyImpactRef))
}) {
}
export class ReferencedUpsertEntrySource extends S.Class("ReferencedUpsertEntrySource")({
    /**
  * Entity reference for EntrySource.
  */
    "data": S.Union(CreateItemImpactRef, CreateItemRef, CreateServiceTaskRef, CreateServiceRef, CreateThirdPartyImpactRef, ItemImpactRef, ItemRef, ServiceTaskRef, ServiceRef, ThirdPartyImpactRef)
}) {
}
export class ReferencedUpsertItemEstimate extends S.Class("ReferencedUpsertItemEstimate")({
    /**
  * Entity reference for ItemEstimate.
  */
    "data": S.Union(CreateItemEstimateRef, ItemEstimateRef)
}) {
}
export class ReferencedUpsertItemImpactEstimate extends S.Class("ReferencedUpsertItemImpactEstimate")({
    /**
  * Entity reference for ItemImpactEstimate.
  */
    "data": S.Union(CreateItemImpactEstimateRef, ItemImpactEstimateRef)
}) {
}
export class ReferencedUpsertEstimateLineList extends S.Class("ReferencedUpsertEstimateLineList")({
    /**
  * A list of EstimateLine entity refs.
  */
    "data": S.Array(S.Union(CreateItemEstimateRef, CreateItemImpactEstimateRef, CreateServiceTaskEstimateRef, ItemEstimateRef, ItemImpactEstimateRef, ServiceTaskEstimateRef))
}) {
}
export class ReferencedUpsertEstimateLine extends S.Class("ReferencedUpsertEstimateLine")({
    /**
  * Entity reference for EstimateLine.
  */
    "data": S.Union(CreateItemEstimateRef, CreateItemImpactEstimateRef, CreateServiceTaskEstimateRef, ItemEstimateRef, ItemImpactEstimateRef, ServiceTaskEstimateRef)
}) {
}
export class ReferencedUpsertServiceTaskEstimate extends S.Class("ReferencedUpsertServiceTaskEstimate")({
    /**
  * Entity reference for ServiceTaskEstimate.
  */
    "data": S.Union(CreateServiceTaskEstimateRef, ServiceTaskEstimateRef)
}) {
}
export class ReferencedUpsertEntrySourceMetadata extends S.Class("ReferencedUpsertEntrySourceMetadata")({
    /**
  * Entity reference for EntrySourceMetadata.
  */
    "data": S.Union(CreateEntrySourceMetadataRef, EntrySourceMetadataRef)
}) {
}
export class ReferencedUpsertEntryList extends S.Class("ReferencedUpsertEntryList")({
    /**
  * A list of Entry entity refs.
  */
    "data": S.Array(S.Union(CreateEntryRef, EntryRef))
}) {
}
export class ReferencedUpsertItemAppraisalList extends S.Class("ReferencedUpsertItemAppraisalList")({
    /**
  * A list of ItemAppraisal entity refs.
  */
    "data": S.Array(S.Union(CreateItemAppraisalRef, ItemAppraisalRef))
}) {
}
export class NullableReferencedUpsertItemAppraisal extends S.Class("NullableReferencedUpsertItemAppraisal")({
    /**
  * Nullable entity reference for ItemAppraisal.
  */
    "data": S.NullOr(S.Union(CreateItemAppraisalRef, ItemAppraisalRef))
}) {
}
export class ReferencedUpsertAppraisalLineList extends S.Class("ReferencedUpsertAppraisalLineList")({
    /**
  * A list of AppraisalLine entity refs.
  */
    "data": S.Array(S.Union(CreateItemAppraisalRef, ItemAppraisalRef))
}) {
}
export class NullableReferencedUpsertServiceType extends S.Class("NullableReferencedUpsertServiceType")({
    /**
  * Nullable entity reference for ServiceType.
  */
    "data": S.NullOr(S.Union(CreateServiceTypeRef, ServiceTypeRef))
}) {
}
export class ReferencedUpsertServiceTypeList extends S.Class("ReferencedUpsertServiceTypeList")({
    /**
  * A list of ServiceType entity refs.
  */
    "data": S.Array(S.Union(CreateServiceTypeRef, ServiceTypeRef))
}) {
}
export class ReferencedUpsertPaymentLineList extends S.Class("ReferencedUpsertPaymentLineList")({
    /**
  * A list of PaymentLine entity refs.
  */
    "data": S.Array(S.Union(CreateItemPaymentRef, CreateItemImpactPaymentRef, CreateServiceTaskPaymentRef, ItemPaymentRef, ItemImpactPaymentRef, ServiceTaskPaymentRef))
}) {
}
export class ReferencedUpsertInvoiceLineList extends S.Class("ReferencedUpsertInvoiceLineList")({
    /**
  * A list of InvoiceLine entity refs.
  */
    "data": S.Array(S.Union(CreateItemInvoiceRef, CreateItemImpactInvoiceRef, CreateServiceTaskInvoiceRef, ItemInvoiceRef, ItemImpactInvoiceRef, ServiceTaskInvoiceRef))
}) {
}
export class NullableReferencedUpsertItemType extends S.Class("NullableReferencedUpsertItemType")({
    /**
  * Nullable entity reference for ItemType.
  */
    "data": S.NullOr(S.Union(CreateItemTypeRef, ItemTypeRef))
}) {
}
export class ReferencedUpsertDepreciationSchedule extends S.Class("ReferencedUpsertDepreciationSchedule")({
    /**
  * Entity reference for DepreciationSchedule.
  */
    "data": S.Union(CreateItemTypeRef, ItemTypeRef)
}) {
}
export class ReferencedUpsertItemTypeList extends S.Class("ReferencedUpsertItemTypeList")({
    /**
  * A list of ItemType entity refs.
  */
    "data": S.Array(S.Union(CreateItemTypeRef, ItemTypeRef))
}) {
}
export class ReferencedUpsertItemType extends S.Class("ReferencedUpsertItemType")({
    /**
  * Entity reference for ItemType.
  */
    "data": S.Union(CreateItemTypeRef, ItemTypeRef)
}) {
}
export class ReferencedUpsertBaseBucket extends S.Class("ReferencedUpsertBaseBucket")({
    /**
  * Entity reference for BaseBucket.
  */
    "data": S.Union(CreateBucketRef, BucketRef)
}) {
}
export class ReferencedUpsertBaseBucketList extends S.Class("ReferencedUpsertBaseBucketList")({
    /**
  * A list of BaseBucket entity refs.
  */
    "data": S.Array(S.Union(CreateBucketRef, BucketRef))
}) {
}
export class ReferencedUpsertBucketList extends S.Class("ReferencedUpsertBucketList")({
    /**
  * A list of Bucket entity refs.
  */
    "data": S.Array(S.Union(CreateBucketRef, BucketRef))
}) {
}
export class NullableReferencedUpsertBaseSubBucket extends S.Class("NullableReferencedUpsertBaseSubBucket")({
    /**
  * Nullable entity reference for BaseSubBucket.
  */
    "data": S.NullOr(S.Union(CreateSubBucketRef, SubBucketRef))
}) {
}
export class ReferencedUpsertBaseSubBucketList extends S.Class("ReferencedUpsertBaseSubBucketList")({
    /**
  * A list of BaseSubBucket entity refs.
  */
    "data": S.Array(S.Union(CreateSubBucketRef, SubBucketRef))
}) {
}
export class ReferencedUpsertSubBucketList extends S.Class("ReferencedUpsertSubBucketList")({
    /**
  * A list of SubBucket entity refs.
  */
    "data": S.Array(S.Union(CreateSubBucketRef, SubBucketRef))
}) {
}
export class ReferencedUpsertFundingSource extends S.Class("ReferencedUpsertFundingSource")({
    /**
  * Entity reference for FundingSource.
  */
    "data": S.Union(CreateClaimRef, ClaimRef)
}) {
}
export class ReferencedUpsertClaim extends S.Class("ReferencedUpsertClaim")({
    /**
  * Entity reference for Claim.
  */
    "data": S.Union(CreateClaimRef, ClaimRef)
}) {
}
export class CreateBaseBucketAttributes extends S.Class("CreateBaseBucketAttributes")({
    "limitAmount": S.Number,
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "lossSettlementType": S.optionalWith(CreateBaseBucketAttributesLossSettlementType, { nullable: true, default: () => "REPLACEMENT_COST_VALUE" }),
    "entryCount": S.optionalWith(S.Number, { nullable: true }),
    "entryAmount": S.optionalWith(S.Number, { nullable: true }),
    "entryIncurredAmount": S.optionalWith(S.Number, { nullable: true }),
    "entryProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true }),
    "fundingCount": S.optionalWith(S.Number, { nullable: true }),
    "fundingAmount": S.optionalWith(S.Number, { nullable: true }),
    "fundingPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyFunded": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ReferencedUpsertBaseBucketMetadata extends S.Class("ReferencedUpsertBaseBucketMetadata")({
    /**
  * Entity reference for BaseBucketMetadata.
  */
    "data": S.Union(CreateBaseBucketMetadataRef, BaseBucketMetadataRef)
}) {
}
export class ReferencedUpsertBucketFundingList extends S.Class("ReferencedUpsertBucketFundingList")({
    /**
  * A list of BucketFunding entity refs.
  */
    "data": S.Array(S.Union(CreateBucketFundingRef, BucketFundingRef))
}) {
}
export class ReferencedUpsertBucketDefinition extends S.Class("ReferencedUpsertBucketDefinition")({
    /**
  * Entity reference for BucketDefinition.
  */
    "data": S.Union(CreateCoverageRef, CoverageRef)
}) {
}
export class ReferencedUpsertBucketDefinitionList extends S.Class("ReferencedUpsertBucketDefinitionList")({
    /**
  * A list of BucketDefinition entity refs.
  */
    "data": S.Array(S.Union(CreateCoverageRef, CoverageRef))
}) {
}
export class ReferencedUpsertCoverage extends S.Class("ReferencedUpsertCoverage")({
    /**
  * Entity reference for Coverage.
  */
    "data": S.Union(CreateCoverageRef, CoverageRef)
}) {
}
export class ReferencedUpsertCoverageList extends S.Class("ReferencedUpsertCoverageList")({
    /**
  * A list of Coverage entity refs.
  */
    "data": S.Array(S.Union(CreateCoverageRef, CoverageRef))
}) {
}
export class ReferencedUpsertDeductible extends S.Class("ReferencedUpsertDeductible")({
    /**
  * Entity reference for Deductible.
  */
    "data": S.Union(CreateDeductibleRef, DeductibleRef)
}) {
}
export class ReferencedUpsertDeductibleList extends S.Class("ReferencedUpsertDeductibleList")({
    /**
  * A list of Deductible entity refs.
  */
    "data": S.Array(S.Union(CreateDeductibleRef, DeductibleRef))
}) {
}
export class NullableReferencedUpsertDeductible extends S.Class("NullableReferencedUpsertDeductible")({
    /**
  * Nullable entity reference for Deductible.
  */
    "data": S.NullOr(S.Union(CreateDeductibleRef, DeductibleRef))
}) {
}
export class ReferencedUpsertClaimDeductible extends S.Class("ReferencedUpsertClaimDeductible")({
    /**
  * Entity reference for ClaimDeductible.
  */
    "data": S.Union(CreateClaimDeductibleRef, ClaimDeductibleRef)
}) {
}
export class ReferencedUpsertClaimDeductibleList extends S.Class("ReferencedUpsertClaimDeductibleList")({
    /**
  * A list of ClaimDeductible entity refs.
  */
    "data": S.Array(S.Union(CreateClaimDeductibleRef, ClaimDeductibleRef))
}) {
}
export class ReferencedUpsertClaimTarget extends S.Class("ReferencedUpsertClaimTarget")({
    /**
  * Entity reference for ClaimTarget.
  */
    "data": S.Union(CreatePolicyTermRef, PolicyTermRef)
}) {
}
export class ReferencedUpsertPolicyTerm extends S.Class("ReferencedUpsertPolicyTerm")({
    /**
  * Entity reference for PolicyTerm.
  */
    "data": S.Union(CreatePolicyTermRef, PolicyTermRef)
}) {
}
export class ReferencedUpsertPolicyTermList extends S.Class("ReferencedUpsertPolicyTermList")({
    /**
  * A list of PolicyTerm entity refs.
  */
    "data": S.Array(S.Union(CreatePolicyTermRef, PolicyTermRef))
}) {
}
export class CreateClaimTargetAttributes extends S.Class("CreateClaimTargetAttributes")({
    "effectiveStartDate": S.String,
    "effectiveEndDate": S.String,
    "name": S.String,
    "description": S.optionalWith(S.String, { nullable: true }),
    "lossSettlementType": S.optionalWith(CreateClaimTargetAttributesLossSettlementType, { nullable: true })
}) {
}
export class CreatePolicyTermAttributes extends S.Class("CreatePolicyTermAttributes")({
    "effectiveStartDate": S.String,
    "effectiveEndDate": S.String,
    "name": S.optionalWith(S.String, { nullable: true }),
    "description": S.optionalWith(S.String, { nullable: true }),
    "lossSettlementType": S.optionalWith(CreatePolicyTermAttributesLossSettlementType, { nullable: true }),
    "premiumAmount": S.optionalWith(S.Number, { nullable: true }),
    "paymentDueDate": S.optionalWith(S.String, { nullable: true }),
    "isFullyPaid": S.optionalWith(S.Boolean, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "dueAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ReferencedUpsertPolicy extends S.Class("ReferencedUpsertPolicy")({
    /**
  * Entity reference for Policy.
  */
    "data": S.Union(CreatePolicyRef, PolicyRef)
}) {
}
export class NullableReferencedUpsertPolicyTemplate extends S.Class("NullableReferencedUpsertPolicyTemplate")({
    /**
  * Nullable entity reference for PolicyTemplate.
  */
    "data": S.NullOr(S.Union(CreatePolicyTemplateRef, PolicyTemplateRef))
}) {
}
export class ReferencedUpsertPolicyTemplate extends S.Class("ReferencedUpsertPolicyTemplate")({
    /**
  * Entity reference for PolicyTemplate.
  */
    "data": S.Union(CreatePolicyTemplateRef, PolicyTemplateRef)
}) {
}
export class CreateBucketDefinitionAttributes extends S.Class("CreateBucketDefinitionAttributes")({
    "name": S.String,
    "limitAmount": S.Number,
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    /**
  * Is required if not set in .basis
  */
    "lossSettlementType": S.optionalWith(CreateBucketDefinitionAttributesLossSettlementType, { nullable: true }),
    "effectiveStartDate": S.optionalWith(S.String, { nullable: true }),
    "effectiveEndDate": S.optionalWith(S.String, { nullable: true }),
    "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true, default: () => true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class ReferencedUpsertSubBucketDefinitionList extends S.Class("ReferencedUpsertSubBucketDefinitionList")({
    /**
  * A list of SubBucketDefinition entity refs.
  */
    "data": S.Array(S.Union(CreateSubCoverageRef, SubCoverageRef))
}) {
}
export class ReferencedUpsertSubBucketDefinition extends S.Class("ReferencedUpsertSubBucketDefinition")({
    /**
  * Entity reference for SubBucketDefinition.
  */
    "data": S.Union(CreateSubCoverageRef, SubCoverageRef)
}) {
}
export class ReferencedUpsertSubCoverageList extends S.Class("ReferencedUpsertSubCoverageList")({
    /**
  * A list of SubCoverage entity refs.
  */
    "data": S.Array(S.Union(CreateSubCoverageRef, SubCoverageRef))
}) {
}
export class ReferencedUpsertSubCoverage extends S.Class("ReferencedUpsertSubCoverage")({
    /**
  * Entity reference for SubCoverage.
  */
    "data": S.Union(CreateSubCoverageRef, SubCoverageRef)
}) {
}
export class NullableReferencedUpsertCoverageTemplate extends S.Class("NullableReferencedUpsertCoverageTemplate")({
    /**
  * Nullable entity reference for CoverageTemplate.
  */
    "data": S.NullOr(S.Union(CreateCoverageTemplateRef, CoverageTemplateRef))
}) {
}
export class ReferencedUpsertCoverageTemplate extends S.Class("ReferencedUpsertCoverageTemplate")({
    /**
  * Entity reference for CoverageTemplate.
  */
    "data": S.Union(CreateCoverageTemplateRef, CoverageTemplateRef)
}) {
}
export class ReferencedUpsertCoverageTemplateList extends S.Class("ReferencedUpsertCoverageTemplateList")({
    /**
  * A list of CoverageTemplate entity refs.
  */
    "data": S.Array(S.Union(CreateCoverageTemplateRef, CoverageTemplateRef))
}) {
}
export class NullableReferencedUpsertCoverageGroup extends S.Class("NullableReferencedUpsertCoverageGroup")({
    /**
  * Nullable entity reference for CoverageGroup.
  */
    "data": S.NullOr(S.Union(CreateCoverageGroupRef, CoverageGroupRef))
}) {
}
export class ReferencedUpsertPerilList extends S.Class("ReferencedUpsertPerilList")({
    /**
  * A list of Peril entity refs.
  */
    "data": S.Array(S.Union(CreatePerilRef, PerilRef))
}) {
}
export class ReferencedUpsertPeril extends S.Class("ReferencedUpsertPeril")({
    /**
  * Entity reference for Peril.
  */
    "data": S.Union(CreatePerilRef, PerilRef)
}) {
}
export class ReferencedUpsertEndorsementList extends S.Class("ReferencedUpsertEndorsementList")({
    /**
  * A list of Endorsement entity refs.
  */
    "data": S.Array(S.Union(CreateEndorsementRef, EndorsementRef))
}) {
}
export class ReferencedUpsertEndorsement extends S.Class("ReferencedUpsertEndorsement")({
    /**
  * Entity reference for Endorsement.
  */
    "data": S.Union(CreateEndorsementRef, EndorsementRef)
}) {
}
export class CreateSubBucketDefinitionAttributes extends S.Class("CreateSubBucketDefinitionAttributes")({
    "name": S.String,
    "limitAmount": S.Number,
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "lossSettlementType": S.optionalWith(CreateSubBucketDefinitionAttributesLossSettlementType, { nullable: true }),
    "isCoveragePerClaim": S.optionalWith(S.Boolean, { nullable: true }),
    "assignedAmount": S.optionalWith(S.Number, { nullable: true }),
    "remainingAmount": S.optionalWith(S.Number, { nullable: true }),
    "assignedPercentage": S.optionalWith(S.Number, { nullable: true }),
    "isFullyAssigned": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class NullableReferencedUpsertSubCoverageTemplate extends S.Class("NullableReferencedUpsertSubCoverageTemplate")({
    /**
  * Nullable entity reference for SubCoverageTemplate.
  */
    "data": S.NullOr(S.Union(CreateSubCoverageTemplateRef, SubCoverageTemplateRef))
}) {
}
export class ReferencedUpsertSubCoverageTemplateList extends S.Class("ReferencedUpsertSubCoverageTemplateList")({
    /**
  * A list of SubCoverageTemplate entity refs.
  */
    "data": S.Array(S.Union(CreateSubCoverageTemplateRef, SubCoverageTemplateRef))
}) {
}
export class ReferencedUpsertBaseSubBucketMetadata extends S.Class("ReferencedUpsertBaseSubBucketMetadata")({
    /**
  * Entity reference for BaseSubBucketMetadata.
  */
    "data": S.Union(CreateBaseSubBucketMetadataRef, BaseSubBucketMetadataRef)
}) {
}
export class ReferencedUpsertEndorsementTemplateList extends S.Class("ReferencedUpsertEndorsementTemplateList")({
    /**
  * A list of EndorsementTemplate entity refs.
  */
    "data": S.Array(S.Union(CreateEndorsementTemplateRef, EndorsementTemplateRef))
}) {
}
export class NullableReferencedUpsertEndorsementTemplate extends S.Class("NullableReferencedUpsertEndorsementTemplate")({
    /**
  * Nullable entity reference for EndorsementTemplate.
  */
    "data": S.NullOr(S.Union(CreateEndorsementTemplateRef, EndorsementTemplateRef))
}) {
}
export class NullableReferencedUpsertCoverageGroupTemplate extends S.Class("NullableReferencedUpsertCoverageGroupTemplate")({
    /**
  * Nullable entity reference for CoverageGroupTemplate.
  */
    "data": S.NullOr(S.Union(CreateCoverageGroupTemplateRef, CoverageGroupTemplateRef))
}) {
}
export class ReferencedUpsertCoverageGroupTemplateList extends S.Class("ReferencedUpsertCoverageGroupTemplateList")({
    /**
  * A list of CoverageGroupTemplate entity refs.
  */
    "data": S.Array(S.Union(CreateCoverageGroupTemplateRef, CoverageGroupTemplateRef))
}) {
}
export class CreateEndorsementAttributes extends S.Class("CreateEndorsementAttributes")({
    "formNumber": S.optionalWith(S.String, { nullable: true }),
    "effect": CreateEndorsementAttributesEffect,
    "limitAmount": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntry": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntryUpdateFixed": S.optionalWith(S.Number, { nullable: true }),
    "limitAmountPerEntryUpdatePercentage": S.optionalWith(S.Number, { nullable: true }),
    "lossSettlementType": S.optionalWith(CreateEndorsementAttributesLossSettlementType, { nullable: true })
}) {
}
export class ReferencedUpsertDepreciationModifierList extends S.Class("ReferencedUpsertDepreciationModifierList")({
    /**
  * A list of DepreciationModifier entity refs.
  */
    "data": S.Array(S.Union(CreateDepreciationModifierRef, DepreciationModifierRef))
}) {
}
export class ReferencedUpsertDepreciationOverrideList extends S.Class("ReferencedUpsertDepreciationOverrideList")({
    /**
  * A list of DepreciationOverride entity refs.
  */
    "data": S.Array(S.Union(CreateDepreciationOverrideRef, DepreciationOverrideRef))
}) {
}
export class ReferencedUpsertItemTemplate extends S.Class("ReferencedUpsertItemTemplate")({
    /**
  * Entity reference for ItemTemplate.
  */
    "data": S.Union(CreateItemTemplateRef, ItemTemplateRef)
}) {
}
export class ReferencedUpsertAssetAttributeClassList extends S.Class("ReferencedUpsertAssetAttributeClassList")({
    /**
  * A list of AssetAttributeClass entity refs.
  */
    "data": S.Array(S.Union(CreateAssetAttributeClassRef, AssetAttributeClassRef))
}) {
}
export class ReferencedUpsertAssetAttributeType extends S.Class("ReferencedUpsertAssetAttributeType")({
    /**
  * Entity reference for AssetAttributeType.
  */
    "data": S.Union(CreateAssetAttributeTypeRef, AssetAttributeTypeRef)
}) {
}
export class ReferencedUpsertAssetAttributeTypeList extends S.Class("ReferencedUpsertAssetAttributeTypeList")({
    /**
  * A list of AssetAttributeType entity refs.
  */
    "data": S.Array(S.Union(CreateAssetAttributeTypeRef, AssetAttributeTypeRef))
}) {
}
export class ReferencedUpsertIncidentClassList extends S.Class("ReferencedUpsertIncidentClassList")({
    /**
  * A list of IncidentClass entity refs.
  */
    "data": S.Array(S.Union(CreateIncidentClassRef, IncidentClassRef))
}) {
}
export class ReferencedUpsertItemCategoryList extends S.Class("ReferencedUpsertItemCategoryList")({
    /**
  * A list of ItemCategory entity refs.
  */
    "data": S.Array(S.Union(CreateItemCategoryRef, ItemCategoryRef))
}) {
}
export class ReferencedUpsertItemClassList extends S.Class("ReferencedUpsertItemClassList")({
    /**
  * A list of ItemClass entity refs.
  */
    "data": S.Array(S.Union(CreateItemClassRef, ItemClassRef))
}) {
}
export class ReferencedUpsertServiceCategoryList extends S.Class("ReferencedUpsertServiceCategoryList")({
    /**
  * A list of ServiceCategory entity refs.
  */
    "data": S.Array(S.Union(CreateServiceCategoryRef, ServiceCategoryRef))
}) {
}
export class ReferencedUpsertServiceClassList extends S.Class("ReferencedUpsertServiceClassList")({
    /**
  * A list of ServiceClass entity refs.
  */
    "data": S.Array(S.Union(CreateServiceClassRef, ServiceClassRef))
}) {
}
export class ReferencedUpsertBaseEntityList extends S.Class("ReferencedUpsertBaseEntityList")({
    /**
  * A list of BaseEntity entity refs.
  */
    "data": S.Array(S.Union(CreateChangeOrderRef, CreateEstimateRef, CreateInvoiceRef, CreatePaymentRef, CreateAssetAppraisalRef, CreateAppraisalRef, CreateFundingRef, CreateIncidentReportRef, CreatePoliceReportRef, CreateParamedicReportRef, CreateContractRef, CreateRentRollRef, CreatePermitRef, CreateBlueprintRef, CreateDeclarationsPageRef, CreatePolicyJacketRef, CreateScopeOfLossRef, CreateDeliveryPaperworkRef, CreateProductSpecRef, CreateUserManualRef, CreateWarrantyRef, CreateDeedRef, CreateItemChangeOrderRef, CreateItemImpactChangeOrderRef, CreateServiceTaskChangeOrderRef, CreateItemEstimateRef, CreateItemImpactEstimateRef, CreateServiceTaskEstimateRef, CreateItemInvoiceRef, CreateItemImpactInvoiceRef, CreateServiceTaskInvoiceRef, CreateItemPaymentRef, CreateItemImpactPaymentRef, CreateServiceTaskPaymentRef, CreateItemAppraisalRef, CreateItemizableFinancialDocumentStatsRef, CreateProviderRef, CreateCountryRef, CreateCurrencyRef, CreateDepreciationModifierRef, CreateDepreciationOverrideRef, CreateItemTypeRef, CreateDisasterRef, CreatePerilRef, CreateAssetAttributeTypeItemTemplateRef, CreateCoverageGroupTemplateRef, CreateCoverageTemplateRef, CreateEndorsementTemplateRef, CreateItemTemplateRef, CreatePolicyTemplateRef, CreateSpaceTypeItemTemplateRef, CreateSubCoverageTemplateRef, CreateSubmissionTrackTemplateRef, CreateAssetAttributeClassRef, CreateAssetAttributeTypeRef, CreateAssetTypeRef, CreateBucketClassRef, CreateBucketTypeRef, CreateDocumentClassRef, CreateDocumentTypeRef, CreateIncidentClassRef, CreateIncidentTypeRef, CreateItemCategoryRef, CreateItemClassRef, CreateServiceCategoryRef, CreateServiceClassRef, CreateServiceTypeRef, CreateSpaceGroupTypeRef, CreateSpaceCategoryRef, CreateSpaceClassRef, CreateSpaceTypeRef, CreateAccountInviteRef, CreateAccountProviderContactRef, CreateUserRef, CreateAccountProviderRef, CreateAccountRef, CreateAddressRef, CreateDwellingRef, CreateAuthProfileRef, CreateBaseBucketMetadataRef, CreateEntryRef, CreateBucketRef, CreateSubBucketRef, CreateBaseSubBucketMetadataRef, CreateCoverageRef, CreateBucketFundingRef, CreateClaimDeductibleRef, CreatePolicyTermRef, CreateClaimRef, CreateCoverageGroupRef, CreateDeductibleRef, CreateEmailAddressRef, CreateEndorsementRef, CreateEntrySourceMediaRef, CreateEntrySourceMetadataRef, CreateItemImpactRef, CreateItemRef, CreateServiceTaskRef, CreateServiceRef, CreateThirdPartyImpactRef, CreateFileProcessRef, CreateFileRef, CreateProjectImpactRef, CreateIncidentImpactRef, CreateIncidentRef, CreateItemMediaSuggestionRef, CreateItemProductSuggestionRef, CreateMediaRef, CreatePhoneNumberRef, CreatePolicyRef, CreateProjectMediaRef, CreateSpaceGroupRef, CreateSpaceRef, CreateSubCoverageRef, CreateThirdPartyDwellingRef, CreateThirdPartyIndividualRef, CreateUserAccountRoleRef, ChangeOrderRef, EstimateRef, InvoiceRef, PaymentRef, AssetAppraisalRef, AppraisalRef, FundingRef, IncidentReportRef, PoliceReportRef, ParamedicReportRef, ContractRef, RentRollRef, PermitRef, BlueprintRef, DeclarationsPageRef, PolicyJacketRef, ScopeOfLossRef, DeliveryPaperworkRef, ProductSpecRef, UserManualRef, WarrantyRef, DeedRef, ItemChangeOrderRef, ItemImpactChangeOrderRef, ServiceTaskChangeOrderRef, ItemEstimateRef, ItemImpactEstimateRef, ServiceTaskEstimateRef, ItemInvoiceRef, ItemImpactInvoiceRef, ServiceTaskInvoiceRef, ItemPaymentRef, ItemImpactPaymentRef, ServiceTaskPaymentRef, ItemAppraisalRef, ItemizableFinancialDocumentStatsRef, ProviderRef, CountryRef, CurrencyRef, DepreciationModifierRef, DepreciationOverrideRef, ItemTypeRef, DisasterRef, PerilRef, AssetAttributeTypeItemTemplateRef, CoverageGroupTemplateRef, CoverageTemplateRef, EndorsementTemplateRef, ItemTemplateRef, PolicyTemplateRef, SpaceTypeItemTemplateRef, SubCoverageTemplateRef, SubmissionTrackTemplateRef, AssetAttributeClassRef, AssetAttributeTypeRef, AssetTypeRef, BucketClassRef, BucketTypeRef, DocumentClassRef, DocumentTypeRef, IncidentClassRef, IncidentTypeRef, ItemCategoryRef, ItemClassRef, ServiceCategoryRef, ServiceClassRef, ServiceTypeRef, SpaceGroupTypeRef, SpaceCategoryRef, SpaceClassRef, SpaceTypeRef, AccountInviteRef, AccountProviderContactRef, UserRef, AccountProviderRef, AccountRef, AddressRef, DwellingRef, AuthProfileRef, BaseBucketMetadataRef, EntryRef, BucketRef, SubBucketRef, BaseSubBucketMetadataRef, CoverageRef, BucketFundingRef, ClaimDeductibleRef, PolicyTermRef, ClaimRef, CoverageGroupRef, DeductibleRef, EmailAddressRef, EndorsementRef, EntrySourceMediaRef, EntrySourceMetadataRef, ItemImpactRef, ItemRef, ServiceTaskRef, ServiceRef, ThirdPartyImpactRef, FileProcessRef, FileRef, ProjectImpactRef, IncidentImpactRef, IncidentRef, ItemMediaSuggestionRef, ItemProductSuggestionRef, MediaRef, PhoneNumberRef, PolicyRef, ProjectMediaRef, SpaceGroupRef, SpaceRef, SubCoverageRef, ThirdPartyDwellingRef, ThirdPartyIndividualRef, UserAccountRoleRef))
}) {
}
export class ReferencedUpsertThirdParty extends S.Class("ReferencedUpsertThirdParty")({
    /**
  * Entity reference for ThirdParty.
  */
    "data": S.Union(CreateThirdPartyDwellingRef, CreateThirdPartyIndividualRef, ThirdPartyDwellingRef, ThirdPartyIndividualRef)
}) {
}
export class CreateItemInvoiceAttributes extends S.Class("CreateItemInvoiceAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "purpose": S.optionalWith(CreateItemInvoiceAttributesPurpose, { nullable: true, default: () => "PURCHASE" }),
    "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemAttributes extends S.Class("CreateItemAttributes")({
    "name": S.String,
    "description": S.optionalWith(S.String, { nullable: true }),
    "requiresAttention": S.optionalWith(S.Boolean, { nullable: true }),
    "fieldsNeedingAttention": S.optionalWith(S.Struct({
        "type": S.optionalWith(S.Boolean, { nullable: true }),
        "quality": S.optionalWith(S.Boolean, { nullable: true }),
        "acquiredDate": S.optionalWith(S.Boolean, { nullable: true })
    }), { nullable: true }),
    "appraisedAmount": S.optionalWith(S.Number, { nullable: true }),
    "appraisalCount": S.optionalWith(S.Number, { nullable: true }),
    "quality": S.optionalWith(CreateItemAttributesQuality, { nullable: true }),
    "condition": S.optionalWith(CreateItemAttributesCondition, { nullable: true }),
    "isDepreciationExempt": S.optionalWith(S.Boolean, { nullable: true }),
    "acquiredDate": S.optionalWith(S.String, { nullable: true }),
    "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "currentQuantity": S.optionalWith(S.Number, { nullable: true }),
    "paymentCount": S.optionalWith(S.Number, { nullable: true }),
    "paidAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "paidFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoiceCount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "invoicedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "estimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimateCount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedSubtotalAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedTaxAmount": S.optionalWith(S.Number, { nullable: true }),
    "acceptedEstimatedFeeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.Number, { nullable: true }),
    "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
    "acquisitionPaidAmount": S.optionalWith(S.Number, { nullable: true }),
    "acquisitionInvoicedAmount": S.optionalWith(S.Number, { nullable: true }),
    "acquisitionEstimatedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableProjectedAmount": S.optionalWith(S.Number, { nullable: true }),
    "submittableIncurredAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemPaymentAttributes extends S.Class("CreateItemPaymentAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "purpose": S.optionalWith(CreateItemPaymentAttributesPurpose, { nullable: true, default: () => "PURCHASE" }),
    "depreciableAmount": S.optionalWith(S.Number, { nullable: true }),
    "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemChangeOrderAttributes extends S.Class("CreateItemChangeOrderAttributes")({
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "purpose": S.optionalWith(CreateItemChangeOrderAttributesPurpose, { nullable: true })
}) {
}
export class CreateItemEstimateAttributes extends S.Class("CreateItemEstimateAttributes")({
    "isAccepted": S.optionalWith(S.Boolean, { nullable: true }),
    "date": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true }),
    "changeOrderCount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderTaxAmount": S.optionalWith(S.String, { nullable: true }),
    "changeOrderFeeAmount": S.optionalWith(S.String, { nullable: true }),
    "currentAmount": S.optionalWith(S.String, { nullable: true }),
    "currentSubtotalAmount": S.optionalWith(S.String, { nullable: true }),
    "currentTaxAmount": S.optionalWith(S.String, { nullable: true }),
    "currentFeeAmount": S.optionalWith(S.String, { nullable: true }),
    "purpose": S.optionalWith(CreateItemEstimateAttributesPurpose, { nullable: true, default: () => "PURCHASE" }),
    "acquisitionAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateAccountInviteAttributes extends S.Class("CreateAccountInviteAttributes")({
    /**
  * What level of permissions the user has for this account.
  */
    "role": CreateAccountInviteAttributesRole,
    /**
  * The user's email
  */
    "email": S.String,
    "phone": S.optionalWith(S.String, { nullable: true }),
    "invitedAt": S.optionalWith(S.String, { nullable: true }),
    "acceptedAt": S.optionalWith(S.String, { nullable: true })
}) {
}
export class CreateAuthProfileAttributes extends S.Class("CreateAuthProfileAttributes")({
    "provider": CreateAuthProfileAttributesProvider,
    "externalId": S.String
}) {
}
export class CreateItemMediaSuggestionAttributes extends S.Class("CreateItemMediaSuggestionAttributes")({
    "data_key": S.String,
    "name": S.String,
    "quality": S.optionalWith(CreateItemMediaSuggestionAttributesQuality, { nullable: true }),
    "condition": S.optionalWith(CreateItemMediaSuggestionAttributesCondition, { nullable: true }),
    "acquiredQuantity": S.optionalWith(S.Number, { nullable: true, default: () => 1 }),
    "coordsXPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsYPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsWPercentage": S.optionalWith(S.Number, { nullable: true }),
    "coordsHPercentage": S.optionalWith(S.Number, { nullable: true }),
    "timestamp": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateItemProductSuggestionAttributes extends S.Class("CreateItemProductSuggestionAttributes")({
    "source": CreateItemProductSuggestionAttributesSource,
    "source_id": S.String,
    "data_key": S.String,
    "description": S.optionalWith(S.String, { nullable: true }),
    "sellerName": S.optionalWith(S.String, { nullable: true }),
    "sellerLink": S.optionalWith(S.String, { nullable: true }),
    "amount": S.optionalWith(S.Number, { nullable: true }),
    "subtotalAmount": S.Number,
    "taxAmount": S.optionalWith(S.Number, { nullable: true }),
    "feeAmount": S.optionalWith(S.Number, { nullable: true })
}) {
}
export class CreateUserAccountRoleAttributes extends S.Class("CreateUserAccountRoleAttributes")({
    /**
  * What level of permissions the user has for this account.
  */
    "role": CreateUserAccountRoleAttributesRole
}) {
}
export class JsonApiEntityReference extends S.Class("JsonApiEntityReference")({
    "data": EntityReference
}) {
}
export class JsonApiEntityReferenceList extends S.Class("JsonApiEntityReferenceList")({
    "data": S.Array(EntityReference)
}) {
}
export class TransloaditAssemblyOptionsDto extends S.Class("TransloaditAssemblyOptionsDto")({
    /**
  * The semantic type of file that is being uploaded.
  */
    "type": TransloaditAssemblyOptionsDtoType,
    /**
  * What provider will be used for uploads.
  */
    "provider": S.Literal("TRANSLOADIT")
}) {
}
export class TransloaditStoreFileAssemblyParams extends S.Class("TransloaditStoreFileAssemblyParams")({
    "auth": TransloaditAssemblyAuth,
    /**
  * Transloadit template ID to execute
  */
    "template_id": S.String,
    /**
  * Trusted fields interpolated in the template (signed server-side).
  */
    "fields": TransloaditStoreFileAssemblyFields
}) {
}
export class TransloaditAvatarAssemblyParams extends S.Class("TransloaditAvatarAssemblyParams")({
    "auth": TransloaditAssemblyAuth,
    /**
  * Transloadit template ID to execute
  */
    "template_id": S.String,
    /**
  * Trusted fields interpolated in the template (signed server-side).
  */
    "fields": TransloaditAvatarAssemblyFields
}) {
}
export class CdnScopeDto extends S.Class("CdnScopeDto")({
    /**
  * The CloudFront distribution domain used for access
  */
    "domain": S.String,
    /**
  * Account ID the scope applies to
  */
    "accountId": S.String,
    /**
  * User ID the scope applies to
  */
    "userId": S.String,
    /**
  * List of resource policies scoped to this user/account
  */
    "resources": S.Array(CdnResourceDto)
}) {
}
export class SignedUrlItemDto extends S.Class("SignedUrlItemDto")({
    /**
  * Object key (relative path) or absolute URL to sign. Your API should enforce one style.
  */
    "key": S.String,
    /**
  * Optional per-item TTL (time-to-live) in seconds. Must be between 60s (1m) and 86400s (24h).
  */
    "ttlSeconds": S.optionalWith(S.Number.pipe(S.greaterThanOrEqualTo(60), S.lessThanOrEqualTo(86400)), { nullable: true }),
    /**
  * HTTP action to sign for (GET for download, PUT for upload, HEAD for metadata).
  */
    "action": S.optionalWith(SignedUrlItemDtoAction, { nullable: true }),
    /**
  * Content-Type header to enforce. For PUT uploads, sets the required Content-Type. For GET, sets the response Content-Type.
  */
    "contentType": S.optionalWith(S.String, { nullable: true }),
    /**
  * Response content disposition. Useful for forcing downloads or naming files in GET requests.
  */
    "contentDisposition": S.optionalWith(S.String, { nullable: true }),
    /**
  * Optional client-provided correlation ID to map requests to results.
  */
    "clientToken": S.optionalWith(S.String, { nullable: true })
}) {
}
export class SignedUrlResultDto extends S.Class("SignedUrlResultDto")({
    /**
  * The storage key for the file
  */
    "key": S.String,
    /**
  * Signed URL for accessing the file (present on success)
  */
    "url": S.optionalWith(S.String, { nullable: true }),
    /**
  * Expiration timestamp in ISO 8601 format
  */
    "expiresAt": S.optionalWith(S.String, { nullable: true }),
    /**
  * Effective TTL (time to live) in seconds
  */
    "ttlSeconds": S.optionalWith(S.Number, { nullable: true }),
    /**
  * Action for which this URL was issued
  */
    "action": S.optionalWith(SignedUrlResultDtoAction, { nullable: true }),
    /**
  * Error details if URL generation failed
  */
    "error": S.optionalWith(SignedUrlErrorDto, { nullable: true }),
    /**
  * Optional client-provided token to correlate requests
  */
    "clientToken": S.optionalWith(S.String, { nullable: true })
}) {
}
export class AssetTypeData extends S.Class("AssetTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true })
}) {
}
export class CurrencyData extends S.Class("CurrencyData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Currency"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateCurrencyAttributes, { nullable: true })
}) {
}
export class CountryData extends S.Class("CountryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Country"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CountryAttributes, { nullable: true })
}) {
}
export class ProviderData extends S.Class("ProviderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Provider"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateProviderAttributes, { nullable: true })
}) {
}
export class BaseEntityData extends S.Class("BaseEntityData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseEntity"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class UpdateAssetTypeData extends S.Class("UpdateAssetTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true })
}) {
}
export class UpdateCurrencyData extends S.Class("UpdateCurrencyData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Currency"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateCurrencyAttributes, { nullable: true })
}) {
}
export class UpdateCountryData extends S.Class("UpdateCountryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Country"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CountryAttributes, { nullable: true })
}) {
}
export class UpdateProviderData extends S.Class("UpdateProviderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Provider"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateProviderAttributes, { nullable: true })
}) {
}
export class UpdateBaseEntityData extends S.Class("UpdateBaseEntityData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseEntity"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true })
}) {
}
export class AuthProfileRelationships extends S.Class("AuthProfileRelationships")({
    "user": S.optionalWith(ReferencedUser, { nullable: true })
}) {
}
export class ThirdPartyIndividualRelationships extends S.Class("ThirdPartyIndividualRelationships")({
    "project": S.optionalWith(ReferencedProject, { nullable: true })
}) {
}
export class AccountRelationships extends S.Class("AccountRelationships")({
    "owner": S.optionalWith(ReferencedUser, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    /**
  * The user's roles across various accounts
  */
    "userRoles": S.optionalWith(ReferencedUserAccountRoleList, { nullable: true }),
    "defaultCurrency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {
}
export class IdentityRelationships extends S.Class("IdentityRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedPhoneNumber, { nullable: true })
}) {
}
export class UserRelationships extends S.Class("UserRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedPhoneNumber, { nullable: true }),
    /**
  * The user's default account to load
  */
    "defaultAccount": S.optionalWith(NullableReferencedAccount, { nullable: true }),
    /**
  * The user's roles across various accounts
  */
    "accountRoles": S.optionalWith(ReferencedUserAccountRoleList, { nullable: true })
}) {
}
export class AccountInviteRelationships extends S.Class("AccountInviteRelationships")({
    /**
  * The account this invite is for.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "invitedBy": S.optionalWith(ReferencedUser, { nullable: true }),
    "acceptedBy": S.optionalWith(NullableReferencedUser, { nullable: true })
}) {
}
export class UserAccountRoleRelationships extends S.Class("UserAccountRoleRelationships")({
    /**
  * The user being granted permissions.
  */
    "user": S.optionalWith(ReferencedUser, { nullable: true }),
    /**
  * The account for which permissions are granted.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true })
}) {
}
export class EmailAddressRelationships extends S.Class("EmailAddressRelationships")({
    "identity": S.optionalWith(ReferencedIdentity, { nullable: true })
}) {
}
export class AccountProviderContactRelationships extends S.Class("AccountProviderContactRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedPhoneNumber, { nullable: true }),
    "provider": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
    "user": S.optionalWith(NullableReferencedUser, { nullable: true })
}) {
}
export class AccountProviderRelationships extends S.Class("AccountProviderRelationships")({
    /**
  * The account this provider is attached to.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "provider": S.optionalWith(NullableReferencedProvider, { nullable: true })
}) {
}
export class ProjectRelationships extends S.Class("ProjectRelationships")({
    /**
  * The account that owns this project.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "mediaAttachments": S.optionalWith(ReferencedProjectMediaList, { nullable: true })
}) {
}
export class DisasterRelationships extends S.Class("DisasterRelationships")({
    "incidentType": S.optionalWith(ReferencedIncidentType, { nullable: true })
}) {
}
export class IncidentRelationships extends S.Class("IncidentRelationships")({
    /**
  * The account that owns this project.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "mediaAttachments": S.optionalWith(ReferencedProjectMediaList, { nullable: true }),
    "type": S.optionalWith(ReferencedIncidentType, { nullable: true }),
    "disaster": S.optionalWith(NullableReferencedDisaster, { nullable: true })
}) {
}
export class ProjectMediaRelationships extends S.Class("ProjectMediaRelationships")({
    "media": S.optionalWith(ReferencedMedia, { nullable: true }),
    "project": S.optionalWith(ReferencedProject, { nullable: true })
}) {
}
export class FileProcessRelationships extends S.Class("FileProcessRelationships")({
    "file": S.optionalWith(ReferencedFile, { nullable: true })
}) {
}
export class ProjectImpactRelationships extends S.Class("ProjectImpactRelationships")({
    "asset": S.optionalWith(ReferencedAsset, { nullable: true }),
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true })
}) {
}
export class MediaRelationships extends S.Class("MediaRelationships")({
    /**
  * The account's UUID
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(ReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projectAssignments": S.optionalWith(ReferencedProjectMediaList, { nullable: true }),
    "entrySourceAnnotations": S.optionalWith(ReferencedEntrySourceMediaList, { nullable: true })
}) {
}
export class ItemizableFinancialDocumentStatsRelationships extends S.Class("ItemizableFinancialDocumentStatsRelationships")({
    "object": S.optionalWith(ReferencedItemizableFinancialDocument, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(ReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {
}
export class FileRelationships extends S.Class("FileRelationships")({
    /**
  * ID for the account to which this file belongs.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "processes": S.optionalWith(ReferencedFileProcessList, { nullable: true }),
    "media": S.optionalWith(ReferencedMediaList, { nullable: true }),
    "documents": S.optionalWith(ReferencedDocumentList, { nullable: true }),
    "addedBy": S.optionalWith(ReferencedUser, { nullable: true })
}) {
}
export class AssetRelationships extends S.Class("AssetRelationships")({
    "assetType": S.optionalWith(ReferencedAssetType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedAssetAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedAssetAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedAssetAppraisal, { nullable: true })
}) {
}
export class PerilRelationships extends S.Class("PerilRelationships")({
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class IncidentClassRelationships extends S.Class("IncidentClassRelationships")({
    "types": S.optionalWith(ReferencedIncidentTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class DwellingRelationships extends S.Class("DwellingRelationships")({
    "assetType": S.optionalWith(ReferencedAssetType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedAssetAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedAssetAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedAssetAppraisal, { nullable: true }),
    "address": S.optionalWith(ReferencedAddress, { nullable: true })
}) {
}
export class AssetAppraisalRelationships extends S.Class("AssetAppraisalRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
    "asset": S.optionalWith(ReferencedAsset, { nullable: true })
}) {
}
export class BlueprintRelationships extends S.Class("BlueprintRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true })
}) {
}
export class FinancialDocumentRelationships extends S.Class("FinancialDocumentRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {
}
export class DocumentClassRelationships extends S.Class("DocumentClassRelationships")({
    "types": S.optionalWith(ReferencedDocumentTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class DocumentTypeRelationships extends S.Class("DocumentTypeRelationships")({
    "classes": S.optionalWith(ReferencedDocumentClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class SpaceGroupRelationships extends S.Class("SpaceGroupRelationships")({
    "type": S.optionalWith(ReferencedSpaceType, { nullable: true }),
    "asset": S.optionalWith(ReferencedAsset, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true })
}) {
}
export class SpaceRelationships extends S.Class("SpaceRelationships")({
    "type": S.optionalWith(ReferencedSpaceType, { nullable: true }),
    "group": S.optionalWith(ReferencedSpaceGroup, { nullable: true }),
    /**
  * The asset to which this space belongs.
  */
    "asset": S.optionalWith(ReferencedAsset, { nullable: true })
}) {
}
export class SpaceCategoryRelationships extends S.Class("SpaceCategoryRelationships")({
    "classes": S.optionalWith(ReferencedSpaceClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
    "groupTypes": S.optionalWith(ReferencedSpaceGroupTypeList, { nullable: true })
}) {
}
export class SpaceClassRelationships extends S.Class("SpaceClassRelationships")({
    "categories": S.optionalWith(ReferencedSpaceCategoryList, { nullable: true }),
    "types": S.optionalWith(ReferencedSpaceTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
    "groupTypes": S.optionalWith(ReferencedSpaceGroupTypeList, { nullable: true })
}) {
}
export class SpaceGroupTypeRelationships extends S.Class("SpaceGroupTypeRelationships")({
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
    "bucketTypes": S.optionalWith(ReferencedBucketTypeList, { nullable: true })
}) {
}
export class BucketClassRelationships extends S.Class("BucketClassRelationships")({
    "types": S.optionalWith(ReferencedBucketTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class BucketTypeRelationships extends S.Class("BucketTypeRelationships")({
    "classes": S.optionalWith(ReferencedBucketClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class AddressRelationships extends S.Class("AddressRelationships")({
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "country": S.optionalWith(ReferencedCountry, { nullable: true })
}) {
}
export class ThirdPartyDwellingRelationships extends S.Class("ThirdPartyDwellingRelationships")({
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "country": S.optionalWith(ReferencedCountry, { nullable: true })
}) {
}
export class ItemizableFinancialDocumentRelationships extends S.Class("ItemizableFinancialDocumentRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true })
}) {
}
export class ItemImpactPaymentRelationships extends S.Class("ItemImpactPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedPayment, { nullable: true }),
    "subject": S.optionalWith(ReferencedItemImpact, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ItemImpactInvoiceRelationships extends S.Class("ItemImpactInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedInvoice, { nullable: true }),
    "subject": S.optionalWith(ReferencedItemImpact, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ItemImpactEstimateRelationships extends S.Class("ItemImpactEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedEstimate, { nullable: true }),
    "subject": S.optionalWith(ReferencedItemImpact, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ItemAppraisalRelationships extends S.Class("ItemAppraisalRelationships")({
    "appraisal": S.optionalWith(ReferencedAppraisal, { nullable: true }),
    "subject": S.optionalWith(ReferencedItem, { nullable: true })
}) {
}
export class ItemInvoiceRelationships extends S.Class("ItemInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedInvoice, { nullable: true }),
    "subject": S.optionalWith(ReferencedItem, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ItemPaymentRelationships extends S.Class("ItemPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedPayment, { nullable: true }),
    "subject": S.optionalWith(ReferencedItem, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ItemEstimateRelationships extends S.Class("ItemEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedEstimate, { nullable: true }),
    "subject": S.optionalWith(ReferencedItem, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ItemProductSuggestionRelationships extends S.Class("ItemProductSuggestionRelationships")({
    "item": S.optionalWith(ReferencedItem, { nullable: true })
}) {
}
export class ServiceTaskPaymentRelationships extends S.Class("ServiceTaskPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedPayment, { nullable: true }),
    "subject": S.optionalWith(ReferencedServiceTask, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ServiceTaskInvoiceRelationships extends S.Class("ServiceTaskInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedInvoice, { nullable: true }),
    "subject": S.optionalWith(ReferencedServiceTask, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ServiceTaskEstimateRelationships extends S.Class("ServiceTaskEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedEstimate, { nullable: true }),
    "subject": S.optionalWith(ReferencedServiceTask, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class ChangeOrderRelationships extends S.Class("ChangeOrderRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true }),
    /**
  * Estimate that the ChangeOrder applies to.
  */
    "estimate": S.optionalWith(ReferencedEstimate, { nullable: true }),
    /**
  * AccountProvider for the ChangeOrder. Computed based on .estimate.vendor.
  */
    "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
    /**
  * Service for the ChangeOrder. Computed based on .estimate.service.
  */
    "service": S.optionalWith(ReferencedService, { nullable: true }),
    "lines": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedEntrySourceList, { nullable: true })
}) {
}
export class EntrySourceMetadataRelationships extends S.Class("EntrySourceMetadataRelationships")({
    "object": S.optionalWith(ReferencedEntrySource, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "project": S.optionalWith(NullableReferencedProject, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {
}
export class AppraisalLineRelationships extends S.Class("AppraisalLineRelationships")({
    "appraisal": S.optionalWith(ReferencedAppraisal, { nullable: true }),
    "subject": S.optionalWith(ReferencedEntrySource, { nullable: true })
}) {
}
export class InvoiceLineRelationships extends S.Class("InvoiceLineRelationships")({
    "invoice": S.optionalWith(NullableReferencedInvoice, { nullable: true }),
    "subject": S.optionalWith(ReferencedEntrySource, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class PaymentLineRelationships extends S.Class("PaymentLineRelationships")({
    "payment": S.optionalWith(NullableReferencedPayment, { nullable: true }),
    "subject": S.optionalWith(ReferencedEntrySource, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class EstimateLineRelationships extends S.Class("EstimateLineRelationships")({
    "estimate": S.optionalWith(NullableReferencedEstimate, { nullable: true }),
    "subject": S.optionalWith(ReferencedEntrySource, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderLineList, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true })
}) {
}
export class EntrySourceMediaRelationships extends S.Class("EntrySourceMediaRelationships")({
    "entrySource": S.optionalWith(ReferencedEntrySource, { nullable: true }),
    "media": S.optionalWith(ReferencedMedia, { nullable: true })
}) {
}
export class ItemChangeOrderRelationships extends S.Class("ItemChangeOrderRelationships")({
    "estimateLine": S.optionalWith(ReferencedItemEstimate, { nullable: true }),
    "changeOrder": S.optionalWith(ReferencedChangeOrder, { nullable: true }),
    "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedService, { nullable: true }),
    "subject": S.optionalWith(ReferencedItem, { nullable: true })
}) {
}
export class ItemImpactChangeOrderRelationships extends S.Class("ItemImpactChangeOrderRelationships")({
    "estimateLine": S.optionalWith(ReferencedItemImpactEstimate, { nullable: true }),
    "changeOrder": S.optionalWith(ReferencedChangeOrder, { nullable: true }),
    "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedService, { nullable: true }),
    "subject": S.optionalWith(ReferencedItemImpact, { nullable: true })
}) {
}
export class EstimateRelationships extends S.Class("EstimateRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "lines": S.optionalWith(ReferencedEstimateLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedEntrySourceList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true })
}) {
}
export class ChangeOrderLineRelationships extends S.Class("ChangeOrderLineRelationships")({
    "estimateLine": S.optionalWith(ReferencedEstimateLine, { nullable: true }),
    "changeOrder": S.optionalWith(ReferencedChangeOrder, { nullable: true }),
    "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedService, { nullable: true }),
    "subject": S.optionalWith(ReferencedEntrySource, { nullable: true })
}) {
}
export class ServiceTaskChangeOrderRelationships extends S.Class("ServiceTaskChangeOrderRelationships")({
    "estimateLine": S.optionalWith(ReferencedServiceTaskEstimate, { nullable: true }),
    "changeOrder": S.optionalWith(ReferencedChangeOrder, { nullable: true }),
    "vendor": S.optionalWith(ReferencedAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedService, { nullable: true }),
    "subject": S.optionalWith(ReferencedServiceTask, { nullable: true })
}) {
}
export class EntrySourceRelationships extends S.Class("EntrySourceRelationships")({
    "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true })
}) {
}
export class ServiceTaskRelationships extends S.Class("ServiceTaskRelationships")({
    "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "service": S.optionalWith(ReferencedService, { nullable: true }),
    "payments": S.optionalWith(ReferencedPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true })
}) {
}
export class PaymentRelationships extends S.Class("PaymentRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "lines": S.optionalWith(ReferencedPaymentLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedEntrySourceList, { nullable: true })
}) {
}
export class ServiceRelationships extends S.Class("ServiceRelationships")({
    "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    /**
  * What type of service is being provided.
  */
    "type": S.optionalWith(NullableReferencedServiceType, { nullable: true }),
    "payments": S.optionalWith(ReferencedPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true }),
    "paidLineItems": S.optionalWith(ReferencedPaymentLineList, { nullable: true }),
    "invoicedLineItems": S.optionalWith(ReferencedInvoiceLineList, { nullable: true }),
    "estimatedLineItems": S.optionalWith(ReferencedEstimateLineList, { nullable: true })
}) {
}
export class InvoiceRelationships extends S.Class("InvoiceRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedService, { nullable: true }),
    "lines": S.optionalWith(ReferencedInvoiceLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedEntrySourceList, { nullable: true })
}) {
}
export class ItemImpactRelationships extends S.Class("ItemImpactRelationships")({
    "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "item": S.optionalWith(ReferencedItem, { nullable: true }),
    "replacement": S.optionalWith(NullableReferencedItem, { nullable: true }),
    "payments": S.optionalWith(ReferencedPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true }),
    "itemType": S.optionalWith(NullableReferencedItemType, { nullable: true })
}) {
}
export class ItemRelationships extends S.Class("ItemRelationships")({
    "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "type": S.optionalWith(NullableReferencedItemType, { nullable: true }),
    "asset": S.optionalWith(NullableReferencedAsset, { nullable: true }),
    "space": S.optionalWith(NullableReferencedSpace, { nullable: true }),
    "replaces": S.optionalWith(NullableReferencedItemImpact, { nullable: true }),
    "payments": S.optionalWith(ReferencedPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedChangeOrderList, { nullable: true }),
    "impacts": S.optionalWith(ReferencedItemImpactList, { nullable: true })
}) {
}
export class ItemMediaSuggestionRelationships extends S.Class("ItemMediaSuggestionRelationships")({
    "media": S.optionalWith(ReferencedMedia, { nullable: true }),
    "item": S.optionalWith(NullableReferencedItem, { nullable: true }),
    "existing_items": S.optionalWith(ReferencedItemList, { nullable: true }),
    "type": S.optionalWith(NullableReferencedItemType, { nullable: true }),
    "asset": S.optionalWith(NullableReferencedAsset, { nullable: true }),
    "space": S.optionalWith(NullableReferencedSpace, { nullable: true })
}) {
}
export class DepreciationModifierRelationships extends S.Class("DepreciationModifierRelationships")({
    "schedule": S.optionalWith(ReferencedDepreciationSchedule, { nullable: true })
}) {
}
export class ItemTemplateRelationships extends S.Class("ItemTemplateRelationships")({
    "itemType": S.optionalWith(ReferencedItemType, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class BaseBucketMetadataRelationships extends S.Class("BaseBucketMetadataRelationships")({
    "object": S.optionalWith(ReferencedBaseBucket, { nullable: true })
}) {
}
export class FundingSourceRelationships extends S.Class("FundingSourceRelationships")({
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "buckets": S.optionalWith(ReferencedBaseBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedFundingList, { nullable: true }),
    "contacts": S.optionalWith(ReferencedAccountProviderContactList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {
}
export class EntryRelationships extends S.Class("EntryRelationships")({
    "source": S.optionalWith(ReferencedEntrySource, { nullable: true }),
    "bucket": S.optionalWith(ReferencedBaseBucket, { nullable: true }),
    "subBucket": S.optionalWith(NullableReferencedBaseSubBucket, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {
}
export class BucketFundingRelationships extends S.Class("BucketFundingRelationships")({
    "funding": S.optionalWith(ReferencedFunding, { nullable: true }),
    "bucket": S.optionalWith(ReferencedBaseBucket, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true })
}) {
}
export class BaseBucketRelationships extends S.Class("BaseBucketRelationships")({
    "type": S.optionalWith(NullableReferencedBucketType, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
    "metadata": S.optionalWith(ReferencedBaseBucketMetadata, { nullable: true }),
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "subBuckets": S.optionalWith(ReferencedBaseSubBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedBucketFundingList, { nullable: true })
}) {
}
export class FundingRelationships extends S.Class("FundingRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "source": S.optionalWith(ReferencedFundingSource, { nullable: true }),
    "allocations": S.optionalWith(ReferencedBucketFundingList, { nullable: true })
}) {
}
export class SubBucketDefinitionRelationships extends S.Class("SubBucketDefinitionRelationships")({
    "parent": S.optionalWith(ReferencedBucketDefinition, { nullable: true }),
    "buckets": S.optionalWith(ReferencedSubBucketList, { nullable: true })
}) {
}
export class ClaimTargetRelationships extends S.Class("ClaimTargetRelationships")({
    "provider": S.optionalWith(ReferencedProvider, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "deductibles": S.optionalWith(ReferencedDeductibleList, { nullable: true }),
    "bucketDefinitions": S.optionalWith(ReferencedBucketDefinitionList, { nullable: true })
}) {
}
export class BucketRelationships extends S.Class("BucketRelationships")({
    "type": S.optionalWith(NullableReferencedBucketType, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
    "metadata": S.optionalWith(ReferencedBaseBucketMetadata, { nullable: true }),
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "subBuckets": S.optionalWith(ReferencedBaseSubBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedBucketFundingList, { nullable: true }),
    "definition": S.optionalWith(ReferencedBucketDefinition, { nullable: true }),
    "deductible": S.optionalWith(ReferencedDeductible, { nullable: true }),
    "claimDeductible": S.optionalWith(ReferencedClaimDeductible, { nullable: true })
}) {
}
export class ClaimRelationships extends S.Class("ClaimRelationships")({
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "buckets": S.optionalWith(ReferencedBaseBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedFundingList, { nullable: true }),
    "contacts": S.optionalWith(ReferencedAccountProviderContactList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "target": S.optionalWith(ReferencedClaimTarget, { nullable: true }),
    "provider": S.optionalWith(ReferencedProvider, { nullable: true }),
    "deductibles": S.optionalWith(ReferencedDeductibleList, { nullable: true })
}) {
}
export class DeductibleRelationships extends S.Class("DeductibleRelationships")({
    "claimTarget": S.optionalWith(ReferencedClaimTarget, { nullable: true }),
    "bucketDefinitions": S.optionalWith(ReferencedBucketDefinitionList, { nullable: true }),
    "claimDeductibles": S.optionalWith(ReferencedClaimDeductibleList, { nullable: true })
}) {
}
export class ClaimDeductibleRelationships extends S.Class("ClaimDeductibleRelationships")({
    "context": S.optionalWith(ReferencedDeductible, { nullable: true }),
    "claim": S.optionalWith(ReferencedClaim, { nullable: true }),
    "target": S.optionalWith(ReferencedClaimTarget, { nullable: true }),
    "buckets": S.optionalWith(ReferencedBucketList, { nullable: true })
}) {
}
export class PolicyTermRelationships extends S.Class("PolicyTermRelationships")({
    "provider": S.optionalWith(ReferencedProvider, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "deductibles": S.optionalWith(ReferencedDeductibleList, { nullable: true }),
    "bucketDefinitions": S.optionalWith(ReferencedBucketDefinitionList, { nullable: true }),
    "policy": S.optionalWith(ReferencedPolicy, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedPolicyTemplate, { nullable: true })
}) {
}
export class PolicyRelationships extends S.Class("PolicyRelationships")({
    "provider": S.optionalWith(ReferencedProvider, { nullable: true }),
    "template": S.optionalWith(NullableReferencedPolicyTemplate, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "terms": S.optionalWith(ReferencedPolicyTermList, { nullable: true })
}) {
}
export class SubmissionTrackTemplateRelationships extends S.Class("SubmissionTrackTemplateRelationships")({
    "policyTemplate": S.optionalWith(ReferencedPolicyTemplate, { nullable: true }),
    "bucketTypes": S.optionalWith(ReferencedBucketTypeList, { nullable: true })
}) {
}
export class BucketDefinitionRelationships extends S.Class("BucketDefinitionRelationships")({
    "basis": S.optionalWith(ReferencedClaimTarget, { nullable: true }),
    "bucketType": S.optionalWith(NullableReferencedBucketType, { nullable: true }),
    "deductible": S.optionalWith(NullableReferencedDeductible, { nullable: true }),
    "subBucketDefinitions": S.optionalWith(ReferencedSubBucketDefinitionList, { nullable: true }),
    "buckets": S.optionalWith(ReferencedBucketList, { nullable: true })
}) {
}
export class CoverageGroupTemplateRelationships extends S.Class("CoverageGroupTemplateRelationships")({
    "coverageTemplates": S.optionalWith(ReferencedCoverageTemplateList, { nullable: true })
}) {
}
export class IncidentImpactRelationships extends S.Class("IncidentImpactRelationships")({
    "asset": S.optionalWith(ReferencedAsset, { nullable: true }),
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "perils": S.optionalWith(ReferencedPerilList, { nullable: true })
}) {
}
export class CoverageRelationships extends S.Class("CoverageRelationships")({
    "basis": S.optionalWith(ReferencedPolicyTerm, { nullable: true }),
    "bucketType": S.optionalWith(NullableReferencedBucketType, { nullable: true }),
    "deductible": S.optionalWith(NullableReferencedDeductible, { nullable: true }),
    "subBucketDefinitions": S.optionalWith(ReferencedSubBucketDefinitionList, { nullable: true }),
    "buckets": S.optionalWith(ReferencedBucketList, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedCoverageTemplate, { nullable: true }),
    "group": S.optionalWith(NullableReferencedCoverageGroup, { nullable: true }),
    "perils": S.optionalWith(ReferencedPerilList, { nullable: true }),
    "endorsements": S.optionalWith(ReferencedEndorsementList, { nullable: true })
}) {
}
export class SubCoverageRelationships extends S.Class("SubCoverageRelationships")({
    "parent": S.optionalWith(ReferencedCoverage, { nullable: true }),
    "buckets": S.optionalWith(ReferencedSubBucketList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedSubCoverageTemplate, { nullable: true }),
    "endorsements": S.optionalWith(ReferencedEndorsementList, { nullable: true })
}) {
}
export class EndorsementTemplateRelationships extends S.Class("EndorsementTemplateRelationships")({
    "perils": S.optionalWith(ReferencedPerilList, { nullable: true }),
    "coverageTemplates": S.optionalWith(ReferencedCoverageTemplateList, { nullable: true }),
    "subCoverageTemplatess": S.optionalWith(ReferencedSubCoverageTemplateList, { nullable: true }),
    "bucketTypes": S.optionalWith(ReferencedBucketTypeList, { nullable: true })
}) {
}
export class SubBucketRelationships extends S.Class("SubBucketRelationships")({
    "parent": S.optionalWith(ReferencedBaseBucket, { nullable: true }),
    "metadata": S.optionalWith(ReferencedBaseSubBucketMetadata, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "definition": S.optionalWith(ReferencedSubBucketDefinition, { nullable: true })
}) {
}
export class BaseSubBucketRelationships extends S.Class("BaseSubBucketRelationships")({
    "parent": S.optionalWith(ReferencedBaseBucket, { nullable: true }),
    "metadata": S.optionalWith(ReferencedBaseSubBucketMetadata, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedProject, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true })
}) {
}
export class SubCoverageTemplateRelationships extends S.Class("SubCoverageTemplateRelationships")({
    "coverageTemplate": S.optionalWith(ReferencedCoverageTemplate, { nullable: true }),
    "endorsementTemplates": S.optionalWith(ReferencedEndorsementTemplateList, { nullable: true })
}) {
}
export class EndorsementRelationships extends S.Class("EndorsementRelationships")({
    "policyTerm": S.optionalWith(ReferencedPolicyTerm, { nullable: true }),
    "template": S.optionalWith(NullableReferencedEndorsementTemplate, { nullable: true }),
    "coverages": S.optionalWith(ReferencedCoverageList, { nullable: true }),
    "subCoverages": S.optionalWith(ReferencedSubCoverageList, { nullable: true }),
    "perils": S.optionalWith(ReferencedPerilList, { nullable: true })
}) {
}
export class CoverageTemplateRelationships extends S.Class("CoverageTemplateRelationships")({
    "group": S.optionalWith(NullableReferencedCoverageGroupTemplate, { nullable: true }),
    "perils": S.optionalWith(ReferencedPerilList, { nullable: true }),
    "bucketType": S.optionalWith(ReferencedBucketType, { nullable: true }),
    "subCoverageTemplates": S.optionalWith(ReferencedSubCoverageTemplateList, { nullable: true }),
    "endorsementTemplates": S.optionalWith(ReferencedEndorsementTemplateList, { nullable: true })
}) {
}
export class CoverageGroupRelationships extends S.Class("CoverageGroupRelationships")({
    "policyTerm": S.optionalWith(ReferencedPolicyTerm, { nullable: true }),
    "template": S.optionalWith(NullableReferencedCoverageGroupTemplate, { nullable: true })
}) {
}
export class PolicyTemplateRelationships extends S.Class("PolicyTemplateRelationships")({
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
    "coverageGroupTemplates": S.optionalWith(ReferencedCoverageGroupTemplateList, { nullable: true }),
    "coverageTemplates": S.optionalWith(ReferencedCoverageTemplateList, { nullable: true }),
    "subCoverageTemplates": S.optionalWith(ReferencedSubCoverageTemplateList, { nullable: true }),
    "endorsementTemplates": S.optionalWith(ReferencedEndorsementTemplateList, { nullable: true }),
    "perils": S.optionalWith(ReferencedPerilList, { nullable: true })
}) {
}
export class DepreciationScheduleRelationships extends S.Class("DepreciationScheduleRelationships")({
    "depreciationModifiers": S.optionalWith(ReferencedDepreciationModifierList, { nullable: true }),
    "depreciationOverrides": S.optionalWith(ReferencedDepreciationOverrideList, { nullable: true })
}) {
}
export class SpaceTypeItemTemplateRelationships extends S.Class("SpaceTypeItemTemplateRelationships")({
    "spaceType": S.optionalWith(ReferencedSpaceType, { nullable: true }),
    "itemTemplate": S.optionalWith(ReferencedItemTemplate, { nullable: true })
}) {
}
export class AssetAttributeTypeRelationships extends S.Class("AssetAttributeTypeRelationships")({
    "classes": S.optionalWith(ReferencedAssetAttributeClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class AssetAttributeTypeItemTemplateRelationships extends S.Class("AssetAttributeTypeItemTemplateRelationships")({
    "assetAttributeType": S.optionalWith(ReferencedAssetAttributeType, { nullable: true }),
    "itemTemplate": S.optionalWith(ReferencedItemTemplate, { nullable: true })
}) {
}
export class AssetAttributeClassRelationships extends S.Class("AssetAttributeClassRelationships")({
    "types": S.optionalWith(ReferencedAssetAttributeTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class IncidentTypeRelationships extends S.Class("IncidentTypeRelationships")({
    "classes": S.optionalWith(ReferencedIncidentClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true }),
    "perils": S.optionalWith(ReferencedPerilList, { nullable: true })
}) {
}
export class ItemClassRelationships extends S.Class("ItemClassRelationships")({
    "categories": S.optionalWith(ReferencedItemCategoryList, { nullable: true }),
    "types": S.optionalWith(ReferencedItemTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class ItemTypeRelationships extends S.Class("ItemTypeRelationships")({
    "depreciationModifiers": S.optionalWith(ReferencedDepreciationModifierList, { nullable: true }),
    "depreciationOverrides": S.optionalWith(ReferencedDepreciationOverrideList, { nullable: true }),
    "classes": S.optionalWith(ReferencedItemClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class ItemCategoryRelationships extends S.Class("ItemCategoryRelationships")({
    "classes": S.optionalWith(ReferencedItemClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class ServiceClassRelationships extends S.Class("ServiceClassRelationships")({
    "categories": S.optionalWith(ReferencedServiceCategoryList, { nullable: true }),
    "types": S.optionalWith(ReferencedServiceTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class ServiceCategoryRelationships extends S.Class("ServiceCategoryRelationships")({
    "classes": S.optionalWith(ReferencedServiceClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedAssetTypeList, { nullable: true })
}) {
}
export class AppraisalRelationships extends S.Class("AppraisalRelationships")({
    "documentType": S.optionalWith(ReferencedDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedAccountProvider, { nullable: true }),
    "lines": S.optionalWith(ReferencedAppraisalLineList, { nullable: true }),
    "subjects": S.optionalWith(ReferencedBaseEntityList, { nullable: true })
}) {
}
export class ThirdPartyImpactRelationships extends S.Class("ThirdPartyImpactRelationships")({
    "metadata": S.optionalWith(ReferencedEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedItemAppraisal, { nullable: true }),
    "thirdParty": S.optionalWith(ReferencedThirdParty, { nullable: true })
}) {
}
export class CreateIdentityRelationships extends S.Class("CreateIdentityRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true })
}) {
}
export class UpdateIdentityRelationships extends S.Class("UpdateIdentityRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true })
}) {
}
export class UpdateUserRelationships extends S.Class("UpdateUserRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true }),
    /**
  * The user's default account to load
  */
    "defaultAccount": S.optionalWith(NullableReferencedUpsertAccount, { nullable: true }),
    /**
  * The user's roles across various accounts
  */
    "accountRoles": S.optionalWith(ReferencedUpsertUserAccountRoleList, { nullable: true })
}) {
}
export class CreateUserRelationships extends S.Class("CreateUserRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true }),
    /**
  * The user's default account to load
  */
    "defaultAccount": S.optionalWith(NullableReferencedUpsertAccount, { nullable: true }),
    /**
  * The user's roles across various accounts
  */
    "accountRoles": S.optionalWith(ReferencedUpsertUserAccountRoleList, { nullable: true })
}) {
}
export class FundingSourceControllerPostFundingSourceContactsRefRequest extends S.Union(ReferencedUpsertAccountProviderContact, ReferencedUpsertAccountProviderContactList) {
}
export class CreateEmailAddressRelationships extends S.Class("CreateEmailAddressRelationships")({
    "identity": ReferencedUpsertIdentity
}) {
}
export class UpdateEmailAddressRelationships extends S.Class("UpdateEmailAddressRelationships")({
    "identity": S.optionalWith(ReferencedUpsertIdentity, { nullable: true })
}) {
}
export class CreateAccountInviteRelationships extends S.Class("CreateAccountInviteRelationships")({
    /**
  * The account this invite is for.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "invitedBy": S.optionalWith(ReferencedUpsertUser, { nullable: true }),
    "acceptedBy": S.optionalWith(NullableReferencedUpsertUser, { nullable: true })
}) {
}
export class UpdateAccountInviteRelationships extends S.Class("UpdateAccountInviteRelationships")({
    /**
  * The account this invite is for.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "invitedBy": S.optionalWith(ReferencedUpsertUser, { nullable: true }),
    "acceptedBy": S.optionalWith(NullableReferencedUpsertUser, { nullable: true })
}) {
}
export class CreateAuthProfileRelationships extends S.Class("CreateAuthProfileRelationships")({
    "user": ReferencedUpsertUser
}) {
}
export class UpdateAuthProfileRelationships extends S.Class("UpdateAuthProfileRelationships")({
    "user": S.optionalWith(ReferencedUpsertUser, { nullable: true })
}) {
}
export class CreateUserAccountRoleRelationships extends S.Class("CreateUserAccountRoleRelationships")({
    /**
  * The user being granted permissions.
  */
    "user": ReferencedUpsertUser,
    /**
  * The account for which permissions are granted.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true })
}) {
}
export class UpdateUserAccountRoleRelationships extends S.Class("UpdateUserAccountRoleRelationships")({
    /**
  * The user being granted permissions.
  */
    "user": S.optionalWith(ReferencedUpsertUser, { nullable: true }),
    /**
  * The account for which permissions are granted.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true })
}) {
}
export class CreateAccountProviderContactRelationships extends S.Class("CreateAccountProviderContactRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true }),
    "provider": ReferencedUpsertAccountProvider,
    "user": S.optionalWith(NullableReferencedUpsertUser, { nullable: true })
}) {
}
export class UpdateAccountProviderContactRelationships extends S.Class("UpdateAccountProviderContactRelationships")({
    "primaryEmailAddress": S.optionalWith(NullableReferencedUpsertEmailAddress, { nullable: true }),
    "primaryPhoneNumber": S.optionalWith(NullableReferencedUpsertPhoneNumber, { nullable: true }),
    "provider": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "user": S.optionalWith(NullableReferencedUpsertUser, { nullable: true })
}) {
}
export class CreateAccountProviderRelationships extends S.Class("CreateAccountProviderRelationships")({
    /**
  * The account this provider is attached to.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "provider": S.optionalWith(NullableReferencedUpsertProvider, { nullable: true })
}) {
}
export class UpdateAccountProviderRelationships extends S.Class("UpdateAccountProviderRelationships")({
    /**
  * The account this provider is attached to.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "provider": S.optionalWith(NullableReferencedUpsertProvider, { nullable: true })
}) {
}
export class CreateThirdPartyIndividualRelationships extends S.Class("CreateThirdPartyIndividualRelationships")({
    "project": ReferencedUpsertProject
}) {
}
export class UpdateThirdPartyIndividualRelationships extends S.Class("UpdateThirdPartyIndividualRelationships")({
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true })
}) {
}
export class FileControllerPostFileProjectsRefRequest extends S.Union(ReferencedUpsertProject, ReferencedUpsertProjectList) {
}
export class PolicyControllerPostPolicyAssetsRefRequest extends S.Union(ReferencedUpsertAsset, ReferencedUpsertAssetList) {
}
export class CreateAccountRelationships extends S.Class("CreateAccountRelationships")({
    "owner": ReferencedUpsertUser,
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    /**
  * The user's roles across various accounts
  */
    "userRoles": S.optionalWith(ReferencedUpsertUserAccountRoleList, { nullable: true }),
    "defaultCurrency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class UpdateAccountRelationships extends S.Class("UpdateAccountRelationships")({
    "owner": S.optionalWith(ReferencedUpsertUser, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    /**
  * The user's roles across various accounts
  */
    "userRoles": S.optionalWith(ReferencedUpsertUserAccountRoleList, { nullable: true }),
    "defaultCurrency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class CreateProjectRelationships extends S.Class("CreateProjectRelationships")({
    /**
  * The account that owns this project.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "mediaAttachments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true })
}) {
}
export class UpdateProjectRelationships extends S.Class("UpdateProjectRelationships")({
    /**
  * The account that owns this project.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "mediaAttachments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true })
}) {
}
export class ProjectControllerPostProjectMediaAttachmentsRefRequest extends S.Union(ReferencedUpsertProjectMedia, ReferencedUpsertProjectMediaList) {
}
export class CreateDisasterRelationships extends S.Class("CreateDisasterRelationships")({
    "incidentType": S.optionalWith(ReferencedUpsertIncidentType, { nullable: true })
}) {
}
export class CreateIncidentRelationships extends S.Class("CreateIncidentRelationships")({
    /**
  * The account that owns this project.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "mediaAttachments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true }),
    "type": ReferencedUpsertIncidentType,
    "disaster": S.optionalWith(NullableReferencedUpsertDisaster, { nullable: true })
}) {
}
export class UpdateIncidentRelationships extends S.Class("UpdateIncidentRelationships")({
    /**
  * The account that owns this project.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "mediaAttachments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true }),
    "type": S.optionalWith(ReferencedUpsertIncidentType, { nullable: true }),
    "disaster": S.optionalWith(NullableReferencedUpsertDisaster, { nullable: true })
}) {
}
export class CreateProjectMediaRelationships extends S.Class("CreateProjectMediaRelationships")({
    "media": ReferencedUpsertMedia,
    "project": ReferencedUpsertProject
}) {
}
export class UpdateProjectMediaRelationships extends S.Class("UpdateProjectMediaRelationships")({
    "media": S.optionalWith(ReferencedUpsertMedia, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true })
}) {
}
export class CreateFileProcessRelationships extends S.Class("CreateFileProcessRelationships")({
    "file": S.optionalWith(ReferencedUpsertFile, { nullable: true })
}) {
}
export class CreateProjectImpactRelationships extends S.Class("CreateProjectImpactRelationships")({
    "asset": ReferencedUpsertAsset,
    "project": ReferencedUpsertProject,
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true })
}) {
}
export class UpdateProjectImpactRelationships extends S.Class("UpdateProjectImpactRelationships")({
    "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true })
}) {
}
export class SpaceGroupControllerPostSpaceGroupSpacesRefRequest extends S.Union(ReferencedUpsertSpace, ReferencedUpsertSpaceList) {
}
export class CreateMediaRelationships extends S.Class("CreateMediaRelationships")({
    /**
  * The account's UUID
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": ReferencedUpsertFile,
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projectAssignments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true }),
    "entrySourceAnnotations": S.optionalWith(ReferencedUpsertEntrySourceMediaList, { nullable: true })
}) {
}
export class UpdateMediaRelationships extends S.Class("UpdateMediaRelationships")({
    /**
  * The account's UUID
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(ReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projectAssignments": S.optionalWith(ReferencedUpsertProjectMediaList, { nullable: true }),
    "entrySourceAnnotations": S.optionalWith(ReferencedUpsertEntrySourceMediaList, { nullable: true })
}) {
}
export class CreateItemizableFinancialDocumentStatsRelationships extends S.Class("CreateItemizableFinancialDocumentStatsRelationships")({
    "object": S.optionalWith(ReferencedUpsertItemizableFinancialDocument, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(ReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {
}
export class CreateFileRelationships extends S.Class("CreateFileRelationships")({
    /**
  * ID for the account to which this file belongs.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "processes": S.optionalWith(ReferencedUpsertFileProcessList, { nullable: true }),
    "media": S.optionalWith(ReferencedUpsertMediaList, { nullable: true }),
    "documents": S.optionalWith(ReferencedUpsertDocumentList, { nullable: true }),
    "addedBy": S.optionalWith(ReferencedUpsertUser, { nullable: true })
}) {
}
export class UpdateFileRelationships extends S.Class("UpdateFileRelationships")({
    /**
  * ID for the account to which this file belongs.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "processes": S.optionalWith(ReferencedUpsertFileProcessList, { nullable: true }),
    "media": S.optionalWith(ReferencedUpsertMediaList, { nullable: true }),
    "documents": S.optionalWith(ReferencedUpsertDocumentList, { nullable: true }),
    "addedBy": S.optionalWith(ReferencedUpsertUser, { nullable: true })
}) {
}
export class CreateAssetRelationships extends S.Class("CreateAssetRelationships")({
    "assetType": ReferencedUpsertAssetType,
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertAssetAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true })
}) {
}
export class UpdateAssetRelationships extends S.Class("UpdateAssetRelationships")({
    "assetType": S.optionalWith(ReferencedUpsertAssetType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertAssetAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true })
}) {
}
export class CreatePerilRelationships extends S.Class("CreatePerilRelationships")({
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateIncidentClassRelationships extends S.Class("CreateIncidentClassRelationships")({
    "types": S.optionalWith(ReferencedUpsertIncidentTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateDwellingRelationships extends S.Class("CreateDwellingRelationships")({
    "assetType": ReferencedUpsertAssetType,
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertAssetAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
    "address": ReferencedUpsertAddress
}) {
}
export class UpdateDwellingRelationships extends S.Class("UpdateDwellingRelationships")({
    "assetType": S.optionalWith(ReferencedUpsertAssetType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertAssetAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertAssetAppraisal, { nullable: true }),
    "address": S.optionalWith(ReferencedUpsertAddress, { nullable: true })
}) {
}
export class CreateAssetAppraisalRelationships extends S.Class("CreateAssetAppraisalRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "asset": ReferencedUpsertAsset
}) {
}
export class UpdateAssetAppraisalRelationships extends S.Class("UpdateAssetAppraisalRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true })
}) {
}
export class CreateBlueprintRelationships extends S.Class("CreateBlueprintRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {
}
export class UpdateBlueprintRelationships extends S.Class("UpdateBlueprintRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true })
}) {
}
export class CreateFinancialDocumentRelationships extends S.Class("CreateFinancialDocumentRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class UpdateFinancialDocumentRelationships extends S.Class("UpdateFinancialDocumentRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class CreateDocumentClassRelationships extends S.Class("CreateDocumentClassRelationships")({
    "types": S.optionalWith(ReferencedUpsertDocumentTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateDocumentTypeRelationships extends S.Class("CreateDocumentTypeRelationships")({
    "classes": S.optionalWith(ReferencedUpsertDocumentClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateSpaceGroupRelationships extends S.Class("CreateSpaceGroupRelationships")({
    "type": ReferencedUpsertSpaceType,
    "asset": ReferencedUpsertAsset,
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true })
}) {
}
export class UpdateSpaceGroupRelationships extends S.Class("UpdateSpaceGroupRelationships")({
    "type": S.optionalWith(ReferencedUpsertSpaceType, { nullable: true }),
    "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true })
}) {
}
export class CreateSpaceRelationships extends S.Class("CreateSpaceRelationships")({
    "type": ReferencedUpsertSpaceType,
    "group": ReferencedUpsertSpaceGroup,
    /**
  * The asset to which this space belongs.
  */
    "asset": ReferencedUpsertAsset
}) {
}
export class UpdateSpaceRelationships extends S.Class("UpdateSpaceRelationships")({
    "type": S.optionalWith(ReferencedUpsertSpaceType, { nullable: true }),
    "group": S.optionalWith(ReferencedUpsertSpaceGroup, { nullable: true }),
    /**
  * The asset to which this space belongs.
  */
    "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true })
}) {
}
export class CreateSpaceCategoryRelationships extends S.Class("CreateSpaceCategoryRelationships")({
    "classes": S.optionalWith(ReferencedUpsertSpaceClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
    "groupTypes": S.optionalWith(ReferencedUpsertSpaceGroupTypeList, { nullable: true })
}) {
}
export class CreateSpaceClassRelationships extends S.Class("CreateSpaceClassRelationships")({
    "categories": S.optionalWith(ReferencedUpsertSpaceCategoryList, { nullable: true }),
    "types": S.optionalWith(ReferencedUpsertSpaceTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
    "groupTypes": S.optionalWith(ReferencedUpsertSpaceGroupTypeList, { nullable: true })
}) {
}
export class CreateSpaceGroupTypeRelationships extends S.Class("CreateSpaceGroupTypeRelationships")({
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
    "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {
}
export class CreateBucketClassRelationships extends S.Class("CreateBucketClassRelationships")({
    "types": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateBucketTypeRelationships extends S.Class("CreateBucketTypeRelationships")({
    "classes": S.optionalWith(ReferencedUpsertBucketClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateAddressRelationships extends S.Class("CreateAddressRelationships")({
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "country": ReferencedUpsertCountry
}) {
}
export class UpdateAddressRelationships extends S.Class("UpdateAddressRelationships")({
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "country": S.optionalWith(ReferencedUpsertCountry, { nullable: true })
}) {
}
export class CreateThirdPartyDwellingRelationships extends S.Class("CreateThirdPartyDwellingRelationships")({
    "project": ReferencedUpsertProject,
    "country": ReferencedUpsertCountry
}) {
}
export class UpdateThirdPartyDwellingRelationships extends S.Class("UpdateThirdPartyDwellingRelationships")({
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "country": S.optionalWith(ReferencedUpsertCountry, { nullable: true })
}) {
}
export class CreateItemizableFinancialDocumentRelationships extends S.Class("CreateItemizableFinancialDocumentRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true })
}) {
}
export class UpdateItemizableFinancialDocumentRelationships extends S.Class("UpdateItemizableFinancialDocumentRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true })
}) {
}
export class EstimateLineControllerPostEstimateLineChangeOrdersRefRequest extends S.Union(ReferencedUpsertChangeOrderLine, ReferencedUpsertChangeOrderLineList) {
}
export class CreateItemImpactPaymentRelationships extends S.Class("CreateItemImpactPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
    "subject": ReferencedUpsertItemImpact,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateItemImpactPaymentRelationships extends S.Class("UpdateItemImpactPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateItemImpactInvoiceRelationships extends S.Class("CreateItemImpactInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
    "subject": ReferencedUpsertItemImpact,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateItemImpactInvoiceRelationships extends S.Class("UpdateItemImpactInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateItemImpactEstimateRelationships extends S.Class("CreateItemImpactEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
    "subject": ReferencedUpsertItemImpact,
    "changeOrders": ReferencedUpsertChangeOrderLineList,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateItemImpactEstimateRelationships extends S.Class("UpdateItemImpactEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateItemAppraisalRelationships extends S.Class("CreateItemAppraisalRelationships")({
    "appraisal": ReferencedUpsertAppraisal,
    "subject": ReferencedUpsertItem
}) {
}
export class UpdateItemAppraisalRelationships extends S.Class("UpdateItemAppraisalRelationships")({
    "appraisal": S.optionalWith(ReferencedUpsertAppraisal, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true })
}) {
}
export class CreateItemInvoiceRelationships extends S.Class("CreateItemInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
    "subject": ReferencedUpsertItem,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateItemInvoiceRelationships extends S.Class("UpdateItemInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateItemPaymentRelationships extends S.Class("CreateItemPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
    "subject": ReferencedUpsertItem,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateItemPaymentRelationships extends S.Class("UpdateItemPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateItemEstimateRelationships extends S.Class("CreateItemEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
    "subject": ReferencedUpsertItem,
    "changeOrders": ReferencedUpsertChangeOrderLineList,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateItemEstimateRelationships extends S.Class("UpdateItemEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateItemProductSuggestionRelationships extends S.Class("CreateItemProductSuggestionRelationships")({
    "item": ReferencedUpsertItem
}) {
}
export class UpdateItemProductSuggestionRelationships extends S.Class("UpdateItemProductSuggestionRelationships")({
    "item": S.optionalWith(ReferencedUpsertItem, { nullable: true })
}) {
}
export class ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefRequest extends S.Union(ReferencedUpsertItem, ReferencedUpsertItemList) {
}
export class CreateServiceTaskPaymentRelationships extends S.Class("CreateServiceTaskPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
    "subject": ReferencedUpsertServiceTask,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateServiceTaskPaymentRelationships extends S.Class("UpdateServiceTaskPaymentRelationships")({
    "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateServiceTaskInvoiceRelationships extends S.Class("CreateServiceTaskInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
    "subject": ReferencedUpsertServiceTask,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateServiceTaskInvoiceRelationships extends S.Class("UpdateServiceTaskInvoiceRelationships")({
    "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateServiceTaskEstimateRelationships extends S.Class("CreateServiceTaskEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
    "subject": ReferencedUpsertServiceTask,
    "changeOrders": ReferencedUpsertChangeOrderLineList,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateServiceTaskEstimateRelationships extends S.Class("UpdateServiceTaskEstimateRelationships")({
    "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateChangeOrderRelationships extends S.Class("CreateChangeOrderRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
    /**
  * Estimate that the ChangeOrder applies to.
  */
    "estimate": ReferencedUpsertEstimate,
    /**
  * AccountProvider for the ChangeOrder. Computed based on .estimate.vendor.
  */
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    /**
  * Service for the ChangeOrder. Computed based on .estimate.service.
  */
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {
}
export class UpdateChangeOrderRelationships extends S.Class("UpdateChangeOrderRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
    /**
  * Estimate that the ChangeOrder applies to.
  */
    "estimate": S.optionalWith(ReferencedUpsertEstimate, { nullable: true }),
    /**
  * AccountProvider for the ChangeOrder. Computed based on .estimate.vendor.
  */
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    /**
  * Service for the ChangeOrder. Computed based on .estimate.service.
  */
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {
}
export class CreateEntrySourceMetadataRelationships extends S.Class("CreateEntrySourceMetadataRelationships")({
    "object": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class CreateAppraisalLineRelationships extends S.Class("CreateAppraisalLineRelationships")({
    "appraisal": ReferencedUpsertAppraisal,
    "subject": ReferencedUpsertEntrySource
}) {
}
export class UpdateAppraisalLineRelationships extends S.Class("UpdateAppraisalLineRelationships")({
    "appraisal": S.optionalWith(ReferencedUpsertAppraisal, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true })
}) {
}
export class CreateInvoiceLineRelationships extends S.Class("CreateInvoiceLineRelationships")({
    "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
    "subject": ReferencedUpsertEntrySource,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateInvoiceLineRelationships extends S.Class("UpdateInvoiceLineRelationships")({
    "invoice": S.optionalWith(NullableReferencedUpsertInvoice, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreatePaymentLineRelationships extends S.Class("CreatePaymentLineRelationships")({
    "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
    "subject": ReferencedUpsertEntrySource,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdatePaymentLineRelationships extends S.Class("UpdatePaymentLineRelationships")({
    "payment": S.optionalWith(NullableReferencedUpsertPayment, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateEstimateLineRelationships extends S.Class("CreateEstimateLineRelationships")({
    "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
    "subject": ReferencedUpsertEntrySource,
    "changeOrders": ReferencedUpsertChangeOrderLineList,
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class UpdateEstimateLineRelationships extends S.Class("UpdateEstimateLineRelationships")({
    "estimate": S.optionalWith(NullableReferencedUpsertEstimate, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderLineList, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true })
}) {
}
export class CreateEntrySourceMediaRelationships extends S.Class("CreateEntrySourceMediaRelationships")({
    "entrySource": ReferencedUpsertEntrySource,
    "media": ReferencedUpsertMedia
}) {
}
export class UpdateEntrySourceMediaRelationships extends S.Class("UpdateEntrySourceMediaRelationships")({
    "entrySource": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
    "media": S.optionalWith(ReferencedUpsertMedia, { nullable: true })
}) {
}
export class CreateItemChangeOrderRelationships extends S.Class("CreateItemChangeOrderRelationships")({
    "estimateLine": ReferencedUpsertItemEstimate,
    "changeOrder": ReferencedUpsertChangeOrder,
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true })
}) {
}
export class UpdateItemChangeOrderRelationships extends S.Class("UpdateItemChangeOrderRelationships")({
    "estimateLine": S.optionalWith(ReferencedUpsertItemEstimate, { nullable: true }),
    "changeOrder": S.optionalWith(ReferencedUpsertChangeOrder, { nullable: true }),
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItem, { nullable: true })
}) {
}
export class CreateItemImpactChangeOrderRelationships extends S.Class("CreateItemImpactChangeOrderRelationships")({
    "estimateLine": ReferencedUpsertItemImpactEstimate,
    "changeOrder": ReferencedUpsertChangeOrder,
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true })
}) {
}
export class UpdateItemImpactChangeOrderRelationships extends S.Class("UpdateItemImpactChangeOrderRelationships")({
    "estimateLine": S.optionalWith(ReferencedUpsertItemImpactEstimate, { nullable: true }),
    "changeOrder": S.optionalWith(ReferencedUpsertChangeOrder, { nullable: true }),
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertItemImpact, { nullable: true })
}) {
}
export class CreateEstimateRelationships extends S.Class("CreateEstimateRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertEstimateLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true })
}) {
}
export class UpdateEstimateRelationships extends S.Class("UpdateEstimateRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertEstimateLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true })
}) {
}
export class CreateChangeOrderLineRelationships extends S.Class("CreateChangeOrderLineRelationships")({
    "estimateLine": ReferencedUpsertEstimateLine,
    "changeOrder": ReferencedUpsertChangeOrder,
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true })
}) {
}
export class UpdateChangeOrderLineRelationships extends S.Class("UpdateChangeOrderLineRelationships")({
    "estimateLine": S.optionalWith(ReferencedUpsertEstimateLine, { nullable: true }),
    "changeOrder": S.optionalWith(ReferencedUpsertChangeOrder, { nullable: true }),
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true })
}) {
}
export class CreateServiceTaskChangeOrderRelationships extends S.Class("CreateServiceTaskChangeOrderRelationships")({
    "estimateLine": ReferencedUpsertServiceTaskEstimate,
    "changeOrder": ReferencedUpsertChangeOrder,
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true })
}) {
}
export class UpdateServiceTaskChangeOrderRelationships extends S.Class("UpdateServiceTaskChangeOrderRelationships")({
    "estimateLine": S.optionalWith(ReferencedUpsertServiceTaskEstimate, { nullable: true }),
    "changeOrder": S.optionalWith(ReferencedUpsertChangeOrder, { nullable: true }),
    "vendor": S.optionalWith(ReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "subject": S.optionalWith(ReferencedUpsertServiceTask, { nullable: true })
}) {
}
export class CreateEntrySourceRelationships extends S.Class("CreateEntrySourceRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true })
}) {
}
export class UpdateEntrySourceRelationships extends S.Class("UpdateEntrySourceRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true })
}) {
}
export class CreateServiceTaskRelationships extends S.Class("CreateServiceTaskRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "service": ReferencedUpsertService,
    "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true })
}) {
}
export class UpdateServiceTaskRelationships extends S.Class("UpdateServiceTaskRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "service": S.optionalWith(ReferencedUpsertService, { nullable: true }),
    "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true })
}) {
}
export class CreatePaymentRelationships extends S.Class("CreatePaymentRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertPaymentLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {
}
export class UpdatePaymentRelationships extends S.Class("UpdatePaymentRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertPaymentLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {
}
export class CreateServiceRelationships extends S.Class("CreateServiceRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    /**
  * What type of service is being provided.
  */
    "type": S.optionalWith(NullableReferencedUpsertServiceType, { nullable: true }),
    "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
    "paidLineItems": S.optionalWith(ReferencedUpsertPaymentLineList, { nullable: true }),
    "invoicedLineItems": S.optionalWith(ReferencedUpsertInvoiceLineList, { nullable: true }),
    "estimatedLineItems": S.optionalWith(ReferencedUpsertEstimateLineList, { nullable: true })
}) {
}
export class UpdateServiceRelationships extends S.Class("UpdateServiceRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    /**
  * What type of service is being provided.
  */
    "type": S.optionalWith(NullableReferencedUpsertServiceType, { nullable: true }),
    "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
    "paidLineItems": S.optionalWith(ReferencedUpsertPaymentLineList, { nullable: true }),
    "invoicedLineItems": S.optionalWith(ReferencedUpsertInvoiceLineList, { nullable: true }),
    "estimatedLineItems": S.optionalWith(ReferencedUpsertEstimateLineList, { nullable: true })
}) {
}
export class CreateInvoiceRelationships extends S.Class("CreateInvoiceRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertInvoiceLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {
}
export class UpdateInvoiceRelationships extends S.Class("UpdateInvoiceRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "stats": S.optionalWith(ReferencedUpsertItemizableFinancialDocumentStats, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "service": S.optionalWith(NullableReferencedUpsertService, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertInvoiceLineList, { nullable: true }),
    "lineSubjects": S.optionalWith(ReferencedUpsertEntrySourceList, { nullable: true })
}) {
}
export class CreateItemImpactRelationships extends S.Class("CreateItemImpactRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "item": ReferencedUpsertItem,
    "replacement": S.optionalWith(NullableReferencedUpsertItem, { nullable: true }),
    "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
    "itemType": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true })
}) {
}
export class UpdateItemImpactRelationships extends S.Class("UpdateItemImpactRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "item": S.optionalWith(ReferencedUpsertItem, { nullable: true }),
    "replacement": S.optionalWith(NullableReferencedUpsertItem, { nullable: true }),
    "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
    "itemType": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true })
}) {
}
export class CreateItemRelationships extends S.Class("CreateItemRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "type": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true }),
    "asset": S.optionalWith(NullableReferencedUpsertAsset, { nullable: true }),
    "space": S.optionalWith(NullableReferencedUpsertSpace, { nullable: true }),
    "replaces": S.optionalWith(NullableReferencedUpsertItemImpact, { nullable: true }),
    "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
    "impacts": S.optionalWith(ReferencedUpsertItemImpactList, { nullable: true })
}) {
}
export class UpdateItemRelationships extends S.Class("UpdateItemRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "type": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true }),
    "asset": S.optionalWith(NullableReferencedUpsertAsset, { nullable: true }),
    "space": S.optionalWith(NullableReferencedUpsertSpace, { nullable: true }),
    "replaces": S.optionalWith(NullableReferencedUpsertItemImpact, { nullable: true }),
    "payments": S.optionalWith(ReferencedUpsertPaymentList, { nullable: true }),
    "invoices": S.optionalWith(ReferencedUpsertInvoiceList, { nullable: true }),
    "estimates": S.optionalWith(ReferencedUpsertEstimateList, { nullable: true }),
    "changeOrders": S.optionalWith(ReferencedUpsertChangeOrderList, { nullable: true }),
    "impacts": S.optionalWith(ReferencedUpsertItemImpactList, { nullable: true })
}) {
}
export class CreateItemMediaSuggestionRelationships extends S.Class("CreateItemMediaSuggestionRelationships")({
    "media": ReferencedUpsertMedia,
    "item": S.optionalWith(NullableReferencedUpsertItem, { nullable: true }),
    "existing_items": ReferencedUpsertItemList,
    "type": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true }),
    "asset": S.optionalWith(NullableReferencedUpsertAsset, { nullable: true }),
    "space": S.optionalWith(NullableReferencedUpsertSpace, { nullable: true })
}) {
}
export class UpdateItemMediaSuggestionRelationships extends S.Class("UpdateItemMediaSuggestionRelationships")({
    "media": S.optionalWith(ReferencedUpsertMedia, { nullable: true }),
    "item": S.optionalWith(NullableReferencedUpsertItem, { nullable: true }),
    "existing_items": S.optionalWith(ReferencedUpsertItemList, { nullable: true }),
    "type": S.optionalWith(NullableReferencedUpsertItemType, { nullable: true }),
    "asset": S.optionalWith(NullableReferencedUpsertAsset, { nullable: true }),
    "space": S.optionalWith(NullableReferencedUpsertSpace, { nullable: true })
}) {
}
export class CreateDepreciationModifierRelationships extends S.Class("CreateDepreciationModifierRelationships")({
    "schedule": S.optionalWith(ReferencedUpsertDepreciationSchedule, { nullable: true })
}) {
}
export class CreateItemTemplateRelationships extends S.Class("CreateItemTemplateRelationships")({
    "itemType": S.optionalWith(ReferencedUpsertItemType, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateBaseBucketMetadataRelationships extends S.Class("CreateBaseBucketMetadataRelationships")({
    "object": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true })
}) {
}
export class CreateFundingSourceRelationships extends S.Class("CreateFundingSourceRelationships")({
    "project": ReferencedUpsertProject,
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBaseBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedUpsertFundingList, { nullable: true }),
    "contacts": S.optionalWith(ReferencedUpsertAccountProviderContactList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class UpdateFundingSourceRelationships extends S.Class("UpdateFundingSourceRelationships")({
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBaseBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedUpsertFundingList, { nullable: true }),
    "contacts": S.optionalWith(ReferencedUpsertAccountProviderContactList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class CreateEntryRelationships extends S.Class("CreateEntryRelationships")({
    "source": ReferencedUpsertEntrySource,
    "bucket": ReferencedUpsertBaseBucket,
    "subBucket": S.optionalWith(NullableReferencedUpsertBaseSubBucket, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class UpdateEntryRelationships extends S.Class("UpdateEntryRelationships")({
    "source": S.optionalWith(ReferencedUpsertEntrySource, { nullable: true }),
    "bucket": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true }),
    "subBucket": S.optionalWith(NullableReferencedUpsertBaseSubBucket, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class CreateBucketFundingRelationships extends S.Class("CreateBucketFundingRelationships")({
    "funding": ReferencedUpsertFunding,
    "bucket": ReferencedUpsertBaseBucket,
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class UpdateBucketFundingRelationships extends S.Class("UpdateBucketFundingRelationships")({
    "funding": S.optionalWith(ReferencedUpsertFunding, { nullable: true }),
    "bucket": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true })
}) {
}
export class CreateBaseBucketRelationships extends S.Class("CreateBaseBucketRelationships")({
    "type": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
    "fundingSource": ReferencedUpsertFundingSource,
    "metadata": S.optionalWith(ReferencedUpsertBaseBucketMetadata, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "subBuckets": S.optionalWith(ReferencedUpsertBaseSubBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true })
}) {
}
export class UpdateBaseBucketRelationships extends S.Class("UpdateBaseBucketRelationships")({
    "type": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "metadata": S.optionalWith(ReferencedUpsertBaseBucketMetadata, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "subBuckets": S.optionalWith(ReferencedUpsertBaseSubBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true })
}) {
}
export class CreateFundingRelationships extends S.Class("CreateFundingRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "source": ReferencedUpsertFundingSource,
    "allocations": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true })
}) {
}
export class UpdateFundingRelationships extends S.Class("UpdateFundingRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "source": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "allocations": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true })
}) {
}
export class CreateSubBucketDefinitionRelationships extends S.Class("CreateSubBucketDefinitionRelationships")({
    "parent": ReferencedUpsertBucketDefinition,
    "buckets": S.optionalWith(ReferencedUpsertSubBucketList, { nullable: true })
}) {
}
export class UpdateSubBucketDefinitionRelationships extends S.Class("UpdateSubBucketDefinitionRelationships")({
    "parent": S.optionalWith(ReferencedUpsertBucketDefinition, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertSubBucketList, { nullable: true })
}) {
}
export class EndorsementControllerPostEndorsementCoveragesRefRequest extends S.Union(ReferencedUpsertCoverage, ReferencedUpsertCoverageList) {
}
export class CreateClaimTargetRelationships extends S.Class("CreateClaimTargetRelationships")({
    "provider": ReferencedUpsertProvider,
    "currency": ReferencedUpsertCurrency,
    "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true }),
    "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true })
}) {
}
export class UpdateClaimTargetRelationships extends S.Class("UpdateClaimTargetRelationships")({
    "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true }),
    "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true })
}) {
}
export class CreateBucketRelationships extends S.Class("CreateBucketRelationships")({
    "type": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
    "fundingSource": ReferencedUpsertFundingSource,
    "metadata": S.optionalWith(ReferencedUpsertBaseBucketMetadata, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "subBuckets": S.optionalWith(ReferencedUpsertBaseSubBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true }),
    "definition": ReferencedUpsertBucketDefinition,
    "deductible": S.optionalWith(ReferencedUpsertDeductible, { nullable: true }),
    "claimDeductible": S.optionalWith(ReferencedUpsertClaimDeductible, { nullable: true })
}) {
}
export class UpdateBucketRelationships extends S.Class("UpdateBucketRelationships")({
    "type": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "metadata": S.optionalWith(ReferencedUpsertBaseBucketMetadata, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "subBuckets": S.optionalWith(ReferencedUpsertBaseSubBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedUpsertBucketFundingList, { nullable: true }),
    "definition": S.optionalWith(ReferencedUpsertBucketDefinition, { nullable: true }),
    "deductible": S.optionalWith(ReferencedUpsertDeductible, { nullable: true }),
    "claimDeductible": S.optionalWith(ReferencedUpsertClaimDeductible, { nullable: true })
}) {
}
export class CreateClaimRelationships extends S.Class("CreateClaimRelationships")({
    "project": ReferencedUpsertProject,
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBaseBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedUpsertFundingList, { nullable: true }),
    "contacts": S.optionalWith(ReferencedUpsertAccountProviderContactList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "target": ReferencedUpsertClaimTarget,
    "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
    "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true })
}) {
}
export class UpdateClaimRelationships extends S.Class("UpdateClaimRelationships")({
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBaseBucketList, { nullable: true }),
    "fundings": S.optionalWith(ReferencedUpsertFundingList, { nullable: true }),
    "contacts": S.optionalWith(ReferencedUpsertAccountProviderContactList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "target": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
    "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
    "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true })
}) {
}
export class CreateDeductibleRelationships extends S.Class("CreateDeductibleRelationships")({
    "claimTarget": ReferencedUpsertClaimTarget,
    "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true }),
    "claimDeductibles": S.optionalWith(ReferencedUpsertClaimDeductibleList, { nullable: true })
}) {
}
export class UpdateDeductibleRelationships extends S.Class("UpdateDeductibleRelationships")({
    "claimTarget": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
    "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true }),
    "claimDeductibles": S.optionalWith(ReferencedUpsertClaimDeductibleList, { nullable: true })
}) {
}
export class CreateClaimDeductibleRelationships extends S.Class("CreateClaimDeductibleRelationships")({
    "context": ReferencedUpsertDeductible,
    "claim": ReferencedUpsertClaim,
    "target": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true })
}) {
}
export class UpdateClaimDeductibleRelationships extends S.Class("UpdateClaimDeductibleRelationships")({
    "context": S.optionalWith(ReferencedUpsertDeductible, { nullable: true }),
    "claim": S.optionalWith(ReferencedUpsertClaim, { nullable: true }),
    "target": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true })
}) {
}
export class CreatePolicyTermRelationships extends S.Class("CreatePolicyTermRelationships")({
    "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true }),
    "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true }),
    "policy": ReferencedUpsertPolicy,
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertPolicyTemplate, { nullable: true })
}) {
}
export class UpdatePolicyTermRelationships extends S.Class("UpdatePolicyTermRelationships")({
    "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "deductibles": S.optionalWith(ReferencedUpsertDeductibleList, { nullable: true }),
    "bucketDefinitions": S.optionalWith(ReferencedUpsertBucketDefinitionList, { nullable: true }),
    "policy": S.optionalWith(ReferencedUpsertPolicy, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertPolicyTemplate, { nullable: true })
}) {
}
export class CreatePolicyRelationships extends S.Class("CreatePolicyRelationships")({
    "provider": ReferencedUpsertProvider,
    "template": S.optionalWith(NullableReferencedUpsertPolicyTemplate, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "assets": ReferencedUpsertAssetList,
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "terms": S.optionalWith(ReferencedUpsertPolicyTermList, { nullable: true })
}) {
}
export class UpdatePolicyRelationships extends S.Class("UpdatePolicyRelationships")({
    "provider": S.optionalWith(ReferencedUpsertProvider, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertPolicyTemplate, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "terms": S.optionalWith(ReferencedUpsertPolicyTermList, { nullable: true })
}) {
}
export class CreateSubmissionTrackTemplateRelationships extends S.Class("CreateSubmissionTrackTemplateRelationships")({
    "policyTemplate": S.optionalWith(ReferencedUpsertPolicyTemplate, { nullable: true }),
    "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {
}
export class CreateBucketDefinitionRelationships extends S.Class("CreateBucketDefinitionRelationships")({
    "basis": ReferencedUpsertClaimTarget,
    "bucketType": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
    "deductible": S.optionalWith(NullableReferencedUpsertDeductible, { nullable: true }),
    "subBucketDefinitions": S.optionalWith(ReferencedUpsertSubBucketDefinitionList, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true })
}) {
}
export class UpdateBucketDefinitionRelationships extends S.Class("UpdateBucketDefinitionRelationships")({
    "basis": S.optionalWith(ReferencedUpsertClaimTarget, { nullable: true }),
    "bucketType": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
    "deductible": S.optionalWith(NullableReferencedUpsertDeductible, { nullable: true }),
    "subBucketDefinitions": S.optionalWith(ReferencedUpsertSubBucketDefinitionList, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true })
}) {
}
export class EndorsementControllerPostEndorsementSubCoveragesRefRequest extends S.Union(ReferencedUpsertSubCoverage, ReferencedUpsertSubCoverageList) {
}
export class CreateCoverageGroupTemplateRelationships extends S.Class("CreateCoverageGroupTemplateRelationships")({
    "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true })
}) {
}
export class CreateIncidentImpactRelationships extends S.Class("CreateIncidentImpactRelationships")({
    "asset": ReferencedUpsertAsset,
    "project": ReferencedUpsertProject,
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "perils": ReferencedUpsertPerilList
}) {
}
export class UpdateIncidentImpactRelationships extends S.Class("UpdateIncidentImpactRelationships")({
    "asset": S.optionalWith(ReferencedUpsertAsset, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {
}
export class IncidentImpactControllerPostIncidentImpactPerilsRefRequest extends S.Union(ReferencedUpsertPeril, ReferencedUpsertPerilList) {
}
export class CreateCoverageRelationships extends S.Class("CreateCoverageRelationships")({
    "basis": ReferencedUpsertPolicyTerm,
    "bucketType": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
    "deductible": S.optionalWith(NullableReferencedUpsertDeductible, { nullable: true }),
    "subBucketDefinitions": S.optionalWith(ReferencedUpsertSubBucketDefinitionList, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertCoverageTemplate, { nullable: true }),
    "group": S.optionalWith(NullableReferencedUpsertCoverageGroup, { nullable: true }),
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
    "endorsements": S.optionalWith(ReferencedUpsertEndorsementList, { nullable: true })
}) {
}
export class UpdateCoverageRelationships extends S.Class("UpdateCoverageRelationships")({
    "basis": S.optionalWith(ReferencedUpsertPolicyTerm, { nullable: true }),
    "bucketType": S.optionalWith(NullableReferencedUpsertBucketType, { nullable: true }),
    "deductible": S.optionalWith(NullableReferencedUpsertDeductible, { nullable: true }),
    "subBucketDefinitions": S.optionalWith(ReferencedUpsertSubBucketDefinitionList, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertBucketList, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertCoverageTemplate, { nullable: true }),
    "group": S.optionalWith(NullableReferencedUpsertCoverageGroup, { nullable: true }),
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
    "endorsements": S.optionalWith(ReferencedUpsertEndorsementList, { nullable: true })
}) {
}
export class SubCoverageControllerPostSubCoverageEndorsementsRefRequest extends S.Union(ReferencedUpsertEndorsement, ReferencedUpsertEndorsementList) {
}
export class CreateSubCoverageRelationships extends S.Class("CreateSubCoverageRelationships")({
    "parent": ReferencedUpsertCoverage,
    "buckets": S.optionalWith(ReferencedUpsertSubBucketList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertSubCoverageTemplate, { nullable: true }),
    "endorsements": S.optionalWith(ReferencedUpsertEndorsementList, { nullable: true })
}) {
}
export class UpdateSubCoverageRelationships extends S.Class("UpdateSubCoverageRelationships")({
    "parent": S.optionalWith(ReferencedUpsertCoverage, { nullable: true }),
    "buckets": S.optionalWith(ReferencedUpsertSubBucketList, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertSubCoverageTemplate, { nullable: true }),
    "endorsements": S.optionalWith(ReferencedUpsertEndorsementList, { nullable: true })
}) {
}
export class CreateEndorsementTemplateRelationships extends S.Class("CreateEndorsementTemplateRelationships")({
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
    "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true }),
    "subCoverageTemplatess": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
    "bucketTypes": S.optionalWith(ReferencedUpsertBucketTypeList, { nullable: true })
}) {
}
export class CreateSubBucketRelationships extends S.Class("CreateSubBucketRelationships")({
    "parent": ReferencedUpsertBaseBucket,
    "metadata": S.optionalWith(ReferencedUpsertBaseSubBucketMetadata, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "definition": ReferencedUpsertSubBucketDefinition
}) {
}
export class UpdateSubBucketRelationships extends S.Class("UpdateSubBucketRelationships")({
    "parent": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true }),
    "metadata": S.optionalWith(ReferencedUpsertBaseSubBucketMetadata, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "definition": S.optionalWith(ReferencedUpsertSubBucketDefinition, { nullable: true })
}) {
}
export class CreateBaseSubBucketRelationships extends S.Class("CreateBaseSubBucketRelationships")({
    "parent": ReferencedUpsertBaseBucket,
    "metadata": S.optionalWith(ReferencedUpsertBaseSubBucketMetadata, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true })
}) {
}
export class UpdateBaseSubBucketRelationships extends S.Class("UpdateBaseSubBucketRelationships")({
    "parent": S.optionalWith(ReferencedUpsertBaseBucket, { nullable: true }),
    "metadata": S.optionalWith(ReferencedUpsertBaseSubBucketMetadata, { nullable: true }),
    "fundingSource": S.optionalWith(ReferencedUpsertFundingSource, { nullable: true }),
    "project": S.optionalWith(ReferencedUpsertProject, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true })
}) {
}
export class CreateSubCoverageTemplateRelationships extends S.Class("CreateSubCoverageTemplateRelationships")({
    "coverageTemplate": S.optionalWith(ReferencedUpsertCoverageTemplate, { nullable: true }),
    "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true })
}) {
}
export class CreateEndorsementRelationships extends S.Class("CreateEndorsementRelationships")({
    "policyTerm": ReferencedUpsertPolicyTerm,
    "template": S.optionalWith(NullableReferencedUpsertEndorsementTemplate, { nullable: true }),
    "coverages": S.optionalWith(ReferencedUpsertCoverageList, { nullable: true }),
    "subCoverages": S.optionalWith(ReferencedUpsertSubCoverageList, { nullable: true }),
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {
}
export class UpdateEndorsementRelationships extends S.Class("UpdateEndorsementRelationships")({
    "policyTerm": S.optionalWith(ReferencedUpsertPolicyTerm, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertEndorsementTemplate, { nullable: true }),
    "coverages": S.optionalWith(ReferencedUpsertCoverageList, { nullable: true }),
    "subCoverages": S.optionalWith(ReferencedUpsertSubCoverageList, { nullable: true }),
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {
}
export class CreateCoverageTemplateRelationships extends S.Class("CreateCoverageTemplateRelationships")({
    "group": S.optionalWith(NullableReferencedUpsertCoverageGroupTemplate, { nullable: true }),
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true }),
    "bucketType": S.optionalWith(ReferencedUpsertBucketType, { nullable: true }),
    "subCoverageTemplates": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
    "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true })
}) {
}
export class CreateCoverageGroupRelationships extends S.Class("CreateCoverageGroupRelationships")({
    "policyTerm": ReferencedUpsertPolicyTerm,
    "template": S.optionalWith(NullableReferencedUpsertCoverageGroupTemplate, { nullable: true })
}) {
}
export class UpdateCoverageGroupRelationships extends S.Class("UpdateCoverageGroupRelationships")({
    "policyTerm": S.optionalWith(ReferencedUpsertPolicyTerm, { nullable: true }),
    "template": S.optionalWith(NullableReferencedUpsertCoverageGroupTemplate, { nullable: true })
}) {
}
export class CreatePolicyTemplateRelationships extends S.Class("CreatePolicyTemplateRelationships")({
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
    "coverageGroupTemplates": S.optionalWith(ReferencedUpsertCoverageGroupTemplateList, { nullable: true }),
    "coverageTemplates": S.optionalWith(ReferencedUpsertCoverageTemplateList, { nullable: true }),
    "subCoverageTemplates": S.optionalWith(ReferencedUpsertSubCoverageTemplateList, { nullable: true }),
    "endorsementTemplates": S.optionalWith(ReferencedUpsertEndorsementTemplateList, { nullable: true }),
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {
}
export class CreateDepreciationScheduleRelationships extends S.Class("CreateDepreciationScheduleRelationships")({
    "depreciationModifiers": S.optionalWith(ReferencedUpsertDepreciationModifierList, { nullable: true }),
    "depreciationOverrides": S.optionalWith(ReferencedUpsertDepreciationOverrideList, { nullable: true })
}) {
}
export class CreateSpaceTypeItemTemplateRelationships extends S.Class("CreateSpaceTypeItemTemplateRelationships")({
    "spaceType": S.optionalWith(ReferencedUpsertSpaceType, { nullable: true }),
    "itemTemplate": S.optionalWith(ReferencedUpsertItemTemplate, { nullable: true })
}) {
}
export class CreateAssetAttributeTypeRelationships extends S.Class("CreateAssetAttributeTypeRelationships")({
    "classes": S.optionalWith(ReferencedUpsertAssetAttributeClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateAssetAttributeTypeItemTemplateRelationships extends S.Class("CreateAssetAttributeTypeItemTemplateRelationships")({
    "assetAttributeType": S.optionalWith(ReferencedUpsertAssetAttributeType, { nullable: true }),
    "itemTemplate": S.optionalWith(ReferencedUpsertItemTemplate, { nullable: true })
}) {
}
export class CreateAssetAttributeClassRelationships extends S.Class("CreateAssetAttributeClassRelationships")({
    "types": S.optionalWith(ReferencedUpsertAssetAttributeTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateIncidentTypeRelationships extends S.Class("CreateIncidentTypeRelationships")({
    "classes": S.optionalWith(ReferencedUpsertIncidentClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true }),
    "perils": S.optionalWith(ReferencedUpsertPerilList, { nullable: true })
}) {
}
export class CreateItemClassRelationships extends S.Class("CreateItemClassRelationships")({
    "categories": S.optionalWith(ReferencedUpsertItemCategoryList, { nullable: true }),
    "types": S.optionalWith(ReferencedUpsertItemTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateItemTypeRelationships extends S.Class("CreateItemTypeRelationships")({
    "depreciationModifiers": S.optionalWith(ReferencedUpsertDepreciationModifierList, { nullable: true }),
    "depreciationOverrides": S.optionalWith(ReferencedUpsertDepreciationOverrideList, { nullable: true }),
    "classes": S.optionalWith(ReferencedUpsertItemClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateItemCategoryRelationships extends S.Class("CreateItemCategoryRelationships")({
    "classes": S.optionalWith(ReferencedUpsertItemClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateServiceClassRelationships extends S.Class("CreateServiceClassRelationships")({
    "categories": S.optionalWith(ReferencedUpsertServiceCategoryList, { nullable: true }),
    "types": S.optionalWith(ReferencedUpsertServiceTypeList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateServiceCategoryRelationships extends S.Class("CreateServiceCategoryRelationships")({
    "classes": S.optionalWith(ReferencedUpsertServiceClassList, { nullable: true }),
    "assetTypes": S.optionalWith(ReferencedUpsertAssetTypeList, { nullable: true })
}) {
}
export class CreateAppraisalRelationships extends S.Class("CreateAppraisalRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertAppraisalLineList, { nullable: true }),
    "subjects": S.optionalWith(ReferencedUpsertBaseEntityList, { nullable: true })
}) {
}
export class UpdateAppraisalRelationships extends S.Class("UpdateAppraisalRelationships")({
    "documentType": S.optionalWith(ReferencedUpsertDocumentType, { nullable: true }),
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    "file": S.optionalWith(NullableReferencedUpsertFile, { nullable: true }),
    "assets": S.optionalWith(ReferencedUpsertAssetList, { nullable: true }),
    "spaces": S.optionalWith(ReferencedUpsertSpaceList, { nullable: true }),
    "projects": S.optionalWith(ReferencedUpsertProjectList, { nullable: true }),
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "vendor": S.optionalWith(NullableReferencedUpsertAccountProvider, { nullable: true }),
    "lines": S.optionalWith(ReferencedUpsertAppraisalLineList, { nullable: true }),
    "subjects": S.optionalWith(ReferencedUpsertBaseEntityList, { nullable: true })
}) {
}
export class CreateThirdPartyImpactRelationships extends S.Class("CreateThirdPartyImpactRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "thirdParty": ReferencedUpsertThirdParty
}) {
}
export class UpdateThirdPartyImpactRelationships extends S.Class("UpdateThirdPartyImpactRelationships")({
    "metadata": S.optionalWith(ReferencedUpsertEntrySourceMetadata, { nullable: true }),
    /**
  * The project to which this entry source belongs.
  */
    "project": S.optionalWith(NullableReferencedUpsertProject, { nullable: true }),
    /**
  * The account that owns this entry source.
  */
    "account": S.optionalWith(ReferencedUpsertAccount, { nullable: true }),
    /**
  * What currency the amounts for this EntrySource are in.
  */
    "currency": S.optionalWith(ReferencedUpsertCurrency, { nullable: true }),
    "entries": S.optionalWith(ReferencedUpsertEntryList, { nullable: true }),
    "appraisals": S.optionalWith(ReferencedUpsertItemAppraisalList, { nullable: true }),
    "selectedAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "relevantAppraisal": S.optionalWith(NullableReferencedUpsertItemAppraisal, { nullable: true }),
    "thirdParty": S.optionalWith(ReferencedUpsertThirdParty, { nullable: true })
}) {
}
export class PermissionsControllerCheckDeletePermissionsRequest extends S.Union(JsonApiEntityReference, JsonApiEntityReferenceList) {
}
export class TransloaditAssemblyOptionsResponseDto extends S.Class("TransloaditAssemblyOptionsResponseDto")({
    "params": S.Union(TransloaditStoreFileAssemblyParams, TransloaditAvatarAssemblyParams),
    /**
  * HMAC-SHA384 signature (hex) over the exact JSON string of `params` (per Transloadit Signature Auth).
  */
    "signature": S.String
}) {
}
export class FilesCdnAccessResponseDto extends S.Class("FilesCdnAccessResponseDto")({
    /**
  * Whether the request succeeded
  */
    "ok": S.Boolean,
    /**
  * Access scope for this user/account
  */
    "scope": CdnScopeDto
}) {
}
export class FilesCdnSignedUrlsDto extends S.Class("FilesCdnSignedUrlsDto")({
    /**
  * Default TTL applied to all items unless overridden per item. Must be between 60s (1m) and 86400s (24h).
  */
    "defaultTtlSeconds": S.optionalWith(S.Number.pipe(S.greaterThanOrEqualTo(60), S.lessThanOrEqualTo(86400)), { nullable: true }),
    /**
  * List of items (files) to generate signed URLs for.
  */
    "items": S.Array(SignedUrlItemDto)
}) {
}
export class FilesCdnSignedUrlsResponseDto extends S.Class("FilesCdnSignedUrlsResponseDto")({
    /**
  * Indicates whether all signed URLs were generated successfully
  */
    "ok": S.Boolean,
    /**
  * Timestamp when this response was issued (ISO 8601)
  */
    "issuedAt": S.String,
    /**
  * Array of results (successes and/or failures)
  */
    "results": S.Array(SignedUrlResultDto)
}) {
}
export class AuthProfileData extends S.Class("AuthProfileData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AuthProfile"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AuthProfileAttributes, { nullable: true }),
    "relationships": S.optionalWith(AuthProfileRelationships, { nullable: true })
}) {
}
export class ThirdPartyData extends S.Class("ThirdPartyData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdParty"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "relationships": S.optionalWith(ThirdPartyIndividualRelationships, { nullable: true })
}) {
}
export class ThirdPartyIndividualData extends S.Class("ThirdPartyIndividualData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyIndividual"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": S.optionalWith(ThirdPartyIndividualRelationships, { nullable: true })
}) {
}
export class AccountData extends S.Class("AccountData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Account"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": S.optionalWith(AccountRelationships, { nullable: true })
}) {
}
export class IdentityData extends S.Class("IdentityData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Identity"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AccountProviderContactAttributes, { nullable: true }),
    "relationships": S.optionalWith(IdentityRelationships, { nullable: true })
}) {
}
export class UserData extends S.Class("UserData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("User"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateUserAttributes, { nullable: true }),
    "relationships": S.optionalWith(UserRelationships, { nullable: true })
}) {
}
export class AccountInviteData extends S.Class("AccountInviteData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountInvite"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AccountInviteAttributes, { nullable: true }),
    "relationships": S.optionalWith(AccountInviteRelationships, { nullable: true })
}) {
}
export class UserAccountRoleData extends S.Class("UserAccountRoleData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserAccountRole"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(UpdateUserAccountRoleAttributes, { nullable: true }),
    "relationships": S.optionalWith(UserAccountRoleRelationships, { nullable: true })
}) {
}
export class EmailAddressData extends S.Class("EmailAddressData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EmailAddress"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(EmailAddressAttributes, { nullable: true }),
    "relationships": S.optionalWith(EmailAddressRelationships, { nullable: true })
}) {
}
export class PhoneNumberData extends S.Class("PhoneNumberData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PhoneNumber"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(PhoneNumberAttributes, { nullable: true }),
    "relationships": S.optionalWith(EmailAddressRelationships, { nullable: true })
}) {
}
export class AccountProviderContactData extends S.Class("AccountProviderContactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProviderContact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AccountProviderContactAttributes, { nullable: true }),
    "relationships": S.optionalWith(AccountProviderContactRelationships, { nullable: true })
}) {
}
export class AccountProviderData extends S.Class("AccountProviderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProvider"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AccountProviderAttributes, { nullable: true }),
    "relationships": S.optionalWith(AccountProviderRelationships, { nullable: true })
}) {
}
export class ProjectData extends S.Class("ProjectData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Project"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": S.optionalWith(ProjectRelationships, { nullable: true })
}) {
}
export class DisasterData extends S.Class("DisasterData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Disaster"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(DisasterRelationships, { nullable: true })
}) {
}
export class IncidentData extends S.Class("IncidentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Incident"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(IncidentAttributes, { nullable: true }),
    "relationships": S.optionalWith(IncidentRelationships, { nullable: true })
}) {
}
export class ProjectMediaData extends S.Class("ProjectMediaData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectMedia"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateProjectMediaAttributes, { nullable: true }),
    "relationships": S.optionalWith(ProjectMediaRelationships, { nullable: true })
}) {
}
export class FileProcessData extends S.Class("FileProcessData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FileProcess"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateFileProcessAttributes, { nullable: true }),
    "relationships": S.optionalWith(FileProcessRelationships, { nullable: true })
}) {
}
export class ProjectImpactData extends S.Class("ProjectImpactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectImpact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateIncidentImpactAttributes, { nullable: true }),
    "relationships": S.optionalWith(ProjectImpactRelationships, { nullable: true })
}) {
}
export class MediaData extends S.Class("MediaData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Media"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateMediaAttributes, { nullable: true }),
    "relationships": S.optionalWith(MediaRelationships, { nullable: true })
}) {
}
export class ItemizableFinancialDocumentStatsData extends S.Class("ItemizableFinancialDocumentStatsData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemizableFinancialDocumentStats"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateItemizableFinancialDocumentStatsAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemizableFinancialDocumentStatsRelationships, { nullable: true })
}) {
}
export class FileData extends S.Class("FileData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("File"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(FileAttributes, { nullable: true }),
    "relationships": S.optionalWith(FileRelationships, { nullable: true })
}) {
}
export class AssetData extends S.Class("AssetData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Asset"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributes, { nullable: true }),
    "relationships": S.optionalWith(AssetRelationships, { nullable: true })
}) {
}
export class PerilData extends S.Class("PerilData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Peril"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(PerilRelationships, { nullable: true })
}) {
}
export class ServiceTypeData extends S.Class("ServiceTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(PerilRelationships, { nullable: true })
}) {
}
export class IncidentClassData extends S.Class("IncidentClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(IncidentClassRelationships, { nullable: true })
}) {
}
export class DwellingData extends S.Class("DwellingData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Dwelling"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributes, { nullable: true }),
    "relationships": S.optionalWith(DwellingRelationships, { nullable: true })
}) {
}
export class AssetAppraisalData extends S.Class("AssetAppraisalData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAppraisal"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetAppraisalAttributes, { nullable: true }),
    "relationships": S.optionalWith(AssetAppraisalRelationships, { nullable: true })
}) {
}
export class DocumentData extends S.Class("DocumentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Document"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class IncidentReportData extends S.Class("IncidentReportData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentReport"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class PoliceReportData extends S.Class("PoliceReportData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PoliceReport"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class ParamedicReportData extends S.Class("ParamedicReportData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ParamedicReport"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class ContractData extends S.Class("ContractData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Contract"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class RentRollData extends S.Class("RentRollData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("RentRoll"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class PermitData extends S.Class("PermitData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Permit"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class BlueprintData extends S.Class("BlueprintData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Blueprint"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class DeclarationsPageData extends S.Class("DeclarationsPageData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeclarationsPage"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class PolicyJacketData extends S.Class("PolicyJacketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyJacket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class ScopeOfLossData extends S.Class("ScopeOfLossData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ScopeOfLoss"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class DeliveryPaperworkData extends S.Class("DeliveryPaperworkData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeliveryPaperwork"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class ProductSpecData extends S.Class("ProductSpecData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProductSpec"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class UserManualData extends S.Class("UserManualData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserManual"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class WarrantyData extends S.Class("WarrantyData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Warranty"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class DeedData extends S.Class("DeedData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deed"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(BlueprintRelationships, { nullable: true })
}) {
}
export class FinancialDocumentData extends S.Class("FinancialDocumentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FinancialDocument"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetAppraisalAttributes, { nullable: true }),
    "relationships": S.optionalWith(FinancialDocumentRelationships, { nullable: true })
}) {
}
export class DocumentClassData extends S.Class("DocumentClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(DocumentClassRelationships, { nullable: true })
}) {
}
export class DocumentTypeData extends S.Class("DocumentTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateDocumentTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(DocumentTypeRelationships, { nullable: true })
}) {
}
export class SpaceGroupData extends S.Class("SpaceGroupData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroup"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": S.optionalWith(SpaceGroupRelationships, { nullable: true })
}) {
}
export class SpaceData extends S.Class("SpaceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Space"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateSpaceAttributes, { nullable: true }),
    "relationships": S.optionalWith(SpaceRelationships, { nullable: true })
}) {
}
export class SpaceTypeData extends S.Class("SpaceTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(SpaceCategoryRelationships, { nullable: true })
}) {
}
export class SpaceCategoryData extends S.Class("SpaceCategoryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceCategory"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(SpaceCategoryRelationships, { nullable: true })
}) {
}
export class SpaceClassData extends S.Class("SpaceClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(SpaceClassRelationships, { nullable: true })
}) {
}
export class SpaceGroupTypeData extends S.Class("SpaceGroupTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroupType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(SpaceGroupTypeRelationships, { nullable: true })
}) {
}
export class BucketClassData extends S.Class("BucketClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(BucketClassRelationships, { nullable: true })
}) {
}
export class BucketTypeData extends S.Class("BucketTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BucketTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(BucketTypeRelationships, { nullable: true })
}) {
}
export class AddressData extends S.Class("AddressData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Address"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AddressAttributes, { nullable: true }),
    "relationships": S.optionalWith(AddressRelationships, { nullable: true })
}) {
}
export class ThirdPartyDwellingData extends S.Class("ThirdPartyDwellingData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyDwelling"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AddressAttributes, { nullable: true }),
    "relationships": S.optionalWith(ThirdPartyDwellingRelationships, { nullable: true })
}) {
}
export class ItemizableFinancialDocumentData extends S.Class("ItemizableFinancialDocumentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemizableFinancialDocument"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemizableFinancialDocumentRelationships, { nullable: true })
}) {
}
export class ItemImpactPaymentData extends S.Class("ItemImpactPaymentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactPayment"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemImpactPaymentRelationships, { nullable: true })
}) {
}
export class ItemImpactInvoiceData extends S.Class("ItemImpactInvoiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactInvoice"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemImpactInvoiceRelationships, { nullable: true })
}) {
}
export class ItemImpactEstimateData extends S.Class("ItemImpactEstimateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactEstimate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(EstimateLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemImpactEstimateRelationships, { nullable: true })
}) {
}
export class ItemAppraisalData extends S.Class("ItemAppraisalData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemAppraisal"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AppraisalLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemAppraisalRelationships, { nullable: true })
}) {
}
export class ItemInvoiceData extends S.Class("ItemInvoiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemInvoice"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ItemInvoiceAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemInvoiceRelationships, { nullable: true })
}) {
}
export class ItemPaymentData extends S.Class("ItemPaymentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemPayment"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ItemPaymentAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemPaymentRelationships, { nullable: true })
}) {
}
export class ItemEstimateData extends S.Class("ItemEstimateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemEstimate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ItemEstimateAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemEstimateRelationships, { nullable: true })
}) {
}
export class ItemProductSuggestionData extends S.Class("ItemProductSuggestionData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemProductSuggestion"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ItemProductSuggestionAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemProductSuggestionRelationships, { nullable: true })
}) {
}
export class ServiceTaskPaymentData extends S.Class("ServiceTaskPaymentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskPayment"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ServiceTaskPaymentRelationships, { nullable: true })
}) {
}
export class ServiceTaskInvoiceData extends S.Class("ServiceTaskInvoiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskInvoice"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ServiceTaskInvoiceRelationships, { nullable: true })
}) {
}
export class ServiceTaskEstimateData extends S.Class("ServiceTaskEstimateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskEstimate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(EstimateLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ServiceTaskEstimateRelationships, { nullable: true })
}) {
}
export class ChangeOrderData extends S.Class("ChangeOrderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ChangeOrder"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(ChangeOrderRelationships, { nullable: true })
}) {
}
export class EntrySourceMetadataData extends S.Class("EntrySourceMetadataData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMetadata"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateEntrySourceMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(EntrySourceMetadataRelationships, { nullable: true })
}) {
}
export class AppraisalLineData extends S.Class("AppraisalLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AppraisalLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AppraisalLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(AppraisalLineRelationships, { nullable: true })
}) {
}
export class InvoiceLineData extends S.Class("InvoiceLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("InvoiceLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(InvoiceLineRelationships, { nullable: true })
}) {
}
export class PaymentLineData extends S.Class("PaymentLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PaymentLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(PaymentLineRelationships, { nullable: true })
}) {
}
export class EstimateLineData extends S.Class("EstimateLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EstimateLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(EstimateLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(EstimateLineRelationships, { nullable: true })
}) {
}
export class EntrySourceMediaData extends S.Class("EntrySourceMediaData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMedia"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateEntrySourceMediaAttributes, { nullable: true }),
    "relationships": S.optionalWith(EntrySourceMediaRelationships, { nullable: true })
}) {
}
export class ItemChangeOrderData extends S.Class("ItemChangeOrderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemChangeOrder"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ItemChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemChangeOrderRelationships, { nullable: true })
}) {
}
export class ItemImpactChangeOrderData extends S.Class("ItemImpactChangeOrderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactChangeOrder"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemImpactChangeOrderRelationships, { nullable: true })
}) {
}
export class EstimateData extends S.Class("EstimateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Estimate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(EstimateAttributes, { nullable: true }),
    "relationships": S.optionalWith(EstimateRelationships, { nullable: true })
}) {
}
export class ChangeOrderLineData extends S.Class("ChangeOrderLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ChangeOrderLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ChangeOrderLineRelationships, { nullable: true })
}) {
}
export class ServiceTaskChangeOrderData extends S.Class("ServiceTaskChangeOrderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskChangeOrder"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(ServiceTaskChangeOrderRelationships, { nullable: true })
}) {
}
export class EntrySourceData extends S.Class("EntrySourceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySource"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(EntrySourceAttributes, { nullable: true }),
    "relationships": S.optionalWith(EntrySourceRelationships, { nullable: true })
}) {
}
export class ServiceTaskData extends S.Class("ServiceTaskData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTask"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ServiceTaskAttributes, { nullable: true }),
    "relationships": S.optionalWith(ServiceTaskRelationships, { nullable: true })
}) {
}
export class PaymentData extends S.Class("PaymentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Payment"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(PaymentRelationships, { nullable: true })
}) {
}
export class ServiceData extends S.Class("ServiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Service"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ServiceAttributes, { nullable: true }),
    "relationships": S.optionalWith(ServiceRelationships, { nullable: true })
}) {
}
export class InvoiceData extends S.Class("InvoiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Invoice"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(InvoiceRelationships, { nullable: true })
}) {
}
export class ItemImpactData extends S.Class("ItemImpactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateItemImpactAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemImpactRelationships, { nullable: true })
}) {
}
export class ItemData extends S.Class("ItemData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Item"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ItemAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemRelationships, { nullable: true })
}) {
}
export class ItemMediaSuggestionData extends S.Class("ItemMediaSuggestionData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemMediaSuggestion"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ItemMediaSuggestionAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemMediaSuggestionRelationships, { nullable: true })
}) {
}
export class DepreciationModifierData extends S.Class("DepreciationModifierData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationModifier"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateDepreciationModifierAttributes, { nullable: true }),
    "relationships": S.optionalWith(DepreciationModifierRelationships, { nullable: true })
}) {
}
export class DepreciationOverrideData extends S.Class("DepreciationOverrideData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationOverride"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateDepreciationOverrideAttributes, { nullable: true }),
    "relationships": S.optionalWith(DepreciationModifierRelationships, { nullable: true })
}) {
}
export class ItemTemplateData extends S.Class("ItemTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemTemplateRelationships, { nullable: true })
}) {
}
export class BaseSubBucketMetadataData extends S.Class("BaseSubBucketMetadataData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseSubBucketMetadata"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BaseBucketMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(BaseBucketMetadataRelationships, { nullable: true })
}) {
}
export class BaseBucketMetadataData extends S.Class("BaseBucketMetadataData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseBucketMetadata"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BaseBucketMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(BaseBucketMetadataRelationships, { nullable: true })
}) {
}
export class FundingSourceData extends S.Class("FundingSourceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FundingSource"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(FundingSourceAttributes, { nullable: true }),
    "relationships": S.optionalWith(FundingSourceRelationships, { nullable: true })
}) {
}
export class EntryData extends S.Class("EntryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Entry"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateEntryAttributes, { nullable: true }),
    "relationships": S.optionalWith(EntryRelationships, { nullable: true })
}) {
}
export class BucketFundingData extends S.Class("BucketFundingData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketFunding"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BucketFundingAttributes, { nullable: true }),
    "relationships": S.optionalWith(BucketFundingRelationships, { nullable: true })
}) {
}
export class BaseBucketData extends S.Class("BaseBucketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseBucket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BaseBucketAttributes, { nullable: true }),
    "relationships": S.optionalWith(BaseBucketRelationships, { nullable: true })
}) {
}
export class FundingData extends S.Class("FundingData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Funding"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateFundingAttributes, { nullable: true }),
    "relationships": S.optionalWith(FundingRelationships, { nullable: true })
}) {
}
export class SubBucketDefinitionData extends S.Class("SubBucketDefinitionData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubBucketDefinition"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(SubBucketDefinitionAttributes, { nullable: true }),
    "relationships": S.optionalWith(SubBucketDefinitionRelationships, { nullable: true })
}) {
}
export class ClaimTargetData extends S.Class("ClaimTargetData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ClaimTarget"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ClaimTargetAttributes, { nullable: true }),
    "relationships": S.optionalWith(ClaimTargetRelationships, { nullable: true })
}) {
}
export class BucketData extends S.Class("BucketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Bucket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BucketAttributes, { nullable: true }),
    "relationships": S.optionalWith(BucketRelationships, { nullable: true })
}) {
}
export class ClaimData extends S.Class("ClaimData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Claim"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ClaimAttributes, { nullable: true }),
    "relationships": S.optionalWith(ClaimRelationships, { nullable: true })
}) {
}
export class DeductibleData extends S.Class("DeductibleData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deductible"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(DeductibleAttributes, { nullable: true }),
    "relationships": S.optionalWith(DeductibleRelationships, { nullable: true })
}) {
}
export class ClaimDeductibleData extends S.Class("ClaimDeductibleData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ClaimDeductible"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(ClaimDeductibleAttributes, { nullable: true }),
    "relationships": S.optionalWith(ClaimDeductibleRelationships, { nullable: true })
}) {
}
export class PolicyTermData extends S.Class("PolicyTermData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTerm"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(PolicyTermAttributes, { nullable: true }),
    "relationships": S.optionalWith(PolicyTermRelationships, { nullable: true })
}) {
}
export class PolicyData extends S.Class("PolicyData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Policy"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreatePolicyAttributes, { nullable: true }),
    "relationships": S.optionalWith(PolicyRelationships, { nullable: true })
}) {
}
export class SubmissionTrackTemplateData extends S.Class("SubmissionTrackTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubmissionTrackTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(SubmissionTrackTemplateRelationships, { nullable: true })
}) {
}
export class BucketDefinitionData extends S.Class("BucketDefinitionData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketDefinition"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BucketDefinitionAttributes, { nullable: true }),
    "relationships": S.optionalWith(BucketDefinitionRelationships, { nullable: true })
}) {
}
export class CoverageGroupTemplateData extends S.Class("CoverageGroupTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroupTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CoverageGroupTemplateRelationships, { nullable: true })
}) {
}
export class IncidentImpactData extends S.Class("IncidentImpactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentImpact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateIncidentImpactAttributes, { nullable: true }),
    "relationships": S.optionalWith(IncidentImpactRelationships, { nullable: true })
}) {
}
export class CoverageData extends S.Class("CoverageData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Coverage"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BucketDefinitionAttributes, { nullable: true }),
    "relationships": S.optionalWith(CoverageRelationships, { nullable: true })
}) {
}
export class SubCoverageData extends S.Class("SubCoverageData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverage"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(SubBucketDefinitionAttributes, { nullable: true }),
    "relationships": S.optionalWith(SubCoverageRelationships, { nullable: true })
}) {
}
export class EndorsementTemplateData extends S.Class("EndorsementTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EndorsementTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateEndorsementTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(EndorsementTemplateRelationships, { nullable: true })
}) {
}
export class SubBucketData extends S.Class("SubBucketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubBucket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateSubBucketAttributes, { nullable: true }),
    "relationships": S.optionalWith(SubBucketRelationships, { nullable: true })
}) {
}
export class BaseSubBucketData extends S.Class("BaseSubBucketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseSubBucket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BaseSubBucketAttributes, { nullable: true }),
    "relationships": S.optionalWith(BaseSubBucketRelationships, { nullable: true })
}) {
}
export class SubCoverageTemplateData extends S.Class("SubCoverageTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverageTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(SubCoverageTemplateRelationships, { nullable: true })
}) {
}
export class EndorsementData extends S.Class("EndorsementData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Endorsement"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(EndorsementAttributes, { nullable: true }),
    "relationships": S.optionalWith(EndorsementRelationships, { nullable: true })
}) {
}
export class CoverageTemplateData extends S.Class("CoverageTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CoverageTemplateRelationships, { nullable: true })
}) {
}
export class CoverageGroupData extends S.Class("CoverageGroupData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroup"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "relationships": S.optionalWith(CoverageGroupRelationships, { nullable: true })
}) {
}
export class PolicyTemplateData extends S.Class("PolicyTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(PolicyTemplateRelationships, { nullable: true })
}) {
}
export class DepreciationScheduleData extends S.Class("DepreciationScheduleData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationSchedule"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateDepreciationScheduleAttributes, { nullable: true }),
    "relationships": S.optionalWith(DepreciationScheduleRelationships, { nullable: true })
}) {
}
export class SpaceTypeItemTemplateData extends S.Class("SpaceTypeItemTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceTypeItemTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributeTypeItemTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(SpaceTypeItemTemplateRelationships, { nullable: true })
}) {
}
export class AssetAttributeTypeData extends S.Class("AssetAttributeTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributeTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(AssetAttributeTypeRelationships, { nullable: true })
}) {
}
export class AssetAttributeTypeItemTemplateData extends S.Class("AssetAttributeTypeItemTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeTypeItemTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributeTypeItemTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(AssetAttributeTypeItemTemplateRelationships, { nullable: true })
}) {
}
export class AssetAttributeClassData extends S.Class("AssetAttributeClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributeClassAttributes, { nullable: true }),
    "relationships": S.optionalWith(AssetAttributeClassRelationships, { nullable: true })
}) {
}
export class IncidentTypeData extends S.Class("IncidentTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(BucketTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(IncidentTypeRelationships, { nullable: true })
}) {
}
export class ItemClassData extends S.Class("ItemClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemClassRelationships, { nullable: true })
}) {
}
export class ItemTypeData extends S.Class("ItemTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(CreateItemTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemTypeRelationships, { nullable: true })
}) {
}
export class ItemCategoryData extends S.Class("ItemCategoryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemCategory"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(ItemCategoryRelationships, { nullable: true })
}) {
}
export class ServiceClassData extends S.Class("ServiceClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(ServiceClassRelationships, { nullable: true })
}) {
}
export class ServiceCategoryData extends S.Class("ServiceCategoryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceCategory"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(ServiceCategoryRelationships, { nullable: true })
}) {
}
export class AppraisalData extends S.Class("AppraisalData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Appraisal"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(AppraisalAttributes, { nullable: true }),
    "relationships": S.optionalWith(AppraisalRelationships, { nullable: true })
}) {
}
export class ThirdPartyImpactData extends S.Class("ThirdPartyImpactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyImpact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true }),
    "attributes": S.optionalWith(EntrySourceAttributes, { nullable: true }),
    "relationships": S.optionalWith(ThirdPartyImpactRelationships, { nullable: true })
}) {
}
export class CreateIdentityData extends S.Class("CreateIdentityData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Identity"),
    "attributes": S.optionalWith(AccountProviderContactAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateIdentityRelationships, { nullable: true })
}) {
}
export class UpdateIdentityData extends S.Class("UpdateIdentityData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Identity"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AccountProviderContactAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateIdentityRelationships, { nullable: true })
}) {
}
export class UpdateUserData extends S.Class("UpdateUserData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("User"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateUserAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateUserRelationships, { nullable: true })
}) {
}
export class CreateUserData extends S.Class("CreateUserData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("User"),
    "attributes": S.optionalWith(CreateUserAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateUserRelationships, { nullable: true })
}) {
}
export class CreateEmailAddressData extends S.Class("CreateEmailAddressData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EmailAddress"),
    "attributes": CreateEmailAddressAttributes,
    "relationships": CreateEmailAddressRelationships
}) {
}
export class CreatePhoneNumberData extends S.Class("CreatePhoneNumberData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PhoneNumber"),
    "attributes": CreatePhoneNumberAttributes,
    "relationships": CreateEmailAddressRelationships
}) {
}
export class UpdateEmailAddressData extends S.Class("UpdateEmailAddressData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EmailAddress"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(EmailAddressAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateEmailAddressRelationships, { nullable: true })
}) {
}
export class UpdatePhoneNumberData extends S.Class("UpdatePhoneNumberData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PhoneNumber"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(PhoneNumberAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateEmailAddressRelationships, { nullable: true })
}) {
}
export class CreateAccountInviteData extends S.Class("CreateAccountInviteData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountInvite"),
    "attributes": CreateAccountInviteAttributes,
    "relationships": S.optionalWith(CreateAccountInviteRelationships, { nullable: true })
}) {
}
export class UpdateAccountInviteData extends S.Class("UpdateAccountInviteData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountInvite"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AccountInviteAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAccountInviteRelationships, { nullable: true })
}) {
}
export class CreateAuthProfileData extends S.Class("CreateAuthProfileData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AuthProfile"),
    "attributes": CreateAuthProfileAttributes,
    "relationships": CreateAuthProfileRelationships
}) {
}
export class UpdateAuthProfileData extends S.Class("UpdateAuthProfileData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AuthProfile"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AuthProfileAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAuthProfileRelationships, { nullable: true })
}) {
}
export class CreateUserAccountRoleData extends S.Class("CreateUserAccountRoleData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserAccountRole"),
    "attributes": CreateUserAccountRoleAttributes,
    "relationships": CreateUserAccountRoleRelationships
}) {
}
export class UpdateUserAccountRoleData extends S.Class("UpdateUserAccountRoleData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserAccountRole"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(UpdateUserAccountRoleAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateUserAccountRoleRelationships, { nullable: true })
}) {
}
export class CreateAccountProviderContactData extends S.Class("CreateAccountProviderContactData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProviderContact"),
    "attributes": S.optionalWith(AccountProviderContactAttributes, { nullable: true }),
    "relationships": CreateAccountProviderContactRelationships
}) {
}
export class UpdateAccountProviderContactData extends S.Class("UpdateAccountProviderContactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProviderContact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AccountProviderContactAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAccountProviderContactRelationships, { nullable: true })
}) {
}
export class CreateAccountProviderData extends S.Class("CreateAccountProviderData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProvider"),
    "attributes": S.optionalWith(AccountProviderAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateAccountProviderRelationships, { nullable: true })
}) {
}
export class UpdateAccountProviderData extends S.Class("UpdateAccountProviderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AccountProvider"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AccountProviderAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAccountProviderRelationships, { nullable: true })
}) {
}
export class CreateThirdPartyData extends S.Class("CreateThirdPartyData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdParty"),
    "relationships": CreateThirdPartyIndividualRelationships
}) {
}
export class CreateThirdPartyIndividualData extends S.Class("CreateThirdPartyIndividualData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyIndividual"),
    "attributes": CreateAccountAttributes,
    "relationships": CreateThirdPartyIndividualRelationships
}) {
}
export class UpdateThirdPartyData extends S.Class("UpdateThirdPartyData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdParty"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "relationships": S.optionalWith(UpdateThirdPartyIndividualRelationships, { nullable: true })
}) {
}
export class UpdateThirdPartyIndividualData extends S.Class("UpdateThirdPartyIndividualData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyIndividual"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateThirdPartyIndividualRelationships, { nullable: true })
}) {
}
export class CreateAccountData extends S.Class("CreateAccountData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Account"),
    "attributes": CreateAccountAttributes,
    "relationships": CreateAccountRelationships
}) {
}
export class UpdateAccountData extends S.Class("UpdateAccountData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Account"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAccountRelationships, { nullable: true })
}) {
}
export class CreateProjectData extends S.Class("CreateProjectData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Project"),
    "attributes": CreateAccountAttributes,
    "relationships": S.optionalWith(CreateProjectRelationships, { nullable: true })
}) {
}
export class UpdateProjectData extends S.Class("UpdateProjectData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Project"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateProjectRelationships, { nullable: true })
}) {
}
export class CreateDisasterData extends S.Class("CreateDisasterData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Disaster"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDisasterRelationships, { nullable: true })
}) {
}
export class UpdateDisasterData extends S.Class("UpdateDisasterData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Disaster"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDisasterRelationships, { nullable: true })
}) {
}
export class CreateIncidentData extends S.Class("CreateIncidentData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Incident"),
    "attributes": CreateIncidentAttributes,
    "relationships": CreateIncidentRelationships
}) {
}
export class UpdateIncidentData extends S.Class("UpdateIncidentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Incident"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(IncidentAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateIncidentRelationships, { nullable: true })
}) {
}
export class CreateProjectMediaData extends S.Class("CreateProjectMediaData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectMedia"),
    "attributes": S.optionalWith(CreateProjectMediaAttributes, { nullable: true }),
    "relationships": CreateProjectMediaRelationships
}) {
}
export class UpdateProjectMediaData extends S.Class("UpdateProjectMediaData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectMedia"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateProjectMediaAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateProjectMediaRelationships, { nullable: true })
}) {
}
export class CreateFileProcessData extends S.Class("CreateFileProcessData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FileProcess"),
    "attributes": S.optionalWith(CreateFileProcessAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateFileProcessRelationships, { nullable: true })
}) {
}
export class UpdateFileProcessData extends S.Class("UpdateFileProcessData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FileProcess"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateFileProcessAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateFileProcessRelationships, { nullable: true })
}) {
}
export class CreateProjectImpactData extends S.Class("CreateProjectImpactData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectImpact"),
    "attributes": S.optionalWith(CreateIncidentImpactAttributes, { nullable: true }),
    "relationships": CreateProjectImpactRelationships
}) {
}
export class UpdateProjectImpactData extends S.Class("UpdateProjectImpactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProjectImpact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateIncidentImpactAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateProjectImpactRelationships, { nullable: true })
}) {
}
export class CreateMediaData extends S.Class("CreateMediaData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Media"),
    "attributes": S.optionalWith(CreateMediaAttributes, { nullable: true }),
    "relationships": CreateMediaRelationships
}) {
}
export class UpdateMediaData extends S.Class("UpdateMediaData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Media"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateMediaAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateMediaRelationships, { nullable: true })
}) {
}
export class CreateItemizableFinancialDocumentStatsData extends S.Class("CreateItemizableFinancialDocumentStatsData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemizableFinancialDocumentStats"),
    "attributes": S.optionalWith(CreateItemizableFinancialDocumentStatsAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemizableFinancialDocumentStatsRelationships, { nullable: true })
}) {
}
export class UpdateItemizableFinancialDocumentStatsData extends S.Class("UpdateItemizableFinancialDocumentStatsData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemizableFinancialDocumentStats"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateItemizableFinancialDocumentStatsAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemizableFinancialDocumentStatsRelationships, { nullable: true })
}) {
}
export class CreateFileData extends S.Class("CreateFileData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("File"),
    "attributes": CreateFileAttributes,
    "relationships": S.optionalWith(CreateFileRelationships, { nullable: true })
}) {
}
export class UpdateFileData extends S.Class("UpdateFileData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("File"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(UpdateFileAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateFileRelationships, { nullable: true })
}) {
}
export class CreateAssetData extends S.Class("CreateAssetData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Asset"),
    "attributes": S.optionalWith(AssetAttributes, { nullable: true }),
    "relationships": CreateAssetRelationships
}) {
}
export class UpdateAssetData extends S.Class("UpdateAssetData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Asset"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAssetRelationships, { nullable: true })
}) {
}
export class CreatePerilData extends S.Class("CreatePerilData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Peril"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreatePerilRelationships, { nullable: true })
}) {
}
export class UpdatePerilData extends S.Class("UpdatePerilData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Peril"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreatePerilRelationships, { nullable: true })
}) {
}
export class CreateServiceTypeData extends S.Class("CreateServiceTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceType"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreatePerilRelationships, { nullable: true })
}) {
}
export class UpdateServiceTypeData extends S.Class("UpdateServiceTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreatePerilRelationships, { nullable: true })
}) {
}
export class CreateIncidentClassData extends S.Class("CreateIncidentClassData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentClass"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateIncidentClassRelationships, { nullable: true })
}) {
}
export class UpdateIncidentClassData extends S.Class("UpdateIncidentClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateIncidentClassRelationships, { nullable: true })
}) {
}
export class CreateDwellingData extends S.Class("CreateDwellingData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Dwelling"),
    "attributes": S.optionalWith(AssetAttributes, { nullable: true }),
    "relationships": CreateDwellingRelationships
}) {
}
export class UpdateDwellingData extends S.Class("UpdateDwellingData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Dwelling"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateDwellingRelationships, { nullable: true })
}) {
}
export class CreateAssetAppraisalData extends S.Class("CreateAssetAppraisalData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAppraisal"),
    "attributes": CreateAssetAppraisalAttributes,
    "relationships": CreateAssetAppraisalRelationships
}) {
}
export class UpdateAssetAppraisalData extends S.Class("UpdateAssetAppraisalData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAppraisal"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetAppraisalAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAssetAppraisalRelationships, { nullable: true })
}) {
}
export class CreateDocumentData extends S.Class("CreateDocumentData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Document"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateIncidentReportData extends S.Class("CreateIncidentReportData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentReport"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreatePoliceReportData extends S.Class("CreatePoliceReportData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PoliceReport"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateParamedicReportData extends S.Class("CreateParamedicReportData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ParamedicReport"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateContractData extends S.Class("CreateContractData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Contract"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateRentRollData extends S.Class("CreateRentRollData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("RentRoll"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreatePermitData extends S.Class("CreatePermitData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Permit"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateBlueprintData extends S.Class("CreateBlueprintData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Blueprint"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateDeclarationsPageData extends S.Class("CreateDeclarationsPageData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeclarationsPage"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreatePolicyJacketData extends S.Class("CreatePolicyJacketData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyJacket"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateScopeOfLossData extends S.Class("CreateScopeOfLossData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ScopeOfLoss"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateDeliveryPaperworkData extends S.Class("CreateDeliveryPaperworkData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeliveryPaperwork"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateProductSpecData extends S.Class("CreateProductSpecData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProductSpec"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateUserManualData extends S.Class("CreateUserManualData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserManual"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateWarrantyData extends S.Class("CreateWarrantyData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Warranty"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateDeedData extends S.Class("CreateDeedData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deed"),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateDocumentData extends S.Class("UpdateDocumentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Document"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateIncidentReportData extends S.Class("UpdateIncidentReportData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentReport"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdatePoliceReportData extends S.Class("UpdatePoliceReportData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PoliceReport"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateParamedicReportData extends S.Class("UpdateParamedicReportData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ParamedicReport"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateContractData extends S.Class("UpdateContractData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Contract"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateRentRollData extends S.Class("UpdateRentRollData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("RentRoll"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdatePermitData extends S.Class("UpdatePermitData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Permit"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateBlueprintData extends S.Class("UpdateBlueprintData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Blueprint"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateDeclarationsPageData extends S.Class("UpdateDeclarationsPageData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeclarationsPage"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdatePolicyJacketData extends S.Class("UpdatePolicyJacketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyJacket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateScopeOfLossData extends S.Class("UpdateScopeOfLossData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ScopeOfLoss"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateDeliveryPaperworkData extends S.Class("UpdateDeliveryPaperworkData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DeliveryPaperwork"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateProductSpecData extends S.Class("UpdateProductSpecData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ProductSpec"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateUserManualData extends S.Class("UpdateUserManualData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("UserManual"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateWarrantyData extends S.Class("UpdateWarrantyData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Warranty"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class UpdateDeedData extends S.Class("UpdateDeedData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deed"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BlueprintAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBlueprintRelationships, { nullable: true })
}) {
}
export class CreateFinancialDocumentData extends S.Class("CreateFinancialDocumentData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FinancialDocument"),
    "attributes": CreateAssetAppraisalAttributes,
    "relationships": S.optionalWith(CreateFinancialDocumentRelationships, { nullable: true })
}) {
}
export class UpdateFinancialDocumentData extends S.Class("UpdateFinancialDocumentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FinancialDocument"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetAppraisalAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateFinancialDocumentRelationships, { nullable: true })
}) {
}
export class CreateDocumentClassData extends S.Class("CreateDocumentClassData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentClass"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDocumentClassRelationships, { nullable: true })
}) {
}
export class UpdateDocumentClassData extends S.Class("UpdateDocumentClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDocumentClassRelationships, { nullable: true })
}) {
}
export class CreateDocumentTypeData extends S.Class("CreateDocumentTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentType"),
    "attributes": S.optionalWith(CreateDocumentTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDocumentTypeRelationships, { nullable: true })
}) {
}
export class UpdateDocumentTypeData extends S.Class("UpdateDocumentTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DocumentType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateDocumentTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDocumentTypeRelationships, { nullable: true })
}) {
}
export class CreateSpaceGroupData extends S.Class("CreateSpaceGroupData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroup"),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": CreateSpaceGroupRelationships
}) {
}
export class UpdateSpaceGroupData extends S.Class("UpdateSpaceGroupData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroup"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AccountAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateSpaceGroupRelationships, { nullable: true })
}) {
}
export class CreateSpaceData extends S.Class("CreateSpaceData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Space"),
    "attributes": S.optionalWith(CreateSpaceAttributes, { nullable: true }),
    "relationships": CreateSpaceRelationships
}) {
}
export class UpdateSpaceData extends S.Class("UpdateSpaceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Space"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateSpaceAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateSpaceRelationships, { nullable: true })
}) {
}
export class CreateSpaceTypeData extends S.Class("CreateSpaceTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceType"),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceCategoryRelationships, { nullable: true })
}) {
}
export class UpdateSpaceTypeData extends S.Class("UpdateSpaceTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceCategoryRelationships, { nullable: true })
}) {
}
export class CreateSpaceCategoryData extends S.Class("CreateSpaceCategoryData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceCategory"),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceCategoryRelationships, { nullable: true })
}) {
}
export class UpdateSpaceCategoryData extends S.Class("UpdateSpaceCategoryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceCategory"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceCategoryRelationships, { nullable: true })
}) {
}
export class CreateSpaceClassData extends S.Class("CreateSpaceClassData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceClass"),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceClassRelationships, { nullable: true })
}) {
}
export class UpdateSpaceClassData extends S.Class("UpdateSpaceClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateSpaceCategoryAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceClassRelationships, { nullable: true })
}) {
}
export class CreateSpaceGroupTypeData extends S.Class("CreateSpaceGroupTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroupType"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceGroupTypeRelationships, { nullable: true })
}) {
}
export class UpdateSpaceGroupTypeData extends S.Class("UpdateSpaceGroupTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceGroupType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceGroupTypeRelationships, { nullable: true })
}) {
}
export class CreateBucketClassData extends S.Class("CreateBucketClassData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketClass"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBucketClassRelationships, { nullable: true })
}) {
}
export class UpdateBucketClassData extends S.Class("UpdateBucketClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBucketClassRelationships, { nullable: true })
}) {
}
export class CreateBucketTypeData extends S.Class("CreateBucketTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketType"),
    "attributes": S.optionalWith(BucketTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBucketTypeRelationships, { nullable: true })
}) {
}
export class UpdateBucketTypeData extends S.Class("UpdateBucketTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BucketTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBucketTypeRelationships, { nullable: true })
}) {
}
export class CreateAddressData extends S.Class("CreateAddressData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Address"),
    "attributes": CreateAddressAttributes,
    "relationships": CreateAddressRelationships
}) {
}
export class UpdateAddressData extends S.Class("UpdateAddressData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Address"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AddressAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAddressRelationships, { nullable: true })
}) {
}
export class CreateThirdPartyDwellingData extends S.Class("CreateThirdPartyDwellingData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyDwelling"),
    "attributes": CreateAddressAttributes,
    "relationships": CreateThirdPartyDwellingRelationships
}) {
}
export class UpdateThirdPartyDwellingData extends S.Class("UpdateThirdPartyDwellingData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyDwelling"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AddressAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateThirdPartyDwellingRelationships, { nullable: true })
}) {
}
export class CreateItemizableFinancialDocumentData extends S.Class("CreateItemizableFinancialDocumentData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemizableFinancialDocument"),
    "attributes": CreateChangeOrderAttributes,
    "relationships": S.optionalWith(CreateItemizableFinancialDocumentRelationships, { nullable: true })
}) {
}
export class UpdateItemizableFinancialDocumentData extends S.Class("UpdateItemizableFinancialDocumentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemizableFinancialDocument"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemizableFinancialDocumentRelationships, { nullable: true })
}) {
}
export class CreateItemImpactPaymentData extends S.Class("CreateItemImpactPaymentData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactPayment"),
    "attributes": CreateInvoiceLineAttributes,
    "relationships": CreateItemImpactPaymentRelationships
}) {
}
export class UpdateItemImpactPaymentData extends S.Class("UpdateItemImpactPaymentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactPayment"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemImpactPaymentRelationships, { nullable: true })
}) {
}
export class CreateItemImpactInvoiceData extends S.Class("CreateItemImpactInvoiceData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactInvoice"),
    "attributes": CreateInvoiceLineAttributes,
    "relationships": CreateItemImpactInvoiceRelationships
}) {
}
export class UpdateItemImpactInvoiceData extends S.Class("UpdateItemImpactInvoiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactInvoice"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemImpactInvoiceRelationships, { nullable: true })
}) {
}
export class CreateItemImpactEstimateData extends S.Class("CreateItemImpactEstimateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactEstimate"),
    "attributes": CreateEstimateLineAttributes,
    "relationships": CreateItemImpactEstimateRelationships
}) {
}
export class UpdateItemImpactEstimateData extends S.Class("UpdateItemImpactEstimateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactEstimate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(EstimateLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemImpactEstimateRelationships, { nullable: true })
}) {
}
export class CreateItemAppraisalData extends S.Class("CreateItemAppraisalData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemAppraisal"),
    "attributes": S.optionalWith(AppraisalLineAttributes, { nullable: true }),
    "relationships": CreateItemAppraisalRelationships
}) {
}
export class UpdateItemAppraisalData extends S.Class("UpdateItemAppraisalData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemAppraisal"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AppraisalLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemAppraisalRelationships, { nullable: true })
}) {
}
export class CreateItemInvoiceData extends S.Class("CreateItemInvoiceData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemInvoice"),
    "attributes": CreateItemInvoiceAttributes,
    "relationships": CreateItemInvoiceRelationships
}) {
}
export class UpdateItemInvoiceData extends S.Class("UpdateItemInvoiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemInvoice"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ItemInvoiceAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemInvoiceRelationships, { nullable: true })
}) {
}
export class CreateItemPaymentData extends S.Class("CreateItemPaymentData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemPayment"),
    "attributes": CreateItemPaymentAttributes,
    "relationships": CreateItemPaymentRelationships
}) {
}
export class UpdateItemPaymentData extends S.Class("UpdateItemPaymentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemPayment"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ItemPaymentAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemPaymentRelationships, { nullable: true })
}) {
}
export class CreateItemEstimateData extends S.Class("CreateItemEstimateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemEstimate"),
    "attributes": CreateItemEstimateAttributes,
    "relationships": CreateItemEstimateRelationships
}) {
}
export class UpdateItemEstimateData extends S.Class("UpdateItemEstimateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemEstimate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ItemEstimateAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemEstimateRelationships, { nullable: true })
}) {
}
export class CreateItemProductSuggestionData extends S.Class("CreateItemProductSuggestionData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemProductSuggestion"),
    "attributes": CreateItemProductSuggestionAttributes,
    "relationships": CreateItemProductSuggestionRelationships
}) {
}
export class UpdateItemProductSuggestionData extends S.Class("UpdateItemProductSuggestionData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemProductSuggestion"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ItemProductSuggestionAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemProductSuggestionRelationships, { nullable: true })
}) {
}
export class CreateServiceTaskPaymentData extends S.Class("CreateServiceTaskPaymentData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskPayment"),
    "attributes": CreateInvoiceLineAttributes,
    "relationships": CreateServiceTaskPaymentRelationships
}) {
}
export class UpdateServiceTaskPaymentData extends S.Class("UpdateServiceTaskPaymentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskPayment"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateServiceTaskPaymentRelationships, { nullable: true })
}) {
}
export class CreateServiceTaskInvoiceData extends S.Class("CreateServiceTaskInvoiceData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskInvoice"),
    "attributes": CreateInvoiceLineAttributes,
    "relationships": CreateServiceTaskInvoiceRelationships
}) {
}
export class UpdateServiceTaskInvoiceData extends S.Class("UpdateServiceTaskInvoiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskInvoice"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateServiceTaskInvoiceRelationships, { nullable: true })
}) {
}
export class CreateServiceTaskEstimateData extends S.Class("CreateServiceTaskEstimateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskEstimate"),
    "attributes": CreateEstimateLineAttributes,
    "relationships": CreateServiceTaskEstimateRelationships
}) {
}
export class UpdateServiceTaskEstimateData extends S.Class("UpdateServiceTaskEstimateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskEstimate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(EstimateLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateServiceTaskEstimateRelationships, { nullable: true })
}) {
}
export class CreateChangeOrderData extends S.Class("CreateChangeOrderData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ChangeOrder"),
    "attributes": CreateChangeOrderAttributes,
    "relationships": CreateChangeOrderRelationships
}) {
}
export class UpdateChangeOrderData extends S.Class("UpdateChangeOrderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ChangeOrder"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateChangeOrderRelationships, { nullable: true })
}) {
}
export class CreateEntrySourceMetadataData extends S.Class("CreateEntrySourceMetadataData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMetadata"),
    "attributes": S.optionalWith(CreateEntrySourceMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateEntrySourceMetadataRelationships, { nullable: true })
}) {
}
export class UpdateEntrySourceMetadataData extends S.Class("UpdateEntrySourceMetadataData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMetadata"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateEntrySourceMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateEntrySourceMetadataRelationships, { nullable: true })
}) {
}
export class CreateAppraisalLineData extends S.Class("CreateAppraisalLineData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AppraisalLine"),
    "attributes": S.optionalWith(AppraisalLineAttributes, { nullable: true }),
    "relationships": CreateAppraisalLineRelationships
}) {
}
export class UpdateAppraisalLineData extends S.Class("UpdateAppraisalLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AppraisalLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AppraisalLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAppraisalLineRelationships, { nullable: true })
}) {
}
export class CreateInvoiceLineData extends S.Class("CreateInvoiceLineData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("InvoiceLine"),
    "attributes": CreateInvoiceLineAttributes,
    "relationships": CreateInvoiceLineRelationships
}) {
}
export class UpdateInvoiceLineData extends S.Class("UpdateInvoiceLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("InvoiceLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateInvoiceLineRelationships, { nullable: true })
}) {
}
export class CreatePaymentLineData extends S.Class("CreatePaymentLineData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PaymentLine"),
    "attributes": CreateInvoiceLineAttributes,
    "relationships": CreatePaymentLineRelationships
}) {
}
export class UpdatePaymentLineData extends S.Class("UpdatePaymentLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PaymentLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(InvoiceLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdatePaymentLineRelationships, { nullable: true })
}) {
}
export class CreateEstimateLineData extends S.Class("CreateEstimateLineData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EstimateLine"),
    "attributes": CreateEstimateLineAttributes,
    "relationships": CreateEstimateLineRelationships
}) {
}
export class UpdateEstimateLineData extends S.Class("UpdateEstimateLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EstimateLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(EstimateLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateEstimateLineRelationships, { nullable: true })
}) {
}
export class CreateEntrySourceMediaData extends S.Class("CreateEntrySourceMediaData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMedia"),
    "attributes": S.optionalWith(CreateEntrySourceMediaAttributes, { nullable: true }),
    "relationships": CreateEntrySourceMediaRelationships
}) {
}
export class UpdateEntrySourceMediaData extends S.Class("UpdateEntrySourceMediaData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySourceMedia"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateEntrySourceMediaAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateEntrySourceMediaRelationships, { nullable: true })
}) {
}
export class CreateItemChangeOrderData extends S.Class("CreateItemChangeOrderData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemChangeOrder"),
    "attributes": CreateItemChangeOrderAttributes,
    "relationships": CreateItemChangeOrderRelationships
}) {
}
export class UpdateItemChangeOrderData extends S.Class("UpdateItemChangeOrderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemChangeOrder"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ItemChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemChangeOrderRelationships, { nullable: true })
}) {
}
export class CreateItemImpactChangeOrderData extends S.Class("CreateItemImpactChangeOrderData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactChangeOrder"),
    "attributes": CreateChangeOrderLineAttributes,
    "relationships": CreateItemImpactChangeOrderRelationships
}) {
}
export class UpdateItemImpactChangeOrderData extends S.Class("UpdateItemImpactChangeOrderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpactChangeOrder"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemImpactChangeOrderRelationships, { nullable: true })
}) {
}
export class CreateEstimateData extends S.Class("CreateEstimateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Estimate"),
    "attributes": CreateEstimateAttributes,
    "relationships": S.optionalWith(CreateEstimateRelationships, { nullable: true })
}) {
}
export class UpdateEstimateData extends S.Class("UpdateEstimateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Estimate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(EstimateAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateEstimateRelationships, { nullable: true })
}) {
}
export class CreateChangeOrderLineData extends S.Class("CreateChangeOrderLineData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ChangeOrderLine"),
    "attributes": CreateChangeOrderLineAttributes,
    "relationships": CreateChangeOrderLineRelationships
}) {
}
export class UpdateChangeOrderLineData extends S.Class("UpdateChangeOrderLineData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ChangeOrderLine"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateChangeOrderLineRelationships, { nullable: true })
}) {
}
export class CreateServiceTaskChangeOrderData extends S.Class("CreateServiceTaskChangeOrderData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskChangeOrder"),
    "attributes": CreateChangeOrderLineAttributes,
    "relationships": CreateServiceTaskChangeOrderRelationships
}) {
}
export class UpdateServiceTaskChangeOrderData extends S.Class("UpdateServiceTaskChangeOrderData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTaskChangeOrder"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderLineAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateServiceTaskChangeOrderRelationships, { nullable: true })
}) {
}
export class CreateEntrySourceData extends S.Class("CreateEntrySourceData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySource"),
    "attributes": CreateEntrySourceAttributes,
    "relationships": S.optionalWith(CreateEntrySourceRelationships, { nullable: true })
}) {
}
export class UpdateEntrySourceData extends S.Class("UpdateEntrySourceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EntrySource"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(EntrySourceAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateEntrySourceRelationships, { nullable: true })
}) {
}
export class CreateServiceTaskData extends S.Class("CreateServiceTaskData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTask"),
    "attributes": CreateServiceTaskAttributes,
    "relationships": CreateServiceTaskRelationships
}) {
}
export class UpdateServiceTaskData extends S.Class("UpdateServiceTaskData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceTask"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ServiceTaskAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateServiceTaskRelationships, { nullable: true })
}) {
}
export class CreatePaymentData extends S.Class("CreatePaymentData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Payment"),
    "attributes": CreateChangeOrderAttributes,
    "relationships": S.optionalWith(CreatePaymentRelationships, { nullable: true })
}) {
}
export class UpdatePaymentData extends S.Class("UpdatePaymentData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Payment"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdatePaymentRelationships, { nullable: true })
}) {
}
export class CreateServiceData extends S.Class("CreateServiceData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Service"),
    "attributes": CreateServiceAttributes,
    "relationships": S.optionalWith(CreateServiceRelationships, { nullable: true })
}) {
}
export class UpdateServiceData extends S.Class("UpdateServiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Service"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ServiceAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateServiceRelationships, { nullable: true })
}) {
}
export class CreateInvoiceData extends S.Class("CreateInvoiceData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Invoice"),
    "attributes": CreateChangeOrderAttributes,
    "relationships": S.optionalWith(CreateInvoiceRelationships, { nullable: true })
}) {
}
export class UpdateInvoiceData extends S.Class("UpdateInvoiceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Invoice"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ChangeOrderAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateInvoiceRelationships, { nullable: true })
}) {
}
export class CreateItemImpactData extends S.Class("CreateItemImpactData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpact"),
    "attributes": S.optionalWith(CreateItemImpactAttributes, { nullable: true }),
    "relationships": CreateItemImpactRelationships
}) {
}
export class UpdateItemImpactData extends S.Class("UpdateItemImpactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemImpact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateItemImpactAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemImpactRelationships, { nullable: true })
}) {
}
export class CreateItemData extends S.Class("CreateItemData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Item"),
    "attributes": CreateItemAttributes,
    "relationships": S.optionalWith(CreateItemRelationships, { nullable: true })
}) {
}
export class UpdateItemData extends S.Class("UpdateItemData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Item"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ItemAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemRelationships, { nullable: true })
}) {
}
export class CreateItemMediaSuggestionData extends S.Class("CreateItemMediaSuggestionData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemMediaSuggestion"),
    "attributes": CreateItemMediaSuggestionAttributes,
    "relationships": CreateItemMediaSuggestionRelationships
}) {
}
export class UpdateItemMediaSuggestionData extends S.Class("UpdateItemMediaSuggestionData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemMediaSuggestion"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ItemMediaSuggestionAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateItemMediaSuggestionRelationships, { nullable: true })
}) {
}
export class CreateDepreciationModifierData extends S.Class("CreateDepreciationModifierData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationModifier"),
    "attributes": S.optionalWith(CreateDepreciationModifierAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDepreciationModifierRelationships, { nullable: true })
}) {
}
export class UpdateDepreciationModifierData extends S.Class("UpdateDepreciationModifierData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationModifier"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateDepreciationModifierAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDepreciationModifierRelationships, { nullable: true })
}) {
}
export class CreateDepreciationOverrideData extends S.Class("CreateDepreciationOverrideData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationOverride"),
    "attributes": S.optionalWith(CreateDepreciationOverrideAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDepreciationModifierRelationships, { nullable: true })
}) {
}
export class UpdateDepreciationOverrideData extends S.Class("UpdateDepreciationOverrideData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationOverride"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateDepreciationOverrideAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDepreciationModifierRelationships, { nullable: true })
}) {
}
export class CreateItemTemplateData extends S.Class("CreateItemTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemTemplate"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemTemplateRelationships, { nullable: true })
}) {
}
export class UpdateItemTemplateData extends S.Class("UpdateItemTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemTemplateRelationships, { nullable: true })
}) {
}
export class CreateBaseSubBucketMetadataData extends S.Class("CreateBaseSubBucketMetadataData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseSubBucketMetadata"),
    "attributes": S.optionalWith(BaseBucketMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBaseBucketMetadataRelationships, { nullable: true })
}) {
}
export class UpdateBaseSubBucketMetadataData extends S.Class("UpdateBaseSubBucketMetadataData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseSubBucketMetadata"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BaseBucketMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBaseBucketMetadataRelationships, { nullable: true })
}) {
}
export class CreateBaseBucketMetadataData extends S.Class("CreateBaseBucketMetadataData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseBucketMetadata"),
    "attributes": S.optionalWith(BaseBucketMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBaseBucketMetadataRelationships, { nullable: true })
}) {
}
export class UpdateBaseBucketMetadataData extends S.Class("UpdateBaseBucketMetadataData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseBucketMetadata"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BaseBucketMetadataAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateBaseBucketMetadataRelationships, { nullable: true })
}) {
}
export class CreateFundingSourceData extends S.Class("CreateFundingSourceData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FundingSource"),
    "attributes": CreateFundingSourceAttributes,
    "relationships": CreateFundingSourceRelationships
}) {
}
export class UpdateFundingSourceData extends S.Class("UpdateFundingSourceData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("FundingSource"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(FundingSourceAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateFundingSourceRelationships, { nullable: true })
}) {
}
export class CreateEntryData extends S.Class("CreateEntryData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Entry"),
    "attributes": S.optionalWith(CreateEntryAttributes, { nullable: true }),
    "relationships": CreateEntryRelationships
}) {
}
export class UpdateEntryData extends S.Class("UpdateEntryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Entry"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateEntryAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateEntryRelationships, { nullable: true })
}) {
}
export class CreateBucketFundingData extends S.Class("CreateBucketFundingData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketFunding"),
    "attributes": CreateBucketFundingAttributes,
    "relationships": CreateBucketFundingRelationships
}) {
}
export class UpdateBucketFundingData extends S.Class("UpdateBucketFundingData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketFunding"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BucketFundingAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBucketFundingRelationships, { nullable: true })
}) {
}
export class CreateBaseBucketData extends S.Class("CreateBaseBucketData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseBucket"),
    "attributes": CreateBaseBucketAttributes,
    "relationships": CreateBaseBucketRelationships
}) {
}
export class UpdateBaseBucketData extends S.Class("UpdateBaseBucketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseBucket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BaseBucketAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBaseBucketRelationships, { nullable: true })
}) {
}
export class CreateFundingData extends S.Class("CreateFundingData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Funding"),
    "attributes": S.optionalWith(CreateFundingAttributes, { nullable: true }),
    "relationships": CreateFundingRelationships
}) {
}
export class UpdateFundingData extends S.Class("UpdateFundingData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Funding"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateFundingAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateFundingRelationships, { nullable: true })
}) {
}
export class CreateSubBucketDefinitionData extends S.Class("CreateSubBucketDefinitionData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubBucketDefinition"),
    "attributes": CreateSubBucketDefinitionAttributes,
    "relationships": CreateSubBucketDefinitionRelationships
}) {
}
export class UpdateSubBucketDefinitionData extends S.Class("UpdateSubBucketDefinitionData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubBucketDefinition"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(SubBucketDefinitionAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateSubBucketDefinitionRelationships, { nullable: true })
}) {
}
export class CreateClaimTargetData extends S.Class("CreateClaimTargetData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ClaimTarget"),
    "attributes": CreateClaimTargetAttributes,
    "relationships": CreateClaimTargetRelationships
}) {
}
export class UpdateClaimTargetData extends S.Class("UpdateClaimTargetData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ClaimTarget"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ClaimTargetAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateClaimTargetRelationships, { nullable: true })
}) {
}
export class CreateBucketData extends S.Class("CreateBucketData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Bucket"),
    "attributes": S.optionalWith(BucketAttributes, { nullable: true }),
    "relationships": CreateBucketRelationships
}) {
}
export class UpdateBucketData extends S.Class("UpdateBucketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Bucket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BucketAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBucketRelationships, { nullable: true })
}) {
}
export class CreateClaimData extends S.Class("CreateClaimData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Claim"),
    "attributes": S.optionalWith(ClaimAttributes, { nullable: true }),
    "relationships": CreateClaimRelationships
}) {
}
export class UpdateClaimData extends S.Class("UpdateClaimData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Claim"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ClaimAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateClaimRelationships, { nullable: true })
}) {
}
export class CreateDeductibleData extends S.Class("CreateDeductibleData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deductible"),
    "attributes": CreateDeductibleAttributes,
    "relationships": CreateDeductibleRelationships
}) {
}
export class UpdateDeductibleData extends S.Class("UpdateDeductibleData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Deductible"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(DeductibleAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateDeductibleRelationships, { nullable: true })
}) {
}
export class CreateClaimDeductibleData extends S.Class("CreateClaimDeductibleData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ClaimDeductible"),
    "attributes": S.optionalWith(ClaimDeductibleAttributes, { nullable: true }),
    "relationships": CreateClaimDeductibleRelationships
}) {
}
export class UpdateClaimDeductibleData extends S.Class("UpdateClaimDeductibleData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ClaimDeductible"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(ClaimDeductibleAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateClaimDeductibleRelationships, { nullable: true })
}) {
}
export class CreatePolicyTermData extends S.Class("CreatePolicyTermData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTerm"),
    "attributes": CreatePolicyTermAttributes,
    "relationships": CreatePolicyTermRelationships
}) {
}
export class UpdatePolicyTermData extends S.Class("UpdatePolicyTermData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTerm"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(PolicyTermAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdatePolicyTermRelationships, { nullable: true })
}) {
}
export class CreatePolicyData extends S.Class("CreatePolicyData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Policy"),
    "attributes": S.optionalWith(CreatePolicyAttributes, { nullable: true }),
    "relationships": CreatePolicyRelationships
}) {
}
export class UpdatePolicyData extends S.Class("UpdatePolicyData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Policy"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreatePolicyAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdatePolicyRelationships, { nullable: true })
}) {
}
export class CreateSubmissionTrackTemplateData extends S.Class("CreateSubmissionTrackTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubmissionTrackTemplate"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSubmissionTrackTemplateRelationships, { nullable: true })
}) {
}
export class UpdateSubmissionTrackTemplateData extends S.Class("UpdateSubmissionTrackTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubmissionTrackTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSubmissionTrackTemplateRelationships, { nullable: true })
}) {
}
export class CreateBucketDefinitionData extends S.Class("CreateBucketDefinitionData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketDefinition"),
    "attributes": CreateBucketDefinitionAttributes,
    "relationships": CreateBucketDefinitionRelationships
}) {
}
export class UpdateBucketDefinitionData extends S.Class("UpdateBucketDefinitionData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BucketDefinition"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BucketDefinitionAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBucketDefinitionRelationships, { nullable: true })
}) {
}
export class CreateCoverageGroupTemplateData extends S.Class("CreateCoverageGroupTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroupTemplate"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateCoverageGroupTemplateRelationships, { nullable: true })
}) {
}
export class UpdateCoverageGroupTemplateData extends S.Class("UpdateCoverageGroupTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroupTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateCoverageGroupTemplateRelationships, { nullable: true })
}) {
}
export class CreateIncidentImpactData extends S.Class("CreateIncidentImpactData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentImpact"),
    "attributes": S.optionalWith(CreateIncidentImpactAttributes, { nullable: true }),
    "relationships": CreateIncidentImpactRelationships
}) {
}
export class UpdateIncidentImpactData extends S.Class("UpdateIncidentImpactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentImpact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateIncidentImpactAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateIncidentImpactRelationships, { nullable: true })
}) {
}
export class CreateCoverageData extends S.Class("CreateCoverageData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Coverage"),
    "attributes": CreateBucketDefinitionAttributes,
    "relationships": CreateCoverageRelationships
}) {
}
export class UpdateCoverageData extends S.Class("UpdateCoverageData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Coverage"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BucketDefinitionAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateCoverageRelationships, { nullable: true })
}) {
}
export class CreateSubCoverageData extends S.Class("CreateSubCoverageData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverage"),
    "attributes": CreateSubBucketDefinitionAttributes,
    "relationships": CreateSubCoverageRelationships
}) {
}
export class UpdateSubCoverageData extends S.Class("UpdateSubCoverageData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverage"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(SubBucketDefinitionAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateSubCoverageRelationships, { nullable: true })
}) {
}
export class CreateEndorsementTemplateData extends S.Class("CreateEndorsementTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EndorsementTemplate"),
    "attributes": S.optionalWith(CreateEndorsementTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateEndorsementTemplateRelationships, { nullable: true })
}) {
}
export class UpdateEndorsementTemplateData extends S.Class("UpdateEndorsementTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("EndorsementTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateEndorsementTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateEndorsementTemplateRelationships, { nullable: true })
}) {
}
export class CreateSubBucketData extends S.Class("CreateSubBucketData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubBucket"),
    "attributes": S.optionalWith(CreateSubBucketAttributes, { nullable: true }),
    "relationships": CreateSubBucketRelationships
}) {
}
export class UpdateSubBucketData extends S.Class("UpdateSubBucketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubBucket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateSubBucketAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateSubBucketRelationships, { nullable: true })
}) {
}
export class CreateBaseSubBucketData extends S.Class("CreateBaseSubBucketData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseSubBucket"),
    "attributes": CreateBaseSubBucketAttributes,
    "relationships": CreateBaseSubBucketRelationships
}) {
}
export class UpdateBaseSubBucketData extends S.Class("UpdateBaseSubBucketData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("BaseSubBucket"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BaseSubBucketAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateBaseSubBucketRelationships, { nullable: true })
}) {
}
export class CreateSubCoverageTemplateData extends S.Class("CreateSubCoverageTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverageTemplate"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSubCoverageTemplateRelationships, { nullable: true })
}) {
}
export class UpdateSubCoverageTemplateData extends S.Class("UpdateSubCoverageTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SubCoverageTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSubCoverageTemplateRelationships, { nullable: true })
}) {
}
export class CreateEndorsementData extends S.Class("CreateEndorsementData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Endorsement"),
    "attributes": CreateEndorsementAttributes,
    "relationships": CreateEndorsementRelationships
}) {
}
export class UpdateEndorsementData extends S.Class("UpdateEndorsementData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Endorsement"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(EndorsementAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateEndorsementRelationships, { nullable: true })
}) {
}
export class CreateCoverageTemplateData extends S.Class("CreateCoverageTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageTemplate"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateCoverageTemplateRelationships, { nullable: true })
}) {
}
export class UpdateCoverageTemplateData extends S.Class("UpdateCoverageTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateCoverageTemplateRelationships, { nullable: true })
}) {
}
export class CreateCoverageGroupData extends S.Class("CreateCoverageGroupData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroup"),
    "relationships": CreateCoverageGroupRelationships
}) {
}
export class UpdateCoverageGroupData extends S.Class("UpdateCoverageGroupData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("CoverageGroup"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "relationships": S.optionalWith(UpdateCoverageGroupRelationships, { nullable: true })
}) {
}
export class CreatePolicyTemplateData extends S.Class("CreatePolicyTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTemplate"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreatePolicyTemplateRelationships, { nullable: true })
}) {
}
export class UpdatePolicyTemplateData extends S.Class("UpdatePolicyTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("PolicyTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreatePolicyTemplateRelationships, { nullable: true })
}) {
}
export class CreateDepreciationScheduleData extends S.Class("CreateDepreciationScheduleData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationSchedule"),
    "attributes": S.optionalWith(CreateDepreciationScheduleAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDepreciationScheduleRelationships, { nullable: true })
}) {
}
export class UpdateDepreciationScheduleData extends S.Class("UpdateDepreciationScheduleData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("DepreciationSchedule"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateDepreciationScheduleAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateDepreciationScheduleRelationships, { nullable: true })
}) {
}
export class CreateSpaceTypeItemTemplateData extends S.Class("CreateSpaceTypeItemTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceTypeItemTemplate"),
    "attributes": S.optionalWith(AssetAttributeTypeItemTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceTypeItemTemplateRelationships, { nullable: true })
}) {
}
export class UpdateSpaceTypeItemTemplateData extends S.Class("UpdateSpaceTypeItemTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("SpaceTypeItemTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributeTypeItemTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateSpaceTypeItemTemplateRelationships, { nullable: true })
}) {
}
export class CreateAssetAttributeTypeData extends S.Class("CreateAssetAttributeTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeType"),
    "attributes": S.optionalWith(AssetAttributeTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateAssetAttributeTypeRelationships, { nullable: true })
}) {
}
export class UpdateAssetAttributeTypeData extends S.Class("UpdateAssetAttributeTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributeTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateAssetAttributeTypeRelationships, { nullable: true })
}) {
}
export class CreateAssetAttributeTypeItemTemplateData extends S.Class("CreateAssetAttributeTypeItemTemplateData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeTypeItemTemplate"),
    "attributes": S.optionalWith(AssetAttributeTypeItemTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateAssetAttributeTypeItemTemplateRelationships, { nullable: true })
}) {
}
export class UpdateAssetAttributeTypeItemTemplateData extends S.Class("UpdateAssetAttributeTypeItemTemplateData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeTypeItemTemplate"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributeTypeItemTemplateAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateAssetAttributeTypeItemTemplateRelationships, { nullable: true })
}) {
}
export class CreateAssetAttributeClassData extends S.Class("CreateAssetAttributeClassData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeClass"),
    "attributes": S.optionalWith(AssetAttributeClassAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateAssetAttributeClassRelationships, { nullable: true })
}) {
}
export class UpdateAssetAttributeClassData extends S.Class("UpdateAssetAttributeClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("AssetAttributeClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetAttributeClassAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateAssetAttributeClassRelationships, { nullable: true })
}) {
}
export class CreateIncidentTypeData extends S.Class("CreateIncidentTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentType"),
    "attributes": S.optionalWith(BucketTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateIncidentTypeRelationships, { nullable: true })
}) {
}
export class UpdateIncidentTypeData extends S.Class("UpdateIncidentTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("IncidentType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(BucketTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateIncidentTypeRelationships, { nullable: true })
}) {
}
export class CreateItemClassData extends S.Class("CreateItemClassData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemClass"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemClassRelationships, { nullable: true })
}) {
}
export class UpdateItemClassData extends S.Class("UpdateItemClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemClassRelationships, { nullable: true })
}) {
}
export class CreateItemTypeData extends S.Class("CreateItemTypeData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemType"),
    "attributes": S.optionalWith(CreateItemTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemTypeRelationships, { nullable: true })
}) {
}
export class UpdateItemTypeData extends S.Class("UpdateItemTypeData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemType"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(CreateItemTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemTypeRelationships, { nullable: true })
}) {
}
export class CreateItemCategoryData extends S.Class("CreateItemCategoryData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemCategory"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemCategoryRelationships, { nullable: true })
}) {
}
export class UpdateItemCategoryData extends S.Class("UpdateItemCategoryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ItemCategory"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateItemCategoryRelationships, { nullable: true })
}) {
}
export class CreateServiceClassData extends S.Class("CreateServiceClassData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceClass"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateServiceClassRelationships, { nullable: true })
}) {
}
export class UpdateServiceClassData extends S.Class("UpdateServiceClassData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceClass"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateServiceClassRelationships, { nullable: true })
}) {
}
export class CreateServiceCategoryData extends S.Class("CreateServiceCategoryData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceCategory"),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateServiceCategoryRelationships, { nullable: true })
}) {
}
export class UpdateServiceCategoryData extends S.Class("UpdateServiceCategoryData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ServiceCategory"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AssetTypeAttributes, { nullable: true }),
    "relationships": S.optionalWith(CreateServiceCategoryRelationships, { nullable: true })
}) {
}
export class CreateAppraisalData extends S.Class("CreateAppraisalData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Appraisal"),
    "attributes": CreateAppraisalAttributes,
    "relationships": S.optionalWith(CreateAppraisalRelationships, { nullable: true })
}) {
}
export class UpdateAppraisalData extends S.Class("UpdateAppraisalData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("Appraisal"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(AppraisalAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateAppraisalRelationships, { nullable: true })
}) {
}
export class CreateThirdPartyImpactData extends S.Class("CreateThirdPartyImpactData")({
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyImpact"),
    "attributes": CreateThirdPartyImpactAttributes,
    "relationships": CreateThirdPartyImpactRelationships
}) {
}
export class UpdateThirdPartyImpactData extends S.Class("UpdateThirdPartyImpactData")({
    /**
  * Entity id
  */
    "id": S.String,
    /**
  * The type of the referenced entity.
  */
    "type": S.Literal("ThirdPartyImpact"),
    /**
  * Local entity id, only required in included array. Is a random string generated by client and used for mapping an entity reference to another to-be-inserted entity in the "included" array.
  */
    "lid": S.optionalWith(S.String, { nullable: true }),
    /**
  * Metadata for the entity
  */
    "meta": S.optionalWith(EntityMetadata, { nullable: true }),
    "attributes": S.optionalWith(EntrySourceAttributes, { nullable: true }),
    "relationships": S.optionalWith(UpdateThirdPartyImpactRelationships, { nullable: true })
}) {
}
/**
* Any includable entity.
*/
export class JsonApiIncludedItem extends S.Union(UserData, EmailAddressData, IdentityData, AccountProviderContactData, PhoneNumberData, AccountProviderData, AccountData, ProjectData, IncidentData, ProjectMediaData, MediaData, FileData, AssetData, DwellingData, AssetTypeData, AssetAppraisalData, DocumentTypeData, DocumentClassData, SpaceData, SpaceTypeData, SpaceClassData, SpaceCategoryData, SpaceGroupTypeData, BucketTypeData, BucketClassData, SpaceGroupData, CurrencyData, AddressData, CountryData, FileProcessData, DocumentData, ChangeOrderData, ItemizableFinancialDocumentStatsData, ItemizableFinancialDocumentData, EstimateData, ServiceData, EntrySourceMetadataData, EntrySourceData, ItemImpactData, EntryData, BaseBucketData, BucketData, FundingSourceData, ClaimData, FundingData, BucketFundingData, ClaimTargetData, PolicyTermData, ProviderData, DeductibleData, BucketDefinitionData, CoverageData, SubBucketDefinitionData, SubCoverageData, SubBucketData, BaseSubBucketMetadataData, SubCoverageTemplateData, CoverageTemplateData, CoverageGroupTemplateData, PerilData, EndorsementTemplateData, EndorsementData, CoverageGroupData, ClaimDeductibleData, PolicyData, PolicyTemplateData, BaseBucketMetadataData, BaseSubBucketData, ItemAppraisalData, AppraisalData, AppraisalLineData, BaseEntityData, InvoiceData, InvoiceLineData, ItemInvoiceData, ItemData, ItemTypeData, DepreciationModifierData, DepreciationScheduleData, DepreciationOverrideData, ItemClassData, ItemCategoryData, PaymentData, PaymentLineData, ItemPaymentData, ItemImpactPaymentData, ServiceTaskPaymentData, ServiceTaskData, ItemImpactInvoiceData, ServiceTaskInvoiceData, IncidentReportData, PoliceReportData, ParamedicReportData, ContractData, RentRollData, PermitData, BlueprintData, DeclarationsPageData, PolicyJacketData, ScopeOfLossData, DeliveryPaperworkData, ProductSpecData, UserManualData, WarrantyData, DeedData, ItemChangeOrderData, ItemEstimateData, ChangeOrderLineData, ItemImpactChangeOrderData, ItemImpactEstimateData, ServiceTaskChangeOrderData, ServiceTaskEstimateData, EstimateLineData, DisasterData, IncidentTypeData, IncidentClassData, AssetAttributeTypeItemTemplateData, AssetAttributeTypeData, AssetAttributeClassData, ItemTemplateData, SpaceTypeItemTemplateData, SubmissionTrackTemplateData, ServiceCategoryData, ServiceClassData, ServiceTypeData, AccountInviteData, AuthProfileData, EntrySourceMediaData, ThirdPartyImpactData, ThirdPartyData, ThirdPartyDwellingData, ThirdPartyIndividualData, ProjectImpactData, IncidentImpactData, ItemMediaSuggestionData, ItemProductSuggestionData, UserAccountRoleData, FinancialDocumentData) {
}
/**
* Any includable entity for upserts.
*/
export class JsonApiUpsertIncludedItem extends S.Union(CreateUserData, UpdateUserData, CreateEmailAddressData, UpdateEmailAddressData, CreateIdentityData, UpdateIdentityData, CreateAccountProviderContactData, UpdateAccountProviderContactData, CreatePhoneNumberData, UpdatePhoneNumberData, CreateAccountProviderData, UpdateAccountProviderData, CreateAccountData, UpdateAccountData, CreateProjectData, UpdateProjectData, CreateIncidentData, UpdateIncidentData, CreateProjectMediaData, UpdateProjectMediaData, CreateMediaData, UpdateMediaData, CreateFileData, UpdateFileData, CreateAssetData, UpdateAssetData, CreateDwellingData, UpdateDwellingData, CreateAssetTypeData, UpdateAssetTypeData, CreateAssetAppraisalData, UpdateAssetAppraisalData, CreateDocumentTypeData, UpdateDocumentTypeData, CreateDocumentClassData, UpdateDocumentClassData, CreateSpaceData, UpdateSpaceData, CreateSpaceTypeData, UpdateSpaceTypeData, CreateSpaceClassData, UpdateSpaceClassData, CreateSpaceCategoryData, UpdateSpaceCategoryData, CreateSpaceGroupTypeData, UpdateSpaceGroupTypeData, CreateBucketTypeData, UpdateBucketTypeData, CreateBucketClassData, UpdateBucketClassData, CreateSpaceGroupData, UpdateSpaceGroupData, CreateCurrencyData, UpdateCurrencyData, CreateAddressData, UpdateAddressData, CreateCountryData, UpdateCountryData, CreateFileProcessData, UpdateFileProcessData, CreateDocumentData, UpdateDocumentData, CreateChangeOrderData, UpdateChangeOrderData, CreateItemizableFinancialDocumentStatsData, UpdateItemizableFinancialDocumentStatsData, CreateItemizableFinancialDocumentData, UpdateItemizableFinancialDocumentData, CreateEstimateData, UpdateEstimateData, CreateServiceData, UpdateServiceData, CreateEntrySourceMetadataData, UpdateEntrySourceMetadataData, CreateEntrySourceData, UpdateEntrySourceData, CreateItemImpactData, UpdateItemImpactData, CreateEntryData, UpdateEntryData, CreateBaseBucketData, UpdateBaseBucketData, CreateBucketData, UpdateBucketData, CreateFundingSourceData, UpdateFundingSourceData, CreateClaimData, UpdateClaimData, CreateFundingData, UpdateFundingData, CreateBucketFundingData, UpdateBucketFundingData, CreateClaimTargetData, UpdateClaimTargetData, CreatePolicyTermData, UpdatePolicyTermData, CreateProviderData, UpdateProviderData, CreateDeductibleData, UpdateDeductibleData, CreateBucketDefinitionData, UpdateBucketDefinitionData, CreateCoverageData, UpdateCoverageData, CreateSubBucketDefinitionData, UpdateSubBucketDefinitionData, CreateSubCoverageData, UpdateSubCoverageData, CreateSubBucketData, UpdateSubBucketData, CreateBaseSubBucketMetadataData, UpdateBaseSubBucketMetadataData, CreateSubCoverageTemplateData, UpdateSubCoverageTemplateData, CreateCoverageTemplateData, UpdateCoverageTemplateData, CreateCoverageGroupTemplateData, UpdateCoverageGroupTemplateData, CreatePerilData, UpdatePerilData, CreateEndorsementTemplateData, UpdateEndorsementTemplateData, CreateEndorsementData, UpdateEndorsementData, CreateCoverageGroupData, UpdateCoverageGroupData, CreateClaimDeductibleData, UpdateClaimDeductibleData, CreatePolicyData, UpdatePolicyData, CreatePolicyTemplateData, UpdatePolicyTemplateData, CreateBaseBucketMetadataData, UpdateBaseBucketMetadataData, CreateBaseSubBucketData, UpdateBaseSubBucketData, CreateItemAppraisalData, UpdateItemAppraisalData, CreateAppraisalData, UpdateAppraisalData, CreateAppraisalLineData, UpdateAppraisalLineData, CreateBaseEntityData, UpdateBaseEntityData, CreateInvoiceData, UpdateInvoiceData, CreateInvoiceLineData, UpdateInvoiceLineData, CreateItemInvoiceData, UpdateItemInvoiceData, CreateItemData, UpdateItemData, CreateItemTypeData, UpdateItemTypeData, CreateDepreciationModifierData, UpdateDepreciationModifierData, CreateDepreciationScheduleData, UpdateDepreciationScheduleData, CreateDepreciationOverrideData, UpdateDepreciationOverrideData, CreateItemClassData, UpdateItemClassData, CreateItemCategoryData, UpdateItemCategoryData, CreatePaymentData, UpdatePaymentData, CreatePaymentLineData, UpdatePaymentLineData, CreateItemPaymentData, UpdateItemPaymentData, CreateItemImpactPaymentData, UpdateItemImpactPaymentData, CreateServiceTaskPaymentData, UpdateServiceTaskPaymentData, CreateServiceTaskData, UpdateServiceTaskData, CreateItemImpactInvoiceData, UpdateItemImpactInvoiceData, CreateServiceTaskInvoiceData, UpdateServiceTaskInvoiceData, CreateIncidentReportData, UpdateIncidentReportData, CreatePoliceReportData, UpdatePoliceReportData, CreateParamedicReportData, UpdateParamedicReportData, CreateContractData, UpdateContractData, CreateRentRollData, UpdateRentRollData, CreatePermitData, UpdatePermitData, CreateBlueprintData, UpdateBlueprintData, CreateDeclarationsPageData, UpdateDeclarationsPageData, CreatePolicyJacketData, UpdatePolicyJacketData, CreateScopeOfLossData, UpdateScopeOfLossData, CreateDeliveryPaperworkData, UpdateDeliveryPaperworkData, CreateProductSpecData, UpdateProductSpecData, CreateUserManualData, UpdateUserManualData, CreateWarrantyData, UpdateWarrantyData, CreateDeedData, UpdateDeedData, CreateItemChangeOrderData, UpdateItemChangeOrderData, CreateItemEstimateData, UpdateItemEstimateData, CreateChangeOrderLineData, UpdateChangeOrderLineData, CreateItemImpactChangeOrderData, UpdateItemImpactChangeOrderData, CreateItemImpactEstimateData, UpdateItemImpactEstimateData, CreateServiceTaskChangeOrderData, UpdateServiceTaskChangeOrderData, CreateServiceTaskEstimateData, UpdateServiceTaskEstimateData, CreateEstimateLineData, UpdateEstimateLineData, CreateDisasterData, UpdateDisasterData, CreateIncidentTypeData, UpdateIncidentTypeData, CreateIncidentClassData, UpdateIncidentClassData, CreateAssetAttributeTypeItemTemplateData, UpdateAssetAttributeTypeItemTemplateData, CreateAssetAttributeTypeData, UpdateAssetAttributeTypeData, CreateAssetAttributeClassData, UpdateAssetAttributeClassData, CreateItemTemplateData, UpdateItemTemplateData, CreateSpaceTypeItemTemplateData, UpdateSpaceTypeItemTemplateData, CreateSubmissionTrackTemplateData, UpdateSubmissionTrackTemplateData, CreateServiceCategoryData, UpdateServiceCategoryData, CreateServiceClassData, UpdateServiceClassData, CreateServiceTypeData, UpdateServiceTypeData, CreateAccountInviteData, UpdateAccountInviteData, CreateAuthProfileData, UpdateAuthProfileData, CreateEntrySourceMediaData, UpdateEntrySourceMediaData, CreateThirdPartyImpactData, UpdateThirdPartyImpactData, CreateThirdPartyData, UpdateThirdPartyData, CreateThirdPartyDwellingData, UpdateThirdPartyDwellingData, CreateThirdPartyIndividualData, UpdateThirdPartyIndividualData, CreateProjectImpactData, UpdateProjectImpactData, CreateIncidentImpactData, UpdateIncidentImpactData, CreateItemMediaSuggestionData, UpdateItemMediaSuggestionData, CreateItemProductSuggestionData, UpdateItemProductSuggestionData, CreateUserAccountRoleData, UpdateUserAccountRoleData, CreateFinancialDocumentData, UpdateFinancialDocumentData) {
}
export class Account extends S.Class("Account")({
    /**
  * Account data.
  */
    "data": AccountData,
    /**
  * An array of entity data objects accessible from Account.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class User extends S.Class("User")({
    /**
  * User data.
  */
    "data": UserData,
    /**
  * An array of entity data objects accessible from User.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableEmailAddress extends S.Class("NullableEmailAddress")({
    /**
  * EmailAddress data.
  */
    "data": S.NullOr(EmailAddressData),
    /**
  * An array of entity data objects accessible from EmailAddress.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class NullablePhoneNumber extends S.Class("NullablePhoneNumber")({
    /**
  * PhoneNumber data.
  */
    "data": S.NullOr(PhoneNumberData),
    /**
  * An array of entity data objects accessible from PhoneNumber.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class NullableAccount extends S.Class("NullableAccount")({
    /**
  * Account data.
  */
    "data": S.NullOr(AccountData),
    /**
  * An array of entity data objects accessible from Account.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class UserAccountRoleList extends S.Class("UserAccountRoleList")({
    /**
  * A list of UserAccountRole data.
  */
    "data": S.Array(UserAccountRoleData),
    /**
  * An array of entity data objects accessible from UserAccountRole.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class UserAccountRole extends S.Class("UserAccountRole")({
    /**
  * UserAccountRole data.
  */
    "data": UserAccountRoleData,
    /**
  * An array of entity data objects accessible from UserAccountRole.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ThirdPartyList extends S.Class("ThirdPartyList")({
    /**
  * A list of ThirdParty data.
  */
    "data": S.Array(S.Union(ThirdPartyDwellingData, ThirdPartyIndividualData)),
    /**
  * An array of entity data objects accessible from ThirdParty.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ThirdParty extends S.Class("ThirdParty")({
    /**
  * ThirdParty data.
  */
    "data": S.Union(ThirdPartyDwellingData, ThirdPartyIndividualData),
    /**
  * An array of entity data objects accessible from ThirdParty.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Project extends S.Class("Project")({
    /**
  * Project data.
  */
    "data": IncidentData,
    /**
  * An array of entity data objects accessible from Project.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ThirdPartyIndividualList extends S.Class("ThirdPartyIndividualList")({
    /**
  * A list of ThirdPartyIndividual data.
  */
    "data": S.Array(ThirdPartyIndividualData),
    /**
  * An array of entity data objects accessible from ThirdPartyIndividual.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ThirdPartyIndividual extends S.Class("ThirdPartyIndividual")({
    /**
  * ThirdPartyIndividual data.
  */
    "data": ThirdPartyIndividualData,
    /**
  * An array of entity data objects accessible from ThirdPartyIndividual.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ThirdPartyImpactList extends S.Class("ThirdPartyImpactList")({
    /**
  * A list of ThirdPartyImpact data.
  */
    "data": S.Array(ThirdPartyImpactData),
    /**
  * An array of entity data objects accessible from ThirdPartyImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ThirdPartyImpact extends S.Class("ThirdPartyImpact")({
    /**
  * ThirdPartyImpact data.
  */
    "data": ThirdPartyImpactData,
    /**
  * An array of entity data objects accessible from ThirdPartyImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class EntrySourceMetadata extends S.Class("EntrySourceMetadata")({
    /**
  * EntrySourceMetadata data.
  */
    "data": EntrySourceMetadataData,
    /**
  * An array of entity data objects accessible from EntrySourceMetadata.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableProject extends S.Class("NullableProject")({
    /**
  * Project data.
  */
    "data": S.NullOr(IncidentData),
    /**
  * An array of entity data objects accessible from Project.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class Currency extends S.Class("Currency")({
    /**
  * Currency data.
  */
    "data": CurrencyData,
    /**
  * An array of entity data objects accessible from Currency.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class EntryList extends S.Class("EntryList")({
    /**
  * A list of Entry data.
  */
    "data": S.Array(EntryData),
    /**
  * An array of entity data objects accessible from Entry.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemAppraisalList extends S.Class("ItemAppraisalList")({
    /**
  * A list of ItemAppraisal data.
  */
    "data": S.Array(ItemAppraisalData),
    /**
  * An array of entity data objects accessible from ItemAppraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class NullableItemAppraisal extends S.Class("NullableItemAppraisal")({
    /**
  * ItemAppraisal data.
  */
    "data": S.NullOr(ItemAppraisalData),
    /**
  * An array of entity data objects accessible from ItemAppraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class ThirdPartyDwellingList extends S.Class("ThirdPartyDwellingList")({
    /**
  * A list of ThirdPartyDwelling data.
  */
    "data": S.Array(ThirdPartyDwellingData),
    /**
  * An array of entity data objects accessible from ThirdPartyDwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ThirdPartyDwelling extends S.Class("ThirdPartyDwelling")({
    /**
  * ThirdPartyDwelling data.
  */
    "data": ThirdPartyDwellingData,
    /**
  * An array of entity data objects accessible from ThirdPartyDwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Country extends S.Class("Country")({
    /**
  * Country data.
  */
    "data": CountryData,
    /**
  * An array of entity data objects accessible from Country.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SubCoverageList extends S.Class("SubCoverageList")({
    /**
  * A list of SubCoverage data.
  */
    "data": S.Array(SubCoverageData),
    /**
  * An array of entity data objects accessible from SubCoverage.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SubCoverage extends S.Class("SubCoverage")({
    /**
  * SubCoverage data.
  */
    "data": SubCoverageData,
    /**
  * An array of entity data objects accessible from SubCoverage.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Coverage extends S.Class("Coverage")({
    /**
  * Coverage data.
  */
    "data": CoverageData,
    /**
  * An array of entity data objects accessible from Coverage.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SubBucketList extends S.Class("SubBucketList")({
    /**
  * A list of SubBucket data.
  */
    "data": S.Array(SubBucketData),
    /**
  * An array of entity data objects accessible from SubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class NullableSubCoverageTemplate extends S.Class("NullableSubCoverageTemplate")({
    /**
  * SubCoverageTemplate data.
  */
    "data": S.NullOr(SubCoverageTemplateData),
    /**
  * An array of entity data objects accessible from SubCoverageTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class EndorsementList extends S.Class("EndorsementList")({
    /**
  * A list of Endorsement data.
  */
    "data": S.Array(EndorsementData),
    /**
  * An array of entity data objects accessible from Endorsement.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SubBucket extends S.Class("SubBucket")({
    /**
  * SubBucket data.
  */
    "data": SubBucketData,
    /**
  * An array of entity data objects accessible from SubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BaseBucket extends S.Class("BaseBucket")({
    /**
  * BaseBucket data.
  */
    "data": BucketData,
    /**
  * An array of entity data objects accessible from BaseBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BaseSubBucketMetadata extends S.Class("BaseSubBucketMetadata")({
    /**
  * BaseSubBucketMetadata data.
  */
    "data": BaseSubBucketMetadataData,
    /**
  * An array of entity data objects accessible from BaseSubBucketMetadata.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class FundingSource extends S.Class("FundingSource")({
    /**
  * FundingSource data.
  */
    "data": ClaimData,
    /**
  * An array of entity data objects accessible from FundingSource.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SubBucketDefinition extends S.Class("SubBucketDefinition")({
    /**
  * SubBucketDefinition data.
  */
    "data": SubCoverageData,
    /**
  * An array of entity data objects accessible from SubBucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SubBucketDefinitionList extends S.Class("SubBucketDefinitionList")({
    /**
  * A list of SubBucketDefinition data.
  */
    "data": S.Array(SubCoverageData),
    /**
  * An array of entity data objects accessible from SubBucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BucketDefinition extends S.Class("BucketDefinition")({
    /**
  * BucketDefinition data.
  */
    "data": CoverageData,
    /**
  * An array of entity data objects accessible from BucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SpaceList extends S.Class("SpaceList")({
    /**
  * A list of Space data.
  */
    "data": S.Array(SpaceData),
    /**
  * An array of entity data objects accessible from Space.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Space extends S.Class("Space")({
    /**
  * Space data.
  */
    "data": SpaceData,
    /**
  * An array of entity data objects accessible from Space.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SpaceType extends S.Class("SpaceType")({
    /**
  * SpaceType data.
  */
    "data": SpaceTypeData,
    /**
  * An array of entity data objects accessible from SpaceType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SpaceGroup extends S.Class("SpaceGroup")({
    /**
  * SpaceGroup data.
  */
    "data": SpaceGroupData,
    /**
  * An array of entity data objects accessible from SpaceGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Asset extends S.Class("Asset")({
    /**
  * Asset data.
  */
    "data": DwellingData,
    /**
  * An array of entity data objects accessible from Asset.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SpaceGroupList extends S.Class("SpaceGroupList")({
    /**
  * A list of SpaceGroup data.
  */
    "data": S.Array(SpaceGroupData),
    /**
  * An array of entity data objects accessible from SpaceGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ServiceList extends S.Class("ServiceList")({
    /**
  * A list of Service data.
  */
    "data": S.Array(ServiceData),
    /**
  * An array of entity data objects accessible from Service.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Service extends S.Class("Service")({
    /**
  * Service data.
  */
    "data": ServiceData,
    /**
  * An array of entity data objects accessible from Service.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableServiceType extends S.Class("NullableServiceType")({
    /**
  * ServiceType data.
  */
    "data": S.NullOr(ServiceTypeData),
    /**
  * An array of entity data objects accessible from ServiceType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class PaymentList extends S.Class("PaymentList")({
    /**
  * A list of Payment data.
  */
    "data": S.Array(PaymentData),
    /**
  * An array of entity data objects accessible from Payment.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class InvoiceList extends S.Class("InvoiceList")({
    /**
  * A list of Invoice data.
  */
    "data": S.Array(InvoiceData),
    /**
  * An array of entity data objects accessible from Invoice.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class EstimateList extends S.Class("EstimateList")({
    /**
  * A list of Estimate data.
  */
    "data": S.Array(EstimateData),
    /**
  * An array of entity data objects accessible from Estimate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ChangeOrderList extends S.Class("ChangeOrderList")({
    /**
  * A list of ChangeOrder data.
  */
    "data": S.Array(ChangeOrderData),
    /**
  * An array of entity data objects accessible from ChangeOrder.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class PaymentLineList extends S.Class("PaymentLineList")({
    /**
  * A list of PaymentLine data.
  */
    "data": S.Array(S.Union(ItemPaymentData, ItemImpactPaymentData, ServiceTaskPaymentData)),
    /**
  * An array of entity data objects accessible from PaymentLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class InvoiceLineList extends S.Class("InvoiceLineList")({
    /**
  * A list of InvoiceLine data.
  */
    "data": S.Array(S.Union(ItemInvoiceData, ItemImpactInvoiceData, ServiceTaskInvoiceData)),
    /**
  * An array of entity data objects accessible from InvoiceLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class EstimateLineList extends S.Class("EstimateLineList")({
    /**
  * A list of EstimateLine data.
  */
    "data": S.Array(S.Union(ItemEstimateData, ItemImpactEstimateData, ServiceTaskEstimateData)),
    /**
  * An array of entity data objects accessible from EstimateLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ServiceTaskList extends S.Class("ServiceTaskList")({
    /**
  * A list of ServiceTask data.
  */
    "data": S.Array(ServiceTaskData),
    /**
  * An array of entity data objects accessible from ServiceTask.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ServiceTask extends S.Class("ServiceTask")({
    /**
  * ServiceTask data.
  */
    "data": ServiceTaskData,
    /**
  * An array of entity data objects accessible from ServiceTask.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ProjectList extends S.Class("ProjectList")({
    /**
  * A list of Project data.
  */
    "data": S.Array(IncidentData),
    /**
  * An array of entity data objects accessible from Project.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ProjectMediaList extends S.Class("ProjectMediaList")({
    /**
  * A list of ProjectMedia data.
  */
    "data": S.Array(ProjectMediaData),
    /**
  * An array of entity data objects accessible from ProjectMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ProjectMedia extends S.Class("ProjectMedia")({
    /**
  * ProjectMedia data.
  */
    "data": ProjectMediaData,
    /**
  * An array of entity data objects accessible from ProjectMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Media extends S.Class("Media")({
    /**
  * Media data.
  */
    "data": MediaData,
    /**
  * An array of entity data objects accessible from Media.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ProjectImpactList extends S.Class("ProjectImpactList")({
    /**
  * A list of ProjectImpact data.
  */
    "data": S.Array(ProjectImpactData),
    /**
  * An array of entity data objects accessible from ProjectImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ProjectImpact extends S.Class("ProjectImpact")({
    /**
  * ProjectImpact data.
  */
    "data": ProjectImpactData,
    /**
  * An array of entity data objects accessible from ProjectImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class PolicyList extends S.Class("PolicyList")({
    /**
  * A list of Policy data.
  */
    "data": S.Array(PolicyData),
    /**
  * An array of entity data objects accessible from Policy.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Policy extends S.Class("Policy")({
    /**
  * Policy data.
  */
    "data": PolicyData,
    /**
  * An array of entity data objects accessible from Policy.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Provider extends S.Class("Provider")({
    /**
  * Provider data.
  */
    "data": ProviderData,
    /**
  * An array of entity data objects accessible from Provider.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullablePolicyTemplate extends S.Class("NullablePolicyTemplate")({
    /**
  * PolicyTemplate data.
  */
    "data": S.NullOr(PolicyTemplateData),
    /**
  * An array of entity data objects accessible from PolicyTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class AssetList extends S.Class("AssetList")({
    /**
  * A list of Asset data.
  */
    "data": S.Array(DwellingData),
    /**
  * An array of entity data objects accessible from Asset.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class PolicyTermList extends S.Class("PolicyTermList")({
    /**
  * A list of PolicyTerm data.
  */
    "data": S.Array(PolicyTermData),
    /**
  * An array of entity data objects accessible from PolicyTerm.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class PolicyTerm extends S.Class("PolicyTerm")({
    /**
  * PolicyTerm data.
  */
    "data": PolicyTermData,
    /**
  * An array of entity data objects accessible from PolicyTerm.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DeductibleList extends S.Class("DeductibleList")({
    /**
  * A list of Deductible data.
  */
    "data": S.Array(DeductibleData),
    /**
  * An array of entity data objects accessible from Deductible.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BucketDefinitionList extends S.Class("BucketDefinitionList")({
    /**
  * A list of BucketDefinition data.
  */
    "data": S.Array(CoverageData),
    /**
  * An array of entity data objects accessible from BucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class PhoneNumberList extends S.Class("PhoneNumberList")({
    /**
  * A list of PhoneNumber data.
  */
    "data": S.Array(PhoneNumberData),
    /**
  * An array of entity data objects accessible from PhoneNumber.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class PhoneNumber extends S.Class("PhoneNumber")({
    /**
  * PhoneNumber data.
  */
    "data": PhoneNumberData,
    /**
  * An array of entity data objects accessible from PhoneNumber.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Identity extends S.Class("Identity")({
    /**
  * Identity data.
  */
    "data": S.Union(AccountProviderContactData, UserData),
    /**
  * An array of entity data objects accessible from Identity.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class MediaList extends S.Class("MediaList")({
    /**
  * A list of Media data.
  */
    "data": S.Array(MediaData),
    /**
  * An array of entity data objects accessible from Media.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class File extends S.Class("File")({
    /**
  * File data.
  */
    "data": FileData,
    /**
  * An array of entity data objects accessible from File.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class EntrySourceMediaList extends S.Class("EntrySourceMediaList")({
    /**
  * A list of EntrySourceMedia data.
  */
    "data": S.Array(EntrySourceMediaData),
    /**
  * An array of entity data objects accessible from EntrySourceMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemList extends S.Class("ItemList")({
    /**
  * A list of Item data.
  */
    "data": S.Array(ItemData),
    /**
  * An array of entity data objects accessible from Item.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Item extends S.Class("Item")({
    /**
  * Item data.
  */
    "data": ItemData,
    /**
  * An array of entity data objects accessible from Item.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableItemType extends S.Class("NullableItemType")({
    /**
  * ItemType data.
  */
    "data": S.NullOr(ItemTypeData),
    /**
  * An array of entity data objects accessible from ItemType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class NullableAsset extends S.Class("NullableAsset")({
    /**
  * Asset data.
  */
    "data": S.NullOr(DwellingData),
    /**
  * An array of entity data objects accessible from Asset.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class NullableSpace extends S.Class("NullableSpace")({
    /**
  * Space data.
  */
    "data": S.NullOr(SpaceData),
    /**
  * An array of entity data objects accessible from Space.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class NullableItemImpact extends S.Class("NullableItemImpact")({
    /**
  * ItemImpact data.
  */
    "data": S.NullOr(ItemImpactData),
    /**
  * An array of entity data objects accessible from ItemImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class ItemImpactList extends S.Class("ItemImpactList")({
    /**
  * A list of ItemImpact data.
  */
    "data": S.Array(ItemImpactData),
    /**
  * An array of entity data objects accessible from ItemImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemProductSuggestionList extends S.Class("ItemProductSuggestionList")({
    /**
  * A list of ItemProductSuggestion data.
  */
    "data": S.Array(ItemProductSuggestionData),
    /**
  * An array of entity data objects accessible from ItemProductSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemProductSuggestion extends S.Class("ItemProductSuggestion")({
    /**
  * ItemProductSuggestion data.
  */
    "data": ItemProductSuggestionData,
    /**
  * An array of entity data objects accessible from ItemProductSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ItemMediaSuggestionList extends S.Class("ItemMediaSuggestionList")({
    /**
  * A list of ItemMediaSuggestion data.
  */
    "data": S.Array(ItemMediaSuggestionData),
    /**
  * An array of entity data objects accessible from ItemMediaSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemMediaSuggestion extends S.Class("ItemMediaSuggestion")({
    /**
  * ItemMediaSuggestion data.
  */
    "data": ItemMediaSuggestionData,
    /**
  * An array of entity data objects accessible from ItemMediaSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableItem extends S.Class("NullableItem")({
    /**
  * Item data.
  */
    "data": S.NullOr(ItemData),
    /**
  * An array of entity data objects accessible from Item.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class ItemImpact extends S.Class("ItemImpact")({
    /**
  * ItemImpact data.
  */
    "data": ItemImpactData,
    /**
  * An array of entity data objects accessible from ItemImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class IncidentList extends S.Class("IncidentList")({
    /**
  * A list of Incident data.
  */
    "data": S.Array(IncidentData),
    /**
  * An array of entity data objects accessible from Incident.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Incident extends S.Class("Incident")({
    /**
  * Incident data.
  */
    "data": IncidentData,
    /**
  * An array of entity data objects accessible from Incident.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class IncidentType extends S.Class("IncidentType")({
    /**
  * IncidentType data.
  */
    "data": IncidentTypeData,
    /**
  * An array of entity data objects accessible from IncidentType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableDisaster extends S.Class("NullableDisaster")({
    /**
  * Disaster data.
  */
    "data": S.NullOr(DisasterData),
    /**
  * An array of entity data objects accessible from Disaster.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class IncidentImpactList extends S.Class("IncidentImpactList")({
    /**
  * A list of IncidentImpact data.
  */
    "data": S.Array(IncidentImpactData),
    /**
  * An array of entity data objects accessible from IncidentImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class IncidentImpact extends S.Class("IncidentImpact")({
    /**
  * IncidentImpact data.
  */
    "data": IncidentImpactData,
    /**
  * An array of entity data objects accessible from IncidentImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class PerilList extends S.Class("PerilList")({
    /**
  * A list of Peril data.
  */
    "data": S.Array(PerilData),
    /**
  * An array of entity data objects accessible from Peril.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class FundingSourceList extends S.Class("FundingSourceList")({
    /**
  * A list of FundingSource data.
  */
    "data": S.Array(ClaimData),
    /**
  * An array of entity data objects accessible from FundingSource.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BaseBucketList extends S.Class("BaseBucketList")({
    /**
  * A list of BaseBucket data.
  */
    "data": S.Array(BucketData),
    /**
  * An array of entity data objects accessible from BaseBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class FundingList extends S.Class("FundingList")({
    /**
  * A list of Funding data.
  */
    "data": S.Array(FundingData),
    /**
  * An array of entity data objects accessible from Funding.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AccountProviderContactList extends S.Class("AccountProviderContactList")({
    /**
  * A list of AccountProviderContact data.
  */
    "data": S.Array(AccountProviderContactData),
    /**
  * An array of entity data objects accessible from AccountProviderContact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class FileList extends S.Class("FileList")({
    /**
  * A list of File data.
  */
    "data": S.Array(FileData),
    /**
  * An array of entity data objects accessible from File.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class FileProcessList extends S.Class("FileProcessList")({
    /**
  * A list of FileProcess data.
  */
    "data": S.Array(FileProcessData),
    /**
  * An array of entity data objects accessible from FileProcess.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class DocumentList extends S.Class("DocumentList")({
    /**
  * A list of Document data.
  */
    "data": S.Array(S.Union(ChangeOrderData, EstimateData, InvoiceData, PaymentData, AssetAppraisalData, AppraisalData, FundingData, IncidentReportData, PoliceReportData, ParamedicReportData, ContractData, RentRollData, PermitData, BlueprintData, DeclarationsPageData, PolicyJacketData, ScopeOfLossData, DeliveryPaperworkData, ProductSpecData, UserManualData, WarrantyData, DeedData)),
    /**
  * An array of entity data objects accessible from Document.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class FileProcess extends S.Class("FileProcess")({
    /**
  * FileProcess data.
  */
    "data": FileProcessData,
    /**
  * An array of entity data objects accessible from FileProcess.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Entry extends S.Class("Entry")({
    /**
  * Entry data.
  */
    "data": EntryData,
    /**
  * An array of entity data objects accessible from Entry.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class EntrySource extends S.Class("EntrySource")({
    /**
  * EntrySource data.
  */
    "data": S.Union(ItemImpactData, ItemData, ServiceTaskData, ServiceData, ThirdPartyImpactData),
    /**
  * An array of entity data objects accessible from EntrySource.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableBaseSubBucket extends S.Class("NullableBaseSubBucket")({
    /**
  * BaseSubBucket data.
  */
    "data": S.NullOr(SubBucketData),
    /**
  * An array of entity data objects accessible from BaseSubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class EntrySourceList extends S.Class("EntrySourceList")({
    /**
  * A list of EntrySource data.
  */
    "data": S.Array(S.Union(ItemImpactData, ItemData, ServiceTaskData, ServiceData, ThirdPartyImpactData)),
    /**
  * An array of entity data objects accessible from EntrySource.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class EntrySourceMetadataList extends S.Class("EntrySourceMetadataList")({
    /**
  * A list of EntrySourceMetadata data.
  */
    "data": S.Array(EntrySourceMetadataData),
    /**
  * An array of entity data objects accessible from EntrySourceMetadata.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class EntrySourceMedia extends S.Class("EntrySourceMedia")({
    /**
  * EntrySourceMedia data.
  */
    "data": EntrySourceMediaData,
    /**
  * An array of entity data objects accessible from EntrySourceMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Endorsement extends S.Class("Endorsement")({
    /**
  * Endorsement data.
  */
    "data": EndorsementData,
    /**
  * An array of entity data objects accessible from Endorsement.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableEndorsementTemplate extends S.Class("NullableEndorsementTemplate")({
    /**
  * EndorsementTemplate data.
  */
    "data": S.NullOr(EndorsementTemplateData),
    /**
  * An array of entity data objects accessible from EndorsementTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class CoverageList extends S.Class("CoverageList")({
    /**
  * A list of Coverage data.
  */
    "data": S.Array(CoverageData),
    /**
  * An array of entity data objects accessible from Coverage.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class EmailAddressList extends S.Class("EmailAddressList")({
    /**
  * A list of EmailAddress data.
  */
    "data": S.Array(EmailAddressData),
    /**
  * An array of entity data objects accessible from EmailAddress.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class EmailAddress extends S.Class("EmailAddress")({
    /**
  * EmailAddress data.
  */
    "data": EmailAddressData,
    /**
  * An array of entity data objects accessible from EmailAddress.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DwellingList extends S.Class("DwellingList")({
    /**
  * A list of Dwelling data.
  */
    "data": S.Array(DwellingData),
    /**
  * An array of entity data objects accessible from Dwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Dwelling extends S.Class("Dwelling")({
    /**
  * Dwelling data.
  */
    "data": DwellingData,
    /**
  * An array of entity data objects accessible from Dwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AssetType extends S.Class("AssetType")({
    /**
  * AssetType data.
  */
    "data": AssetTypeData,
    /**
  * An array of entity data objects accessible from AssetType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AssetAppraisalList extends S.Class("AssetAppraisalList")({
    /**
  * A list of AssetAppraisal data.
  */
    "data": S.Array(AssetAppraisalData),
    /**
  * An array of entity data objects accessible from AssetAppraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class NullableAssetAppraisal extends S.Class("NullableAssetAppraisal")({
    /**
  * AssetAppraisal data.
  */
    "data": S.NullOr(AssetAppraisalData),
    /**
  * An array of entity data objects accessible from AssetAppraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class Address extends S.Class("Address")({
    /**
  * Address data.
  */
    "data": AddressData,
    /**
  * An array of entity data objects accessible from Address.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Deductible extends S.Class("Deductible")({
    /**
  * Deductible data.
  */
    "data": DeductibleData,
    /**
  * An array of entity data objects accessible from Deductible.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ClaimTarget extends S.Class("ClaimTarget")({
    /**
  * ClaimTarget data.
  */
    "data": PolicyTermData,
    /**
  * An array of entity data objects accessible from ClaimTarget.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ClaimDeductibleList extends S.Class("ClaimDeductibleList")({
    /**
  * A list of ClaimDeductible data.
  */
    "data": S.Array(ClaimDeductibleData),
    /**
  * An array of entity data objects accessible from ClaimDeductible.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class NullableBucketType extends S.Class("NullableBucketType")({
    /**
  * BucketType data.
  */
    "data": S.NullOr(BucketTypeData),
    /**
  * An array of entity data objects accessible from BucketType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class NullableDeductible extends S.Class("NullableDeductible")({
    /**
  * Deductible data.
  */
    "data": S.NullOr(DeductibleData),
    /**
  * An array of entity data objects accessible from Deductible.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class BucketList extends S.Class("BucketList")({
    /**
  * A list of Bucket data.
  */
    "data": S.Array(BucketData),
    /**
  * An array of entity data objects accessible from Bucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class NullableCoverageTemplate extends S.Class("NullableCoverageTemplate")({
    /**
  * CoverageTemplate data.
  */
    "data": S.NullOr(CoverageTemplateData),
    /**
  * An array of entity data objects accessible from CoverageTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class NullableCoverageGroup extends S.Class("NullableCoverageGroup")({
    /**
  * CoverageGroup data.
  */
    "data": S.NullOr(CoverageGroupData),
    /**
  * An array of entity data objects accessible from CoverageGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class CoverageGroupList extends S.Class("CoverageGroupList")({
    /**
  * A list of CoverageGroup data.
  */
    "data": S.Array(CoverageGroupData),
    /**
  * An array of entity data objects accessible from CoverageGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class CoverageGroup extends S.Class("CoverageGroup")({
    /**
  * CoverageGroup data.
  */
    "data": CoverageGroupData,
    /**
  * An array of entity data objects accessible from CoverageGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableCoverageGroupTemplate extends S.Class("NullableCoverageGroupTemplate")({
    /**
  * CoverageGroupTemplate data.
  */
    "data": S.NullOr(CoverageGroupTemplateData),
    /**
  * An array of entity data objects accessible from CoverageGroupTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class ClaimList extends S.Class("ClaimList")({
    /**
  * A list of Claim data.
  */
    "data": S.Array(ClaimData),
    /**
  * An array of entity data objects accessible from Claim.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Claim extends S.Class("Claim")({
    /**
  * Claim data.
  */
    "data": ClaimData,
    /**
  * An array of entity data objects accessible from Claim.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ClaimDeductible extends S.Class("ClaimDeductible")({
    /**
  * ClaimDeductible data.
  */
    "data": ClaimDeductibleData,
    /**
  * An array of entity data objects accessible from ClaimDeductible.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Bucket extends S.Class("Bucket")({
    /**
  * Bucket data.
  */
    "data": BucketData,
    /**
  * An array of entity data objects accessible from Bucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BaseBucketMetadata extends S.Class("BaseBucketMetadata")({
    /**
  * BaseBucketMetadata data.
  */
    "data": BaseBucketMetadataData,
    /**
  * An array of entity data objects accessible from BaseBucketMetadata.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BaseSubBucketList extends S.Class("BaseSubBucketList")({
    /**
  * A list of BaseSubBucket data.
  */
    "data": S.Array(SubBucketData),
    /**
  * An array of entity data objects accessible from BaseSubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BucketFundingList extends S.Class("BucketFundingList")({
    /**
  * A list of BucketFunding data.
  */
    "data": S.Array(BucketFundingData),
    /**
  * An array of entity data objects accessible from BucketFunding.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BucketFunding extends S.Class("BucketFunding")({
    /**
  * BucketFunding data.
  */
    "data": BucketFundingData,
    /**
  * An array of entity data objects accessible from BucketFunding.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Funding extends S.Class("Funding")({
    /**
  * Funding data.
  */
    "data": FundingData,
    /**
  * An array of entity data objects accessible from Funding.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BaseSubBucket extends S.Class("BaseSubBucket")({
    /**
  * BaseSubBucket data.
  */
    "data": SubBucketData,
    /**
  * An array of entity data objects accessible from BaseSubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BaseSubBucketMetadataList extends S.Class("BaseSubBucketMetadataList")({
    /**
  * A list of BaseSubBucketMetadata data.
  */
    "data": S.Array(BaseSubBucketMetadataData),
    /**
  * An array of entity data objects accessible from BaseSubBucketMetadata.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BaseBucketMetadataList extends S.Class("BaseBucketMetadataList")({
    /**
  * A list of BaseBucketMetadata data.
  */
    "data": S.Array(BaseBucketMetadataData),
    /**
  * An array of entity data objects accessible from BaseBucketMetadata.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AddressList extends S.Class("AddressList")({
    /**
  * A list of Address data.
  */
    "data": S.Array(AddressData),
    /**
  * An array of entity data objects accessible from Address.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AccountProviderList extends S.Class("AccountProviderList")({
    /**
  * A list of AccountProvider data.
  */
    "data": S.Array(AccountProviderData),
    /**
  * An array of entity data objects accessible from AccountProvider.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AccountProvider extends S.Class("AccountProvider")({
    /**
  * AccountProvider data.
  */
    "data": AccountProviderData,
    /**
  * An array of entity data objects accessible from AccountProvider.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableProvider extends S.Class("NullableProvider")({
    /**
  * Provider data.
  */
    "data": S.NullOr(ProviderData),
    /**
  * An array of entity data objects accessible from Provider.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class AccountProviderContact extends S.Class("AccountProviderContact")({
    /**
  * AccountProviderContact data.
  */
    "data": AccountProviderContactData,
    /**
  * An array of entity data objects accessible from AccountProviderContact.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableUser extends S.Class("NullableUser")({
    /**
  * User data.
  */
    "data": S.NullOr(UserData),
    /**
  * An array of entity data objects accessible from User.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class AccountInviteList extends S.Class("AccountInviteList")({
    /**
  * A list of AccountInvite data.
  */
    "data": S.Array(AccountInviteData),
    /**
  * An array of entity data objects accessible from AccountInvite.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AccountInvite extends S.Class("AccountInvite")({
    /**
  * AccountInvite data.
  */
    "data": AccountInviteData,
    /**
  * An array of entity data objects accessible from AccountInvite.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SpaceTypeList extends S.Class("SpaceTypeList")({
    /**
  * A list of SpaceType data.
  */
    "data": S.Array(SpaceTypeData),
    /**
  * An array of entity data objects accessible from SpaceType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SpaceClassList extends S.Class("SpaceClassList")({
    /**
  * A list of SpaceClass data.
  */
    "data": S.Array(SpaceClassData),
    /**
  * An array of entity data objects accessible from SpaceClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AssetTypeList extends S.Class("AssetTypeList")({
    /**
  * A list of AssetType data.
  */
    "data": S.Array(AssetTypeData),
    /**
  * An array of entity data objects accessible from AssetType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SpaceGroupTypeList extends S.Class("SpaceGroupTypeList")({
    /**
  * A list of SpaceGroupType data.
  */
    "data": S.Array(SpaceGroupTypeData),
    /**
  * An array of entity data objects accessible from SpaceGroupType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SpaceGroupType extends S.Class("SpaceGroupType")({
    /**
  * SpaceGroupType data.
  */
    "data": SpaceGroupTypeData,
    /**
  * An array of entity data objects accessible from SpaceGroupType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BucketTypeList extends S.Class("BucketTypeList")({
    /**
  * A list of BucketType data.
  */
    "data": S.Array(BucketTypeData),
    /**
  * An array of entity data objects accessible from BucketType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SpaceClass extends S.Class("SpaceClass")({
    /**
  * SpaceClass data.
  */
    "data": SpaceClassData,
    /**
  * An array of entity data objects accessible from SpaceClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SpaceCategoryList extends S.Class("SpaceCategoryList")({
    /**
  * A list of SpaceCategory data.
  */
    "data": S.Array(SpaceCategoryData),
    /**
  * An array of entity data objects accessible from SpaceCategory.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SpaceCategory extends S.Class("SpaceCategory")({
    /**
  * SpaceCategory data.
  */
    "data": SpaceCategoryData,
    /**
  * An array of entity data objects accessible from SpaceCategory.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ServiceTypeList extends S.Class("ServiceTypeList")({
    /**
  * A list of ServiceType data.
  */
    "data": S.Array(ServiceTypeData),
    /**
  * An array of entity data objects accessible from ServiceType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ServiceType extends S.Class("ServiceType")({
    /**
  * ServiceType data.
  */
    "data": ServiceTypeData,
    /**
  * An array of entity data objects accessible from ServiceType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ServiceClassList extends S.Class("ServiceClassList")({
    /**
  * A list of ServiceClass data.
  */
    "data": S.Array(ServiceClassData),
    /**
  * An array of entity data objects accessible from ServiceClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ServiceClass extends S.Class("ServiceClass")({
    /**
  * ServiceClass data.
  */
    "data": ServiceClassData,
    /**
  * An array of entity data objects accessible from ServiceClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ServiceCategoryList extends S.Class("ServiceCategoryList")({
    /**
  * A list of ServiceCategory data.
  */
    "data": S.Array(ServiceCategoryData),
    /**
  * An array of entity data objects accessible from ServiceCategory.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ServiceCategory extends S.Class("ServiceCategory")({
    /**
  * ServiceCategory data.
  */
    "data": ServiceCategoryData,
    /**
  * An array of entity data objects accessible from ServiceCategory.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ItemTypeList extends S.Class("ItemTypeList")({
    /**
  * A list of ItemType data.
  */
    "data": S.Array(ItemTypeData),
    /**
  * An array of entity data objects accessible from ItemType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemType extends S.Class("ItemType")({
    /**
  * ItemType data.
  */
    "data": ItemTypeData,
    /**
  * An array of entity data objects accessible from ItemType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DepreciationModifierList extends S.Class("DepreciationModifierList")({
    /**
  * A list of DepreciationModifier data.
  */
    "data": S.Array(DepreciationModifierData),
    /**
  * An array of entity data objects accessible from DepreciationModifier.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class DepreciationOverrideList extends S.Class("DepreciationOverrideList")({
    /**
  * A list of DepreciationOverride data.
  */
    "data": S.Array(DepreciationOverrideData),
    /**
  * An array of entity data objects accessible from DepreciationOverride.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemClassList extends S.Class("ItemClassList")({
    /**
  * A list of ItemClass data.
  */
    "data": S.Array(ItemClassData),
    /**
  * An array of entity data objects accessible from ItemClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemClass extends S.Class("ItemClass")({
    /**
  * ItemClass data.
  */
    "data": ItemClassData,
    /**
  * An array of entity data objects accessible from ItemClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ItemCategoryList extends S.Class("ItemCategoryList")({
    /**
  * A list of ItemCategory data.
  */
    "data": S.Array(ItemCategoryData),
    /**
  * An array of entity data objects accessible from ItemCategory.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemCategory extends S.Class("ItemCategory")({
    /**
  * ItemCategory data.
  */
    "data": ItemCategoryData,
    /**
  * An array of entity data objects accessible from ItemCategory.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class IncidentTypeList extends S.Class("IncidentTypeList")({
    /**
  * A list of IncidentType data.
  */
    "data": S.Array(IncidentTypeData),
    /**
  * An array of entity data objects accessible from IncidentType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class IncidentClassList extends S.Class("IncidentClassList")({
    /**
  * A list of IncidentClass data.
  */
    "data": S.Array(IncidentClassData),
    /**
  * An array of entity data objects accessible from IncidentClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class IncidentClass extends S.Class("IncidentClass")({
    /**
  * IncidentClass data.
  */
    "data": IncidentClassData,
    /**
  * An array of entity data objects accessible from IncidentClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DocumentTypeList extends S.Class("DocumentTypeList")({
    /**
  * A list of DocumentType data.
  */
    "data": S.Array(DocumentTypeData),
    /**
  * An array of entity data objects accessible from DocumentType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class DocumentType extends S.Class("DocumentType")({
    /**
  * DocumentType data.
  */
    "data": DocumentTypeData,
    /**
  * An array of entity data objects accessible from DocumentType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DocumentClassList extends S.Class("DocumentClassList")({
    /**
  * A list of DocumentClass data.
  */
    "data": S.Array(DocumentClassData),
    /**
  * An array of entity data objects accessible from DocumentClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class DocumentClass extends S.Class("DocumentClass")({
    /**
  * DocumentClass data.
  */
    "data": DocumentClassData,
    /**
  * An array of entity data objects accessible from DocumentClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BucketType extends S.Class("BucketType")({
    /**
  * BucketType data.
  */
    "data": BucketTypeData,
    /**
  * An array of entity data objects accessible from BucketType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class BucketClassList extends S.Class("BucketClassList")({
    /**
  * A list of BucketClass data.
  */
    "data": S.Array(BucketClassData),
    /**
  * An array of entity data objects accessible from BucketClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BucketClass extends S.Class("BucketClass")({
    /**
  * BucketClass data.
  */
    "data": BucketClassData,
    /**
  * An array of entity data objects accessible from BucketClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AssetAttributeTypeList extends S.Class("AssetAttributeTypeList")({
    /**
  * A list of AssetAttributeType data.
  */
    "data": S.Array(AssetAttributeTypeData),
    /**
  * An array of entity data objects accessible from AssetAttributeType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AssetAttributeType extends S.Class("AssetAttributeType")({
    /**
  * AssetAttributeType data.
  */
    "data": AssetAttributeTypeData,
    /**
  * An array of entity data objects accessible from AssetAttributeType.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AssetAttributeClassList extends S.Class("AssetAttributeClassList")({
    /**
  * A list of AssetAttributeClass data.
  */
    "data": S.Array(AssetAttributeClassData),
    /**
  * An array of entity data objects accessible from AssetAttributeClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AssetAttributeClass extends S.Class("AssetAttributeClass")({
    /**
  * AssetAttributeClass data.
  */
    "data": AssetAttributeClassData,
    /**
  * An array of entity data objects accessible from AssetAttributeClass.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SubmissionTrackTemplateList extends S.Class("SubmissionTrackTemplateList")({
    /**
  * A list of SubmissionTrackTemplate data.
  */
    "data": S.Array(SubmissionTrackTemplateData),
    /**
  * An array of entity data objects accessible from SubmissionTrackTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SubmissionTrackTemplate extends S.Class("SubmissionTrackTemplate")({
    /**
  * SubmissionTrackTemplate data.
  */
    "data": SubmissionTrackTemplateData,
    /**
  * An array of entity data objects accessible from SubmissionTrackTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class PolicyTemplate extends S.Class("PolicyTemplate")({
    /**
  * PolicyTemplate data.
  */
    "data": PolicyTemplateData,
    /**
  * An array of entity data objects accessible from PolicyTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class SubCoverageTemplateList extends S.Class("SubCoverageTemplateList")({
    /**
  * A list of SubCoverageTemplate data.
  */
    "data": S.Array(SubCoverageTemplateData),
    /**
  * An array of entity data objects accessible from SubCoverageTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SubCoverageTemplate extends S.Class("SubCoverageTemplate")({
    /**
  * SubCoverageTemplate data.
  */
    "data": SubCoverageTemplateData,
    /**
  * An array of entity data objects accessible from SubCoverageTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class CoverageTemplate extends S.Class("CoverageTemplate")({
    /**
  * CoverageTemplate data.
  */
    "data": CoverageTemplateData,
    /**
  * An array of entity data objects accessible from CoverageTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class EndorsementTemplateList extends S.Class("EndorsementTemplateList")({
    /**
  * A list of EndorsementTemplate data.
  */
    "data": S.Array(EndorsementTemplateData),
    /**
  * An array of entity data objects accessible from EndorsementTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SpaceTypeItemTemplateList extends S.Class("SpaceTypeItemTemplateList")({
    /**
  * A list of SpaceTypeItemTemplate data.
  */
    "data": S.Array(SpaceTypeItemTemplateData),
    /**
  * An array of entity data objects accessible from SpaceTypeItemTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class SpaceTypeItemTemplate extends S.Class("SpaceTypeItemTemplate")({
    /**
  * SpaceTypeItemTemplate data.
  */
    "data": SpaceTypeItemTemplateData,
    /**
  * An array of entity data objects accessible from SpaceTypeItemTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ItemTemplate extends S.Class("ItemTemplate")({
    /**
  * ItemTemplate data.
  */
    "data": ItemTemplateData,
    /**
  * An array of entity data objects accessible from ItemTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class PolicyTemplateList extends S.Class("PolicyTemplateList")({
    /**
  * A list of PolicyTemplate data.
  */
    "data": S.Array(PolicyTemplateData),
    /**
  * An array of entity data objects accessible from PolicyTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class CoverageGroupTemplateList extends S.Class("CoverageGroupTemplateList")({
    /**
  * A list of CoverageGroupTemplate data.
  */
    "data": S.Array(CoverageGroupTemplateData),
    /**
  * An array of entity data objects accessible from CoverageGroupTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class CoverageTemplateList extends S.Class("CoverageTemplateList")({
    /**
  * A list of CoverageTemplate data.
  */
    "data": S.Array(CoverageTemplateData),
    /**
  * An array of entity data objects accessible from CoverageTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ItemTemplateList extends S.Class("ItemTemplateList")({
    /**
  * A list of ItemTemplate data.
  */
    "data": S.Array(ItemTemplateData),
    /**
  * An array of entity data objects accessible from ItemTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class EndorsementTemplate extends S.Class("EndorsementTemplate")({
    /**
  * EndorsementTemplate data.
  */
    "data": EndorsementTemplateData,
    /**
  * An array of entity data objects accessible from EndorsementTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class CoverageGroupTemplate extends S.Class("CoverageGroupTemplate")({
    /**
  * CoverageGroupTemplate data.
  */
    "data": CoverageGroupTemplateData,
    /**
  * An array of entity data objects accessible from CoverageGroupTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AssetAttributeTypeItemTemplateList extends S.Class("AssetAttributeTypeItemTemplateList")({
    /**
  * A list of AssetAttributeTypeItemTemplate data.
  */
    "data": S.Array(AssetAttributeTypeItemTemplateData),
    /**
  * An array of entity data objects accessible from AssetAttributeTypeItemTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class AssetAttributeTypeItemTemplate extends S.Class("AssetAttributeTypeItemTemplate")({
    /**
  * AssetAttributeTypeItemTemplate data.
  */
    "data": AssetAttributeTypeItemTemplateData,
    /**
  * An array of entity data objects accessible from AssetAttributeTypeItemTemplate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ProviderList extends S.Class("ProviderList")({
    /**
  * A list of Provider data.
  */
    "data": S.Array(ProviderData),
    /**
  * An array of entity data objects accessible from Provider.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Peril extends S.Class("Peril")({
    /**
  * Peril data.
  */
    "data": PerilData,
    /**
  * An array of entity data objects accessible from Peril.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DisasterList extends S.Class("DisasterList")({
    /**
  * A list of Disaster data.
  */
    "data": S.Array(DisasterData),
    /**
  * An array of entity data objects accessible from Disaster.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Disaster extends S.Class("Disaster")({
    /**
  * Disaster data.
  */
    "data": DisasterData,
    /**
  * An array of entity data objects accessible from Disaster.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class CurrencyList extends S.Class("CurrencyList")({
    /**
  * A list of Currency data.
  */
    "data": S.Array(CurrencyData),
    /**
  * An array of entity data objects accessible from Currency.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class CountryList extends S.Class("CountryList")({
    /**
  * A list of Country data.
  */
    "data": S.Array(CountryData),
    /**
  * An array of entity data objects accessible from Country.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class WarrantyList extends S.Class("WarrantyList")({
    /**
  * A list of Warranty data.
  */
    "data": S.Array(WarrantyData),
    /**
  * An array of entity data objects accessible from Warranty.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Warranty extends S.Class("Warranty")({
    /**
  * Warranty data.
  */
    "data": WarrantyData,
    /**
  * An array of entity data objects accessible from Warranty.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableFile extends S.Class("NullableFile")({
    /**
  * File data.
  */
    "data": S.NullOr(FileData),
    /**
  * An array of entity data objects accessible from File.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class UserManualList extends S.Class("UserManualList")({
    /**
  * A list of UserManual data.
  */
    "data": S.Array(UserManualData),
    /**
  * An array of entity data objects accessible from UserManual.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class UserManual extends S.Class("UserManual")({
    /**
  * UserManual data.
  */
    "data": UserManualData,
    /**
  * An array of entity data objects accessible from UserManual.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ScopeOfLossList extends S.Class("ScopeOfLossList")({
    /**
  * A list of ScopeOfLoss data.
  */
    "data": S.Array(ScopeOfLossData),
    /**
  * An array of entity data objects accessible from ScopeOfLoss.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ScopeOfLoss extends S.Class("ScopeOfLoss")({
    /**
  * ScopeOfLoss data.
  */
    "data": ScopeOfLossData,
    /**
  * An array of entity data objects accessible from ScopeOfLoss.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class RentRollList extends S.Class("RentRollList")({
    /**
  * A list of RentRoll data.
  */
    "data": S.Array(RentRollData),
    /**
  * An array of entity data objects accessible from RentRoll.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class RentRoll extends S.Class("RentRoll")({
    /**
  * RentRoll data.
  */
    "data": RentRollData,
    /**
  * An array of entity data objects accessible from RentRoll.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ProductSpecList extends S.Class("ProductSpecList")({
    /**
  * A list of ProductSpec data.
  */
    "data": S.Array(ProductSpecData),
    /**
  * An array of entity data objects accessible from ProductSpec.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ProductSpec extends S.Class("ProductSpec")({
    /**
  * ProductSpec data.
  */
    "data": ProductSpecData,
    /**
  * An array of entity data objects accessible from ProductSpec.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class PolicyJacketList extends S.Class("PolicyJacketList")({
    /**
  * A list of PolicyJacket data.
  */
    "data": S.Array(PolicyJacketData),
    /**
  * An array of entity data objects accessible from PolicyJacket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class PolicyJacket extends S.Class("PolicyJacket")({
    /**
  * PolicyJacket data.
  */
    "data": PolicyJacketData,
    /**
  * An array of entity data objects accessible from PolicyJacket.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class PoliceReportList extends S.Class("PoliceReportList")({
    /**
  * A list of PoliceReport data.
  */
    "data": S.Array(PoliceReportData),
    /**
  * An array of entity data objects accessible from PoliceReport.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class PoliceReport extends S.Class("PoliceReport")({
    /**
  * PoliceReport data.
  */
    "data": PoliceReportData,
    /**
  * An array of entity data objects accessible from PoliceReport.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class PermitList extends S.Class("PermitList")({
    /**
  * A list of Permit data.
  */
    "data": S.Array(PermitData),
    /**
  * An array of entity data objects accessible from Permit.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Permit extends S.Class("Permit")({
    /**
  * Permit data.
  */
    "data": PermitData,
    /**
  * An array of entity data objects accessible from Permit.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Payment extends S.Class("Payment")({
    /**
  * Payment data.
  */
    "data": PaymentData,
    /**
  * An array of entity data objects accessible from Payment.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ItemizableFinancialDocumentStats extends S.Class("ItemizableFinancialDocumentStats")({
    /**
  * ItemizableFinancialDocumentStats data.
  */
    "data": ItemizableFinancialDocumentStatsData,
    /**
  * An array of entity data objects accessible from ItemizableFinancialDocumentStats.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableAccountProvider extends S.Class("NullableAccountProvider")({
    /**
  * AccountProvider data.
  */
    "data": S.NullOr(AccountProviderData),
    /**
  * An array of entity data objects accessible from AccountProvider.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class NullableService extends S.Class("NullableService")({
    /**
  * Service data.
  */
    "data": S.NullOr(ServiceData),
    /**
  * An array of entity data objects accessible from Service.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class ParamedicReportList extends S.Class("ParamedicReportList")({
    /**
  * A list of ParamedicReport data.
  */
    "data": S.Array(ParamedicReportData),
    /**
  * An array of entity data objects accessible from ParamedicReport.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class ParamedicReport extends S.Class("ParamedicReport")({
    /**
  * ParamedicReport data.
  */
    "data": ParamedicReportData,
    /**
  * An array of entity data objects accessible from ParamedicReport.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Invoice extends S.Class("Invoice")({
    /**
  * Invoice data.
  */
    "data": InvoiceData,
    /**
  * An array of entity data objects accessible from Invoice.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class IncidentReportList extends S.Class("IncidentReportList")({
    /**
  * A list of IncidentReport data.
  */
    "data": S.Array(IncidentReportData),
    /**
  * An array of entity data objects accessible from IncidentReport.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class IncidentReport extends S.Class("IncidentReport")({
    /**
  * IncidentReport data.
  */
    "data": IncidentReportData,
    /**
  * An array of entity data objects accessible from IncidentReport.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Estimate extends S.Class("Estimate")({
    /**
  * Estimate data.
  */
    "data": EstimateData,
    /**
  * An array of entity data objects accessible from Estimate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class Document extends S.Class("Document")({
    /**
  * Document data.
  */
    "data": S.Union(ChangeOrderData, EstimateData, InvoiceData, PaymentData, AssetAppraisalData, AppraisalData, FundingData, IncidentReportData, PoliceReportData, ParamedicReportData, ContractData, RentRollData, PermitData, BlueprintData, DeclarationsPageData, PolicyJacketData, ScopeOfLossData, DeliveryPaperworkData, ProductSpecData, UserManualData, WarrantyData, DeedData),
    /**
  * An array of entity data objects accessible from Document.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DeliveryPaperworkList extends S.Class("DeliveryPaperworkList")({
    /**
  * A list of DeliveryPaperwork data.
  */
    "data": S.Array(DeliveryPaperworkData),
    /**
  * An array of entity data objects accessible from DeliveryPaperwork.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class DeliveryPaperwork extends S.Class("DeliveryPaperwork")({
    /**
  * DeliveryPaperwork data.
  */
    "data": DeliveryPaperworkData,
    /**
  * An array of entity data objects accessible from DeliveryPaperwork.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DeedList extends S.Class("DeedList")({
    /**
  * A list of Deed data.
  */
    "data": S.Array(DeedData),
    /**
  * An array of entity data objects accessible from Deed.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Deed extends S.Class("Deed")({
    /**
  * Deed data.
  */
    "data": DeedData,
    /**
  * An array of entity data objects accessible from Deed.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class DeclarationsPageList extends S.Class("DeclarationsPageList")({
    /**
  * A list of DeclarationsPage data.
  */
    "data": S.Array(DeclarationsPageData),
    /**
  * An array of entity data objects accessible from DeclarationsPage.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class DeclarationsPage extends S.Class("DeclarationsPage")({
    /**
  * DeclarationsPage data.
  */
    "data": DeclarationsPageData,
    /**
  * An array of entity data objects accessible from DeclarationsPage.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ContractList extends S.Class("ContractList")({
    /**
  * A list of Contract data.
  */
    "data": S.Array(ContractData),
    /**
  * An array of entity data objects accessible from Contract.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Contract extends S.Class("Contract")({
    /**
  * Contract data.
  */
    "data": ContractData,
    /**
  * An array of entity data objects accessible from Contract.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ChangeOrder extends S.Class("ChangeOrder")({
    /**
  * ChangeOrder data.
  */
    "data": ChangeOrderData,
    /**
  * An array of entity data objects accessible from ChangeOrder.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class ChangeOrderLineList extends S.Class("ChangeOrderLineList")({
    /**
  * A list of ChangeOrderLine data.
  */
    "data": S.Array(S.Union(ItemChangeOrderData, ItemImpactChangeOrderData, ServiceTaskChangeOrderData)),
    /**
  * An array of entity data objects accessible from ChangeOrderLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BlueprintList extends S.Class("BlueprintList")({
    /**
  * A list of Blueprint data.
  */
    "data": S.Array(BlueprintData),
    /**
  * An array of entity data objects accessible from Blueprint.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Blueprint extends S.Class("Blueprint")({
    /**
  * Blueprint data.
  */
    "data": BlueprintData,
    /**
  * An array of entity data objects accessible from Blueprint.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AssetAppraisal extends S.Class("AssetAppraisal")({
    /**
  * AssetAppraisal data.
  */
    "data": AssetAppraisalData,
    /**
  * An array of entity data objects accessible from AssetAppraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AppraisalList extends S.Class("AppraisalList")({
    /**
  * A list of Appraisal data.
  */
    "data": S.Array(AppraisalData),
    /**
  * An array of entity data objects accessible from Appraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class Appraisal extends S.Class("Appraisal")({
    /**
  * Appraisal data.
  */
    "data": AppraisalData,
    /**
  * An array of entity data objects accessible from Appraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AppraisalLineList extends S.Class("AppraisalLineList")({
    /**
  * A list of AppraisalLine data.
  */
    "data": S.Array(ItemAppraisalData),
    /**
  * An array of entity data objects accessible from AppraisalLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class BaseEntityList extends S.Class("BaseEntityList")({
    /**
  * A list of BaseEntity data.
  */
    "data": S.Array(S.Union(ChangeOrderData, EstimateData, InvoiceData, PaymentData, AssetAppraisalData, AppraisalData, FundingData, IncidentReportData, PoliceReportData, ParamedicReportData, ContractData, RentRollData, PermitData, BlueprintData, DeclarationsPageData, PolicyJacketData, ScopeOfLossData, DeliveryPaperworkData, ProductSpecData, UserManualData, WarrantyData, DeedData, ItemChangeOrderData, ItemImpactChangeOrderData, ServiceTaskChangeOrderData, ItemEstimateData, ItemImpactEstimateData, ServiceTaskEstimateData, ItemInvoiceData, ItemImpactInvoiceData, ServiceTaskInvoiceData, ItemPaymentData, ItemImpactPaymentData, ServiceTaskPaymentData, ItemAppraisalData, ItemizableFinancialDocumentStatsData, ProviderData, CountryData, CurrencyData, DepreciationModifierData, DepreciationOverrideData, ItemTypeData, DisasterData, PerilData, AssetAttributeTypeItemTemplateData, CoverageGroupTemplateData, CoverageTemplateData, EndorsementTemplateData, ItemTemplateData, PolicyTemplateData, SpaceTypeItemTemplateData, SubCoverageTemplateData, SubmissionTrackTemplateData, AssetAttributeClassData, AssetAttributeTypeData, AssetTypeData, BucketClassData, BucketTypeData, DocumentClassData, DocumentTypeData, IncidentClassData, IncidentTypeData, ItemCategoryData, ItemClassData, ServiceCategoryData, ServiceClassData, ServiceTypeData, SpaceGroupTypeData, SpaceCategoryData, SpaceClassData, SpaceTypeData, AccountInviteData, AccountProviderContactData, UserData, AccountProviderData, AccountData, AddressData, DwellingData, AuthProfileData, BaseBucketMetadataData, EntryData, BucketData, SubBucketData, BaseSubBucketMetadataData, CoverageData, BucketFundingData, ClaimDeductibleData, PolicyTermData, ClaimData, CoverageGroupData, DeductibleData, EmailAddressData, EndorsementData, EntrySourceMediaData, EntrySourceMetadataData, ItemImpactData, ItemData, ServiceTaskData, ServiceData, ThirdPartyImpactData, FileProcessData, FileData, ProjectImpactData, IncidentImpactData, IncidentData, ItemMediaSuggestionData, ItemProductSuggestionData, MediaData, PhoneNumberData, PolicyData, ProjectMediaData, SpaceGroupData, SpaceData, SubCoverageData, ThirdPartyDwellingData, ThirdPartyIndividualData, UserAccountRoleData)),
    /**
  * An array of entity data objects accessible from BaseEntity.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links. Only supplied for GET requests.
  */
    "links": S.optionalWith(ListLinkObject, { nullable: true })
}) {
}
export class PaymentLine extends S.Class("PaymentLine")({
    /**
  * PaymentLine data.
  */
    "data": S.Union(ItemPaymentData, ItemImpactPaymentData, ServiceTaskPaymentData),
    /**
  * An array of entity data objects accessible from PaymentLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullablePayment extends S.Class("NullablePayment")({
    /**
  * Payment data.
  */
    "data": S.NullOr(PaymentData),
    /**
  * An array of entity data objects accessible from Payment.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class InvoiceLine extends S.Class("InvoiceLine")({
    /**
  * InvoiceLine data.
  */
    "data": S.Union(ItemInvoiceData, ItemImpactInvoiceData, ServiceTaskInvoiceData),
    /**
  * An array of entity data objects accessible from InvoiceLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableInvoice extends S.Class("NullableInvoice")({
    /**
  * Invoice data.
  */
    "data": S.NullOr(InvoiceData),
    /**
  * An array of entity data objects accessible from Invoice.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class EstimateLine extends S.Class("EstimateLine")({
    /**
  * EstimateLine data.
  */
    "data": S.Union(ItemEstimateData, ItemImpactEstimateData, ServiceTaskEstimateData),
    /**
  * An array of entity data objects accessible from EstimateLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class NullableEstimate extends S.Class("NullableEstimate")({
    /**
  * Estimate data.
  */
    "data": S.NullOr(EstimateData),
    /**
  * An array of entity data objects accessible from Estimate.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true })
}) {
}
export class ChangeOrderLine extends S.Class("ChangeOrderLine")({
    /**
  * ChangeOrderLine data.
  */
    "data": S.Union(ItemChangeOrderData, ItemImpactChangeOrderData, ServiceTaskChangeOrderData),
    /**
  * An array of entity data objects accessible from ChangeOrderLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class AppraisalLine extends S.Class("AppraisalLine")({
    /**
  * AppraisalLine data.
  */
    "data": ItemAppraisalData,
    /**
  * An array of entity data objects accessible from AppraisalLine.
  */
    "included": S.optionalWith(S.Array(JsonApiIncludedItem), { nullable: true }),
    /**
  * Relevant links.
  */
    "links": S.optionalWith(LinkObject, { nullable: true })
}) {
}
export class UpdateUser extends S.Class("UpdateUser")({
    /**
  * User data.
  */
    "data": UpdateUserData,
    /**
  * An array of entity data objects accessible from User.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertUserAccountRole extends S.Class("UpsertUserAccountRole")({
    /**
  * UserAccountRole data.
  */
    "data": S.Union(CreateUserAccountRoleData, UpdateUserAccountRoleData),
    /**
  * An array of entity data objects accessible from UserAccountRole.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertUserAccountRoleList extends S.Class("UpsertUserAccountRoleList")({
    /**
  * A list of UserAccountRole data.
  */
    "data": S.Array(S.Union(CreateUserAccountRoleData, UpdateUserAccountRoleData)),
    /**
  * An array of entity data objects accessible from UserAccountRole.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateUserAccountRole extends S.Class("UpdateUserAccountRole")({
    /**
  * UserAccountRole data.
  */
    "data": UpdateUserAccountRoleData,
    /**
  * An array of entity data objects accessible from UserAccountRole.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertThirdParty extends S.Class("UpsertThirdParty")({
    /**
  * ThirdParty data.
  */
    "data": S.Union(CreateThirdPartyDwellingData, CreateThirdPartyIndividualData, UpdateThirdPartyDwellingData, UpdateThirdPartyIndividualData),
    /**
  * An array of entity data objects accessible from ThirdParty.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertThirdPartyList extends S.Class("UpsertThirdPartyList")({
    /**
  * A list of ThirdParty data.
  */
    "data": S.Array(S.Union(CreateThirdPartyDwellingData, CreateThirdPartyIndividualData, UpdateThirdPartyDwellingData, UpdateThirdPartyIndividualData)),
    /**
  * An array of entity data objects accessible from ThirdParty.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateThirdParty extends S.Class("UpdateThirdParty")({
    /**
  * ThirdParty data.
  */
    "data": S.Union(UpdateThirdPartyDwellingData, UpdateThirdPartyIndividualData),
    /**
  * An array of entity data objects accessible from ThirdParty.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertThirdPartyIndividual extends S.Class("UpsertThirdPartyIndividual")({
    /**
  * ThirdPartyIndividual data.
  */
    "data": S.Union(CreateThirdPartyIndividualData, UpdateThirdPartyIndividualData),
    /**
  * An array of entity data objects accessible from ThirdPartyIndividual.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertThirdPartyIndividualList extends S.Class("UpsertThirdPartyIndividualList")({
    /**
  * A list of ThirdPartyIndividual data.
  */
    "data": S.Array(S.Union(CreateThirdPartyIndividualData, UpdateThirdPartyIndividualData)),
    /**
  * An array of entity data objects accessible from ThirdPartyIndividual.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateThirdPartyIndividual extends S.Class("UpdateThirdPartyIndividual")({
    /**
  * ThirdPartyIndividual data.
  */
    "data": UpdateThirdPartyIndividualData,
    /**
  * An array of entity data objects accessible from ThirdPartyIndividual.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertThirdPartyImpact extends S.Class("UpsertThirdPartyImpact")({
    /**
  * ThirdPartyImpact data.
  */
    "data": S.Union(CreateThirdPartyImpactData, UpdateThirdPartyImpactData),
    /**
  * An array of entity data objects accessible from ThirdPartyImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertThirdPartyImpactList extends S.Class("UpsertThirdPartyImpactList")({
    /**
  * A list of ThirdPartyImpact data.
  */
    "data": S.Array(S.Union(CreateThirdPartyImpactData, UpdateThirdPartyImpactData)),
    /**
  * An array of entity data objects accessible from ThirdPartyImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateThirdPartyImpact extends S.Class("UpdateThirdPartyImpact")({
    /**
  * ThirdPartyImpact data.
  */
    "data": UpdateThirdPartyImpactData,
    /**
  * An array of entity data objects accessible from ThirdPartyImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertThirdPartyDwelling extends S.Class("UpsertThirdPartyDwelling")({
    /**
  * ThirdPartyDwelling data.
  */
    "data": S.Union(CreateThirdPartyDwellingData, UpdateThirdPartyDwellingData),
    /**
  * An array of entity data objects accessible from ThirdPartyDwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertThirdPartyDwellingList extends S.Class("UpsertThirdPartyDwellingList")({
    /**
  * A list of ThirdPartyDwelling data.
  */
    "data": S.Array(S.Union(CreateThirdPartyDwellingData, UpdateThirdPartyDwellingData)),
    /**
  * An array of entity data objects accessible from ThirdPartyDwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateThirdPartyDwelling extends S.Class("UpdateThirdPartyDwelling")({
    /**
  * ThirdPartyDwelling data.
  */
    "data": UpdateThirdPartyDwellingData,
    /**
  * An array of entity data objects accessible from ThirdPartyDwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSubCoverage extends S.Class("UpsertSubCoverage")({
    /**
  * SubCoverage data.
  */
    "data": S.Union(CreateSubCoverageData, UpdateSubCoverageData),
    /**
  * An array of entity data objects accessible from SubCoverage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSubCoverageList extends S.Class("UpsertSubCoverageList")({
    /**
  * A list of SubCoverage data.
  */
    "data": S.Array(S.Union(CreateSubCoverageData, UpdateSubCoverageData)),
    /**
  * An array of entity data objects accessible from SubCoverage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateSubCoverage extends S.Class("UpdateSubCoverage")({
    /**
  * SubCoverage data.
  */
    "data": UpdateSubCoverageData,
    /**
  * An array of entity data objects accessible from SubCoverage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSubBucket extends S.Class("UpsertSubBucket")({
    /**
  * SubBucket data.
  */
    "data": S.Union(CreateSubBucketData, UpdateSubBucketData),
    /**
  * An array of entity data objects accessible from SubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSubBucketList extends S.Class("UpsertSubBucketList")({
    /**
  * A list of SubBucket data.
  */
    "data": S.Array(S.Union(CreateSubBucketData, UpdateSubBucketData)),
    /**
  * An array of entity data objects accessible from SubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateSubBucket extends S.Class("UpdateSubBucket")({
    /**
  * SubBucket data.
  */
    "data": UpdateSubBucketData,
    /**
  * An array of entity data objects accessible from SubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSubBucketDefinition extends S.Class("UpsertSubBucketDefinition")({
    /**
  * SubBucketDefinition data.
  */
    "data": S.Union(CreateSubCoverageData, UpdateSubCoverageData),
    /**
  * An array of entity data objects accessible from SubBucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSubBucketDefinitionList extends S.Class("UpsertSubBucketDefinitionList")({
    /**
  * A list of SubBucketDefinition data.
  */
    "data": S.Array(S.Union(CreateSubCoverageData, UpdateSubCoverageData)),
    /**
  * An array of entity data objects accessible from SubBucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateSubBucketDefinition extends S.Class("UpdateSubBucketDefinition")({
    /**
  * SubBucketDefinition data.
  */
    "data": UpdateSubCoverageData,
    /**
  * An array of entity data objects accessible from SubBucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSpace extends S.Class("UpsertSpace")({
    /**
  * Space data.
  */
    "data": S.Union(CreateSpaceData, UpdateSpaceData),
    /**
  * An array of entity data objects accessible from Space.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSpaceList extends S.Class("UpsertSpaceList")({
    /**
  * A list of Space data.
  */
    "data": S.Array(S.Union(CreateSpaceData, UpdateSpaceData)),
    /**
  * An array of entity data objects accessible from Space.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateSpace extends S.Class("UpdateSpace")({
    /**
  * Space data.
  */
    "data": UpdateSpaceData,
    /**
  * An array of entity data objects accessible from Space.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSpaceGroup extends S.Class("UpsertSpaceGroup")({
    /**
  * SpaceGroup data.
  */
    "data": S.Union(CreateSpaceGroupData, UpdateSpaceGroupData),
    /**
  * An array of entity data objects accessible from SpaceGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertSpaceGroupList extends S.Class("UpsertSpaceGroupList")({
    /**
  * A list of SpaceGroup data.
  */
    "data": S.Array(S.Union(CreateSpaceGroupData, UpdateSpaceGroupData)),
    /**
  * An array of entity data objects accessible from SpaceGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateSpaceGroup extends S.Class("UpdateSpaceGroup")({
    /**
  * SpaceGroup data.
  */
    "data": UpdateSpaceGroupData,
    /**
  * An array of entity data objects accessible from SpaceGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertService extends S.Class("UpsertService")({
    /**
  * Service data.
  */
    "data": S.Union(CreateServiceData, UpdateServiceData),
    /**
  * An array of entity data objects accessible from Service.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertServiceList extends S.Class("UpsertServiceList")({
    /**
  * A list of Service data.
  */
    "data": S.Array(S.Union(CreateServiceData, UpdateServiceData)),
    /**
  * An array of entity data objects accessible from Service.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateService extends S.Class("UpdateService")({
    /**
  * Service data.
  */
    "data": UpdateServiceData,
    /**
  * An array of entity data objects accessible from Service.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertServiceTask extends S.Class("UpsertServiceTask")({
    /**
  * ServiceTask data.
  */
    "data": S.Union(CreateServiceTaskData, UpdateServiceTaskData),
    /**
  * An array of entity data objects accessible from ServiceTask.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertServiceTaskList extends S.Class("UpsertServiceTaskList")({
    /**
  * A list of ServiceTask data.
  */
    "data": S.Array(S.Union(CreateServiceTaskData, UpdateServiceTaskData)),
    /**
  * An array of entity data objects accessible from ServiceTask.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateServiceTask extends S.Class("UpdateServiceTask")({
    /**
  * ServiceTask data.
  */
    "data": UpdateServiceTaskData,
    /**
  * An array of entity data objects accessible from ServiceTask.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertProject extends S.Class("UpsertProject")({
    /**
  * Project data.
  */
    "data": S.Union(CreateIncidentData, UpdateIncidentData),
    /**
  * An array of entity data objects accessible from Project.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertProjectList extends S.Class("UpsertProjectList")({
    /**
  * A list of Project data.
  */
    "data": S.Array(S.Union(CreateIncidentData, UpdateIncidentData)),
    /**
  * An array of entity data objects accessible from Project.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateProject extends S.Class("UpdateProject")({
    /**
  * Project data.
  */
    "data": UpdateIncidentData,
    /**
  * An array of entity data objects accessible from Project.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertProjectMedia extends S.Class("UpsertProjectMedia")({
    /**
  * ProjectMedia data.
  */
    "data": S.Union(CreateProjectMediaData, UpdateProjectMediaData),
    /**
  * An array of entity data objects accessible from ProjectMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertProjectMediaList extends S.Class("UpsertProjectMediaList")({
    /**
  * A list of ProjectMedia data.
  */
    "data": S.Array(S.Union(CreateProjectMediaData, UpdateProjectMediaData)),
    /**
  * An array of entity data objects accessible from ProjectMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateProjectMedia extends S.Class("UpdateProjectMedia")({
    /**
  * ProjectMedia data.
  */
    "data": UpdateProjectMediaData,
    /**
  * An array of entity data objects accessible from ProjectMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertProjectImpact extends S.Class("UpsertProjectImpact")({
    /**
  * ProjectImpact data.
  */
    "data": S.Union(CreateProjectImpactData, UpdateProjectImpactData),
    /**
  * An array of entity data objects accessible from ProjectImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertProjectImpactList extends S.Class("UpsertProjectImpactList")({
    /**
  * A list of ProjectImpact data.
  */
    "data": S.Array(S.Union(CreateProjectImpactData, UpdateProjectImpactData)),
    /**
  * An array of entity data objects accessible from ProjectImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateProjectImpact extends S.Class("UpdateProjectImpact")({
    /**
  * ProjectImpact data.
  */
    "data": UpdateProjectImpactData,
    /**
  * An array of entity data objects accessible from ProjectImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPolicy extends S.Class("UpsertPolicy")({
    /**
  * Policy data.
  */
    "data": S.Union(CreatePolicyData, UpdatePolicyData),
    /**
  * An array of entity data objects accessible from Policy.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPolicyList extends S.Class("UpsertPolicyList")({
    /**
  * A list of Policy data.
  */
    "data": S.Array(S.Union(CreatePolicyData, UpdatePolicyData)),
    /**
  * An array of entity data objects accessible from Policy.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdatePolicy extends S.Class("UpdatePolicy")({
    /**
  * Policy data.
  */
    "data": UpdatePolicyData,
    /**
  * An array of entity data objects accessible from Policy.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPolicyTerm extends S.Class("UpsertPolicyTerm")({
    /**
  * PolicyTerm data.
  */
    "data": S.Union(CreatePolicyTermData, UpdatePolicyTermData),
    /**
  * An array of entity data objects accessible from PolicyTerm.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPolicyTermList extends S.Class("UpsertPolicyTermList")({
    /**
  * A list of PolicyTerm data.
  */
    "data": S.Array(S.Union(CreatePolicyTermData, UpdatePolicyTermData)),
    /**
  * An array of entity data objects accessible from PolicyTerm.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdatePolicyTerm extends S.Class("UpdatePolicyTerm")({
    /**
  * PolicyTerm data.
  */
    "data": UpdatePolicyTermData,
    /**
  * An array of entity data objects accessible from PolicyTerm.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPhoneNumber extends S.Class("UpsertPhoneNumber")({
    /**
  * PhoneNumber data.
  */
    "data": S.Union(CreatePhoneNumberData, UpdatePhoneNumberData),
    /**
  * An array of entity data objects accessible from PhoneNumber.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPhoneNumberList extends S.Class("UpsertPhoneNumberList")({
    /**
  * A list of PhoneNumber data.
  */
    "data": S.Array(S.Union(CreatePhoneNumberData, UpdatePhoneNumberData)),
    /**
  * An array of entity data objects accessible from PhoneNumber.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdatePhoneNumber extends S.Class("UpdatePhoneNumber")({
    /**
  * PhoneNumber data.
  */
    "data": UpdatePhoneNumberData,
    /**
  * An array of entity data objects accessible from PhoneNumber.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertMedia extends S.Class("UpsertMedia")({
    /**
  * Media data.
  */
    "data": S.Union(CreateMediaData, UpdateMediaData),
    /**
  * An array of entity data objects accessible from Media.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertMediaList extends S.Class("UpsertMediaList")({
    /**
  * A list of Media data.
  */
    "data": S.Array(S.Union(CreateMediaData, UpdateMediaData)),
    /**
  * An array of entity data objects accessible from Media.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateMedia extends S.Class("UpdateMedia")({
    /**
  * Media data.
  */
    "data": UpdateMediaData,
    /**
  * An array of entity data objects accessible from Media.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertItem extends S.Class("UpsertItem")({
    /**
  * Item data.
  */
    "data": S.Union(CreateItemData, UpdateItemData),
    /**
  * An array of entity data objects accessible from Item.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertItemList extends S.Class("UpsertItemList")({
    /**
  * A list of Item data.
  */
    "data": S.Array(S.Union(CreateItemData, UpdateItemData)),
    /**
  * An array of entity data objects accessible from Item.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateItem extends S.Class("UpdateItem")({
    /**
  * Item data.
  */
    "data": UpdateItemData,
    /**
  * An array of entity data objects accessible from Item.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertItemProductSuggestion extends S.Class("UpsertItemProductSuggestion")({
    /**
  * ItemProductSuggestion data.
  */
    "data": S.Union(CreateItemProductSuggestionData, UpdateItemProductSuggestionData),
    /**
  * An array of entity data objects accessible from ItemProductSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertItemProductSuggestionList extends S.Class("UpsertItemProductSuggestionList")({
    /**
  * A list of ItemProductSuggestion data.
  */
    "data": S.Array(S.Union(CreateItemProductSuggestionData, UpdateItemProductSuggestionData)),
    /**
  * An array of entity data objects accessible from ItemProductSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateItemProductSuggestion extends S.Class("UpdateItemProductSuggestion")({
    /**
  * ItemProductSuggestion data.
  */
    "data": UpdateItemProductSuggestionData,
    /**
  * An array of entity data objects accessible from ItemProductSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertItemMediaSuggestion extends S.Class("UpsertItemMediaSuggestion")({
    /**
  * ItemMediaSuggestion data.
  */
    "data": S.Union(CreateItemMediaSuggestionData, UpdateItemMediaSuggestionData),
    /**
  * An array of entity data objects accessible from ItemMediaSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertItemMediaSuggestionList extends S.Class("UpsertItemMediaSuggestionList")({
    /**
  * A list of ItemMediaSuggestion data.
  */
    "data": S.Array(S.Union(CreateItemMediaSuggestionData, UpdateItemMediaSuggestionData)),
    /**
  * An array of entity data objects accessible from ItemMediaSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateItemMediaSuggestion extends S.Class("UpdateItemMediaSuggestion")({
    /**
  * ItemMediaSuggestion data.
  */
    "data": UpdateItemMediaSuggestionData,
    /**
  * An array of entity data objects accessible from ItemMediaSuggestion.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertItemImpact extends S.Class("UpsertItemImpact")({
    /**
  * ItemImpact data.
  */
    "data": S.Union(CreateItemImpactData, UpdateItemImpactData),
    /**
  * An array of entity data objects accessible from ItemImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertItemImpactList extends S.Class("UpsertItemImpactList")({
    /**
  * A list of ItemImpact data.
  */
    "data": S.Array(S.Union(CreateItemImpactData, UpdateItemImpactData)),
    /**
  * An array of entity data objects accessible from ItemImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateItemImpact extends S.Class("UpdateItemImpact")({
    /**
  * ItemImpact data.
  */
    "data": UpdateItemImpactData,
    /**
  * An array of entity data objects accessible from ItemImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertIncident extends S.Class("UpsertIncident")({
    /**
  * Incident data.
  */
    "data": S.Union(CreateIncidentData, UpdateIncidentData),
    /**
  * An array of entity data objects accessible from Incident.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertIncidentList extends S.Class("UpsertIncidentList")({
    /**
  * A list of Incident data.
  */
    "data": S.Array(S.Union(CreateIncidentData, UpdateIncidentData)),
    /**
  * An array of entity data objects accessible from Incident.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateIncident extends S.Class("UpdateIncident")({
    /**
  * Incident data.
  */
    "data": UpdateIncidentData,
    /**
  * An array of entity data objects accessible from Incident.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertIncidentImpact extends S.Class("UpsertIncidentImpact")({
    /**
  * IncidentImpact data.
  */
    "data": S.Union(CreateIncidentImpactData, UpdateIncidentImpactData),
    /**
  * An array of entity data objects accessible from IncidentImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertIncidentImpactList extends S.Class("UpsertIncidentImpactList")({
    /**
  * A list of IncidentImpact data.
  */
    "data": S.Array(S.Union(CreateIncidentImpactData, UpdateIncidentImpactData)),
    /**
  * An array of entity data objects accessible from IncidentImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateIncidentImpact extends S.Class("UpdateIncidentImpact")({
    /**
  * IncidentImpact data.
  */
    "data": UpdateIncidentImpactData,
    /**
  * An array of entity data objects accessible from IncidentImpact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertFundingSource extends S.Class("UpsertFundingSource")({
    /**
  * FundingSource data.
  */
    "data": S.Union(CreateClaimData, UpdateClaimData),
    /**
  * An array of entity data objects accessible from FundingSource.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertFundingSourceList extends S.Class("UpsertFundingSourceList")({
    /**
  * A list of FundingSource data.
  */
    "data": S.Array(S.Union(CreateClaimData, UpdateClaimData)),
    /**
  * An array of entity data objects accessible from FundingSource.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateFundingSource extends S.Class("UpdateFundingSource")({
    /**
  * FundingSource data.
  */
    "data": UpdateClaimData,
    /**
  * An array of entity data objects accessible from FundingSource.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateFile extends S.Class("UpdateFile")({
    /**
  * File data.
  */
    "data": UpdateFileData,
    /**
  * An array of entity data objects accessible from File.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEntry extends S.Class("UpsertEntry")({
    /**
  * Entry data.
  */
    "data": S.Union(CreateEntryData, UpdateEntryData),
    /**
  * An array of entity data objects accessible from Entry.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEntryList extends S.Class("UpsertEntryList")({
    /**
  * A list of Entry data.
  */
    "data": S.Array(S.Union(CreateEntryData, UpdateEntryData)),
    /**
  * An array of entity data objects accessible from Entry.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateEntry extends S.Class("UpdateEntry")({
    /**
  * Entry data.
  */
    "data": UpdateEntryData,
    /**
  * An array of entity data objects accessible from Entry.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEntrySource extends S.Class("UpsertEntrySource")({
    /**
  * EntrySource data.
  */
    "data": S.Union(CreateItemImpactData, CreateItemData, CreateServiceTaskData, CreateServiceData, CreateThirdPartyImpactData, UpdateItemImpactData, UpdateItemData, UpdateServiceTaskData, UpdateServiceData, UpdateThirdPartyImpactData),
    /**
  * An array of entity data objects accessible from EntrySource.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEntrySourceList extends S.Class("UpsertEntrySourceList")({
    /**
  * A list of EntrySource data.
  */
    "data": S.Array(S.Union(CreateItemImpactData, CreateItemData, CreateServiceTaskData, CreateServiceData, CreateThirdPartyImpactData, UpdateItemImpactData, UpdateItemData, UpdateServiceTaskData, UpdateServiceData, UpdateThirdPartyImpactData)),
    /**
  * An array of entity data objects accessible from EntrySource.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateEntrySource extends S.Class("UpdateEntrySource")({
    /**
  * EntrySource data.
  */
    "data": S.Union(UpdateItemImpactData, UpdateItemData, UpdateServiceTaskData, UpdateServiceData, UpdateThirdPartyImpactData),
    /**
  * An array of entity data objects accessible from EntrySource.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEntrySourceMedia extends S.Class("UpsertEntrySourceMedia")({
    /**
  * EntrySourceMedia data.
  */
    "data": S.Union(CreateEntrySourceMediaData, UpdateEntrySourceMediaData),
    /**
  * An array of entity data objects accessible from EntrySourceMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEntrySourceMediaList extends S.Class("UpsertEntrySourceMediaList")({
    /**
  * A list of EntrySourceMedia data.
  */
    "data": S.Array(S.Union(CreateEntrySourceMediaData, UpdateEntrySourceMediaData)),
    /**
  * An array of entity data objects accessible from EntrySourceMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateEntrySourceMedia extends S.Class("UpdateEntrySourceMedia")({
    /**
  * EntrySourceMedia data.
  */
    "data": UpdateEntrySourceMediaData,
    /**
  * An array of entity data objects accessible from EntrySourceMedia.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEndorsement extends S.Class("UpsertEndorsement")({
    /**
  * Endorsement data.
  */
    "data": S.Union(CreateEndorsementData, UpdateEndorsementData),
    /**
  * An array of entity data objects accessible from Endorsement.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEndorsementList extends S.Class("UpsertEndorsementList")({
    /**
  * A list of Endorsement data.
  */
    "data": S.Array(S.Union(CreateEndorsementData, UpdateEndorsementData)),
    /**
  * An array of entity data objects accessible from Endorsement.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateEndorsement extends S.Class("UpdateEndorsement")({
    /**
  * Endorsement data.
  */
    "data": UpdateEndorsementData,
    /**
  * An array of entity data objects accessible from Endorsement.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEmailAddress extends S.Class("UpsertEmailAddress")({
    /**
  * EmailAddress data.
  */
    "data": S.Union(CreateEmailAddressData, UpdateEmailAddressData),
    /**
  * An array of entity data objects accessible from EmailAddress.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEmailAddressList extends S.Class("UpsertEmailAddressList")({
    /**
  * A list of EmailAddress data.
  */
    "data": S.Array(S.Union(CreateEmailAddressData, UpdateEmailAddressData)),
    /**
  * An array of entity data objects accessible from EmailAddress.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateEmailAddress extends S.Class("UpdateEmailAddress")({
    /**
  * EmailAddress data.
  */
    "data": UpdateEmailAddressData,
    /**
  * An array of entity data objects accessible from EmailAddress.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDwelling extends S.Class("UpsertDwelling")({
    /**
  * Dwelling data.
  */
    "data": S.Union(CreateDwellingData, UpdateDwellingData),
    /**
  * An array of entity data objects accessible from Dwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDwellingList extends S.Class("UpsertDwellingList")({
    /**
  * A list of Dwelling data.
  */
    "data": S.Array(S.Union(CreateDwellingData, UpdateDwellingData)),
    /**
  * An array of entity data objects accessible from Dwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateDwelling extends S.Class("UpdateDwelling")({
    /**
  * Dwelling data.
  */
    "data": UpdateDwellingData,
    /**
  * An array of entity data objects accessible from Dwelling.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDeductible extends S.Class("UpsertDeductible")({
    /**
  * Deductible data.
  */
    "data": S.Union(CreateDeductibleData, UpdateDeductibleData),
    /**
  * An array of entity data objects accessible from Deductible.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDeductibleList extends S.Class("UpsertDeductibleList")({
    /**
  * A list of Deductible data.
  */
    "data": S.Array(S.Union(CreateDeductibleData, UpdateDeductibleData)),
    /**
  * An array of entity data objects accessible from Deductible.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateDeductible extends S.Class("UpdateDeductible")({
    /**
  * Deductible data.
  */
    "data": UpdateDeductibleData,
    /**
  * An array of entity data objects accessible from Deductible.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertCoverage extends S.Class("UpsertCoverage")({
    /**
  * Coverage data.
  */
    "data": S.Union(CreateCoverageData, UpdateCoverageData),
    /**
  * An array of entity data objects accessible from Coverage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertCoverageList extends S.Class("UpsertCoverageList")({
    /**
  * A list of Coverage data.
  */
    "data": S.Array(S.Union(CreateCoverageData, UpdateCoverageData)),
    /**
  * An array of entity data objects accessible from Coverage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateCoverage extends S.Class("UpdateCoverage")({
    /**
  * Coverage data.
  */
    "data": UpdateCoverageData,
    /**
  * An array of entity data objects accessible from Coverage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertCoverageGroup extends S.Class("UpsertCoverageGroup")({
    /**
  * CoverageGroup data.
  */
    "data": S.Union(CreateCoverageGroupData, UpdateCoverageGroupData),
    /**
  * An array of entity data objects accessible from CoverageGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertCoverageGroupList extends S.Class("UpsertCoverageGroupList")({
    /**
  * A list of CoverageGroup data.
  */
    "data": S.Array(S.Union(CreateCoverageGroupData, UpdateCoverageGroupData)),
    /**
  * An array of entity data objects accessible from CoverageGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateCoverageGroup extends S.Class("UpdateCoverageGroup")({
    /**
  * CoverageGroup data.
  */
    "data": UpdateCoverageGroupData,
    /**
  * An array of entity data objects accessible from CoverageGroup.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertClaim extends S.Class("UpsertClaim")({
    /**
  * Claim data.
  */
    "data": S.Union(CreateClaimData, UpdateClaimData),
    /**
  * An array of entity data objects accessible from Claim.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertClaimList extends S.Class("UpsertClaimList")({
    /**
  * A list of Claim data.
  */
    "data": S.Array(S.Union(CreateClaimData, UpdateClaimData)),
    /**
  * An array of entity data objects accessible from Claim.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateClaim extends S.Class("UpdateClaim")({
    /**
  * Claim data.
  */
    "data": UpdateClaimData,
    /**
  * An array of entity data objects accessible from Claim.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertClaimDeductible extends S.Class("UpsertClaimDeductible")({
    /**
  * ClaimDeductible data.
  */
    "data": S.Union(CreateClaimDeductibleData, UpdateClaimDeductibleData),
    /**
  * An array of entity data objects accessible from ClaimDeductible.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertClaimDeductibleList extends S.Class("UpsertClaimDeductibleList")({
    /**
  * A list of ClaimDeductible data.
  */
    "data": S.Array(S.Union(CreateClaimDeductibleData, UpdateClaimDeductibleData)),
    /**
  * An array of entity data objects accessible from ClaimDeductible.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateClaimDeductible extends S.Class("UpdateClaimDeductible")({
    /**
  * ClaimDeductible data.
  */
    "data": UpdateClaimDeductibleData,
    /**
  * An array of entity data objects accessible from ClaimDeductible.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBucket extends S.Class("UpsertBucket")({
    /**
  * Bucket data.
  */
    "data": S.Union(CreateBucketData, UpdateBucketData),
    /**
  * An array of entity data objects accessible from Bucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBucketList extends S.Class("UpsertBucketList")({
    /**
  * A list of Bucket data.
  */
    "data": S.Array(S.Union(CreateBucketData, UpdateBucketData)),
    /**
  * An array of entity data objects accessible from Bucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateBucket extends S.Class("UpdateBucket")({
    /**
  * Bucket data.
  */
    "data": UpdateBucketData,
    /**
  * An array of entity data objects accessible from Bucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBucketFunding extends S.Class("UpsertBucketFunding")({
    /**
  * BucketFunding data.
  */
    "data": S.Union(CreateBucketFundingData, UpdateBucketFundingData),
    /**
  * An array of entity data objects accessible from BucketFunding.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBucketFundingList extends S.Class("UpsertBucketFundingList")({
    /**
  * A list of BucketFunding data.
  */
    "data": S.Array(S.Union(CreateBucketFundingData, UpdateBucketFundingData)),
    /**
  * An array of entity data objects accessible from BucketFunding.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateBucketFunding extends S.Class("UpdateBucketFunding")({
    /**
  * BucketFunding data.
  */
    "data": UpdateBucketFundingData,
    /**
  * An array of entity data objects accessible from BucketFunding.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBucketDefinition extends S.Class("UpsertBucketDefinition")({
    /**
  * BucketDefinition data.
  */
    "data": S.Union(CreateCoverageData, UpdateCoverageData),
    /**
  * An array of entity data objects accessible from BucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBucketDefinitionList extends S.Class("UpsertBucketDefinitionList")({
    /**
  * A list of BucketDefinition data.
  */
    "data": S.Array(S.Union(CreateCoverageData, UpdateCoverageData)),
    /**
  * An array of entity data objects accessible from BucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateBucketDefinition extends S.Class("UpdateBucketDefinition")({
    /**
  * BucketDefinition data.
  */
    "data": UpdateCoverageData,
    /**
  * An array of entity data objects accessible from BucketDefinition.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBaseSubBucket extends S.Class("UpsertBaseSubBucket")({
    /**
  * BaseSubBucket data.
  */
    "data": S.Union(CreateSubBucketData, UpdateSubBucketData),
    /**
  * An array of entity data objects accessible from BaseSubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBaseSubBucketList extends S.Class("UpsertBaseSubBucketList")({
    /**
  * A list of BaseSubBucket data.
  */
    "data": S.Array(S.Union(CreateSubBucketData, UpdateSubBucketData)),
    /**
  * An array of entity data objects accessible from BaseSubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateBaseSubBucket extends S.Class("UpdateBaseSubBucket")({
    /**
  * BaseSubBucket data.
  */
    "data": UpdateSubBucketData,
    /**
  * An array of entity data objects accessible from BaseSubBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBaseBucket extends S.Class("UpsertBaseBucket")({
    /**
  * BaseBucket data.
  */
    "data": S.Union(CreateBucketData, UpdateBucketData),
    /**
  * An array of entity data objects accessible from BaseBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBaseBucketList extends S.Class("UpsertBaseBucketList")({
    /**
  * A list of BaseBucket data.
  */
    "data": S.Array(S.Union(CreateBucketData, UpdateBucketData)),
    /**
  * An array of entity data objects accessible from BaseBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateBaseBucket extends S.Class("UpdateBaseBucket")({
    /**
  * BaseBucket data.
  */
    "data": UpdateBucketData,
    /**
  * An array of entity data objects accessible from BaseBucket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAsset extends S.Class("UpsertAsset")({
    /**
  * Asset data.
  */
    "data": S.Union(CreateDwellingData, UpdateDwellingData),
    /**
  * An array of entity data objects accessible from Asset.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAssetList extends S.Class("UpsertAssetList")({
    /**
  * A list of Asset data.
  */
    "data": S.Array(S.Union(CreateDwellingData, UpdateDwellingData)),
    /**
  * An array of entity data objects accessible from Asset.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAsset extends S.Class("UpdateAsset")({
    /**
  * Asset data.
  */
    "data": UpdateDwellingData,
    /**
  * An array of entity data objects accessible from Asset.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAddress extends S.Class("UpsertAddress")({
    /**
  * Address data.
  */
    "data": S.Union(CreateAddressData, UpdateAddressData),
    /**
  * An array of entity data objects accessible from Address.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAddressList extends S.Class("UpsertAddressList")({
    /**
  * A list of Address data.
  */
    "data": S.Array(S.Union(CreateAddressData, UpdateAddressData)),
    /**
  * An array of entity data objects accessible from Address.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAddress extends S.Class("UpdateAddress")({
    /**
  * Address data.
  */
    "data": UpdateAddressData,
    /**
  * An array of entity data objects accessible from Address.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAccount extends S.Class("UpdateAccount")({
    /**
  * Account data.
  */
    "data": UpdateAccountData,
    /**
  * An array of entity data objects accessible from Account.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAccountProvider extends S.Class("UpsertAccountProvider")({
    /**
  * AccountProvider data.
  */
    "data": S.Union(CreateAccountProviderData, UpdateAccountProviderData),
    /**
  * An array of entity data objects accessible from AccountProvider.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAccountProviderList extends S.Class("UpsertAccountProviderList")({
    /**
  * A list of AccountProvider data.
  */
    "data": S.Array(S.Union(CreateAccountProviderData, UpdateAccountProviderData)),
    /**
  * An array of entity data objects accessible from AccountProvider.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAccountProvider extends S.Class("UpdateAccountProvider")({
    /**
  * AccountProvider data.
  */
    "data": UpdateAccountProviderData,
    /**
  * An array of entity data objects accessible from AccountProvider.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAccountProviderContact extends S.Class("UpsertAccountProviderContact")({
    /**
  * AccountProviderContact data.
  */
    "data": S.Union(CreateAccountProviderContactData, UpdateAccountProviderContactData),
    /**
  * An array of entity data objects accessible from AccountProviderContact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAccountProviderContactList extends S.Class("UpsertAccountProviderContactList")({
    /**
  * A list of AccountProviderContact data.
  */
    "data": S.Array(S.Union(CreateAccountProviderContactData, UpdateAccountProviderContactData)),
    /**
  * An array of entity data objects accessible from AccountProviderContact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAccountProviderContact extends S.Class("UpdateAccountProviderContact")({
    /**
  * AccountProviderContact data.
  */
    "data": UpdateAccountProviderContactData,
    /**
  * An array of entity data objects accessible from AccountProviderContact.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAccountInvite extends S.Class("UpsertAccountInvite")({
    /**
  * AccountInvite data.
  */
    "data": S.Union(CreateAccountInviteData, UpdateAccountInviteData),
    /**
  * An array of entity data objects accessible from AccountInvite.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAccountInviteList extends S.Class("UpsertAccountInviteList")({
    /**
  * A list of AccountInvite data.
  */
    "data": S.Array(S.Union(CreateAccountInviteData, UpdateAccountInviteData)),
    /**
  * An array of entity data objects accessible from AccountInvite.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAccountInvite extends S.Class("UpdateAccountInvite")({
    /**
  * AccountInvite data.
  */
    "data": UpdateAccountInviteData,
    /**
  * An array of entity data objects accessible from AccountInvite.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertWarranty extends S.Class("UpsertWarranty")({
    /**
  * Warranty data.
  */
    "data": S.Union(CreateWarrantyData, UpdateWarrantyData),
    /**
  * An array of entity data objects accessible from Warranty.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertWarrantyList extends S.Class("UpsertWarrantyList")({
    /**
  * A list of Warranty data.
  */
    "data": S.Array(S.Union(CreateWarrantyData, UpdateWarrantyData)),
    /**
  * An array of entity data objects accessible from Warranty.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateWarranty extends S.Class("UpdateWarranty")({
    /**
  * Warranty data.
  */
    "data": UpdateWarrantyData,
    /**
  * An array of entity data objects accessible from Warranty.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertUserManual extends S.Class("UpsertUserManual")({
    /**
  * UserManual data.
  */
    "data": S.Union(CreateUserManualData, UpdateUserManualData),
    /**
  * An array of entity data objects accessible from UserManual.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertUserManualList extends S.Class("UpsertUserManualList")({
    /**
  * A list of UserManual data.
  */
    "data": S.Array(S.Union(CreateUserManualData, UpdateUserManualData)),
    /**
  * An array of entity data objects accessible from UserManual.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateUserManual extends S.Class("UpdateUserManual")({
    /**
  * UserManual data.
  */
    "data": UpdateUserManualData,
    /**
  * An array of entity data objects accessible from UserManual.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertScopeOfLoss extends S.Class("UpsertScopeOfLoss")({
    /**
  * ScopeOfLoss data.
  */
    "data": S.Union(CreateScopeOfLossData, UpdateScopeOfLossData),
    /**
  * An array of entity data objects accessible from ScopeOfLoss.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertScopeOfLossList extends S.Class("UpsertScopeOfLossList")({
    /**
  * A list of ScopeOfLoss data.
  */
    "data": S.Array(S.Union(CreateScopeOfLossData, UpdateScopeOfLossData)),
    /**
  * An array of entity data objects accessible from ScopeOfLoss.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateScopeOfLoss extends S.Class("UpdateScopeOfLoss")({
    /**
  * ScopeOfLoss data.
  */
    "data": UpdateScopeOfLossData,
    /**
  * An array of entity data objects accessible from ScopeOfLoss.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertRentRoll extends S.Class("UpsertRentRoll")({
    /**
  * RentRoll data.
  */
    "data": S.Union(CreateRentRollData, UpdateRentRollData),
    /**
  * An array of entity data objects accessible from RentRoll.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertRentRollList extends S.Class("UpsertRentRollList")({
    /**
  * A list of RentRoll data.
  */
    "data": S.Array(S.Union(CreateRentRollData, UpdateRentRollData)),
    /**
  * An array of entity data objects accessible from RentRoll.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateRentRoll extends S.Class("UpdateRentRoll")({
    /**
  * RentRoll data.
  */
    "data": UpdateRentRollData,
    /**
  * An array of entity data objects accessible from RentRoll.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertProductSpec extends S.Class("UpsertProductSpec")({
    /**
  * ProductSpec data.
  */
    "data": S.Union(CreateProductSpecData, UpdateProductSpecData),
    /**
  * An array of entity data objects accessible from ProductSpec.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertProductSpecList extends S.Class("UpsertProductSpecList")({
    /**
  * A list of ProductSpec data.
  */
    "data": S.Array(S.Union(CreateProductSpecData, UpdateProductSpecData)),
    /**
  * An array of entity data objects accessible from ProductSpec.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateProductSpec extends S.Class("UpdateProductSpec")({
    /**
  * ProductSpec data.
  */
    "data": UpdateProductSpecData,
    /**
  * An array of entity data objects accessible from ProductSpec.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPolicyJacket extends S.Class("UpsertPolicyJacket")({
    /**
  * PolicyJacket data.
  */
    "data": S.Union(CreatePolicyJacketData, UpdatePolicyJacketData),
    /**
  * An array of entity data objects accessible from PolicyJacket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPolicyJacketList extends S.Class("UpsertPolicyJacketList")({
    /**
  * A list of PolicyJacket data.
  */
    "data": S.Array(S.Union(CreatePolicyJacketData, UpdatePolicyJacketData)),
    /**
  * An array of entity data objects accessible from PolicyJacket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdatePolicyJacket extends S.Class("UpdatePolicyJacket")({
    /**
  * PolicyJacket data.
  */
    "data": UpdatePolicyJacketData,
    /**
  * An array of entity data objects accessible from PolicyJacket.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPoliceReport extends S.Class("UpsertPoliceReport")({
    /**
  * PoliceReport data.
  */
    "data": S.Union(CreatePoliceReportData, UpdatePoliceReportData),
    /**
  * An array of entity data objects accessible from PoliceReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPoliceReportList extends S.Class("UpsertPoliceReportList")({
    /**
  * A list of PoliceReport data.
  */
    "data": S.Array(S.Union(CreatePoliceReportData, UpdatePoliceReportData)),
    /**
  * An array of entity data objects accessible from PoliceReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdatePoliceReport extends S.Class("UpdatePoliceReport")({
    /**
  * PoliceReport data.
  */
    "data": UpdatePoliceReportData,
    /**
  * An array of entity data objects accessible from PoliceReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPermit extends S.Class("UpsertPermit")({
    /**
  * Permit data.
  */
    "data": S.Union(CreatePermitData, UpdatePermitData),
    /**
  * An array of entity data objects accessible from Permit.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPermitList extends S.Class("UpsertPermitList")({
    /**
  * A list of Permit data.
  */
    "data": S.Array(S.Union(CreatePermitData, UpdatePermitData)),
    /**
  * An array of entity data objects accessible from Permit.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdatePermit extends S.Class("UpdatePermit")({
    /**
  * Permit data.
  */
    "data": UpdatePermitData,
    /**
  * An array of entity data objects accessible from Permit.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPayment extends S.Class("UpsertPayment")({
    /**
  * Payment data.
  */
    "data": S.Union(CreatePaymentData, UpdatePaymentData),
    /**
  * An array of entity data objects accessible from Payment.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPaymentList extends S.Class("UpsertPaymentList")({
    /**
  * A list of Payment data.
  */
    "data": S.Array(S.Union(CreatePaymentData, UpdatePaymentData)),
    /**
  * An array of entity data objects accessible from Payment.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdatePayment extends S.Class("UpdatePayment")({
    /**
  * Payment data.
  */
    "data": UpdatePaymentData,
    /**
  * An array of entity data objects accessible from Payment.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertParamedicReport extends S.Class("UpsertParamedicReport")({
    /**
  * ParamedicReport data.
  */
    "data": S.Union(CreateParamedicReportData, UpdateParamedicReportData),
    /**
  * An array of entity data objects accessible from ParamedicReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertParamedicReportList extends S.Class("UpsertParamedicReportList")({
    /**
  * A list of ParamedicReport data.
  */
    "data": S.Array(S.Union(CreateParamedicReportData, UpdateParamedicReportData)),
    /**
  * An array of entity data objects accessible from ParamedicReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateParamedicReport extends S.Class("UpdateParamedicReport")({
    /**
  * ParamedicReport data.
  */
    "data": UpdateParamedicReportData,
    /**
  * An array of entity data objects accessible from ParamedicReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertInvoice extends S.Class("UpsertInvoice")({
    /**
  * Invoice data.
  */
    "data": S.Union(CreateInvoiceData, UpdateInvoiceData),
    /**
  * An array of entity data objects accessible from Invoice.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertInvoiceList extends S.Class("UpsertInvoiceList")({
    /**
  * A list of Invoice data.
  */
    "data": S.Array(S.Union(CreateInvoiceData, UpdateInvoiceData)),
    /**
  * An array of entity data objects accessible from Invoice.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateInvoice extends S.Class("UpdateInvoice")({
    /**
  * Invoice data.
  */
    "data": UpdateInvoiceData,
    /**
  * An array of entity data objects accessible from Invoice.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertIncidentReport extends S.Class("UpsertIncidentReport")({
    /**
  * IncidentReport data.
  */
    "data": S.Union(CreateIncidentReportData, UpdateIncidentReportData),
    /**
  * An array of entity data objects accessible from IncidentReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertIncidentReportList extends S.Class("UpsertIncidentReportList")({
    /**
  * A list of IncidentReport data.
  */
    "data": S.Array(S.Union(CreateIncidentReportData, UpdateIncidentReportData)),
    /**
  * An array of entity data objects accessible from IncidentReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateIncidentReport extends S.Class("UpdateIncidentReport")({
    /**
  * IncidentReport data.
  */
    "data": UpdateIncidentReportData,
    /**
  * An array of entity data objects accessible from IncidentReport.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertFunding extends S.Class("UpsertFunding")({
    /**
  * Funding data.
  */
    "data": S.Union(CreateFundingData, UpdateFundingData),
    /**
  * An array of entity data objects accessible from Funding.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertFundingList extends S.Class("UpsertFundingList")({
    /**
  * A list of Funding data.
  */
    "data": S.Array(S.Union(CreateFundingData, UpdateFundingData)),
    /**
  * An array of entity data objects accessible from Funding.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateFunding extends S.Class("UpdateFunding")({
    /**
  * Funding data.
  */
    "data": UpdateFundingData,
    /**
  * An array of entity data objects accessible from Funding.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEstimate extends S.Class("UpsertEstimate")({
    /**
  * Estimate data.
  */
    "data": S.Union(CreateEstimateData, UpdateEstimateData),
    /**
  * An array of entity data objects accessible from Estimate.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEstimateList extends S.Class("UpsertEstimateList")({
    /**
  * A list of Estimate data.
  */
    "data": S.Array(S.Union(CreateEstimateData, UpdateEstimateData)),
    /**
  * An array of entity data objects accessible from Estimate.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateEstimate extends S.Class("UpdateEstimate")({
    /**
  * Estimate data.
  */
    "data": UpdateEstimateData,
    /**
  * An array of entity data objects accessible from Estimate.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDocument extends S.Class("UpsertDocument")({
    /**
  * Document data.
  */
    "data": S.Union(CreateChangeOrderData, CreateEstimateData, CreateInvoiceData, CreatePaymentData, CreateAssetAppraisalData, CreateAppraisalData, CreateFundingData, CreateIncidentReportData, CreatePoliceReportData, CreateParamedicReportData, CreateContractData, CreateRentRollData, CreatePermitData, CreateBlueprintData, CreateDeclarationsPageData, CreatePolicyJacketData, CreateScopeOfLossData, CreateDeliveryPaperworkData, CreateProductSpecData, CreateUserManualData, CreateWarrantyData, CreateDeedData, UpdateChangeOrderData, UpdateEstimateData, UpdateInvoiceData, UpdatePaymentData, UpdateAssetAppraisalData, UpdateAppraisalData, UpdateFundingData, UpdateIncidentReportData, UpdatePoliceReportData, UpdateParamedicReportData, UpdateContractData, UpdateRentRollData, UpdatePermitData, UpdateBlueprintData, UpdateDeclarationsPageData, UpdatePolicyJacketData, UpdateScopeOfLossData, UpdateDeliveryPaperworkData, UpdateProductSpecData, UpdateUserManualData, UpdateWarrantyData, UpdateDeedData),
    /**
  * An array of entity data objects accessible from Document.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDocumentList extends S.Class("UpsertDocumentList")({
    /**
  * A list of Document data.
  */
    "data": S.Array(S.Union(CreateChangeOrderData, CreateEstimateData, CreateInvoiceData, CreatePaymentData, CreateAssetAppraisalData, CreateAppraisalData, CreateFundingData, CreateIncidentReportData, CreatePoliceReportData, CreateParamedicReportData, CreateContractData, CreateRentRollData, CreatePermitData, CreateBlueprintData, CreateDeclarationsPageData, CreatePolicyJacketData, CreateScopeOfLossData, CreateDeliveryPaperworkData, CreateProductSpecData, CreateUserManualData, CreateWarrantyData, CreateDeedData, UpdateChangeOrderData, UpdateEstimateData, UpdateInvoiceData, UpdatePaymentData, UpdateAssetAppraisalData, UpdateAppraisalData, UpdateFundingData, UpdateIncidentReportData, UpdatePoliceReportData, UpdateParamedicReportData, UpdateContractData, UpdateRentRollData, UpdatePermitData, UpdateBlueprintData, UpdateDeclarationsPageData, UpdatePolicyJacketData, UpdateScopeOfLossData, UpdateDeliveryPaperworkData, UpdateProductSpecData, UpdateUserManualData, UpdateWarrantyData, UpdateDeedData)),
    /**
  * An array of entity data objects accessible from Document.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateDocument extends S.Class("UpdateDocument")({
    /**
  * Document data.
  */
    "data": S.Union(UpdateChangeOrderData, UpdateEstimateData, UpdateInvoiceData, UpdatePaymentData, UpdateAssetAppraisalData, UpdateAppraisalData, UpdateFundingData, UpdateIncidentReportData, UpdatePoliceReportData, UpdateParamedicReportData, UpdateContractData, UpdateRentRollData, UpdatePermitData, UpdateBlueprintData, UpdateDeclarationsPageData, UpdatePolicyJacketData, UpdateScopeOfLossData, UpdateDeliveryPaperworkData, UpdateProductSpecData, UpdateUserManualData, UpdateWarrantyData, UpdateDeedData),
    /**
  * An array of entity data objects accessible from Document.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDeliveryPaperwork extends S.Class("UpsertDeliveryPaperwork")({
    /**
  * DeliveryPaperwork data.
  */
    "data": S.Union(CreateDeliveryPaperworkData, UpdateDeliveryPaperworkData),
    /**
  * An array of entity data objects accessible from DeliveryPaperwork.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDeliveryPaperworkList extends S.Class("UpsertDeliveryPaperworkList")({
    /**
  * A list of DeliveryPaperwork data.
  */
    "data": S.Array(S.Union(CreateDeliveryPaperworkData, UpdateDeliveryPaperworkData)),
    /**
  * An array of entity data objects accessible from DeliveryPaperwork.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateDeliveryPaperwork extends S.Class("UpdateDeliveryPaperwork")({
    /**
  * DeliveryPaperwork data.
  */
    "data": UpdateDeliveryPaperworkData,
    /**
  * An array of entity data objects accessible from DeliveryPaperwork.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDeed extends S.Class("UpsertDeed")({
    /**
  * Deed data.
  */
    "data": S.Union(CreateDeedData, UpdateDeedData),
    /**
  * An array of entity data objects accessible from Deed.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDeedList extends S.Class("UpsertDeedList")({
    /**
  * A list of Deed data.
  */
    "data": S.Array(S.Union(CreateDeedData, UpdateDeedData)),
    /**
  * An array of entity data objects accessible from Deed.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateDeed extends S.Class("UpdateDeed")({
    /**
  * Deed data.
  */
    "data": UpdateDeedData,
    /**
  * An array of entity data objects accessible from Deed.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDeclarationsPage extends S.Class("UpsertDeclarationsPage")({
    /**
  * DeclarationsPage data.
  */
    "data": S.Union(CreateDeclarationsPageData, UpdateDeclarationsPageData),
    /**
  * An array of entity data objects accessible from DeclarationsPage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertDeclarationsPageList extends S.Class("UpsertDeclarationsPageList")({
    /**
  * A list of DeclarationsPage data.
  */
    "data": S.Array(S.Union(CreateDeclarationsPageData, UpdateDeclarationsPageData)),
    /**
  * An array of entity data objects accessible from DeclarationsPage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateDeclarationsPage extends S.Class("UpdateDeclarationsPage")({
    /**
  * DeclarationsPage data.
  */
    "data": UpdateDeclarationsPageData,
    /**
  * An array of entity data objects accessible from DeclarationsPage.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertContract extends S.Class("UpsertContract")({
    /**
  * Contract data.
  */
    "data": S.Union(CreateContractData, UpdateContractData),
    /**
  * An array of entity data objects accessible from Contract.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertContractList extends S.Class("UpsertContractList")({
    /**
  * A list of Contract data.
  */
    "data": S.Array(S.Union(CreateContractData, UpdateContractData)),
    /**
  * An array of entity data objects accessible from Contract.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateContract extends S.Class("UpdateContract")({
    /**
  * Contract data.
  */
    "data": UpdateContractData,
    /**
  * An array of entity data objects accessible from Contract.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertChangeOrder extends S.Class("UpsertChangeOrder")({
    /**
  * ChangeOrder data.
  */
    "data": S.Union(CreateChangeOrderData, UpdateChangeOrderData),
    /**
  * An array of entity data objects accessible from ChangeOrder.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertChangeOrderList extends S.Class("UpsertChangeOrderList")({
    /**
  * A list of ChangeOrder data.
  */
    "data": S.Array(S.Union(CreateChangeOrderData, UpdateChangeOrderData)),
    /**
  * An array of entity data objects accessible from ChangeOrder.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateChangeOrder extends S.Class("UpdateChangeOrder")({
    /**
  * ChangeOrder data.
  */
    "data": UpdateChangeOrderData,
    /**
  * An array of entity data objects accessible from ChangeOrder.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBlueprint extends S.Class("UpsertBlueprint")({
    /**
  * Blueprint data.
  */
    "data": S.Union(CreateBlueprintData, UpdateBlueprintData),
    /**
  * An array of entity data objects accessible from Blueprint.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBlueprintList extends S.Class("UpsertBlueprintList")({
    /**
  * A list of Blueprint data.
  */
    "data": S.Array(S.Union(CreateBlueprintData, UpdateBlueprintData)),
    /**
  * An array of entity data objects accessible from Blueprint.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateBlueprint extends S.Class("UpdateBlueprint")({
    /**
  * Blueprint data.
  */
    "data": UpdateBlueprintData,
    /**
  * An array of entity data objects accessible from Blueprint.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAssetAppraisal extends S.Class("UpsertAssetAppraisal")({
    /**
  * AssetAppraisal data.
  */
    "data": S.Union(CreateAssetAppraisalData, UpdateAssetAppraisalData),
    /**
  * An array of entity data objects accessible from AssetAppraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAssetAppraisalList extends S.Class("UpsertAssetAppraisalList")({
    /**
  * A list of AssetAppraisal data.
  */
    "data": S.Array(S.Union(CreateAssetAppraisalData, UpdateAssetAppraisalData)),
    /**
  * An array of entity data objects accessible from AssetAppraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAssetAppraisal extends S.Class("UpdateAssetAppraisal")({
    /**
  * AssetAppraisal data.
  */
    "data": UpdateAssetAppraisalData,
    /**
  * An array of entity data objects accessible from AssetAppraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAppraisal extends S.Class("UpsertAppraisal")({
    /**
  * Appraisal data.
  */
    "data": S.Union(CreateAppraisalData, UpdateAppraisalData),
    /**
  * An array of entity data objects accessible from Appraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAppraisalList extends S.Class("UpsertAppraisalList")({
    /**
  * A list of Appraisal data.
  */
    "data": S.Array(S.Union(CreateAppraisalData, UpdateAppraisalData)),
    /**
  * An array of entity data objects accessible from Appraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAppraisal extends S.Class("UpdateAppraisal")({
    /**
  * Appraisal data.
  */
    "data": UpdateAppraisalData,
    /**
  * An array of entity data objects accessible from Appraisal.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPaymentLine extends S.Class("UpsertPaymentLine")({
    /**
  * PaymentLine data.
  */
    "data": S.Union(CreateItemPaymentData, CreateItemImpactPaymentData, CreateServiceTaskPaymentData, UpdateItemPaymentData, UpdateItemImpactPaymentData, UpdateServiceTaskPaymentData),
    /**
  * An array of entity data objects accessible from PaymentLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertPaymentLineList extends S.Class("UpsertPaymentLineList")({
    /**
  * A list of PaymentLine data.
  */
    "data": S.Array(S.Union(CreateItemPaymentData, CreateItemImpactPaymentData, CreateServiceTaskPaymentData, UpdateItemPaymentData, UpdateItemImpactPaymentData, UpdateServiceTaskPaymentData)),
    /**
  * An array of entity data objects accessible from PaymentLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdatePaymentLine extends S.Class("UpdatePaymentLine")({
    /**
  * PaymentLine data.
  */
    "data": S.Union(UpdateItemPaymentData, UpdateItemImpactPaymentData, UpdateServiceTaskPaymentData),
    /**
  * An array of entity data objects accessible from PaymentLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertInvoiceLine extends S.Class("UpsertInvoiceLine")({
    /**
  * InvoiceLine data.
  */
    "data": S.Union(CreateItemInvoiceData, CreateItemImpactInvoiceData, CreateServiceTaskInvoiceData, UpdateItemInvoiceData, UpdateItemImpactInvoiceData, UpdateServiceTaskInvoiceData),
    /**
  * An array of entity data objects accessible from InvoiceLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertInvoiceLineList extends S.Class("UpsertInvoiceLineList")({
    /**
  * A list of InvoiceLine data.
  */
    "data": S.Array(S.Union(CreateItemInvoiceData, CreateItemImpactInvoiceData, CreateServiceTaskInvoiceData, UpdateItemInvoiceData, UpdateItemImpactInvoiceData, UpdateServiceTaskInvoiceData)),
    /**
  * An array of entity data objects accessible from InvoiceLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateInvoiceLine extends S.Class("UpdateInvoiceLine")({
    /**
  * InvoiceLine data.
  */
    "data": S.Union(UpdateItemInvoiceData, UpdateItemImpactInvoiceData, UpdateServiceTaskInvoiceData),
    /**
  * An array of entity data objects accessible from InvoiceLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEstimateLine extends S.Class("UpsertEstimateLine")({
    /**
  * EstimateLine data.
  */
    "data": S.Union(CreateItemEstimateData, CreateItemImpactEstimateData, CreateServiceTaskEstimateData, UpdateItemEstimateData, UpdateItemImpactEstimateData, UpdateServiceTaskEstimateData),
    /**
  * An array of entity data objects accessible from EstimateLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertEstimateLineList extends S.Class("UpsertEstimateLineList")({
    /**
  * A list of EstimateLine data.
  */
    "data": S.Array(S.Union(CreateItemEstimateData, CreateItemImpactEstimateData, CreateServiceTaskEstimateData, UpdateItemEstimateData, UpdateItemImpactEstimateData, UpdateServiceTaskEstimateData)),
    /**
  * An array of entity data objects accessible from EstimateLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateEstimateLine extends S.Class("UpdateEstimateLine")({
    /**
  * EstimateLine data.
  */
    "data": S.Union(UpdateItemEstimateData, UpdateItemImpactEstimateData, UpdateServiceTaskEstimateData),
    /**
  * An array of entity data objects accessible from EstimateLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertChangeOrderLine extends S.Class("UpsertChangeOrderLine")({
    /**
  * ChangeOrderLine data.
  */
    "data": S.Union(CreateItemChangeOrderData, CreateItemImpactChangeOrderData, CreateServiceTaskChangeOrderData, UpdateItemChangeOrderData, UpdateItemImpactChangeOrderData, UpdateServiceTaskChangeOrderData),
    /**
  * An array of entity data objects accessible from ChangeOrderLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertChangeOrderLineList extends S.Class("UpsertChangeOrderLineList")({
    /**
  * A list of ChangeOrderLine data.
  */
    "data": S.Array(S.Union(CreateItemChangeOrderData, CreateItemImpactChangeOrderData, CreateServiceTaskChangeOrderData, UpdateItemChangeOrderData, UpdateItemImpactChangeOrderData, UpdateServiceTaskChangeOrderData)),
    /**
  * An array of entity data objects accessible from ChangeOrderLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateChangeOrderLine extends S.Class("UpdateChangeOrderLine")({
    /**
  * ChangeOrderLine data.
  */
    "data": S.Union(UpdateItemChangeOrderData, UpdateItemImpactChangeOrderData, UpdateServiceTaskChangeOrderData),
    /**
  * An array of entity data objects accessible from ChangeOrderLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAppraisalLine extends S.Class("UpsertAppraisalLine")({
    /**
  * AppraisalLine data.
  */
    "data": S.Union(CreateItemAppraisalData, UpdateItemAppraisalData),
    /**
  * An array of entity data objects accessible from AppraisalLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertAppraisalLineList extends S.Class("UpsertAppraisalLineList")({
    /**
  * A list of AppraisalLine data.
  */
    "data": S.Array(S.Union(CreateItemAppraisalData, UpdateItemAppraisalData)),
    /**
  * An array of entity data objects accessible from AppraisalLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpdateAppraisalLine extends S.Class("UpdateAppraisalLine")({
    /**
  * AppraisalLine data.
  */
    "data": UpdateItemAppraisalData,
    /**
  * An array of entity data objects accessible from AppraisalLine.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBaseEntity extends S.Class("UpsertBaseEntity")({
    /**
  * BaseEntity data.
  */
    "data": S.Union(CreateChangeOrderData, CreateEstimateData, CreateInvoiceData, CreatePaymentData, CreateAssetAppraisalData, CreateAppraisalData, CreateFundingData, CreateIncidentReportData, CreatePoliceReportData, CreateParamedicReportData, CreateContractData, CreateRentRollData, CreatePermitData, CreateBlueprintData, CreateDeclarationsPageData, CreatePolicyJacketData, CreateScopeOfLossData, CreateDeliveryPaperworkData, CreateProductSpecData, CreateUserManualData, CreateWarrantyData, CreateDeedData, CreateItemChangeOrderData, CreateItemImpactChangeOrderData, CreateServiceTaskChangeOrderData, CreateItemEstimateData, CreateItemImpactEstimateData, CreateServiceTaskEstimateData, CreateItemInvoiceData, CreateItemImpactInvoiceData, CreateServiceTaskInvoiceData, CreateItemPaymentData, CreateItemImpactPaymentData, CreateServiceTaskPaymentData, CreateItemAppraisalData, CreateItemizableFinancialDocumentStatsData, CreateProviderData, CreateCountryData, CreateCurrencyData, CreateDepreciationModifierData, CreateDepreciationOverrideData, CreateItemTypeData, CreateDisasterData, CreatePerilData, CreateAssetAttributeTypeItemTemplateData, CreateCoverageGroupTemplateData, CreateCoverageTemplateData, CreateEndorsementTemplateData, CreateItemTemplateData, CreatePolicyTemplateData, CreateSpaceTypeItemTemplateData, CreateSubCoverageTemplateData, CreateSubmissionTrackTemplateData, CreateAssetAttributeClassData, CreateAssetAttributeTypeData, CreateAssetTypeData, CreateBucketClassData, CreateBucketTypeData, CreateDocumentClassData, CreateDocumentTypeData, CreateIncidentClassData, CreateIncidentTypeData, CreateItemCategoryData, CreateItemClassData, CreateServiceCategoryData, CreateServiceClassData, CreateServiceTypeData, CreateSpaceGroupTypeData, CreateSpaceCategoryData, CreateSpaceClassData, CreateSpaceTypeData, CreateAccountInviteData, CreateAccountProviderContactData, CreateUserData, CreateAccountProviderData, CreateAccountData, CreateAddressData, CreateDwellingData, CreateAuthProfileData, CreateBaseBucketMetadataData, CreateEntryData, CreateBucketData, CreateSubBucketData, CreateBaseSubBucketMetadataData, CreateCoverageData, CreateBucketFundingData, CreateClaimDeductibleData, CreatePolicyTermData, CreateClaimData, CreateCoverageGroupData, CreateDeductibleData, CreateEmailAddressData, CreateEndorsementData, CreateEntrySourceMediaData, CreateEntrySourceMetadataData, CreateItemImpactData, CreateItemData, CreateServiceTaskData, CreateServiceData, CreateThirdPartyImpactData, CreateFileProcessData, CreateFileData, CreateProjectImpactData, CreateIncidentImpactData, CreateIncidentData, CreateItemMediaSuggestionData, CreateItemProductSuggestionData, CreateMediaData, CreatePhoneNumberData, CreatePolicyData, CreateProjectMediaData, CreateSpaceGroupData, CreateSpaceData, CreateSubCoverageData, CreateThirdPartyDwellingData, CreateThirdPartyIndividualData, CreateUserAccountRoleData, UpdateChangeOrderData, UpdateEstimateData, UpdateInvoiceData, UpdatePaymentData, UpdateAssetAppraisalData, UpdateAppraisalData, UpdateFundingData, UpdateIncidentReportData, UpdatePoliceReportData, UpdateParamedicReportData, UpdateContractData, UpdateRentRollData, UpdatePermitData, UpdateBlueprintData, UpdateDeclarationsPageData, UpdatePolicyJacketData, UpdateScopeOfLossData, UpdateDeliveryPaperworkData, UpdateProductSpecData, UpdateUserManualData, UpdateWarrantyData, UpdateDeedData, UpdateItemChangeOrderData, UpdateItemImpactChangeOrderData, UpdateServiceTaskChangeOrderData, UpdateItemEstimateData, UpdateItemImpactEstimateData, UpdateServiceTaskEstimateData, UpdateItemInvoiceData, UpdateItemImpactInvoiceData, UpdateServiceTaskInvoiceData, UpdateItemPaymentData, UpdateItemImpactPaymentData, UpdateServiceTaskPaymentData, UpdateItemAppraisalData, UpdateItemizableFinancialDocumentStatsData, UpdateProviderData, UpdateCountryData, UpdateCurrencyData, UpdateDepreciationModifierData, UpdateDepreciationOverrideData, UpdateItemTypeData, UpdateDisasterData, UpdatePerilData, UpdateAssetAttributeTypeItemTemplateData, UpdateCoverageGroupTemplateData, UpdateCoverageTemplateData, UpdateEndorsementTemplateData, UpdateItemTemplateData, UpdatePolicyTemplateData, UpdateSpaceTypeItemTemplateData, UpdateSubCoverageTemplateData, UpdateSubmissionTrackTemplateData, UpdateAssetAttributeClassData, UpdateAssetAttributeTypeData, UpdateAssetTypeData, UpdateBucketClassData, UpdateBucketTypeData, UpdateDocumentClassData, UpdateDocumentTypeData, UpdateIncidentClassData, UpdateIncidentTypeData, UpdateItemCategoryData, UpdateItemClassData, UpdateServiceCategoryData, UpdateServiceClassData, UpdateServiceTypeData, UpdateSpaceGroupTypeData, UpdateSpaceCategoryData, UpdateSpaceClassData, UpdateSpaceTypeData, UpdateAccountInviteData, UpdateAccountProviderContactData, UpdateUserData, UpdateAccountProviderData, UpdateAccountData, UpdateAddressData, UpdateDwellingData, UpdateAuthProfileData, UpdateBaseBucketMetadataData, UpdateEntryData, UpdateBucketData, UpdateSubBucketData, UpdateBaseSubBucketMetadataData, UpdateCoverageData, UpdateBucketFundingData, UpdateClaimDeductibleData, UpdatePolicyTermData, UpdateClaimData, UpdateCoverageGroupData, UpdateDeductibleData, UpdateEmailAddressData, UpdateEndorsementData, UpdateEntrySourceMediaData, UpdateEntrySourceMetadataData, UpdateItemImpactData, UpdateItemData, UpdateServiceTaskData, UpdateServiceData, UpdateThirdPartyImpactData, UpdateFileProcessData, UpdateFileData, UpdateProjectImpactData, UpdateIncidentImpactData, UpdateIncidentData, UpdateItemMediaSuggestionData, UpdateItemProductSuggestionData, UpdateMediaData, UpdatePhoneNumberData, UpdatePolicyData, UpdateProjectMediaData, UpdateSpaceGroupData, UpdateSpaceData, UpdateSubCoverageData, UpdateThirdPartyDwellingData, UpdateThirdPartyIndividualData, UpdateUserAccountRoleData),
    /**
  * An array of entity data objects accessible from BaseEntity.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UpsertBaseEntityList extends S.Class("UpsertBaseEntityList")({
    /**
  * A list of BaseEntity data.
  */
    "data": S.Array(S.Union(CreateChangeOrderData, CreateEstimateData, CreateInvoiceData, CreatePaymentData, CreateAssetAppraisalData, CreateAppraisalData, CreateFundingData, CreateIncidentReportData, CreatePoliceReportData, CreateParamedicReportData, CreateContractData, CreateRentRollData, CreatePermitData, CreateBlueprintData, CreateDeclarationsPageData, CreatePolicyJacketData, CreateScopeOfLossData, CreateDeliveryPaperworkData, CreateProductSpecData, CreateUserManualData, CreateWarrantyData, CreateDeedData, CreateItemChangeOrderData, CreateItemImpactChangeOrderData, CreateServiceTaskChangeOrderData, CreateItemEstimateData, CreateItemImpactEstimateData, CreateServiceTaskEstimateData, CreateItemInvoiceData, CreateItemImpactInvoiceData, CreateServiceTaskInvoiceData, CreateItemPaymentData, CreateItemImpactPaymentData, CreateServiceTaskPaymentData, CreateItemAppraisalData, CreateItemizableFinancialDocumentStatsData, CreateProviderData, CreateCountryData, CreateCurrencyData, CreateDepreciationModifierData, CreateDepreciationOverrideData, CreateItemTypeData, CreateDisasterData, CreatePerilData, CreateAssetAttributeTypeItemTemplateData, CreateCoverageGroupTemplateData, CreateCoverageTemplateData, CreateEndorsementTemplateData, CreateItemTemplateData, CreatePolicyTemplateData, CreateSpaceTypeItemTemplateData, CreateSubCoverageTemplateData, CreateSubmissionTrackTemplateData, CreateAssetAttributeClassData, CreateAssetAttributeTypeData, CreateAssetTypeData, CreateBucketClassData, CreateBucketTypeData, CreateDocumentClassData, CreateDocumentTypeData, CreateIncidentClassData, CreateIncidentTypeData, CreateItemCategoryData, CreateItemClassData, CreateServiceCategoryData, CreateServiceClassData, CreateServiceTypeData, CreateSpaceGroupTypeData, CreateSpaceCategoryData, CreateSpaceClassData, CreateSpaceTypeData, CreateAccountInviteData, CreateAccountProviderContactData, CreateUserData, CreateAccountProviderData, CreateAccountData, CreateAddressData, CreateDwellingData, CreateAuthProfileData, CreateBaseBucketMetadataData, CreateEntryData, CreateBucketData, CreateSubBucketData, CreateBaseSubBucketMetadataData, CreateCoverageData, CreateBucketFundingData, CreateClaimDeductibleData, CreatePolicyTermData, CreateClaimData, CreateCoverageGroupData, CreateDeductibleData, CreateEmailAddressData, CreateEndorsementData, CreateEntrySourceMediaData, CreateEntrySourceMetadataData, CreateItemImpactData, CreateItemData, CreateServiceTaskData, CreateServiceData, CreateThirdPartyImpactData, CreateFileProcessData, CreateFileData, CreateProjectImpactData, CreateIncidentImpactData, CreateIncidentData, CreateItemMediaSuggestionData, CreateItemProductSuggestionData, CreateMediaData, CreatePhoneNumberData, CreatePolicyData, CreateProjectMediaData, CreateSpaceGroupData, CreateSpaceData, CreateSubCoverageData, CreateThirdPartyDwellingData, CreateThirdPartyIndividualData, CreateUserAccountRoleData, UpdateChangeOrderData, UpdateEstimateData, UpdateInvoiceData, UpdatePaymentData, UpdateAssetAppraisalData, UpdateAppraisalData, UpdateFundingData, UpdateIncidentReportData, UpdatePoliceReportData, UpdateParamedicReportData, UpdateContractData, UpdateRentRollData, UpdatePermitData, UpdateBlueprintData, UpdateDeclarationsPageData, UpdatePolicyJacketData, UpdateScopeOfLossData, UpdateDeliveryPaperworkData, UpdateProductSpecData, UpdateUserManualData, UpdateWarrantyData, UpdateDeedData, UpdateItemChangeOrderData, UpdateItemImpactChangeOrderData, UpdateServiceTaskChangeOrderData, UpdateItemEstimateData, UpdateItemImpactEstimateData, UpdateServiceTaskEstimateData, UpdateItemInvoiceData, UpdateItemImpactInvoiceData, UpdateServiceTaskInvoiceData, UpdateItemPaymentData, UpdateItemImpactPaymentData, UpdateServiceTaskPaymentData, UpdateItemAppraisalData, UpdateItemizableFinancialDocumentStatsData, UpdateProviderData, UpdateCountryData, UpdateCurrencyData, UpdateDepreciationModifierData, UpdateDepreciationOverrideData, UpdateItemTypeData, UpdateDisasterData, UpdatePerilData, UpdateAssetAttributeTypeItemTemplateData, UpdateCoverageGroupTemplateData, UpdateCoverageTemplateData, UpdateEndorsementTemplateData, UpdateItemTemplateData, UpdatePolicyTemplateData, UpdateSpaceTypeItemTemplateData, UpdateSubCoverageTemplateData, UpdateSubmissionTrackTemplateData, UpdateAssetAttributeClassData, UpdateAssetAttributeTypeData, UpdateAssetTypeData, UpdateBucketClassData, UpdateBucketTypeData, UpdateDocumentClassData, UpdateDocumentTypeData, UpdateIncidentClassData, UpdateIncidentTypeData, UpdateItemCategoryData, UpdateItemClassData, UpdateServiceCategoryData, UpdateServiceClassData, UpdateServiceTypeData, UpdateSpaceGroupTypeData, UpdateSpaceCategoryData, UpdateSpaceClassData, UpdateSpaceTypeData, UpdateAccountInviteData, UpdateAccountProviderContactData, UpdateUserData, UpdateAccountProviderData, UpdateAccountData, UpdateAddressData, UpdateDwellingData, UpdateAuthProfileData, UpdateBaseBucketMetadataData, UpdateEntryData, UpdateBucketData, UpdateSubBucketData, UpdateBaseSubBucketMetadataData, UpdateCoverageData, UpdateBucketFundingData, UpdateClaimDeductibleData, UpdatePolicyTermData, UpdateClaimData, UpdateCoverageGroupData, UpdateDeductibleData, UpdateEmailAddressData, UpdateEndorsementData, UpdateEntrySourceMediaData, UpdateEntrySourceMetadataData, UpdateItemImpactData, UpdateItemData, UpdateServiceTaskData, UpdateServiceData, UpdateThirdPartyImpactData, UpdateFileProcessData, UpdateFileData, UpdateProjectImpactData, UpdateIncidentImpactData, UpdateIncidentData, UpdateItemMediaSuggestionData, UpdateItemProductSuggestionData, UpdateMediaData, UpdatePhoneNumberData, UpdatePolicyData, UpdateProjectMediaData, UpdateSpaceGroupData, UpdateSpaceData, UpdateSubCoverageData, UpdateThirdPartyDwellingData, UpdateThirdPartyIndividualData, UpdateUserAccountRoleData)),
    /**
  * An array of entity data objects accessible from BaseEntity.
  */
    "included": S.optionalWith(S.Array(JsonApiUpsertIncludedItem), { nullable: true })
}) {
}
export class UserAccountRoleControllerCreateUserAccountRole201 extends S.Union(UserAccountRoleList, UserAccountRole) {
}
export class ThirdPartyControllerCreateThirdParty201 extends S.Union(ThirdPartyList, ThirdParty) {
}
export class ThirdPartyIndividualControllerCreateThirdPartyIndividual201 extends S.Union(ThirdPartyIndividualList, ThirdPartyIndividual) {
}
export class ThirdPartyImpactControllerCreateThirdPartyImpact201 extends S.Union(ThirdPartyImpactList, ThirdPartyImpact) {
}
export class ThirdPartyDwellingControllerCreateThirdPartyDwelling201 extends S.Union(ThirdPartyDwellingList, ThirdPartyDwelling) {
}
export class SubCoverageControllerCreateSubCoverage201 extends S.Union(SubCoverageList, SubCoverage) {
}
export class SubBucketControllerCreateSubBucket201 extends S.Union(SubBucketList, SubBucket) {
}
export class SubBucketDefinitionControllerCreateSubBucketDefinition201 extends S.Union(SubBucketDefinitionList, SubBucketDefinition) {
}
export class SpaceControllerCreateSpace201 extends S.Union(SpaceList, Space) {
}
export class SpaceGroupControllerCreateSpaceGroup201 extends S.Union(SpaceGroupList, SpaceGroup) {
}
export class ServiceControllerCreateService201 extends S.Union(ServiceList, Service) {
}
export class ServiceTaskControllerCreateServiceTask201 extends S.Union(ServiceTaskList, ServiceTask) {
}
export class ProjectControllerCreateProject201 extends S.Union(ProjectList, Project) {
}
export class ProjectMediaControllerCreateProjectMedia201 extends S.Union(ProjectMediaList, ProjectMedia) {
}
export class ProjectImpactControllerCreateProjectImpact201 extends S.Union(ProjectImpactList, ProjectImpact) {
}
export class PolicyControllerCreatePolicy201 extends S.Union(PolicyList, Policy) {
}
export class AssetControllerCreateAsset201 extends S.Union(AssetList, Asset) {
}
export class PolicyTermControllerCreatePolicyTerm201 extends S.Union(PolicyTermList, PolicyTerm) {
}
export class BucketDefinitionControllerCreateBucketDefinition201 extends S.Union(BucketDefinitionList, BucketDefinition) {
}
export class PhoneNumberControllerCreatePhoneNumber201 extends S.Union(PhoneNumberList, PhoneNumber) {
}
export class MediaControllerCreateMedia201 extends S.Union(MediaList, Media) {
}
export class ItemControllerCreateItem201 extends S.Union(ItemList, Item) {
}
export class ItemProductSuggestionControllerCreateItemProductSuggestion201 extends S.Union(ItemProductSuggestionList, ItemProductSuggestion) {
}
export class ItemMediaSuggestionControllerCreateItemMediaSuggestion201 extends S.Union(ItemMediaSuggestionList, ItemMediaSuggestion) {
}
export class ItemImpactControllerCreateItemImpact201 extends S.Union(ItemImpactList, ItemImpact) {
}
export class IncidentControllerCreateIncident201 extends S.Union(IncidentList, Incident) {
}
export class IncidentImpactControllerCreateIncidentImpact201 extends S.Union(IncidentImpactList, IncidentImpact) {
}
export class FundingSourceControllerCreateFundingSource201 extends S.Union(FundingSourceList, FundingSource) {
}
export class BaseBucketControllerCreateBaseBucket201 extends S.Union(BaseBucketList, BaseBucket) {
}
export class EntryControllerCreateEntry201 extends S.Union(EntryList, Entry) {
}
export class EntrySourceControllerCreateEntrySource201 extends S.Union(EntrySourceList, EntrySource) {
}
export class EntrySourceMediaControllerCreateEntrySourceMedia201 extends S.Union(EntrySourceMediaList, EntrySourceMedia) {
}
export class EndorsementControllerCreateEndorsement201 extends S.Union(EndorsementList, Endorsement) {
}
export class CoverageControllerCreateCoverage201 extends S.Union(CoverageList, Coverage) {
}
export class EmailAddressControllerCreateEmailAddress201 extends S.Union(EmailAddressList, EmailAddress) {
}
export class DwellingControllerCreateDwelling201 extends S.Union(DwellingList, Dwelling) {
}
export class DeductibleControllerCreateDeductible201 extends S.Union(DeductibleList, Deductible) {
}
export class CoverageGroupControllerCreateCoverageGroup201 extends S.Union(CoverageGroupList, CoverageGroup) {
}
export class ClaimControllerCreateClaim201 extends S.Union(ClaimList, Claim) {
}
export class ClaimDeductibleControllerCreateClaimDeductible201 extends S.Union(ClaimDeductibleList, ClaimDeductible) {
}
export class BucketControllerCreateBucket201 extends S.Union(BucketList, Bucket) {
}
export class BucketFundingControllerCreateBucketFunding201 extends S.Union(BucketFundingList, BucketFunding) {
}
export class FundingControllerCreateFunding201 extends S.Union(FundingList, Funding) {
}
export class BaseSubBucketControllerCreateBaseSubBucket201 extends S.Union(BaseSubBucketList, BaseSubBucket) {
}
export class AddressControllerCreateAddress201 extends S.Union(AddressList, Address) {
}
export class AccountProviderControllerCreateAccountProvider201 extends S.Union(AccountProviderList, AccountProvider) {
}
export class AccountProviderContactControllerCreateAccountProviderContact201 extends S.Union(AccountProviderContactList, AccountProviderContact) {
}
export class AccountInviteControllerCreateAccountInvite201 extends S.Union(AccountInviteList, AccountInvite) {
}
export class WarrantyControllerCreateWarranty201 extends S.Union(WarrantyList, Warranty) {
}
export class UserManualControllerCreateUserManual201 extends S.Union(UserManualList, UserManual) {
}
export class ScopeOfLossControllerCreateScopeOfLoss201 extends S.Union(ScopeOfLossList, ScopeOfLoss) {
}
export class RentRollControllerCreateRentRoll201 extends S.Union(RentRollList, RentRoll) {
}
export class ProductSpecControllerCreateProductSpec201 extends S.Union(ProductSpecList, ProductSpec) {
}
export class PolicyJacketControllerCreatePolicyJacket201 extends S.Union(PolicyJacketList, PolicyJacket) {
}
export class PoliceReportControllerCreatePoliceReport201 extends S.Union(PoliceReportList, PoliceReport) {
}
export class PermitControllerCreatePermit201 extends S.Union(PermitList, Permit) {
}
export class PaymentControllerCreatePayment201 extends S.Union(PaymentList, Payment) {
}
export class ParamedicReportControllerCreateParamedicReport201 extends S.Union(ParamedicReportList, ParamedicReport) {
}
export class InvoiceControllerCreateInvoice201 extends S.Union(InvoiceList, Invoice) {
}
export class IncidentReportControllerCreateIncidentReport201 extends S.Union(IncidentReportList, IncidentReport) {
}
export class EstimateControllerCreateEstimate201 extends S.Union(EstimateList, Estimate) {
}
export class DocumentControllerCreateDocument201 extends S.Union(DocumentList, Document) {
}
export class DeliveryPaperworkControllerCreateDeliveryPaperwork201 extends S.Union(DeliveryPaperworkList, DeliveryPaperwork) {
}
export class DeedControllerCreateDeed201 extends S.Union(DeedList, Deed) {
}
export class DeclarationsPageControllerCreateDeclarationsPage201 extends S.Union(DeclarationsPageList, DeclarationsPage) {
}
export class ContractControllerCreateContract201 extends S.Union(ContractList, Contract) {
}
export class ChangeOrderControllerCreateChangeOrder201 extends S.Union(ChangeOrderList, ChangeOrder) {
}
export class BlueprintControllerCreateBlueprint201 extends S.Union(BlueprintList, Blueprint) {
}
export class AssetAppraisalControllerCreateAssetAppraisal201 extends S.Union(AssetAppraisalList, AssetAppraisal) {
}
export class AppraisalControllerCreateAppraisal201 extends S.Union(AppraisalList, Appraisal) {
}
export class PaymentLineControllerCreatePaymentLine201 extends S.Union(PaymentLineList, PaymentLine) {
}
export class InvoiceLineControllerCreateInvoiceLine201 extends S.Union(InvoiceLineList, InvoiceLine) {
}
export class EstimateLineControllerCreateEstimateLine201 extends S.Union(EstimateLineList, EstimateLine) {
}
export class ChangeOrderLineControllerCreateChangeOrderLine201 extends S.Union(ChangeOrderLineList, ChangeOrderLine) {
}
export class AppraisalLineControllerCreateAppraisalLine201 extends S.Union(AppraisalLineList, AppraisalLine) {
}
export class UserAccountRoleControllerCreateUserAccountRoleRequest extends S.Union(UpsertUserAccountRole, UpsertUserAccountRoleList) {
}
export class ThirdPartyControllerCreateThirdPartyRequest extends S.Union(UpsertThirdParty, UpsertThirdPartyList) {
}
export class ThirdPartyIndividualControllerCreateThirdPartyIndividualRequest extends S.Union(UpsertThirdPartyIndividual, UpsertThirdPartyIndividualList) {
}
export class ThirdPartyImpactControllerCreateThirdPartyImpactRequest extends S.Union(UpsertThirdPartyImpact, UpsertThirdPartyImpactList) {
}
export class ThirdPartyDwellingControllerCreateThirdPartyDwellingRequest extends S.Union(UpsertThirdPartyDwelling, UpsertThirdPartyDwellingList) {
}
export class SubCoverageControllerCreateSubCoverageRequest extends S.Union(UpsertSubCoverage, UpsertSubCoverageList) {
}
export class SubBucketControllerCreateSubBucketRequest extends S.Union(UpsertSubBucket, UpsertSubBucketList) {
}
export class SubBucketDefinitionControllerCreateSubBucketDefinitionRequest extends S.Union(UpsertSubBucketDefinition, UpsertSubBucketDefinitionList) {
}
export class SpaceControllerCreateSpaceRequest extends S.Union(UpsertSpace, UpsertSpaceList) {
}
export class SpaceGroupControllerCreateSpaceGroupRequest extends S.Union(UpsertSpaceGroup, UpsertSpaceGroupList) {
}
export class ServiceControllerCreateServiceRequest extends S.Union(UpsertService, UpsertServiceList) {
}
export class ServiceTaskControllerCreateServiceTaskRequest extends S.Union(UpsertServiceTask, UpsertServiceTaskList) {
}
export class ProjectControllerCreateProjectRequest extends S.Union(UpsertProject, UpsertProjectList) {
}
export class ProjectMediaControllerCreateProjectMediaRequest extends S.Union(UpsertProjectMedia, UpsertProjectMediaList) {
}
export class ProjectImpactControllerCreateProjectImpactRequest extends S.Union(UpsertProjectImpact, UpsertProjectImpactList) {
}
export class PolicyControllerCreatePolicyRequest extends S.Union(UpsertPolicy, UpsertPolicyList) {
}
export class PolicyTermControllerCreatePolicyTermRequest extends S.Union(UpsertPolicyTerm, UpsertPolicyTermList) {
}
export class PhoneNumberControllerCreatePhoneNumberRequest extends S.Union(UpsertPhoneNumber, UpsertPhoneNumberList) {
}
export class MediaControllerCreateMediaRequest extends S.Union(UpsertMedia, UpsertMediaList) {
}
export class ItemControllerCreateItemRequest extends S.Union(UpsertItem, UpsertItemList) {
}
export class ItemProductSuggestionControllerCreateItemProductSuggestionRequest extends S.Union(UpsertItemProductSuggestion, UpsertItemProductSuggestionList) {
}
export class ItemMediaSuggestionControllerCreateItemMediaSuggestionRequest extends S.Union(UpsertItemMediaSuggestion, UpsertItemMediaSuggestionList) {
}
export class ItemImpactControllerCreateItemImpactRequest extends S.Union(UpsertItemImpact, UpsertItemImpactList) {
}
export class IncidentControllerCreateIncidentRequest extends S.Union(UpsertIncident, UpsertIncidentList) {
}
export class IncidentImpactControllerCreateIncidentImpactRequest extends S.Union(UpsertIncidentImpact, UpsertIncidentImpactList) {
}
export class FundingSourceControllerCreateFundingSourceRequest extends S.Union(UpsertFundingSource, UpsertFundingSourceList) {
}
export class EntryControllerCreateEntryRequest extends S.Union(UpsertEntry, UpsertEntryList) {
}
export class EntrySourceControllerCreateEntrySourceRequest extends S.Union(UpsertEntrySource, UpsertEntrySourceList) {
}
export class EntrySourceMediaControllerCreateEntrySourceMediaRequest extends S.Union(UpsertEntrySourceMedia, UpsertEntrySourceMediaList) {
}
export class EndorsementControllerCreateEndorsementRequest extends S.Union(UpsertEndorsement, UpsertEndorsementList) {
}
export class EmailAddressControllerCreateEmailAddressRequest extends S.Union(UpsertEmailAddress, UpsertEmailAddressList) {
}
export class DwellingControllerCreateDwellingRequest extends S.Union(UpsertDwelling, UpsertDwellingList) {
}
export class DeductibleControllerCreateDeductibleRequest extends S.Union(UpsertDeductible, UpsertDeductibleList) {
}
export class CoverageControllerCreateCoverageRequest extends S.Union(UpsertCoverage, UpsertCoverageList) {
}
export class CoverageGroupControllerCreateCoverageGroupRequest extends S.Union(UpsertCoverageGroup, UpsertCoverageGroupList) {
}
export class ClaimControllerCreateClaimRequest extends S.Union(UpsertClaim, UpsertClaimList) {
}
export class ClaimDeductibleControllerCreateClaimDeductibleRequest extends S.Union(UpsertClaimDeductible, UpsertClaimDeductibleList) {
}
export class BucketControllerCreateBucketRequest extends S.Union(UpsertBucket, UpsertBucketList) {
}
export class BucketFundingControllerCreateBucketFundingRequest extends S.Union(UpsertBucketFunding, UpsertBucketFundingList) {
}
export class BucketDefinitionControllerCreateBucketDefinitionRequest extends S.Union(UpsertBucketDefinition, UpsertBucketDefinitionList) {
}
export class BaseSubBucketControllerCreateBaseSubBucketRequest extends S.Union(UpsertBaseSubBucket, UpsertBaseSubBucketList) {
}
export class BaseBucketControllerCreateBaseBucketRequest extends S.Union(UpsertBaseBucket, UpsertBaseBucketList) {
}
export class AssetControllerCreateAssetRequest extends S.Union(UpsertAsset, UpsertAssetList) {
}
export class AddressControllerCreateAddressRequest extends S.Union(UpsertAddress, UpsertAddressList) {
}
export class AccountProviderControllerCreateAccountProviderRequest extends S.Union(UpsertAccountProvider, UpsertAccountProviderList) {
}
export class AccountProviderContactControllerCreateAccountProviderContactRequest extends S.Union(UpsertAccountProviderContact, UpsertAccountProviderContactList) {
}
export class AccountInviteControllerCreateAccountInviteRequest extends S.Union(UpsertAccountInvite, UpsertAccountInviteList) {
}
export class WarrantyControllerCreateWarrantyRequest extends S.Union(UpsertWarranty, UpsertWarrantyList) {
}
export class UserManualControllerCreateUserManualRequest extends S.Union(UpsertUserManual, UpsertUserManualList) {
}
export class ScopeOfLossControllerCreateScopeOfLossRequest extends S.Union(UpsertScopeOfLoss, UpsertScopeOfLossList) {
}
export class RentRollControllerCreateRentRollRequest extends S.Union(UpsertRentRoll, UpsertRentRollList) {
}
export class ProductSpecControllerCreateProductSpecRequest extends S.Union(UpsertProductSpec, UpsertProductSpecList) {
}
export class PolicyJacketControllerCreatePolicyJacketRequest extends S.Union(UpsertPolicyJacket, UpsertPolicyJacketList) {
}
export class PoliceReportControllerCreatePoliceReportRequest extends S.Union(UpsertPoliceReport, UpsertPoliceReportList) {
}
export class PermitControllerCreatePermitRequest extends S.Union(UpsertPermit, UpsertPermitList) {
}
export class PaymentControllerCreatePaymentRequest extends S.Union(UpsertPayment, UpsertPaymentList) {
}
export class ParamedicReportControllerCreateParamedicReportRequest extends S.Union(UpsertParamedicReport, UpsertParamedicReportList) {
}
export class InvoiceControllerCreateInvoiceRequest extends S.Union(UpsertInvoice, UpsertInvoiceList) {
}
export class IncidentReportControllerCreateIncidentReportRequest extends S.Union(UpsertIncidentReport, UpsertIncidentReportList) {
}
export class FundingControllerCreateFundingRequest extends S.Union(UpsertFunding, UpsertFundingList) {
}
export class EstimateControllerCreateEstimateRequest extends S.Union(UpsertEstimate, UpsertEstimateList) {
}
export class DocumentControllerCreateDocumentRequest extends S.Union(UpsertDocument, UpsertDocumentList) {
}
export class DeliveryPaperworkControllerCreateDeliveryPaperworkRequest extends S.Union(UpsertDeliveryPaperwork, UpsertDeliveryPaperworkList) {
}
export class DeedControllerCreateDeedRequest extends S.Union(UpsertDeed, UpsertDeedList) {
}
export class DeclarationsPageControllerCreateDeclarationsPageRequest extends S.Union(UpsertDeclarationsPage, UpsertDeclarationsPageList) {
}
export class ContractControllerCreateContractRequest extends S.Union(UpsertContract, UpsertContractList) {
}
export class ChangeOrderControllerCreateChangeOrderRequest extends S.Union(UpsertChangeOrder, UpsertChangeOrderList) {
}
export class BlueprintControllerCreateBlueprintRequest extends S.Union(UpsertBlueprint, UpsertBlueprintList) {
}
export class AssetAppraisalControllerCreateAssetAppraisalRequest extends S.Union(UpsertAssetAppraisal, UpsertAssetAppraisalList) {
}
export class AppraisalControllerCreateAppraisalRequest extends S.Union(UpsertAppraisal, UpsertAppraisalList) {
}
export class PaymentLineControllerCreatePaymentLineRequest extends S.Union(UpsertPaymentLine, UpsertPaymentLineList) {
}
export class InvoiceLineControllerCreateInvoiceLineRequest extends S.Union(UpsertInvoiceLine, UpsertInvoiceLineList) {
}
export class EstimateLineControllerCreateEstimateLineRequest extends S.Union(UpsertEstimateLine, UpsertEstimateLineList) {
}
export class ChangeOrderLineControllerCreateChangeOrderLineRequest extends S.Union(UpsertChangeOrderLine, UpsertChangeOrderLineList) {
}
export class AppraisalLineControllerCreateAppraisalLineRequest extends S.Union(UpsertAppraisalLine, UpsertAppraisalLineList) {
}
export class PermissionsControllerCheckUpsertPermissionsRequest extends S.Union(UpsertBaseEntity, UpsertBaseEntityList) {
}
export { AssetList as AccountControllerGetAccountAssets200 };
export { UserControllerGetUserAccountRolesParams as AccountControllerGetAccountAssetsParams };
export { ReferencedAssetList as AccountControllerGetAccountAssetsRef200 };
export { Account as AccountControllerGetAccountById200 };
export { AccountControllerGetCurrentAccountParams as AccountControllerGetAccountByIdParams };
export { Currency as AccountControllerGetAccountDefaultCurrency200 };
export { AccountControllerGetCurrentAccountParams as AccountControllerGetAccountDefaultCurrencyParams };
export { ReferencedCurrency as AccountControllerGetAccountDefaultCurrencyRef200 };
export { User as AccountControllerGetAccountOwner200 };
export { AccountControllerGetCurrentAccountParams as AccountControllerGetAccountOwnerParams };
export { ReferencedUser as AccountControllerGetAccountOwnerRef200 };
export { ProjectList as AccountControllerGetAccountProjects200 };
export { UserControllerGetUserAccountRolesParams as AccountControllerGetAccountProjectsParams };
export { ReferencedProjectList as AccountControllerGetAccountProjectsRef200 };
export { UserAccountRoleList as AccountControllerGetAccountUserRoles200 };
export { UserControllerGetUserAccountRolesParams as AccountControllerGetAccountUserRolesParams };
export { ReferencedUserAccountRoleList as AccountControllerGetAccountUserRolesRef200 };
export { Account as AccountControllerGetCurrentAccount200 };
export { ReferencedCurrency as AccountControllerPatchAccountDefaultCurrencyRef200 };
export { ReferencedUpdateCurrency as AccountControllerPatchAccountDefaultCurrencyRefRequest };
export { ReferencedUser as AccountControllerPatchAccountOwnerRef200 };
export { ReferencedUpdateUser as AccountControllerPatchAccountOwnerRefRequest };
export { Account as AccountControllerUpdateAccountById200 };
export { AccountControllerGetCurrentAccountParams as AccountControllerUpdateAccountByIdParams };
export { UpdateAccount as AccountControllerUpdateAccountByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountInviteControllerCreateAccountInviteParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountInviteControllerDeleteAccountInviteByIdParams };
export { NullableUser as AccountInviteControllerGetAccountInviteAcceptedBy200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountInviteControllerGetAccountInviteAcceptedByParams };
export { NullableReferencedUser as AccountInviteControllerGetAccountInviteAcceptedByRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountInviteControllerGetAccountInviteAcceptedByRefParams };
export { Account as AccountInviteControllerGetAccountInviteAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountInviteControllerGetAccountInviteAccountParams };
export { ReferencedAccount as AccountInviteControllerGetAccountInviteAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountInviteControllerGetAccountInviteAccountRefParams };
export { AccountInvite as AccountInviteControllerGetAccountInviteById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountInviteControllerGetAccountInviteByIdParams };
export { User as AccountInviteControllerGetAccountInviteInvitedBy200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountInviteControllerGetAccountInviteInvitedByParams };
export { ReferencedUser as AccountInviteControllerGetAccountInviteInvitedByRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountInviteControllerGetAccountInviteInvitedByRefParams };
export { AccountInviteList as AccountInviteControllerGetAccountInviteList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AccountInviteControllerGetAccountInviteListParams };
export { ReferencedAccount as AccountInviteControllerPatchAccountInviteAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountInviteControllerPatchAccountInviteAccountRefParams };
export { ReferencedUpdateAccount as AccountInviteControllerPatchAccountInviteAccountRefRequest };
export { AccountInvite as AccountInviteControllerUpdateAccountInviteById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountInviteControllerUpdateAccountInviteByIdParams };
export { UpdateAccountInvite as AccountInviteControllerUpdateAccountInviteByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderContactControllerCreateAccountProviderContactParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerDeleteAccountProviderContactByIdParams };
export { AccountProviderContact as AccountProviderContactControllerGetAccountProviderContactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderContactControllerGetAccountProviderContactByIdParams };
export { AccountProviderContactList as AccountProviderContactControllerGetAccountProviderContactList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AccountProviderContactControllerGetAccountProviderContactListParams };
export { NullableEmailAddress as AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddress200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressParams };
export { NullableReferencedEmailAddress as AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressRefParams };
export { NullablePhoneNumber as AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumber200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberParams };
export { NullableReferencedPhoneNumber as AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberRefParams };
export { AccountProvider as AccountProviderContactControllerGetAccountProviderContactProvider200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderContactControllerGetAccountProviderContactProviderParams };
export { ReferencedAccountProvider as AccountProviderContactControllerGetAccountProviderContactProviderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerGetAccountProviderContactProviderRefParams };
export { NullableUser as AccountProviderContactControllerGetAccountProviderContactUser200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderContactControllerGetAccountProviderContactUserParams };
export { NullableReferencedUser as AccountProviderContactControllerGetAccountProviderContactUserRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerGetAccountProviderContactUserRefParams };
export { NullableReferencedEmailAddress as AccountProviderContactControllerPatchAccountProviderContactPrimaryEmailAddressRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerPatchAccountProviderContactPrimaryEmailAddressRefParams };
export { NullableReferencedUpdateEmailAddress as AccountProviderContactControllerPatchAccountProviderContactPrimaryEmailAddressRefRequest };
export { NullableReferencedPhoneNumber as AccountProviderContactControllerPatchAccountProviderContactPrimaryPhoneNumberRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerPatchAccountProviderContactPrimaryPhoneNumberRefParams };
export { NullableReferencedUpdatePhoneNumber as AccountProviderContactControllerPatchAccountProviderContactPrimaryPhoneNumberRefRequest };
export { ReferencedAccountProvider as AccountProviderContactControllerPatchAccountProviderContactProviderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerPatchAccountProviderContactProviderRefParams };
export { ReferencedUpdateAccountProvider as AccountProviderContactControllerPatchAccountProviderContactProviderRefRequest };
export { NullableReferencedUser as AccountProviderContactControllerPatchAccountProviderContactUserRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderContactControllerPatchAccountProviderContactUserRefParams };
export { NullableReferencedUpdateUser as AccountProviderContactControllerPatchAccountProviderContactUserRefRequest };
export { AccountProviderContact as AccountProviderContactControllerUpdateAccountProviderContactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderContactControllerUpdateAccountProviderContactByIdParams };
export { UpdateAccountProviderContact as AccountProviderContactControllerUpdateAccountProviderContactByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderControllerCreateAccountProviderParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderControllerDeleteAccountProviderByIdParams };
export { Account as AccountProviderControllerGetAccountProviderAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderControllerGetAccountProviderAccountParams };
export { ReferencedAccount as AccountProviderControllerGetAccountProviderAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderControllerGetAccountProviderAccountRefParams };
export { AccountProvider as AccountProviderControllerGetAccountProviderById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderControllerGetAccountProviderByIdParams };
export { AccountProviderList as AccountProviderControllerGetAccountProviderList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AccountProviderControllerGetAccountProviderListParams };
export { NullableProvider as AccountProviderControllerGetAccountProviderProvider200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderControllerGetAccountProviderProviderParams };
export { NullableReferencedProvider as AccountProviderControllerGetAccountProviderProviderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderControllerGetAccountProviderProviderRefParams };
export { ReferencedAccount as AccountProviderControllerPatchAccountProviderAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderControllerPatchAccountProviderAccountRefParams };
export { ReferencedUpdateAccount as AccountProviderControllerPatchAccountProviderAccountRefRequest };
export { NullableReferencedProvider as AccountProviderControllerPatchAccountProviderProviderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AccountProviderControllerPatchAccountProviderProviderRefParams };
export { NullableReferencedUpdateProvider as AccountProviderControllerPatchAccountProviderProviderRefRequest };
export { AccountProvider as AccountProviderControllerUpdateAccountProviderById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AccountProviderControllerUpdateAccountProviderByIdParams };
export { UpdateAccountProvider as AccountProviderControllerUpdateAccountProviderByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AddressControllerCreateAddressParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AddressControllerDeleteAddressByIdParams };
export { Account as AddressControllerGetAddressAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AddressControllerGetAddressAccountParams };
export { ReferencedAccount as AddressControllerGetAddressAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AddressControllerGetAddressAccountRefParams };
export { Address as AddressControllerGetAddressById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AddressControllerGetAddressByIdParams };
export { Country as AddressControllerGetAddressCountry200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AddressControllerGetAddressCountryParams };
export { ReferencedCountry as AddressControllerGetAddressCountryRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AddressControllerGetAddressCountryRefParams };
export { AddressList as AddressControllerGetAddressList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AddressControllerGetAddressListParams };
export { ReferencedAccount as AddressControllerPatchAddressAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AddressControllerPatchAddressAccountRefParams };
export { ReferencedUpdateAccount as AddressControllerPatchAddressAccountRefRequest };
export { ReferencedCountry as AddressControllerPatchAddressCountryRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AddressControllerPatchAddressCountryRefParams };
export { ReferencedUpdateCountry as AddressControllerPatchAddressCountryRefRequest };
export { Address as AddressControllerUpdateAddressById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AddressControllerUpdateAddressByIdParams };
export { UpdateAddress as AddressControllerUpdateAddressByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalControllerCreateAppraisalParams };
export { ReferencedAssetList as AppraisalControllerDeleteAppraisalAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerDeleteAppraisalAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as AppraisalControllerDeleteAppraisalAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerDeleteAppraisalByIdParams };
export { ReferencedProjectList as AppraisalControllerDeleteAppraisalProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerDeleteAppraisalProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as AppraisalControllerDeleteAppraisalProjectsRefRequest };
export { ReferencedSpaceList as AppraisalControllerDeleteAppraisalSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerDeleteAppraisalSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as AppraisalControllerDeleteAppraisalSpacesRefRequest };
export { Account as AppraisalControllerGetAppraisalAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalControllerGetAppraisalAccountParams };
export { ReferencedAccount as AppraisalControllerGetAppraisalAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalAccountRefParams };
export { AssetList as AppraisalControllerGetAppraisalAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AppraisalControllerGetAppraisalAssetsParams };
export { ReferencedAssetList as AppraisalControllerGetAppraisalAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalAssetsRefParams };
export { Appraisal as AppraisalControllerGetAppraisalById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalControllerGetAppraisalByIdParams };
export { Currency as AppraisalControllerGetAppraisalCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalControllerGetAppraisalCurrencyParams };
export { ReferencedCurrency as AppraisalControllerGetAppraisalCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalCurrencyRefParams };
export { DocumentType as AppraisalControllerGetAppraisalDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalControllerGetAppraisalDocumentTypeParams };
export { ReferencedDocumentType as AppraisalControllerGetAppraisalDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalDocumentTypeRefParams };
export { NullableFile as AppraisalControllerGetAppraisalFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalControllerGetAppraisalFileParams };
export { NullableReferencedFile as AppraisalControllerGetAppraisalFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalFileRefParams };
export { AppraisalLineList as AppraisalControllerGetAppraisalLines200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AppraisalControllerGetAppraisalLinesParams };
export { ReferencedAppraisalLineList as AppraisalControllerGetAppraisalLinesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalLinesRefParams };
export { AppraisalList as AppraisalControllerGetAppraisalList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AppraisalControllerGetAppraisalListParams };
export { ProjectList as AppraisalControllerGetAppraisalProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AppraisalControllerGetAppraisalProjectsParams };
export { ReferencedProjectList as AppraisalControllerGetAppraisalProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalProjectsRefParams };
export { SpaceList as AppraisalControllerGetAppraisalSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AppraisalControllerGetAppraisalSpacesParams };
export { ReferencedSpaceList as AppraisalControllerGetAppraisalSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalSpacesRefParams };
export { BaseEntityList as AppraisalControllerGetAppraisalSubjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AppraisalControllerGetAppraisalSubjectsParams };
export { ReferencedBaseEntityList as AppraisalControllerGetAppraisalSubjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalSubjectsRefParams };
export { NullableAccountProvider as AppraisalControllerGetAppraisalVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalControllerGetAppraisalVendorParams };
export { NullableReferencedAccountProvider as AppraisalControllerGetAppraisalVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerGetAppraisalVendorRefParams };
export { ReferencedAccount as AppraisalControllerPatchAppraisalAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPatchAppraisalAccountRefParams };
export { ReferencedUpdateAccount as AppraisalControllerPatchAppraisalAccountRefRequest };
export { ReferencedAssetList as AppraisalControllerPatchAppraisalAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPatchAppraisalAssetsRefParams };
export { ReferencedUpdateAssetList as AppraisalControllerPatchAppraisalAssetsRefRequest };
export { ReferencedCurrency as AppraisalControllerPatchAppraisalCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPatchAppraisalCurrencyRefParams };
export { ReferencedUpdateCurrency as AppraisalControllerPatchAppraisalCurrencyRefRequest };
export { NullableReferencedFile as AppraisalControllerPatchAppraisalFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPatchAppraisalFileRefParams };
export { NullableReferencedUpdateFile as AppraisalControllerPatchAppraisalFileRefRequest };
export { ReferencedProjectList as AppraisalControllerPatchAppraisalProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPatchAppraisalProjectsRefParams };
export { ReferencedUpdateProjectList as AppraisalControllerPatchAppraisalProjectsRefRequest };
export { ReferencedSpaceList as AppraisalControllerPatchAppraisalSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPatchAppraisalSpacesRefParams };
export { ReferencedUpdateSpaceList as AppraisalControllerPatchAppraisalSpacesRefRequest };
export { NullableReferencedAccountProvider as AppraisalControllerPatchAppraisalVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPatchAppraisalVendorRefParams };
export { NullableReferencedUpdateAccountProvider as AppraisalControllerPatchAppraisalVendorRefRequest };
export { ReferencedAssetList as AppraisalControllerPostAppraisalAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPostAppraisalAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as AppraisalControllerPostAppraisalAssetsRefRequest };
export { ReferencedProjectList as AppraisalControllerPostAppraisalProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPostAppraisalProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as AppraisalControllerPostAppraisalProjectsRefRequest };
export { ReferencedSpaceList as AppraisalControllerPostAppraisalSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalControllerPostAppraisalSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as AppraisalControllerPostAppraisalSpacesRefRequest };
export { Appraisal as AppraisalControllerUpdateAppraisalById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalControllerUpdateAppraisalByIdParams };
export { UpdateAppraisal as AppraisalControllerUpdateAppraisalByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalLineControllerCreateAppraisalLineParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalLineControllerDeleteAppraisalLineByIdParams };
export { Appraisal as AppraisalLineControllerGetAppraisalLineAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalLineControllerGetAppraisalLineAppraisalParams };
export { ReferencedAppraisal as AppraisalLineControllerGetAppraisalLineAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalLineControllerGetAppraisalLineAppraisalRefParams };
export { AppraisalLine as AppraisalLineControllerGetAppraisalLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalLineControllerGetAppraisalLineByIdParams };
export { AppraisalLineList as AppraisalLineControllerGetAppraisalLineList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AppraisalLineControllerGetAppraisalLineListParams };
export { EntrySource as AppraisalLineControllerGetAppraisalLineSubject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalLineControllerGetAppraisalLineSubjectParams };
export { ReferencedEntrySource as AppraisalLineControllerGetAppraisalLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalLineControllerGetAppraisalLineSubjectRefParams };
export { ReferencedAppraisal as AppraisalLineControllerPatchAppraisalLineAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalLineControllerPatchAppraisalLineAppraisalRefParams };
export { ReferencedUpdateAppraisal as AppraisalLineControllerPatchAppraisalLineAppraisalRefRequest };
export { ReferencedEntrySource as AppraisalLineControllerPatchAppraisalLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AppraisalLineControllerPatchAppraisalLineSubjectRefParams };
export { ReferencedUpdateEntrySource as AppraisalLineControllerPatchAppraisalLineSubjectRefRequest };
export { AppraisalLine as AppraisalLineControllerUpdateAppraisalLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AppraisalLineControllerUpdateAppraisalLineByIdParams };
export { UpdateAppraisalLine as AppraisalLineControllerUpdateAppraisalLineByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerCreateAssetAppraisalParams };
export { ReferencedAssetList as AssetAppraisalControllerDeleteAssetAppraisalAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerDeleteAssetAppraisalAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as AssetAppraisalControllerDeleteAssetAppraisalAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerDeleteAssetAppraisalByIdParams };
export { ReferencedProjectList as AssetAppraisalControllerDeleteAssetAppraisalProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerDeleteAssetAppraisalProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as AssetAppraisalControllerDeleteAssetAppraisalProjectsRefRequest };
export { ReferencedSpaceList as AssetAppraisalControllerDeleteAssetAppraisalSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerDeleteAssetAppraisalSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as AssetAppraisalControllerDeleteAssetAppraisalSpacesRefRequest };
export { Account as AssetAppraisalControllerGetAssetAppraisalAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerGetAssetAppraisalAccountParams };
export { ReferencedAccount as AssetAppraisalControllerGetAssetAppraisalAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalAccountRefParams };
export { Asset as AssetAppraisalControllerGetAssetAppraisalAsset200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerGetAssetAppraisalAssetParams };
export { ReferencedAsset as AssetAppraisalControllerGetAssetAppraisalAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalAssetRefParams };
export { AssetList as AssetAppraisalControllerGetAssetAppraisalAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AssetAppraisalControllerGetAssetAppraisalAssetsParams };
export { ReferencedAssetList as AssetAppraisalControllerGetAssetAppraisalAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalAssetsRefParams };
export { AssetAppraisal as AssetAppraisalControllerGetAssetAppraisalById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerGetAssetAppraisalByIdParams };
export { Currency as AssetAppraisalControllerGetAssetAppraisalCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerGetAssetAppraisalCurrencyParams };
export { ReferencedCurrency as AssetAppraisalControllerGetAssetAppraisalCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalCurrencyRefParams };
export { DocumentType as AssetAppraisalControllerGetAssetAppraisalDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerGetAssetAppraisalDocumentTypeParams };
export { ReferencedDocumentType as AssetAppraisalControllerGetAssetAppraisalDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalDocumentTypeRefParams };
export { NullableFile as AssetAppraisalControllerGetAssetAppraisalFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerGetAssetAppraisalFileParams };
export { NullableReferencedFile as AssetAppraisalControllerGetAssetAppraisalFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalFileRefParams };
export { AssetAppraisalList as AssetAppraisalControllerGetAssetAppraisalList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AssetAppraisalControllerGetAssetAppraisalListParams };
export { ProjectList as AssetAppraisalControllerGetAssetAppraisalProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AssetAppraisalControllerGetAssetAppraisalProjectsParams };
export { ReferencedProjectList as AssetAppraisalControllerGetAssetAppraisalProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalProjectsRefParams };
export { SpaceList as AssetAppraisalControllerGetAssetAppraisalSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AssetAppraisalControllerGetAssetAppraisalSpacesParams };
export { ReferencedSpaceList as AssetAppraisalControllerGetAssetAppraisalSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalSpacesRefParams };
export { NullableAccountProvider as AssetAppraisalControllerGetAssetAppraisalVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerGetAssetAppraisalVendorParams };
export { NullableReferencedAccountProvider as AssetAppraisalControllerGetAssetAppraisalVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerGetAssetAppraisalVendorRefParams };
export { ReferencedAccount as AssetAppraisalControllerPatchAssetAppraisalAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPatchAssetAppraisalAccountRefParams };
export { ReferencedUpdateAccount as AssetAppraisalControllerPatchAssetAppraisalAccountRefRequest };
export { ReferencedAsset as AssetAppraisalControllerPatchAssetAppraisalAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPatchAssetAppraisalAssetRefParams };
export { ReferencedUpdateAsset as AssetAppraisalControllerPatchAssetAppraisalAssetRefRequest };
export { ReferencedAssetList as AssetAppraisalControllerPatchAssetAppraisalAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPatchAssetAppraisalAssetsRefParams };
export { ReferencedUpdateAssetList as AssetAppraisalControllerPatchAssetAppraisalAssetsRefRequest };
export { ReferencedCurrency as AssetAppraisalControllerPatchAssetAppraisalCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPatchAssetAppraisalCurrencyRefParams };
export { ReferencedUpdateCurrency as AssetAppraisalControllerPatchAssetAppraisalCurrencyRefRequest };
export { NullableReferencedFile as AssetAppraisalControllerPatchAssetAppraisalFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPatchAssetAppraisalFileRefParams };
export { NullableReferencedUpdateFile as AssetAppraisalControllerPatchAssetAppraisalFileRefRequest };
export { ReferencedProjectList as AssetAppraisalControllerPatchAssetAppraisalProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPatchAssetAppraisalProjectsRefParams };
export { ReferencedUpdateProjectList as AssetAppraisalControllerPatchAssetAppraisalProjectsRefRequest };
export { ReferencedSpaceList as AssetAppraisalControllerPatchAssetAppraisalSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPatchAssetAppraisalSpacesRefParams };
export { ReferencedUpdateSpaceList as AssetAppraisalControllerPatchAssetAppraisalSpacesRefRequest };
export { NullableReferencedAccountProvider as AssetAppraisalControllerPatchAssetAppraisalVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPatchAssetAppraisalVendorRefParams };
export { NullableReferencedUpdateAccountProvider as AssetAppraisalControllerPatchAssetAppraisalVendorRefRequest };
export { ReferencedAssetList as AssetAppraisalControllerPostAssetAppraisalAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPostAssetAppraisalAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as AssetAppraisalControllerPostAssetAppraisalAssetsRefRequest };
export { ReferencedProjectList as AssetAppraisalControllerPostAssetAppraisalProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPostAssetAppraisalProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as AssetAppraisalControllerPostAssetAppraisalProjectsRefRequest };
export { ReferencedSpaceList as AssetAppraisalControllerPostAssetAppraisalSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetAppraisalControllerPostAssetAppraisalSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as AssetAppraisalControllerPostAssetAppraisalSpacesRefRequest };
export { AssetAppraisal as AssetAppraisalControllerUpdateAssetAppraisalById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetAppraisalControllerUpdateAssetAppraisalByIdParams };
export { UpdateAssetAppraisal as AssetAppraisalControllerUpdateAssetAppraisalByIdRequest };
export { AssetTypeList as AssetAttributeClassControllerGetAssetAttributeClassAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as AssetAttributeClassControllerGetAssetAttributeClassAssetTypesParams };
export { ReferencedAssetTypeList as AssetAttributeClassControllerGetAssetAttributeClassAssetTypesRef200 };
export { AssetAttributeClass as AssetAttributeClassControllerGetAssetAttributeClassById200 };
export { AccountControllerGetCurrentAccountParams as AssetAttributeClassControllerGetAssetAttributeClassByIdParams };
export { AssetAttributeClassList as AssetAttributeClassControllerGetAssetAttributeClassList200 };
export { UserControllerGetUserAccountRolesParams as AssetAttributeClassControllerGetAssetAttributeClassListParams };
export { AssetAttributeTypeList as AssetAttributeClassControllerGetAssetAttributeClassTypes200 };
export { UserControllerGetUserAccountRolesParams as AssetAttributeClassControllerGetAssetAttributeClassTypesParams };
export { ReferencedAssetAttributeTypeList as AssetAttributeClassControllerGetAssetAttributeClassTypesRef200 };
export { AssetTypeList as AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypesParams };
export { ReferencedAssetTypeList as AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypesRef200 };
export { AssetAttributeType as AssetAttributeTypeControllerGetAssetAttributeTypeById200 };
export { AccountControllerGetCurrentAccountParams as AssetAttributeTypeControllerGetAssetAttributeTypeByIdParams };
export { AssetAttributeClassList as AssetAttributeTypeControllerGetAssetAttributeTypeClasses200 };
export { UserControllerGetUserAccountRolesParams as AssetAttributeTypeControllerGetAssetAttributeTypeClassesParams };
export { ReferencedAssetAttributeClassList as AssetAttributeTypeControllerGetAssetAttributeTypeClassesRef200 };
export { AssetAttributeTypeList as AssetAttributeTypeControllerGetAssetAttributeTypeList200 };
export { UserControllerGetUserAccountRolesParams as AssetAttributeTypeControllerGetAssetAttributeTypeListParams };
export { AssetAttributeType as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeType200 };
export { AccountControllerGetCurrentAccountParams as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeTypeParams };
export { ReferencedAssetAttributeType as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeTypeRef200 };
export { AssetAttributeTypeItemTemplate as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateById200 };
export { AccountControllerGetCurrentAccountParams as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateByIdParams };
export { ItemTemplate as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplate200 };
export { AccountControllerGetCurrentAccountParams as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplateParams };
export { ReferencedItemTemplate as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplateRef200 };
export { AssetAttributeTypeItemTemplateList as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateList200 };
export { UserControllerGetUserAccountRolesParams as AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateListParams };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetControllerCreateAssetParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerDeleteAssetByIdParams };
export { Account as AssetControllerGetAssetAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetControllerGetAssetAccountParams };
export { ReferencedAccount as AssetControllerGetAssetAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerGetAssetAccountRefParams };
export { AssetAppraisalList as AssetControllerGetAssetAppraisals200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AssetControllerGetAssetAppraisalsParams };
export { ReferencedAssetAppraisalList as AssetControllerGetAssetAppraisalsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerGetAssetAppraisalsRefParams };
export { AssetType as AssetControllerGetAssetAssetType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetControllerGetAssetAssetTypeParams };
export { ReferencedAssetType as AssetControllerGetAssetAssetTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerGetAssetAssetTypeRefParams };
export { Asset as AssetControllerGetAssetById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetControllerGetAssetByIdParams };
export { AssetList as AssetControllerGetAssetList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as AssetControllerGetAssetListParams };
export { NullableAssetAppraisal as AssetControllerGetAssetRelevantAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetControllerGetAssetRelevantAppraisalParams };
export { NullableReferencedAssetAppraisal as AssetControllerGetAssetRelevantAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerGetAssetRelevantAppraisalRefParams };
export { NullableAssetAppraisal as AssetControllerGetAssetSelectedAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetControllerGetAssetSelectedAppraisalParams };
export { NullableReferencedAssetAppraisal as AssetControllerGetAssetSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerGetAssetSelectedAppraisalRefParams };
export { ReferencedAccount as AssetControllerPatchAssetAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerPatchAssetAccountRefParams };
export { ReferencedUpdateAccount as AssetControllerPatchAssetAccountRefRequest };
export { ReferencedAssetType as AssetControllerPatchAssetAssetTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerPatchAssetAssetTypeRefParams };
export { ReferencedUpdateAssetType as AssetControllerPatchAssetAssetTypeRefRequest };
export { NullableReferencedAssetAppraisal as AssetControllerPatchAssetSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as AssetControllerPatchAssetSelectedAppraisalRefParams };
export { NullableReferencedUpdateAssetAppraisal as AssetControllerPatchAssetSelectedAppraisalRefRequest };
export { Asset as AssetControllerUpdateAssetById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as AssetControllerUpdateAssetByIdParams };
export { UpdateAsset as AssetControllerUpdateAssetByIdRequest };
export { AssetType as AssetTypeControllerGetAssetTypeById200 };
export { AccountControllerGetCurrentAccountParams as AssetTypeControllerGetAssetTypeByIdParams };
export { AssetTypeList as AssetTypeControllerGetAssetTypeList200 };
export { UserControllerGetUserAccountRolesParams as AssetTypeControllerGetAssetTypeListParams };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketControllerCreateBaseBucketParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerDeleteBaseBucketByIdParams };
export { Account as BaseBucketControllerGetBaseBucketAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketControllerGetBaseBucketAccountParams };
export { ReferencedAccount as BaseBucketControllerGetBaseBucketAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerGetBaseBucketAccountRefParams };
export { BaseBucket as BaseBucketControllerGetBaseBucketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketControllerGetBaseBucketByIdParams };
export { EntryList as BaseBucketControllerGetBaseBucketEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BaseBucketControllerGetBaseBucketEntriesParams };
export { ReferencedEntryList as BaseBucketControllerGetBaseBucketEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerGetBaseBucketEntriesRefParams };
export { BucketFundingList as BaseBucketControllerGetBaseBucketFundings200 };
export { FundingSource as BaseBucketControllerGetBaseBucketFundingSource200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketControllerGetBaseBucketFundingSourceParams };
export { ReferencedFundingSource as BaseBucketControllerGetBaseBucketFundingSourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerGetBaseBucketFundingSourceRefParams };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BaseBucketControllerGetBaseBucketFundingsParams };
export { ReferencedBucketFundingList as BaseBucketControllerGetBaseBucketFundingsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerGetBaseBucketFundingsRefParams };
export { BaseBucketList as BaseBucketControllerGetBaseBucketList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BaseBucketControllerGetBaseBucketListParams };
export { BaseBucketMetadata as BaseBucketControllerGetBaseBucketMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketControllerGetBaseBucketMetadataParams };
export { ReferencedBaseBucketMetadata as BaseBucketControllerGetBaseBucketMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerGetBaseBucketMetadataRefParams };
export { Project as BaseBucketControllerGetBaseBucketProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketControllerGetBaseBucketProjectParams };
export { ReferencedProject as BaseBucketControllerGetBaseBucketProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerGetBaseBucketProjectRefParams };
export { BaseSubBucketList as BaseBucketControllerGetBaseBucketSubBuckets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BaseBucketControllerGetBaseBucketSubBucketsParams };
export { ReferencedBaseSubBucketList as BaseBucketControllerGetBaseBucketSubBucketsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerGetBaseBucketSubBucketsRefParams };
export { NullableBucketType as BaseBucketControllerGetBaseBucketType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketControllerGetBaseBucketTypeParams };
export { NullableReferencedBucketType as BaseBucketControllerGetBaseBucketTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerGetBaseBucketTypeRefParams };
export { ReferencedFundingSource as BaseBucketControllerPatchBaseBucketFundingSourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerPatchBaseBucketFundingSourceRefParams };
export { ReferencedUpdateFundingSource as BaseBucketControllerPatchBaseBucketFundingSourceRefRequest };
export { NullableReferencedBucketType as BaseBucketControllerPatchBaseBucketTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketControllerPatchBaseBucketTypeRefParams };
export { NullableReferencedUpdateBucketType as BaseBucketControllerPatchBaseBucketTypeRefRequest };
export { BaseBucket as BaseBucketControllerUpdateBaseBucketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketControllerUpdateBaseBucketByIdParams };
export { UpdateBaseBucket as BaseBucketControllerUpdateBaseBucketByIdRequest };
export { BaseBucketMetadata as BaseBucketMetadataControllerGetBaseBucketMetadataById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketMetadataControllerGetBaseBucketMetadataByIdParams };
export { BaseBucketMetadataList as BaseBucketMetadataControllerGetBaseBucketMetadataList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BaseBucketMetadataControllerGetBaseBucketMetadataListParams };
export { BaseBucket as BaseBucketMetadataControllerGetBaseBucketMetadataObject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseBucketMetadataControllerGetBaseBucketMetadataObjectParams };
export { ReferencedBaseBucket as BaseBucketMetadataControllerGetBaseBucketMetadataObjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseBucketMetadataControllerGetBaseBucketMetadataObjectRefParams };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketControllerCreateBaseSubBucketParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketControllerDeleteBaseSubBucketByIdParams };
export { Account as BaseSubBucketControllerGetBaseSubBucketAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketControllerGetBaseSubBucketAccountParams };
export { ReferencedAccount as BaseSubBucketControllerGetBaseSubBucketAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketControllerGetBaseSubBucketAccountRefParams };
export { BaseSubBucket as BaseSubBucketControllerGetBaseSubBucketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketControllerGetBaseSubBucketByIdParams };
export { EntryList as BaseSubBucketControllerGetBaseSubBucketEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BaseSubBucketControllerGetBaseSubBucketEntriesParams };
export { ReferencedEntryList as BaseSubBucketControllerGetBaseSubBucketEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketControllerGetBaseSubBucketEntriesRefParams };
export { FundingSource as BaseSubBucketControllerGetBaseSubBucketFundingSource200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketControllerGetBaseSubBucketFundingSourceParams };
export { ReferencedFundingSource as BaseSubBucketControllerGetBaseSubBucketFundingSourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketControllerGetBaseSubBucketFundingSourceRefParams };
export { BaseSubBucketList as BaseSubBucketControllerGetBaseSubBucketList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BaseSubBucketControllerGetBaseSubBucketListParams };
export { BaseSubBucketMetadata as BaseSubBucketControllerGetBaseSubBucketMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketControllerGetBaseSubBucketMetadataParams };
export { ReferencedBaseSubBucketMetadata as BaseSubBucketControllerGetBaseSubBucketMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketControllerGetBaseSubBucketMetadataRefParams };
export { BaseBucket as BaseSubBucketControllerGetBaseSubBucketParent200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketControllerGetBaseSubBucketParentParams };
export { ReferencedBaseBucket as BaseSubBucketControllerGetBaseSubBucketParentRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketControllerGetBaseSubBucketParentRefParams };
export { Project as BaseSubBucketControllerGetBaseSubBucketProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketControllerGetBaseSubBucketProjectParams };
export { ReferencedProject as BaseSubBucketControllerGetBaseSubBucketProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketControllerGetBaseSubBucketProjectRefParams };
export { ReferencedBaseBucket as BaseSubBucketControllerPatchBaseSubBucketParentRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketControllerPatchBaseSubBucketParentRefParams };
export { ReferencedUpdateBaseBucket as BaseSubBucketControllerPatchBaseSubBucketParentRefRequest };
export { BaseSubBucket as BaseSubBucketControllerUpdateBaseSubBucketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketControllerUpdateBaseSubBucketByIdParams };
export { UpdateBaseSubBucket as BaseSubBucketControllerUpdateBaseSubBucketByIdRequest };
export { BaseBucketMetadataAttributes as BaseSubBucketMetadataAttributes };
export { BaseSubBucketMetadata as BaseSubBucketMetadataControllerGetBaseSubBucketMetadataById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketMetadataControllerGetBaseSubBucketMetadataByIdParams };
export { BaseSubBucketMetadataList as BaseSubBucketMetadataControllerGetBaseSubBucketMetadataList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BaseSubBucketMetadataControllerGetBaseSubBucketMetadataListParams };
export { BaseBucket as BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectParams };
export { ReferencedBaseBucket as BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectRefParams };
export { BaseBucketMetadataRelationships as BaseSubBucketMetadataRelationships };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BlueprintControllerCreateBlueprintParams };
export { ReferencedAssetList as BlueprintControllerDeleteBlueprintAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerDeleteBlueprintAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as BlueprintControllerDeleteBlueprintAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerDeleteBlueprintByIdParams };
export { ReferencedProjectList as BlueprintControllerDeleteBlueprintProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerDeleteBlueprintProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as BlueprintControllerDeleteBlueprintProjectsRefRequest };
export { ReferencedSpaceList as BlueprintControllerDeleteBlueprintSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerDeleteBlueprintSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as BlueprintControllerDeleteBlueprintSpacesRefRequest };
export { Account as BlueprintControllerGetBlueprintAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BlueprintControllerGetBlueprintAccountParams };
export { ReferencedAccount as BlueprintControllerGetBlueprintAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerGetBlueprintAccountRefParams };
export { AssetList as BlueprintControllerGetBlueprintAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BlueprintControllerGetBlueprintAssetsParams };
export { ReferencedAssetList as BlueprintControllerGetBlueprintAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerGetBlueprintAssetsRefParams };
export { Blueprint as BlueprintControllerGetBlueprintById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BlueprintControllerGetBlueprintByIdParams };
export { DocumentType as BlueprintControllerGetBlueprintDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BlueprintControllerGetBlueprintDocumentTypeParams };
export { ReferencedDocumentType as BlueprintControllerGetBlueprintDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerGetBlueprintDocumentTypeRefParams };
export { NullableFile as BlueprintControllerGetBlueprintFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BlueprintControllerGetBlueprintFileParams };
export { NullableReferencedFile as BlueprintControllerGetBlueprintFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerGetBlueprintFileRefParams };
export { BlueprintList as BlueprintControllerGetBlueprintList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BlueprintControllerGetBlueprintListParams };
export { ProjectList as BlueprintControllerGetBlueprintProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BlueprintControllerGetBlueprintProjectsParams };
export { ReferencedProjectList as BlueprintControllerGetBlueprintProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerGetBlueprintProjectsRefParams };
export { SpaceList as BlueprintControllerGetBlueprintSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BlueprintControllerGetBlueprintSpacesParams };
export { ReferencedSpaceList as BlueprintControllerGetBlueprintSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerGetBlueprintSpacesRefParams };
export { ReferencedAccount as BlueprintControllerPatchBlueprintAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerPatchBlueprintAccountRefParams };
export { ReferencedUpdateAccount as BlueprintControllerPatchBlueprintAccountRefRequest };
export { ReferencedAssetList as BlueprintControllerPatchBlueprintAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerPatchBlueprintAssetsRefParams };
export { ReferencedUpdateAssetList as BlueprintControllerPatchBlueprintAssetsRefRequest };
export { NullableReferencedFile as BlueprintControllerPatchBlueprintFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerPatchBlueprintFileRefParams };
export { NullableReferencedUpdateFile as BlueprintControllerPatchBlueprintFileRefRequest };
export { ReferencedProjectList as BlueprintControllerPatchBlueprintProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerPatchBlueprintProjectsRefParams };
export { ReferencedUpdateProjectList as BlueprintControllerPatchBlueprintProjectsRefRequest };
export { ReferencedSpaceList as BlueprintControllerPatchBlueprintSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerPatchBlueprintSpacesRefParams };
export { ReferencedUpdateSpaceList as BlueprintControllerPatchBlueprintSpacesRefRequest };
export { ReferencedAssetList as BlueprintControllerPostBlueprintAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerPostBlueprintAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as BlueprintControllerPostBlueprintAssetsRefRequest };
export { ReferencedProjectList as BlueprintControllerPostBlueprintProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerPostBlueprintProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as BlueprintControllerPostBlueprintProjectsRefRequest };
export { ReferencedSpaceList as BlueprintControllerPostBlueprintSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BlueprintControllerPostBlueprintSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as BlueprintControllerPostBlueprintSpacesRefRequest };
export { Blueprint as BlueprintControllerUpdateBlueprintById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BlueprintControllerUpdateBlueprintByIdParams };
export { UpdateBlueprint as BlueprintControllerUpdateBlueprintByIdRequest };
export { AssetTypeAttributes as BucketClassAttributes };
export { AssetTypeList as BucketClassControllerGetBucketClassAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as BucketClassControllerGetBucketClassAssetTypesParams };
export { ReferencedAssetTypeList as BucketClassControllerGetBucketClassAssetTypesRef200 };
export { BucketClass as BucketClassControllerGetBucketClassById200 };
export { AccountControllerGetCurrentAccountParams as BucketClassControllerGetBucketClassByIdParams };
export { BucketClassList as BucketClassControllerGetBucketClassList200 };
export { UserControllerGetUserAccountRolesParams as BucketClassControllerGetBucketClassListParams };
export { BucketTypeList as BucketClassControllerGetBucketClassTypes200 };
export { UserControllerGetUserAccountRolesParams as BucketClassControllerGetBucketClassTypesParams };
export { ReferencedBucketTypeList as BucketClassControllerGetBucketClassTypesRef200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerCreateBucketParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerDeleteBucketByIdParams };
export { Account as BucketControllerGetBucketAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketAccountParams };
export { ReferencedAccount as BucketControllerGetBucketAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketAccountRefParams };
export { Bucket as BucketControllerGetBucketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketByIdParams };
export { ClaimDeductible as BucketControllerGetBucketClaimDeductible200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketClaimDeductibleParams };
export { ReferencedClaimDeductible as BucketControllerGetBucketClaimDeductibleRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketClaimDeductibleRefParams };
export { Deductible as BucketControllerGetBucketDeductible200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketDeductibleParams };
export { ReferencedDeductible as BucketControllerGetBucketDeductibleRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketDeductibleRefParams };
export { BucketDefinition as BucketControllerGetBucketDefinition200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketDefinitionParams };
export { ReferencedBucketDefinition as BucketControllerGetBucketDefinitionRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketDefinitionRefParams };
export { EntryList as BucketControllerGetBucketEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BucketControllerGetBucketEntriesParams };
export { ReferencedEntryList as BucketControllerGetBucketEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketEntriesRefParams };
export { BucketFundingList as BucketControllerGetBucketFundings200 };
export { FundingSource as BucketControllerGetBucketFundingSource200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketFundingSourceParams };
export { ReferencedFundingSource as BucketControllerGetBucketFundingSourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketFundingSourceRefParams };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BucketControllerGetBucketFundingsParams };
export { ReferencedBucketFundingList as BucketControllerGetBucketFundingsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketFundingsRefParams };
export { BucketList as BucketControllerGetBucketList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BucketControllerGetBucketListParams };
export { BaseBucketMetadata as BucketControllerGetBucketMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketMetadataParams };
export { ReferencedBaseBucketMetadata as BucketControllerGetBucketMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketMetadataRefParams };
export { Project as BucketControllerGetBucketProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketProjectParams };
export { ReferencedProject as BucketControllerGetBucketProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketProjectRefParams };
export { BaseSubBucketList as BucketControllerGetBucketSubBuckets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BucketControllerGetBucketSubBucketsParams };
export { ReferencedBaseSubBucketList as BucketControllerGetBucketSubBucketsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketSubBucketsRefParams };
export { NullableBucketType as BucketControllerGetBucketType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerGetBucketTypeParams };
export { NullableReferencedBucketType as BucketControllerGetBucketTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerGetBucketTypeRefParams };
export { ReferencedBucketDefinition as BucketControllerPatchBucketDefinitionRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerPatchBucketDefinitionRefParams };
export { ReferencedUpdateBucketDefinition as BucketControllerPatchBucketDefinitionRefRequest };
export { ReferencedFundingSource as BucketControllerPatchBucketFundingSourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerPatchBucketFundingSourceRefParams };
export { ReferencedUpdateFundingSource as BucketControllerPatchBucketFundingSourceRefRequest };
export { NullableReferencedBucketType as BucketControllerPatchBucketTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketControllerPatchBucketTypeRefParams };
export { NullableReferencedUpdateBucketType as BucketControllerPatchBucketTypeRefRequest };
export { Bucket as BucketControllerUpdateBucketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketControllerUpdateBucketByIdParams };
export { UpdateBucket as BucketControllerUpdateBucketByIdRequest };
export { AccountControllerGetCurrentAccountParams as BucketDefinitionControllerCreateBucketDefinitionParams };
export { ClaimTarget as BucketDefinitionControllerGetBucketDefinitionBasis200 };
export { AccountControllerGetCurrentAccountParams as BucketDefinitionControllerGetBucketDefinitionBasisParams };
export { ReferencedClaimTarget as BucketDefinitionControllerGetBucketDefinitionBasisRef200 };
export { BucketList as BucketDefinitionControllerGetBucketDefinitionBuckets200 };
export { UserControllerGetUserAccountRolesParams as BucketDefinitionControllerGetBucketDefinitionBucketsParams };
export { ReferencedBucketList as BucketDefinitionControllerGetBucketDefinitionBucketsRef200 };
export { NullableBucketType as BucketDefinitionControllerGetBucketDefinitionBucketType200 };
export { AccountControllerGetCurrentAccountParams as BucketDefinitionControllerGetBucketDefinitionBucketTypeParams };
export { NullableReferencedBucketType as BucketDefinitionControllerGetBucketDefinitionBucketTypeRef200 };
export { BucketDefinition as BucketDefinitionControllerGetBucketDefinitionById200 };
export { AccountControllerGetCurrentAccountParams as BucketDefinitionControllerGetBucketDefinitionByIdParams };
export { NullableDeductible as BucketDefinitionControllerGetBucketDefinitionDeductible200 };
export { AccountControllerGetCurrentAccountParams as BucketDefinitionControllerGetBucketDefinitionDeductibleParams };
export { NullableReferencedDeductible as BucketDefinitionControllerGetBucketDefinitionDeductibleRef200 };
export { BucketDefinitionList as BucketDefinitionControllerGetBucketDefinitionList200 };
export { UserControllerGetUserAccountRolesParams as BucketDefinitionControllerGetBucketDefinitionListParams };
export { SubBucketDefinitionList as BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitions200 };
export { UserControllerGetUserAccountRolesParams as BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitionsParams };
export { ReferencedSubBucketDefinitionList as BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitionsRef200 };
export { ReferencedClaimTarget as BucketDefinitionControllerPatchBucketDefinitionBasisRef200 };
export { ReferencedUpdateClaimTarget as BucketDefinitionControllerPatchBucketDefinitionBasisRefRequest };
export { NullableReferencedBucketType as BucketDefinitionControllerPatchBucketDefinitionBucketTypeRef200 };
export { NullableReferencedUpdateBucketType as BucketDefinitionControllerPatchBucketDefinitionBucketTypeRefRequest };
export { NullableReferencedDeductible as BucketDefinitionControllerPatchBucketDefinitionDeductibleRef200 };
export { NullableReferencedUpdateDeductible as BucketDefinitionControllerPatchBucketDefinitionDeductibleRefRequest };
export { BucketDefinition as BucketDefinitionControllerUpdateBucketDefinitionById200 };
export { AccountControllerGetCurrentAccountParams as BucketDefinitionControllerUpdateBucketDefinitionByIdParams };
export { UpdateBucketDefinition as BucketDefinitionControllerUpdateBucketDefinitionByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketFundingControllerCreateBucketFundingParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketFundingControllerDeleteBucketFundingByIdParams };
export { BaseBucket as BucketFundingControllerGetBucketFundingBucket200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketFundingControllerGetBucketFundingBucketParams };
export { ReferencedBaseBucket as BucketFundingControllerGetBucketFundingBucketRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketFundingControllerGetBucketFundingBucketRefParams };
export { BucketFunding as BucketFundingControllerGetBucketFundingById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketFundingControllerGetBucketFundingByIdParams };
export { Currency as BucketFundingControllerGetBucketFundingCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketFundingControllerGetBucketFundingCurrencyParams };
export { ReferencedCurrency as BucketFundingControllerGetBucketFundingCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketFundingControllerGetBucketFundingCurrencyRefParams };
export { Funding as BucketFundingControllerGetBucketFundingFunding200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketFundingControllerGetBucketFundingFundingParams };
export { ReferencedFunding as BucketFundingControllerGetBucketFundingFundingRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketFundingControllerGetBucketFundingFundingRefParams };
export { FundingSource as BucketFundingControllerGetBucketFundingFundingSource200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketFundingControllerGetBucketFundingFundingSourceParams };
export { ReferencedFundingSource as BucketFundingControllerGetBucketFundingFundingSourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketFundingControllerGetBucketFundingFundingSourceRefParams };
export { BucketFundingList as BucketFundingControllerGetBucketFundingList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as BucketFundingControllerGetBucketFundingListParams };
export { ReferencedBaseBucket as BucketFundingControllerPatchBucketFundingBucketRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketFundingControllerPatchBucketFundingBucketRefParams };
export { ReferencedUpdateBaseBucket as BucketFundingControllerPatchBucketFundingBucketRefRequest };
export { ReferencedFunding as BucketFundingControllerPatchBucketFundingFundingRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as BucketFundingControllerPatchBucketFundingFundingRefParams };
export { ReferencedUpdateFunding as BucketFundingControllerPatchBucketFundingFundingRefRequest };
export { BucketFunding as BucketFundingControllerUpdateBucketFundingById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as BucketFundingControllerUpdateBucketFundingByIdParams };
export { UpdateBucketFunding as BucketFundingControllerUpdateBucketFundingByIdRequest };
export { AssetTypeList as BucketTypeControllerGetBucketTypeAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as BucketTypeControllerGetBucketTypeAssetTypesParams };
export { ReferencedAssetTypeList as BucketTypeControllerGetBucketTypeAssetTypesRef200 };
export { BucketType as BucketTypeControllerGetBucketTypeById200 };
export { AccountControllerGetCurrentAccountParams as BucketTypeControllerGetBucketTypeByIdParams };
export { BucketClassList as BucketTypeControllerGetBucketTypeClasses200 };
export { UserControllerGetUserAccountRolesParams as BucketTypeControllerGetBucketTypeClassesParams };
export { ReferencedBucketClassList as BucketTypeControllerGetBucketTypeClassesRef200 };
export { BucketTypeList as BucketTypeControllerGetBucketTypeList200 };
export { UserControllerGetUserAccountRolesParams as BucketTypeControllerGetBucketTypeListParams };
export { FilesCdnSignedUrlsResponseDto as CdnControllerGetSignedUrls200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CdnControllerGetSignedUrlsParams };
export { FilesCdnSignedUrlsDto as CdnControllerGetSignedUrlsRequest };
export { FilesCdnAccessResponseDto as CdnControllerSetCdnCookies200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CdnControllerSetCdnCookiesParams };
export { FilesCdnAccessDto as CdnControllerSetCdnCookiesRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerCreateChangeOrderParams };
export { ReferencedAssetList as ChangeOrderControllerDeleteChangeOrderAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerDeleteChangeOrderAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ChangeOrderControllerDeleteChangeOrderAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerDeleteChangeOrderByIdParams };
export { ReferencedProjectList as ChangeOrderControllerDeleteChangeOrderProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerDeleteChangeOrderProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ChangeOrderControllerDeleteChangeOrderProjectsRefRequest };
export { ReferencedSpaceList as ChangeOrderControllerDeleteChangeOrderSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerDeleteChangeOrderSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ChangeOrderControllerDeleteChangeOrderSpacesRefRequest };
export { Account as ChangeOrderControllerGetChangeOrderAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderAccountParams };
export { ReferencedAccount as ChangeOrderControllerGetChangeOrderAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderAccountRefParams };
export { AssetList as ChangeOrderControllerGetChangeOrderAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ChangeOrderControllerGetChangeOrderAssetsParams };
export { ReferencedAssetList as ChangeOrderControllerGetChangeOrderAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderAssetsRefParams };
export { ChangeOrder as ChangeOrderControllerGetChangeOrderById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderByIdParams };
export { Currency as ChangeOrderControllerGetChangeOrderCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderCurrencyParams };
export { ReferencedCurrency as ChangeOrderControllerGetChangeOrderCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderCurrencyRefParams };
export { DocumentType as ChangeOrderControllerGetChangeOrderDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderDocumentTypeParams };
export { ReferencedDocumentType as ChangeOrderControllerGetChangeOrderDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderDocumentTypeRefParams };
export { Estimate as ChangeOrderControllerGetChangeOrderEstimate200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderEstimateParams };
export { ReferencedEstimate as ChangeOrderControllerGetChangeOrderEstimateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderEstimateRefParams };
export { NullableFile as ChangeOrderControllerGetChangeOrderFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderFileParams };
export { NullableReferencedFile as ChangeOrderControllerGetChangeOrderFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderFileRefParams };
export { ChangeOrderLineList as ChangeOrderControllerGetChangeOrderLines200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ChangeOrderControllerGetChangeOrderLinesParams };
export { ReferencedChangeOrderLineList as ChangeOrderControllerGetChangeOrderLinesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderLinesRefParams };
export { EntrySourceList as ChangeOrderControllerGetChangeOrderLineSubjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ChangeOrderControllerGetChangeOrderLineSubjectsParams };
export { ReferencedEntrySourceList as ChangeOrderControllerGetChangeOrderLineSubjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderLineSubjectsRefParams };
export { ChangeOrderList as ChangeOrderControllerGetChangeOrderList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ChangeOrderControllerGetChangeOrderListParams };
export { ProjectList as ChangeOrderControllerGetChangeOrderProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ChangeOrderControllerGetChangeOrderProjectsParams };
export { ReferencedProjectList as ChangeOrderControllerGetChangeOrderProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderProjectsRefParams };
export { Service as ChangeOrderControllerGetChangeOrderService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderServiceParams };
export { ReferencedService as ChangeOrderControllerGetChangeOrderServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderServiceRefParams };
export { SpaceList as ChangeOrderControllerGetChangeOrderSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ChangeOrderControllerGetChangeOrderSpacesParams };
export { ReferencedSpaceList as ChangeOrderControllerGetChangeOrderSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderSpacesRefParams };
export { ItemizableFinancialDocumentStats as ChangeOrderControllerGetChangeOrderStats200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderStatsParams };
export { ReferencedItemizableFinancialDocumentStats as ChangeOrderControllerGetChangeOrderStatsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderStatsRefParams };
export { AccountProvider as ChangeOrderControllerGetChangeOrderVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerGetChangeOrderVendorParams };
export { ReferencedAccountProvider as ChangeOrderControllerGetChangeOrderVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerGetChangeOrderVendorRefParams };
export { ReferencedAccount as ChangeOrderControllerPatchChangeOrderAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPatchChangeOrderAccountRefParams };
export { ReferencedUpdateAccount as ChangeOrderControllerPatchChangeOrderAccountRefRequest };
export { ReferencedAssetList as ChangeOrderControllerPatchChangeOrderAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPatchChangeOrderAssetsRefParams };
export { ReferencedUpdateAssetList as ChangeOrderControllerPatchChangeOrderAssetsRefRequest };
export { ReferencedCurrency as ChangeOrderControllerPatchChangeOrderCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPatchChangeOrderCurrencyRefParams };
export { ReferencedUpdateCurrency as ChangeOrderControllerPatchChangeOrderCurrencyRefRequest };
export { ReferencedEstimate as ChangeOrderControllerPatchChangeOrderEstimateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPatchChangeOrderEstimateRefParams };
export { ReferencedUpdateEstimate as ChangeOrderControllerPatchChangeOrderEstimateRefRequest };
export { NullableReferencedFile as ChangeOrderControllerPatchChangeOrderFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPatchChangeOrderFileRefParams };
export { NullableReferencedUpdateFile as ChangeOrderControllerPatchChangeOrderFileRefRequest };
export { ReferencedProjectList as ChangeOrderControllerPatchChangeOrderProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPatchChangeOrderProjectsRefParams };
export { ReferencedUpdateProjectList as ChangeOrderControllerPatchChangeOrderProjectsRefRequest };
export { ReferencedSpaceList as ChangeOrderControllerPatchChangeOrderSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPatchChangeOrderSpacesRefParams };
export { ReferencedUpdateSpaceList as ChangeOrderControllerPatchChangeOrderSpacesRefRequest };
export { ReferencedAssetList as ChangeOrderControllerPostChangeOrderAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPostChangeOrderAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ChangeOrderControllerPostChangeOrderAssetsRefRequest };
export { ReferencedProjectList as ChangeOrderControllerPostChangeOrderProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPostChangeOrderProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ChangeOrderControllerPostChangeOrderProjectsRefRequest };
export { ReferencedSpaceList as ChangeOrderControllerPostChangeOrderSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderControllerPostChangeOrderSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ChangeOrderControllerPostChangeOrderSpacesRefRequest };
export { ChangeOrder as ChangeOrderControllerUpdateChangeOrderById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderControllerUpdateChangeOrderByIdParams };
export { UpdateChangeOrder as ChangeOrderControllerUpdateChangeOrderByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderLineControllerCreateChangeOrderLineParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderLineControllerDeleteChangeOrderLineByIdParams };
export { ChangeOrderLine as ChangeOrderLineControllerGetChangeOrderLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderLineControllerGetChangeOrderLineByIdParams };
export { ChangeOrder as ChangeOrderLineControllerGetChangeOrderLineChangeOrder200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderLineControllerGetChangeOrderLineChangeOrderParams };
export { ReferencedChangeOrder as ChangeOrderLineControllerGetChangeOrderLineChangeOrderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderLineControllerGetChangeOrderLineChangeOrderRefParams };
export { EstimateLine as ChangeOrderLineControllerGetChangeOrderLineEstimateLine200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderLineControllerGetChangeOrderLineEstimateLineParams };
export { ReferencedEstimateLine as ChangeOrderLineControllerGetChangeOrderLineEstimateLineRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderLineControllerGetChangeOrderLineEstimateLineRefParams };
export { ChangeOrderLineList as ChangeOrderLineControllerGetChangeOrderLineList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ChangeOrderLineControllerGetChangeOrderLineListParams };
export { Service as ChangeOrderLineControllerGetChangeOrderLineService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderLineControllerGetChangeOrderLineServiceParams };
export { ReferencedService as ChangeOrderLineControllerGetChangeOrderLineServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderLineControllerGetChangeOrderLineServiceRefParams };
export { EntrySource as ChangeOrderLineControllerGetChangeOrderLineSubject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderLineControllerGetChangeOrderLineSubjectParams };
export { ReferencedEntrySource as ChangeOrderLineControllerGetChangeOrderLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderLineControllerGetChangeOrderLineSubjectRefParams };
export { AccountProvider as ChangeOrderLineControllerGetChangeOrderLineVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderLineControllerGetChangeOrderLineVendorParams };
export { ReferencedAccountProvider as ChangeOrderLineControllerGetChangeOrderLineVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderLineControllerGetChangeOrderLineVendorRefParams };
export { ReferencedChangeOrder as ChangeOrderLineControllerPatchChangeOrderLineChangeOrderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderLineControllerPatchChangeOrderLineChangeOrderRefParams };
export { ReferencedUpdateChangeOrder as ChangeOrderLineControllerPatchChangeOrderLineChangeOrderRefRequest };
export { ReferencedEstimateLine as ChangeOrderLineControllerPatchChangeOrderLineEstimateLineRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ChangeOrderLineControllerPatchChangeOrderLineEstimateLineRefParams };
export { ReferencedUpdateEstimateLine as ChangeOrderLineControllerPatchChangeOrderLineEstimateLineRefRequest };
export { ChangeOrderLine as ChangeOrderLineControllerUpdateChangeOrderLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ChangeOrderLineControllerUpdateChangeOrderLineByIdParams };
export { UpdateChangeOrderLine as ChangeOrderLineControllerUpdateChangeOrderLineByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimControllerCreateClaimParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerDeleteClaimByIdParams };
export { ReferencedAccountProviderContactList as ClaimControllerDeleteClaimContactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerDeleteClaimContactsRefParams };
export { FundingSourceControllerPostFundingSourceContactsRefRequest as ClaimControllerDeleteClaimContactsRefRequest };
export { Account as ClaimControllerGetClaimAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimControllerGetClaimAccountParams };
export { ReferencedAccount as ClaimControllerGetClaimAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimAccountRefParams };
export { BaseBucketList as ClaimControllerGetClaimBuckets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ClaimControllerGetClaimBucketsParams };
export { ReferencedBaseBucketList as ClaimControllerGetClaimBucketsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimBucketsRefParams };
export { Claim as ClaimControllerGetClaimById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimControllerGetClaimByIdParams };
export { AccountProviderContactList as ClaimControllerGetClaimContacts200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ClaimControllerGetClaimContactsParams };
export { ReferencedAccountProviderContactList as ClaimControllerGetClaimContactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimContactsRefParams };
export { Currency as ClaimControllerGetClaimCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimControllerGetClaimCurrencyParams };
export { ReferencedCurrency as ClaimControllerGetClaimCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimCurrencyRefParams };
export { DeductibleList as ClaimControllerGetClaimDeductibles200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ClaimControllerGetClaimDeductiblesParams };
export { ReferencedDeductibleList as ClaimControllerGetClaimDeductiblesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimDeductiblesRefParams };
export { FundingList as ClaimControllerGetClaimFundings200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ClaimControllerGetClaimFundingsParams };
export { ReferencedFundingList as ClaimControllerGetClaimFundingsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimFundingsRefParams };
export { ClaimList as ClaimControllerGetClaimList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ClaimControllerGetClaimListParams };
export { Project as ClaimControllerGetClaimProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimControllerGetClaimProjectParams };
export { ReferencedProject as ClaimControllerGetClaimProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimProjectRefParams };
export { Provider as ClaimControllerGetClaimProvider200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimControllerGetClaimProviderParams };
export { ReferencedProvider as ClaimControllerGetClaimProviderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimProviderRefParams };
export { ClaimTarget as ClaimControllerGetClaimTarget200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimControllerGetClaimTargetParams };
export { ReferencedClaimTarget as ClaimControllerGetClaimTargetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerGetClaimTargetRefParams };
export { ReferencedAccountProviderContactList as ClaimControllerPatchClaimContactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerPatchClaimContactsRefParams };
export { ReferencedUpdateAccountProviderContactList as ClaimControllerPatchClaimContactsRefRequest };
export { ReferencedCurrency as ClaimControllerPatchClaimCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerPatchClaimCurrencyRefParams };
export { ReferencedUpdateCurrency as ClaimControllerPatchClaimCurrencyRefRequest };
export { ReferencedProject as ClaimControllerPatchClaimProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerPatchClaimProjectRefParams };
export { ReferencedUpdateProject as ClaimControllerPatchClaimProjectRefRequest };
export { ReferencedClaimTarget as ClaimControllerPatchClaimTargetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerPatchClaimTargetRefParams };
export { ReferencedUpdateClaimTarget as ClaimControllerPatchClaimTargetRefRequest };
export { ReferencedAccountProviderContactList as ClaimControllerPostClaimContactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimControllerPostClaimContactsRefParams };
export { FundingSourceControllerPostFundingSourceContactsRefRequest as ClaimControllerPostClaimContactsRefRequest };
export { Claim as ClaimControllerUpdateClaimById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimControllerUpdateClaimByIdParams };
export { UpdateClaim as ClaimControllerUpdateClaimByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimDeductibleControllerCreateClaimDeductibleParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimDeductibleControllerDeleteClaimDeductibleByIdParams };
export { BucketList as ClaimDeductibleControllerGetClaimDeductibleBuckets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ClaimDeductibleControllerGetClaimDeductibleBucketsParams };
export { ReferencedBucketList as ClaimDeductibleControllerGetClaimDeductibleBucketsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimDeductibleControllerGetClaimDeductibleBucketsRefParams };
export { ClaimDeductible as ClaimDeductibleControllerGetClaimDeductibleById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimDeductibleControllerGetClaimDeductibleByIdParams };
export { Claim as ClaimDeductibleControllerGetClaimDeductibleClaim200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimDeductibleControllerGetClaimDeductibleClaimParams };
export { ReferencedClaim as ClaimDeductibleControllerGetClaimDeductibleClaimRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimDeductibleControllerGetClaimDeductibleClaimRefParams };
export { Deductible as ClaimDeductibleControllerGetClaimDeductibleContext200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimDeductibleControllerGetClaimDeductibleContextParams };
export { ReferencedDeductible as ClaimDeductibleControllerGetClaimDeductibleContextRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimDeductibleControllerGetClaimDeductibleContextRefParams };
export { ClaimDeductibleList as ClaimDeductibleControllerGetClaimDeductibleList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ClaimDeductibleControllerGetClaimDeductibleListParams };
export { ClaimTarget as ClaimDeductibleControllerGetClaimDeductibleTarget200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimDeductibleControllerGetClaimDeductibleTargetParams };
export { ReferencedClaimTarget as ClaimDeductibleControllerGetClaimDeductibleTargetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimDeductibleControllerGetClaimDeductibleTargetRefParams };
export { ReferencedClaim as ClaimDeductibleControllerPatchClaimDeductibleClaimRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimDeductibleControllerPatchClaimDeductibleClaimRefParams };
export { ReferencedUpdateClaim as ClaimDeductibleControllerPatchClaimDeductibleClaimRefRequest };
export { ReferencedDeductible as ClaimDeductibleControllerPatchClaimDeductibleContextRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ClaimDeductibleControllerPatchClaimDeductibleContextRefParams };
export { ReferencedUpdateDeductible as ClaimDeductibleControllerPatchClaimDeductibleContextRefRequest };
export { ClaimDeductible as ClaimDeductibleControllerUpdateClaimDeductibleById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ClaimDeductibleControllerUpdateClaimDeductibleByIdParams };
export { UpdateClaimDeductible as ClaimDeductibleControllerUpdateClaimDeductibleByIdRequest };
export { BlueprintAttributes as ContractAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ContractControllerCreateContractParams };
export { ReferencedAssetList as ContractControllerDeleteContractAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerDeleteContractAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ContractControllerDeleteContractAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerDeleteContractByIdParams };
export { ReferencedProjectList as ContractControllerDeleteContractProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerDeleteContractProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ContractControllerDeleteContractProjectsRefRequest };
export { ReferencedSpaceList as ContractControllerDeleteContractSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerDeleteContractSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ContractControllerDeleteContractSpacesRefRequest };
export { Account as ContractControllerGetContractAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ContractControllerGetContractAccountParams };
export { ReferencedAccount as ContractControllerGetContractAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerGetContractAccountRefParams };
export { AssetList as ContractControllerGetContractAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ContractControllerGetContractAssetsParams };
export { ReferencedAssetList as ContractControllerGetContractAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerGetContractAssetsRefParams };
export { Contract as ContractControllerGetContractById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ContractControllerGetContractByIdParams };
export { DocumentType as ContractControllerGetContractDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ContractControllerGetContractDocumentTypeParams };
export { ReferencedDocumentType as ContractControllerGetContractDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerGetContractDocumentTypeRefParams };
export { NullableFile as ContractControllerGetContractFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ContractControllerGetContractFileParams };
export { NullableReferencedFile as ContractControllerGetContractFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerGetContractFileRefParams };
export { ContractList as ContractControllerGetContractList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ContractControllerGetContractListParams };
export { ProjectList as ContractControllerGetContractProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ContractControllerGetContractProjectsParams };
export { ReferencedProjectList as ContractControllerGetContractProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerGetContractProjectsRefParams };
export { SpaceList as ContractControllerGetContractSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ContractControllerGetContractSpacesParams };
export { ReferencedSpaceList as ContractControllerGetContractSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerGetContractSpacesRefParams };
export { ReferencedAccount as ContractControllerPatchContractAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerPatchContractAccountRefParams };
export { ReferencedUpdateAccount as ContractControllerPatchContractAccountRefRequest };
export { ReferencedAssetList as ContractControllerPatchContractAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerPatchContractAssetsRefParams };
export { ReferencedUpdateAssetList as ContractControllerPatchContractAssetsRefRequest };
export { NullableReferencedFile as ContractControllerPatchContractFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerPatchContractFileRefParams };
export { NullableReferencedUpdateFile as ContractControllerPatchContractFileRefRequest };
export { ReferencedProjectList as ContractControllerPatchContractProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerPatchContractProjectsRefParams };
export { ReferencedUpdateProjectList as ContractControllerPatchContractProjectsRefRequest };
export { ReferencedSpaceList as ContractControllerPatchContractSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerPatchContractSpacesRefParams };
export { ReferencedUpdateSpaceList as ContractControllerPatchContractSpacesRefRequest };
export { ReferencedAssetList as ContractControllerPostContractAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerPostContractAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ContractControllerPostContractAssetsRefRequest };
export { ReferencedProjectList as ContractControllerPostContractProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerPostContractProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ContractControllerPostContractProjectsRefRequest };
export { ReferencedSpaceList as ContractControllerPostContractSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ContractControllerPostContractSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ContractControllerPostContractSpacesRefRequest };
export { Contract as ContractControllerUpdateContractById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ContractControllerUpdateContractByIdParams };
export { UpdateContract as ContractControllerUpdateContractByIdRequest };
export { BlueprintRelationships as ContractRelationships };
export { Country as CountryControllerGetCountryById200 };
export { AccountControllerGetCurrentAccountParams as CountryControllerGetCountryByIdParams };
export { CountryList as CountryControllerGetCountryList200 };
export { UserControllerGetUserAccountRolesParams as CountryControllerGetCountryListParams };
export { BucketDefinitionAttributes as CoverageAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageControllerCreateCoverageParams };
export { ReferencedAssetList as CoverageControllerDeleteCoverageAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerDeleteCoverageAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as CoverageControllerDeleteCoverageAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerDeleteCoverageByIdParams };
export { ReferencedPerilList as CoverageControllerDeleteCoveragePerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerDeleteCoveragePerilsRefParams };
export { IncidentImpactControllerPostIncidentImpactPerilsRefRequest as CoverageControllerDeleteCoveragePerilsRefRequest };
export { AssetList as CoverageControllerGetCoverageAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as CoverageControllerGetCoverageAssetsParams };
export { ReferencedAssetList as CoverageControllerGetCoverageAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageAssetsRefParams };
export { PolicyTerm as CoverageControllerGetCoverageBasis200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageControllerGetCoverageBasisParams };
export { ReferencedPolicyTerm as CoverageControllerGetCoverageBasisRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageBasisRefParams };
export { BucketList as CoverageControllerGetCoverageBuckets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as CoverageControllerGetCoverageBucketsParams };
export { ReferencedBucketList as CoverageControllerGetCoverageBucketsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageBucketsRefParams };
export { NullableBucketType as CoverageControllerGetCoverageBucketType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageControllerGetCoverageBucketTypeParams };
export { NullableReferencedBucketType as CoverageControllerGetCoverageBucketTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageBucketTypeRefParams };
export { Coverage as CoverageControllerGetCoverageById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageControllerGetCoverageByIdParams };
export { NullableDeductible as CoverageControllerGetCoverageDeductible200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageControllerGetCoverageDeductibleParams };
export { NullableReferencedDeductible as CoverageControllerGetCoverageDeductibleRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageDeductibleRefParams };
export { EndorsementList as CoverageControllerGetCoverageEndorsements200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as CoverageControllerGetCoverageEndorsementsParams };
export { ReferencedEndorsementList as CoverageControllerGetCoverageEndorsementsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageEndorsementsRefParams };
export { NullableCoverageGroup as CoverageControllerGetCoverageGroup200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageControllerGetCoverageGroupParams };
export { NullableReferencedCoverageGroup as CoverageControllerGetCoverageGroupRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageGroupRefParams };
export { CoverageList as CoverageControllerGetCoverageList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as CoverageControllerGetCoverageListParams };
export { PerilList as CoverageControllerGetCoveragePerils200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as CoverageControllerGetCoveragePerilsParams };
export { ReferencedPerilList as CoverageControllerGetCoveragePerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoveragePerilsRefParams };
export { SubBucketDefinitionList as CoverageControllerGetCoverageSubBucketDefinitions200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as CoverageControllerGetCoverageSubBucketDefinitionsParams };
export { ReferencedSubBucketDefinitionList as CoverageControllerGetCoverageSubBucketDefinitionsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageSubBucketDefinitionsRefParams };
export { NullableCoverageTemplate as CoverageControllerGetCoverageTemplate200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageControllerGetCoverageTemplateParams };
export { NullableReferencedCoverageTemplate as CoverageControllerGetCoverageTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerGetCoverageTemplateRefParams };
export { ReferencedAssetList as CoverageControllerPatchCoverageAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPatchCoverageAssetsRefParams };
export { ReferencedUpdateAssetList as CoverageControllerPatchCoverageAssetsRefRequest };
export { ReferencedPolicyTerm as CoverageControllerPatchCoverageBasisRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPatchCoverageBasisRefParams };
export { ReferencedUpdatePolicyTerm as CoverageControllerPatchCoverageBasisRefRequest };
export { NullableReferencedBucketType as CoverageControllerPatchCoverageBucketTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPatchCoverageBucketTypeRefParams };
export { NullableReferencedUpdateBucketType as CoverageControllerPatchCoverageBucketTypeRefRequest };
export { NullableReferencedDeductible as CoverageControllerPatchCoverageDeductibleRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPatchCoverageDeductibleRefParams };
export { NullableReferencedUpdateDeductible as CoverageControllerPatchCoverageDeductibleRefRequest };
export { NullableReferencedCoverageGroup as CoverageControllerPatchCoverageGroupRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPatchCoverageGroupRefParams };
export { NullableReferencedUpdateCoverageGroup as CoverageControllerPatchCoverageGroupRefRequest };
export { ReferencedPerilList as CoverageControllerPatchCoveragePerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPatchCoveragePerilsRefParams };
export { ReferencedUpdatePerilList as CoverageControllerPatchCoveragePerilsRefRequest };
export { NullableReferencedCoverageTemplate as CoverageControllerPatchCoverageTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPatchCoverageTemplateRefParams };
export { NullableReferencedUpdateCoverageTemplate as CoverageControllerPatchCoverageTemplateRefRequest };
export { ReferencedAssetList as CoverageControllerPostCoverageAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPostCoverageAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as CoverageControllerPostCoverageAssetsRefRequest };
export { ReferencedPerilList as CoverageControllerPostCoveragePerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageControllerPostCoveragePerilsRefParams };
export { IncidentImpactControllerPostIncidentImpactPerilsRefRequest as CoverageControllerPostCoveragePerilsRefRequest };
export { Coverage as CoverageControllerUpdateCoverageById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageControllerUpdateCoverageByIdParams };
export { UpdateCoverage as CoverageControllerUpdateCoverageByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageGroupControllerCreateCoverageGroupParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageGroupControllerDeleteCoverageGroupByIdParams };
export { CoverageGroup as CoverageGroupControllerGetCoverageGroupById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageGroupControllerGetCoverageGroupByIdParams };
export { CoverageGroupList as CoverageGroupControllerGetCoverageGroupList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as CoverageGroupControllerGetCoverageGroupListParams };
export { PolicyTerm as CoverageGroupControllerGetCoverageGroupPolicyTerm200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageGroupControllerGetCoverageGroupPolicyTermParams };
export { ReferencedPolicyTerm as CoverageGroupControllerGetCoverageGroupPolicyTermRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageGroupControllerGetCoverageGroupPolicyTermRefParams };
export { NullableCoverageGroupTemplate as CoverageGroupControllerGetCoverageGroupTemplate200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageGroupControllerGetCoverageGroupTemplateParams };
export { NullableReferencedCoverageGroupTemplate as CoverageGroupControllerGetCoverageGroupTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageGroupControllerGetCoverageGroupTemplateRefParams };
export { ReferencedPolicyTerm as CoverageGroupControllerPatchCoverageGroupPolicyTermRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageGroupControllerPatchCoverageGroupPolicyTermRefParams };
export { ReferencedUpdatePolicyTerm as CoverageGroupControllerPatchCoverageGroupPolicyTermRefRequest };
export { NullableReferencedCoverageGroupTemplate as CoverageGroupControllerPatchCoverageGroupTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as CoverageGroupControllerPatchCoverageGroupTemplateRefParams };
export { NullableReferencedUpdateCoverageGroupTemplate as CoverageGroupControllerPatchCoverageGroupTemplateRefRequest };
export { CoverageGroup as CoverageGroupControllerUpdateCoverageGroupById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as CoverageGroupControllerUpdateCoverageGroupByIdParams };
export { UpdateCoverageGroup as CoverageGroupControllerUpdateCoverageGroupByIdRequest };
export { AssetTypeAttributes as CoverageGroupTemplateAttributes };
export { CoverageGroupTemplate as CoverageGroupTemplateControllerGetCoverageGroupTemplateById200 };
export { AccountControllerGetCurrentAccountParams as CoverageGroupTemplateControllerGetCoverageGroupTemplateByIdParams };
export { CoverageTemplateList as CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplates200 };
export { UserControllerGetUserAccountRolesParams as CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplatesParams };
export { ReferencedCoverageTemplateList as CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplatesRef200 };
export { CoverageGroupTemplateList as CoverageGroupTemplateControllerGetCoverageGroupTemplateList200 };
export { UserControllerGetUserAccountRolesParams as CoverageGroupTemplateControllerGetCoverageGroupTemplateListParams };
export { AssetTypeAttributes as CoverageTemplateAttributes };
export { BucketType as CoverageTemplateControllerGetCoverageTemplateBucketType200 };
export { AccountControllerGetCurrentAccountParams as CoverageTemplateControllerGetCoverageTemplateBucketTypeParams };
export { ReferencedBucketType as CoverageTemplateControllerGetCoverageTemplateBucketTypeRef200 };
export { CoverageTemplate as CoverageTemplateControllerGetCoverageTemplateById200 };
export { AccountControllerGetCurrentAccountParams as CoverageTemplateControllerGetCoverageTemplateByIdParams };
export { EndorsementTemplateList as CoverageTemplateControllerGetCoverageTemplateEndorsementTemplates200 };
export { UserControllerGetUserAccountRolesParams as CoverageTemplateControllerGetCoverageTemplateEndorsementTemplatesParams };
export { ReferencedEndorsementTemplateList as CoverageTemplateControllerGetCoverageTemplateEndorsementTemplatesRef200 };
export { NullableCoverageGroupTemplate as CoverageTemplateControllerGetCoverageTemplateGroup200 };
export { AccountControllerGetCurrentAccountParams as CoverageTemplateControllerGetCoverageTemplateGroupParams };
export { NullableReferencedCoverageGroupTemplate as CoverageTemplateControllerGetCoverageTemplateGroupRef200 };
export { CoverageTemplateList as CoverageTemplateControllerGetCoverageTemplateList200 };
export { UserControllerGetUserAccountRolesParams as CoverageTemplateControllerGetCoverageTemplateListParams };
export { PerilList as CoverageTemplateControllerGetCoverageTemplatePerils200 };
export { UserControllerGetUserAccountRolesParams as CoverageTemplateControllerGetCoverageTemplatePerilsParams };
export { ReferencedPerilList as CoverageTemplateControllerGetCoverageTemplatePerilsRef200 };
export { SubCoverageTemplateList as CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplates200 };
export { UserControllerGetUserAccountRolesParams as CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplatesParams };
export { ReferencedSubCoverageTemplateList as CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplatesRef200 };
export { AccountProviderAttributes as CreateAccountProviderAttributes };
export { AccountProviderContactAttributes as CreateAccountProviderContactAttributes };
export { AppraisalLineAttributes as CreateAppraisalLineAttributes };
export { AssetAttributeClassAttributes as CreateAssetAttributeClassAttributes };
export { AssetAttributes as CreateAssetAttributes };
export { AssetAttributeTypeAttributes as CreateAssetAttributeTypeAttributes };
export { AssetAttributeTypeItemTemplateAttributes as CreateAssetAttributeTypeItemTemplateAttributes };
export { AssetTypeAttributes as CreateAssetTypeAttributes };
export { BaseBucketMetadataAttributes as CreateBaseBucketMetadataAttributes };
export { BaseBucketMetadataAttributes as CreateBaseSubBucketMetadataAttributes };
export { CreateBaseBucketMetadataRelationships as CreateBaseSubBucketMetadataRelationships };
export { BlueprintAttributes as CreateBlueprintAttributes };
export { BucketAttributes as CreateBucketAttributes };
export { AssetTypeAttributes as CreateBucketClassAttributes };
export { BucketTypeAttributes as CreateBucketTypeAttributes };
export { ClaimAttributes as CreateClaimAttributes };
export { ClaimDeductibleAttributes as CreateClaimDeductibleAttributes };
export { BlueprintAttributes as CreateContractAttributes };
export { CreateBlueprintRelationships as CreateContractRelationships };
export { CountryAttributes as CreateCountryAttributes };
export { CreateBucketDefinitionAttributes as CreateCoverageAttributes };
export { AssetTypeAttributes as CreateCoverageGroupTemplateAttributes };
export { AssetTypeAttributes as CreateCoverageTemplateAttributes };
export { BlueprintAttributes as CreateDeclarationsPageAttributes };
export { CreateBlueprintRelationships as CreateDeclarationsPageRelationships };
export { BlueprintAttributes as CreateDeedAttributes };
export { CreateBlueprintRelationships as CreateDeedRelationships };
export { BlueprintAttributes as CreateDeliveryPaperworkAttributes };
export { CreateBlueprintRelationships as CreateDeliveryPaperworkRelationships };
export { CreateDepreciationModifierRelationships as CreateDepreciationOverrideRelationships };
export { AssetTypeAttributes as CreateDisasterAttributes };
export { BlueprintAttributes as CreateDocumentAttributes };
export { AssetTypeAttributes as CreateDocumentClassAttributes };
export { CreateBlueprintRelationships as CreateDocumentRelationships };
export { AssetAttributes as CreateDwellingAttributes };
export { CreateAssetAppraisalAttributes as CreateFinancialDocumentAttributes };
export { AccountProviderContactAttributes as CreateIdentityAttributes };
export { AssetTypeAttributes as CreateIncidentClassAttributes };
export { BlueprintAttributes as CreateIncidentReportAttributes };
export { CreateBlueprintRelationships as CreateIncidentReportRelationships };
export { BucketTypeAttributes as CreateIncidentTypeAttributes };
export { CreateChangeOrderAttributes as CreateInvoiceAttributes };
export { AppraisalLineAttributes as CreateItemAppraisalAttributes };
export { AssetTypeAttributes as CreateItemCategoryAttributes };
export { AssetTypeAttributes as CreateItemClassAttributes };
export { CreateChangeOrderLineAttributes as CreateItemImpactChangeOrderAttributes };
export { CreateEstimateLineAttributes as CreateItemImpactEstimateAttributes };
export { CreateInvoiceLineAttributes as CreateItemImpactInvoiceAttributes };
export { CreateInvoiceLineAttributes as CreateItemImpactPaymentAttributes };
export { CreateChangeOrderAttributes as CreateItemizableFinancialDocumentAttributes };
export { AssetTypeAttributes as CreateItemTemplateAttributes };
export { BlueprintAttributes as CreateParamedicReportAttributes };
export { CreateBlueprintRelationships as CreateParamedicReportRelationships };
export { CreateChangeOrderAttributes as CreatePaymentAttributes };
export { CreateInvoiceLineAttributes as CreatePaymentLineAttributes };
export { AssetTypeAttributes as CreatePerilAttributes };
export { BlueprintAttributes as CreatePermitAttributes };
export { CreateBlueprintRelationships as CreatePermitRelationships };
export { CreateEmailAddressRelationships as CreatePhoneNumberRelationships };
export { BlueprintAttributes as CreatePoliceReportAttributes };
export { CreateBlueprintRelationships as CreatePoliceReportRelationships };
export { BlueprintAttributes as CreatePolicyJacketAttributes };
export { CreateBlueprintRelationships as CreatePolicyJacketRelationships };
export { AssetTypeAttributes as CreatePolicyTemplateAttributes };
export { BlueprintAttributes as CreateProductSpecAttributes };
export { CreateBlueprintRelationships as CreateProductSpecRelationships };
export { CreateAccountAttributes as CreateProjectAttributes };
export { CreateIncidentImpactAttributes as CreateProjectImpactAttributes };
export { BlueprintAttributes as CreateRentRollAttributes };
export { CreateBlueprintRelationships as CreateRentRollRelationships };
export { BlueprintAttributes as CreateScopeOfLossAttributes };
export { CreateBlueprintRelationships as CreateScopeOfLossRelationships };
export { AssetTypeAttributes as CreateServiceCategoryAttributes };
export { AssetTypeAttributes as CreateServiceClassAttributes };
export { CreateChangeOrderLineAttributes as CreateServiceTaskChangeOrderAttributes };
export { CreateEstimateLineAttributes as CreateServiceTaskEstimateAttributes };
export { CreateInvoiceLineAttributes as CreateServiceTaskInvoiceAttributes };
export { CreateInvoiceLineAttributes as CreateServiceTaskPaymentAttributes };
export { AssetTypeAttributes as CreateServiceTypeAttributes };
export { CreatePerilRelationships as CreateServiceTypeRelationships };
export { CreateSpaceCategoryAttributes as CreateSpaceClassAttributes };
export { AccountAttributes as CreateSpaceGroupAttributes };
export { AssetTypeAttributes as CreateSpaceGroupTypeAttributes };
export { CreateSpaceCategoryAttributes as CreateSpaceTypeAttributes };
export { AssetAttributeTypeItemTemplateAttributes as CreateSpaceTypeItemTemplateAttributes };
export { CreateSpaceCategoryRelationships as CreateSpaceTypeRelationships };
export { CreateSubBucketDefinitionAttributes as CreateSubCoverageAttributes };
export { AssetTypeAttributes as CreateSubCoverageTemplateAttributes };
export { AssetTypeAttributes as CreateSubmissionTrackTemplateAttributes };
export { CreateAddressAttributes as CreateThirdPartyDwellingAttributes };
export { CreateAccountAttributes as CreateThirdPartyIndividualAttributes };
export { CreateThirdPartyIndividualRelationships as CreateThirdPartyRelationships };
export { BlueprintAttributes as CreateUserManualAttributes };
export { CreateBlueprintRelationships as CreateUserManualRelationships };
export { BlueprintAttributes as CreateWarrantyAttributes };
export { CreateBlueprintRelationships as CreateWarrantyRelationships };
export { CreateCurrencyAttributes as CurrencyAttributes };
export { Currency as CurrencyControllerGetCurrencyById200 };
export { AccountControllerGetCurrentAccountParams as CurrencyControllerGetCurrencyByIdParams };
export { CurrencyList as CurrencyControllerGetCurrencyList200 };
export { UserControllerGetUserAccountRolesParams as CurrencyControllerGetCurrencyListParams };
export { BlueprintAttributes as DeclarationsPageAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeclarationsPageControllerCreateDeclarationsPageParams };
export { ReferencedAssetList as DeclarationsPageControllerDeleteDeclarationsPageAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerDeleteDeclarationsPageAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as DeclarationsPageControllerDeleteDeclarationsPageAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerDeleteDeclarationsPageByIdParams };
export { ReferencedProjectList as DeclarationsPageControllerDeleteDeclarationsPageProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerDeleteDeclarationsPageProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as DeclarationsPageControllerDeleteDeclarationsPageProjectsRefRequest };
export { ReferencedSpaceList as DeclarationsPageControllerDeleteDeclarationsPageSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerDeleteDeclarationsPageSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as DeclarationsPageControllerDeleteDeclarationsPageSpacesRefRequest };
export { Account as DeclarationsPageControllerGetDeclarationsPageAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeclarationsPageControllerGetDeclarationsPageAccountParams };
export { ReferencedAccount as DeclarationsPageControllerGetDeclarationsPageAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerGetDeclarationsPageAccountRefParams };
export { AssetList as DeclarationsPageControllerGetDeclarationsPageAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeclarationsPageControllerGetDeclarationsPageAssetsParams };
export { ReferencedAssetList as DeclarationsPageControllerGetDeclarationsPageAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerGetDeclarationsPageAssetsRefParams };
export { DeclarationsPage as DeclarationsPageControllerGetDeclarationsPageById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeclarationsPageControllerGetDeclarationsPageByIdParams };
export { DocumentType as DeclarationsPageControllerGetDeclarationsPageDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeclarationsPageControllerGetDeclarationsPageDocumentTypeParams };
export { ReferencedDocumentType as DeclarationsPageControllerGetDeclarationsPageDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerGetDeclarationsPageDocumentTypeRefParams };
export { NullableFile as DeclarationsPageControllerGetDeclarationsPageFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeclarationsPageControllerGetDeclarationsPageFileParams };
export { NullableReferencedFile as DeclarationsPageControllerGetDeclarationsPageFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerGetDeclarationsPageFileRefParams };
export { DeclarationsPageList as DeclarationsPageControllerGetDeclarationsPageList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeclarationsPageControllerGetDeclarationsPageListParams };
export { ProjectList as DeclarationsPageControllerGetDeclarationsPageProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeclarationsPageControllerGetDeclarationsPageProjectsParams };
export { ReferencedProjectList as DeclarationsPageControllerGetDeclarationsPageProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerGetDeclarationsPageProjectsRefParams };
export { SpaceList as DeclarationsPageControllerGetDeclarationsPageSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeclarationsPageControllerGetDeclarationsPageSpacesParams };
export { ReferencedSpaceList as DeclarationsPageControllerGetDeclarationsPageSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerGetDeclarationsPageSpacesRefParams };
export { ReferencedAccount as DeclarationsPageControllerPatchDeclarationsPageAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerPatchDeclarationsPageAccountRefParams };
export { ReferencedUpdateAccount as DeclarationsPageControllerPatchDeclarationsPageAccountRefRequest };
export { ReferencedAssetList as DeclarationsPageControllerPatchDeclarationsPageAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerPatchDeclarationsPageAssetsRefParams };
export { ReferencedUpdateAssetList as DeclarationsPageControllerPatchDeclarationsPageAssetsRefRequest };
export { NullableReferencedFile as DeclarationsPageControllerPatchDeclarationsPageFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerPatchDeclarationsPageFileRefParams };
export { NullableReferencedUpdateFile as DeclarationsPageControllerPatchDeclarationsPageFileRefRequest };
export { ReferencedProjectList as DeclarationsPageControllerPatchDeclarationsPageProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerPatchDeclarationsPageProjectsRefParams };
export { ReferencedUpdateProjectList as DeclarationsPageControllerPatchDeclarationsPageProjectsRefRequest };
export { ReferencedSpaceList as DeclarationsPageControllerPatchDeclarationsPageSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerPatchDeclarationsPageSpacesRefParams };
export { ReferencedUpdateSpaceList as DeclarationsPageControllerPatchDeclarationsPageSpacesRefRequest };
export { ReferencedAssetList as DeclarationsPageControllerPostDeclarationsPageAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerPostDeclarationsPageAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as DeclarationsPageControllerPostDeclarationsPageAssetsRefRequest };
export { ReferencedProjectList as DeclarationsPageControllerPostDeclarationsPageProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerPostDeclarationsPageProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as DeclarationsPageControllerPostDeclarationsPageProjectsRefRequest };
export { ReferencedSpaceList as DeclarationsPageControllerPostDeclarationsPageSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeclarationsPageControllerPostDeclarationsPageSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as DeclarationsPageControllerPostDeclarationsPageSpacesRefRequest };
export { DeclarationsPage as DeclarationsPageControllerUpdateDeclarationsPageById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeclarationsPageControllerUpdateDeclarationsPageByIdParams };
export { UpdateDeclarationsPage as DeclarationsPageControllerUpdateDeclarationsPageByIdRequest };
export { BlueprintRelationships as DeclarationsPageRelationships };
export { AccountControllerGetCurrentAccountParams as DeductibleControllerCreateDeductibleParams };
export { BucketDefinitionList as DeductibleControllerGetDeductibleBucketDefinitions200 };
export { UserControllerGetUserAccountRolesParams as DeductibleControllerGetDeductibleBucketDefinitionsParams };
export { ReferencedBucketDefinitionList as DeductibleControllerGetDeductibleBucketDefinitionsRef200 };
export { Deductible as DeductibleControllerGetDeductibleById200 };
export { AccountControllerGetCurrentAccountParams as DeductibleControllerGetDeductibleByIdParams };
export { ClaimDeductibleList as DeductibleControllerGetDeductibleClaimDeductibles200 };
export { UserControllerGetUserAccountRolesParams as DeductibleControllerGetDeductibleClaimDeductiblesParams };
export { ReferencedClaimDeductibleList as DeductibleControllerGetDeductibleClaimDeductiblesRef200 };
export { ClaimTarget as DeductibleControllerGetDeductibleClaimTarget200 };
export { AccountControllerGetCurrentAccountParams as DeductibleControllerGetDeductibleClaimTargetParams };
export { ReferencedClaimTarget as DeductibleControllerGetDeductibleClaimTargetRef200 };
export { DeductibleList as DeductibleControllerGetDeductibleList200 };
export { UserControllerGetUserAccountRolesParams as DeductibleControllerGetDeductibleListParams };
export { ReferencedClaimTarget as DeductibleControllerPatchDeductibleClaimTargetRef200 };
export { ReferencedUpdateClaimTarget as DeductibleControllerPatchDeductibleClaimTargetRefRequest };
export { Deductible as DeductibleControllerUpdateDeductibleById200 };
export { AccountControllerGetCurrentAccountParams as DeductibleControllerUpdateDeductibleByIdParams };
export { UpdateDeductible as DeductibleControllerUpdateDeductibleByIdRequest };
export { BlueprintAttributes as DeedAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeedControllerCreateDeedParams };
export { ReferencedAssetList as DeedControllerDeleteDeedAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerDeleteDeedAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as DeedControllerDeleteDeedAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerDeleteDeedByIdParams };
export { ReferencedProjectList as DeedControllerDeleteDeedProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerDeleteDeedProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as DeedControllerDeleteDeedProjectsRefRequest };
export { ReferencedSpaceList as DeedControllerDeleteDeedSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerDeleteDeedSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as DeedControllerDeleteDeedSpacesRefRequest };
export { Account as DeedControllerGetDeedAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeedControllerGetDeedAccountParams };
export { ReferencedAccount as DeedControllerGetDeedAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerGetDeedAccountRefParams };
export { AssetList as DeedControllerGetDeedAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeedControllerGetDeedAssetsParams };
export { ReferencedAssetList as DeedControllerGetDeedAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerGetDeedAssetsRefParams };
export { Deed as DeedControllerGetDeedById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeedControllerGetDeedByIdParams };
export { DocumentType as DeedControllerGetDeedDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeedControllerGetDeedDocumentTypeParams };
export { ReferencedDocumentType as DeedControllerGetDeedDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerGetDeedDocumentTypeRefParams };
export { NullableFile as DeedControllerGetDeedFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeedControllerGetDeedFileParams };
export { NullableReferencedFile as DeedControllerGetDeedFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerGetDeedFileRefParams };
export { DeedList as DeedControllerGetDeedList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeedControllerGetDeedListParams };
export { ProjectList as DeedControllerGetDeedProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeedControllerGetDeedProjectsParams };
export { ReferencedProjectList as DeedControllerGetDeedProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerGetDeedProjectsRefParams };
export { SpaceList as DeedControllerGetDeedSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeedControllerGetDeedSpacesParams };
export { ReferencedSpaceList as DeedControllerGetDeedSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerGetDeedSpacesRefParams };
export { ReferencedAccount as DeedControllerPatchDeedAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerPatchDeedAccountRefParams };
export { ReferencedUpdateAccount as DeedControllerPatchDeedAccountRefRequest };
export { ReferencedAssetList as DeedControllerPatchDeedAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerPatchDeedAssetsRefParams };
export { ReferencedUpdateAssetList as DeedControllerPatchDeedAssetsRefRequest };
export { NullableReferencedFile as DeedControllerPatchDeedFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerPatchDeedFileRefParams };
export { NullableReferencedUpdateFile as DeedControllerPatchDeedFileRefRequest };
export { ReferencedProjectList as DeedControllerPatchDeedProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerPatchDeedProjectsRefParams };
export { ReferencedUpdateProjectList as DeedControllerPatchDeedProjectsRefRequest };
export { ReferencedSpaceList as DeedControllerPatchDeedSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerPatchDeedSpacesRefParams };
export { ReferencedUpdateSpaceList as DeedControllerPatchDeedSpacesRefRequest };
export { ReferencedAssetList as DeedControllerPostDeedAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerPostDeedAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as DeedControllerPostDeedAssetsRefRequest };
export { ReferencedProjectList as DeedControllerPostDeedProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerPostDeedProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as DeedControllerPostDeedProjectsRefRequest };
export { ReferencedSpaceList as DeedControllerPostDeedSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeedControllerPostDeedSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as DeedControllerPostDeedSpacesRefRequest };
export { Deed as DeedControllerUpdateDeedById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeedControllerUpdateDeedByIdParams };
export { UpdateDeed as DeedControllerUpdateDeedByIdRequest };
export { BlueprintRelationships as DeedRelationships };
export { BlueprintAttributes as DeliveryPaperworkAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeliveryPaperworkControllerCreateDeliveryPaperworkParams };
export { ReferencedAssetList as DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerDeleteDeliveryPaperworkByIdParams };
export { ReferencedProjectList as DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRefRequest };
export { ReferencedSpaceList as DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRefRequest };
export { Account as DeliveryPaperworkControllerGetDeliveryPaperworkAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeliveryPaperworkControllerGetDeliveryPaperworkAccountParams };
export { ReferencedAccount as DeliveryPaperworkControllerGetDeliveryPaperworkAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerGetDeliveryPaperworkAccountRefParams };
export { AssetList as DeliveryPaperworkControllerGetDeliveryPaperworkAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeliveryPaperworkControllerGetDeliveryPaperworkAssetsParams };
export { ReferencedAssetList as DeliveryPaperworkControllerGetDeliveryPaperworkAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerGetDeliveryPaperworkAssetsRefParams };
export { DeliveryPaperwork as DeliveryPaperworkControllerGetDeliveryPaperworkById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeliveryPaperworkControllerGetDeliveryPaperworkByIdParams };
export { DocumentType as DeliveryPaperworkControllerGetDeliveryPaperworkDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeParams };
export { ReferencedDocumentType as DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeRefParams };
export { NullableFile as DeliveryPaperworkControllerGetDeliveryPaperworkFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeliveryPaperworkControllerGetDeliveryPaperworkFileParams };
export { NullableReferencedFile as DeliveryPaperworkControllerGetDeliveryPaperworkFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerGetDeliveryPaperworkFileRefParams };
export { DeliveryPaperworkList as DeliveryPaperworkControllerGetDeliveryPaperworkList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeliveryPaperworkControllerGetDeliveryPaperworkListParams };
export { ProjectList as DeliveryPaperworkControllerGetDeliveryPaperworkProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeliveryPaperworkControllerGetDeliveryPaperworkProjectsParams };
export { ReferencedProjectList as DeliveryPaperworkControllerGetDeliveryPaperworkProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerGetDeliveryPaperworkProjectsRefParams };
export { SpaceList as DeliveryPaperworkControllerGetDeliveryPaperworkSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DeliveryPaperworkControllerGetDeliveryPaperworkSpacesParams };
export { ReferencedSpaceList as DeliveryPaperworkControllerGetDeliveryPaperworkSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerGetDeliveryPaperworkSpacesRefParams };
export { ReferencedAccount as DeliveryPaperworkControllerPatchDeliveryPaperworkAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerPatchDeliveryPaperworkAccountRefParams };
export { ReferencedUpdateAccount as DeliveryPaperworkControllerPatchDeliveryPaperworkAccountRefRequest };
export { ReferencedAssetList as DeliveryPaperworkControllerPatchDeliveryPaperworkAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerPatchDeliveryPaperworkAssetsRefParams };
export { ReferencedUpdateAssetList as DeliveryPaperworkControllerPatchDeliveryPaperworkAssetsRefRequest };
export { NullableReferencedFile as DeliveryPaperworkControllerPatchDeliveryPaperworkFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerPatchDeliveryPaperworkFileRefParams };
export { NullableReferencedUpdateFile as DeliveryPaperworkControllerPatchDeliveryPaperworkFileRefRequest };
export { ReferencedProjectList as DeliveryPaperworkControllerPatchDeliveryPaperworkProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerPatchDeliveryPaperworkProjectsRefParams };
export { ReferencedUpdateProjectList as DeliveryPaperworkControllerPatchDeliveryPaperworkProjectsRefRequest };
export { ReferencedSpaceList as DeliveryPaperworkControllerPatchDeliveryPaperworkSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerPatchDeliveryPaperworkSpacesRefParams };
export { ReferencedUpdateSpaceList as DeliveryPaperworkControllerPatchDeliveryPaperworkSpacesRefRequest };
export { ReferencedAssetList as DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRefRequest };
export { ReferencedProjectList as DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRefRequest };
export { ReferencedSpaceList as DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRefRequest };
export { DeliveryPaperwork as DeliveryPaperworkControllerUpdateDeliveryPaperworkById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DeliveryPaperworkControllerUpdateDeliveryPaperworkByIdParams };
export { UpdateDeliveryPaperwork as DeliveryPaperworkControllerUpdateDeliveryPaperworkByIdRequest };
export { BlueprintRelationships as DeliveryPaperworkRelationships };
export { CreateDepreciationModifierAttributes as DepreciationModifierAttributes };
export { CreateDepreciationOverrideAttributes as DepreciationOverrideAttributes };
export { DepreciationModifierRelationships as DepreciationOverrideRelationships };
export { CreateDepreciationScheduleAttributes as DepreciationScheduleAttributes };
export { AssetTypeAttributes as DisasterAttributes };
export { Disaster as DisasterControllerGetDisasterById200 };
export { AccountControllerGetCurrentAccountParams as DisasterControllerGetDisasterByIdParams };
export { IncidentType as DisasterControllerGetDisasterIncidentType200 };
export { AccountControllerGetCurrentAccountParams as DisasterControllerGetDisasterIncidentTypeParams };
export { ReferencedIncidentType as DisasterControllerGetDisasterIncidentTypeRef200 };
export { DisasterList as DisasterControllerGetDisasterList200 };
export { UserControllerGetUserAccountRolesParams as DisasterControllerGetDisasterListParams };
export { BlueprintAttributes as DocumentAttributes };
export { AssetTypeAttributes as DocumentClassAttributes };
export { AssetTypeList as DocumentClassControllerGetDocumentClassAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as DocumentClassControllerGetDocumentClassAssetTypesParams };
export { ReferencedAssetTypeList as DocumentClassControllerGetDocumentClassAssetTypesRef200 };
export { DocumentClass as DocumentClassControllerGetDocumentClassById200 };
export { AccountControllerGetCurrentAccountParams as DocumentClassControllerGetDocumentClassByIdParams };
export { DocumentClassList as DocumentClassControllerGetDocumentClassList200 };
export { UserControllerGetUserAccountRolesParams as DocumentClassControllerGetDocumentClassListParams };
export { DocumentTypeList as DocumentClassControllerGetDocumentClassTypes200 };
export { UserControllerGetUserAccountRolesParams as DocumentClassControllerGetDocumentClassTypesParams };
export { ReferencedDocumentTypeList as DocumentClassControllerGetDocumentClassTypesRef200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DocumentControllerCreateDocumentParams };
export { ReferencedAssetList as DocumentControllerDeleteDocumentAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerDeleteDocumentAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as DocumentControllerDeleteDocumentAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerDeleteDocumentByIdParams };
export { ReferencedProjectList as DocumentControllerDeleteDocumentProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerDeleteDocumentProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as DocumentControllerDeleteDocumentProjectsRefRequest };
export { ReferencedSpaceList as DocumentControllerDeleteDocumentSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerDeleteDocumentSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as DocumentControllerDeleteDocumentSpacesRefRequest };
export { Account as DocumentControllerGetDocumentAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DocumentControllerGetDocumentAccountParams };
export { ReferencedAccount as DocumentControllerGetDocumentAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerGetDocumentAccountRefParams };
export { AssetList as DocumentControllerGetDocumentAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DocumentControllerGetDocumentAssetsParams };
export { ReferencedAssetList as DocumentControllerGetDocumentAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerGetDocumentAssetsRefParams };
export { Document as DocumentControllerGetDocumentById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DocumentControllerGetDocumentByIdParams };
export { DocumentType as DocumentControllerGetDocumentDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DocumentControllerGetDocumentDocumentTypeParams };
export { ReferencedDocumentType as DocumentControllerGetDocumentDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerGetDocumentDocumentTypeRefParams };
export { NullableFile as DocumentControllerGetDocumentFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DocumentControllerGetDocumentFileParams };
export { NullableReferencedFile as DocumentControllerGetDocumentFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerGetDocumentFileRefParams };
export { DocumentList as DocumentControllerGetDocumentList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DocumentControllerGetDocumentListParams };
export { ProjectList as DocumentControllerGetDocumentProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DocumentControllerGetDocumentProjectsParams };
export { ReferencedProjectList as DocumentControllerGetDocumentProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerGetDocumentProjectsRefParams };
export { SpaceList as DocumentControllerGetDocumentSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DocumentControllerGetDocumentSpacesParams };
export { ReferencedSpaceList as DocumentControllerGetDocumentSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerGetDocumentSpacesRefParams };
export { ReferencedAccount as DocumentControllerPatchDocumentAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerPatchDocumentAccountRefParams };
export { ReferencedUpdateAccount as DocumentControllerPatchDocumentAccountRefRequest };
export { ReferencedAssetList as DocumentControllerPatchDocumentAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerPatchDocumentAssetsRefParams };
export { ReferencedUpdateAssetList as DocumentControllerPatchDocumentAssetsRefRequest };
export { NullableReferencedFile as DocumentControllerPatchDocumentFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerPatchDocumentFileRefParams };
export { NullableReferencedUpdateFile as DocumentControllerPatchDocumentFileRefRequest };
export { ReferencedProjectList as DocumentControllerPatchDocumentProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerPatchDocumentProjectsRefParams };
export { ReferencedUpdateProjectList as DocumentControllerPatchDocumentProjectsRefRequest };
export { ReferencedSpaceList as DocumentControllerPatchDocumentSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerPatchDocumentSpacesRefParams };
export { ReferencedUpdateSpaceList as DocumentControllerPatchDocumentSpacesRefRequest };
export { ReferencedAssetList as DocumentControllerPostDocumentAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerPostDocumentAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as DocumentControllerPostDocumentAssetsRefRequest };
export { ReferencedProjectList as DocumentControllerPostDocumentProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerPostDocumentProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as DocumentControllerPostDocumentProjectsRefRequest };
export { ReferencedSpaceList as DocumentControllerPostDocumentSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DocumentControllerPostDocumentSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as DocumentControllerPostDocumentSpacesRefRequest };
export { Document as DocumentControllerUpdateDocumentById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DocumentControllerUpdateDocumentByIdParams };
export { UpdateDocument as DocumentControllerUpdateDocumentByIdRequest };
export { BlueprintRelationships as DocumentRelationships };
export { CreateDocumentTypeAttributes as DocumentTypeAttributes };
export { AssetTypeList as DocumentTypeControllerGetDocumentTypeAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as DocumentTypeControllerGetDocumentTypeAssetTypesParams };
export { ReferencedAssetTypeList as DocumentTypeControllerGetDocumentTypeAssetTypesRef200 };
export { DocumentType as DocumentTypeControllerGetDocumentTypeById200 };
export { AccountControllerGetCurrentAccountParams as DocumentTypeControllerGetDocumentTypeByIdParams };
export { DocumentClassList as DocumentTypeControllerGetDocumentTypeClasses200 };
export { UserControllerGetUserAccountRolesParams as DocumentTypeControllerGetDocumentTypeClassesParams };
export { ReferencedDocumentClassList as DocumentTypeControllerGetDocumentTypeClassesRef200 };
export { DocumentTypeList as DocumentTypeControllerGetDocumentTypeList200 };
export { UserControllerGetUserAccountRolesParams as DocumentTypeControllerGetDocumentTypeListParams };
export { AssetAttributes as DwellingAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DwellingControllerCreateDwellingParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerDeleteDwellingByIdParams };
export { Account as DwellingControllerGetDwellingAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DwellingControllerGetDwellingAccountParams };
export { ReferencedAccount as DwellingControllerGetDwellingAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerGetDwellingAccountRefParams };
export { Address as DwellingControllerGetDwellingAddress200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DwellingControllerGetDwellingAddressParams };
export { ReferencedAddress as DwellingControllerGetDwellingAddressRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerGetDwellingAddressRefParams };
export { AssetAppraisalList as DwellingControllerGetDwellingAppraisals200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DwellingControllerGetDwellingAppraisalsParams };
export { ReferencedAssetAppraisalList as DwellingControllerGetDwellingAppraisalsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerGetDwellingAppraisalsRefParams };
export { AssetType as DwellingControllerGetDwellingAssetType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DwellingControllerGetDwellingAssetTypeParams };
export { ReferencedAssetType as DwellingControllerGetDwellingAssetTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerGetDwellingAssetTypeRefParams };
export { Dwelling as DwellingControllerGetDwellingById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DwellingControllerGetDwellingByIdParams };
export { DwellingList as DwellingControllerGetDwellingList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as DwellingControllerGetDwellingListParams };
export { NullableAssetAppraisal as DwellingControllerGetDwellingRelevantAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DwellingControllerGetDwellingRelevantAppraisalParams };
export { NullableReferencedAssetAppraisal as DwellingControllerGetDwellingRelevantAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerGetDwellingRelevantAppraisalRefParams };
export { NullableAssetAppraisal as DwellingControllerGetDwellingSelectedAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DwellingControllerGetDwellingSelectedAppraisalParams };
export { NullableReferencedAssetAppraisal as DwellingControllerGetDwellingSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerGetDwellingSelectedAppraisalRefParams };
export { ReferencedAccount as DwellingControllerPatchDwellingAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerPatchDwellingAccountRefParams };
export { ReferencedUpdateAccount as DwellingControllerPatchDwellingAccountRefRequest };
export { ReferencedAddress as DwellingControllerPatchDwellingAddressRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerPatchDwellingAddressRefParams };
export { ReferencedUpdateAddress as DwellingControllerPatchDwellingAddressRefRequest };
export { ReferencedAssetType as DwellingControllerPatchDwellingAssetTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerPatchDwellingAssetTypeRefParams };
export { ReferencedUpdateAssetType as DwellingControllerPatchDwellingAssetTypeRefRequest };
export { NullableReferencedAssetAppraisal as DwellingControllerPatchDwellingSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as DwellingControllerPatchDwellingSelectedAppraisalRefParams };
export { NullableReferencedUpdateAssetAppraisal as DwellingControllerPatchDwellingSelectedAppraisalRefRequest };
export { Dwelling as DwellingControllerUpdateDwellingById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as DwellingControllerUpdateDwellingByIdParams };
export { UpdateDwelling as DwellingControllerUpdateDwellingByIdRequest };
export { AccountControllerGetCurrentAccountParams as EmailAddressControllerCreateEmailAddressParams };
export { EmailAddress as EmailAddressControllerGetEmailAddressById200 };
export { AccountControllerGetCurrentAccountParams as EmailAddressControllerGetEmailAddressByIdParams };
export { Identity as EmailAddressControllerGetEmailAddressIdentity200 };
export { AccountControllerGetCurrentAccountParams as EmailAddressControllerGetEmailAddressIdentityParams };
export { ReferencedIdentity as EmailAddressControllerGetEmailAddressIdentityRef200 };
export { EmailAddressList as EmailAddressControllerGetEmailAddressList200 };
export { UserControllerGetUserAccountRolesParams as EmailAddressControllerGetEmailAddressListParams };
export { ReferencedIdentity as EmailAddressControllerPatchEmailAddressIdentityRef200 };
export { ReferencedUpdateIdentity as EmailAddressControllerPatchEmailAddressIdentityRefRequest };
export { EmailAddress as EmailAddressControllerUpdateEmailAddressById200 };
export { AccountControllerGetCurrentAccountParams as EmailAddressControllerUpdateEmailAddressByIdParams };
export { UpdateEmailAddress as EmailAddressControllerUpdateEmailAddressByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EndorsementControllerCreateEndorsementParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerDeleteEndorsementByIdParams };
export { ReferencedCoverageList as EndorsementControllerDeleteEndorsementCoveragesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerDeleteEndorsementCoveragesRefParams };
export { EndorsementControllerPostEndorsementCoveragesRefRequest as EndorsementControllerDeleteEndorsementCoveragesRefRequest };
export { ReferencedPerilList as EndorsementControllerDeleteEndorsementPerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerDeleteEndorsementPerilsRefParams };
export { IncidentImpactControllerPostIncidentImpactPerilsRefRequest as EndorsementControllerDeleteEndorsementPerilsRefRequest };
export { ReferencedSubCoverageList as EndorsementControllerDeleteEndorsementSubCoveragesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerDeleteEndorsementSubCoveragesRefParams };
export { EndorsementControllerPostEndorsementSubCoveragesRefRequest as EndorsementControllerDeleteEndorsementSubCoveragesRefRequest };
export { Endorsement as EndorsementControllerGetEndorsementById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EndorsementControllerGetEndorsementByIdParams };
export { CoverageList as EndorsementControllerGetEndorsementCoverages200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EndorsementControllerGetEndorsementCoveragesParams };
export { ReferencedCoverageList as EndorsementControllerGetEndorsementCoveragesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerGetEndorsementCoveragesRefParams };
export { EndorsementList as EndorsementControllerGetEndorsementList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EndorsementControllerGetEndorsementListParams };
export { PerilList as EndorsementControllerGetEndorsementPerils200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EndorsementControllerGetEndorsementPerilsParams };
export { ReferencedPerilList as EndorsementControllerGetEndorsementPerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerGetEndorsementPerilsRefParams };
export { PolicyTerm as EndorsementControllerGetEndorsementPolicyTerm200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EndorsementControllerGetEndorsementPolicyTermParams };
export { ReferencedPolicyTerm as EndorsementControllerGetEndorsementPolicyTermRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerGetEndorsementPolicyTermRefParams };
export { SubCoverageList as EndorsementControllerGetEndorsementSubCoverages200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EndorsementControllerGetEndorsementSubCoveragesParams };
export { ReferencedSubCoverageList as EndorsementControllerGetEndorsementSubCoveragesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerGetEndorsementSubCoveragesRefParams };
export { NullableEndorsementTemplate as EndorsementControllerGetEndorsementTemplate200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EndorsementControllerGetEndorsementTemplateParams };
export { NullableReferencedEndorsementTemplate as EndorsementControllerGetEndorsementTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerGetEndorsementTemplateRefParams };
export { ReferencedCoverageList as EndorsementControllerPatchEndorsementCoveragesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerPatchEndorsementCoveragesRefParams };
export { ReferencedUpdateCoverageList as EndorsementControllerPatchEndorsementCoveragesRefRequest };
export { ReferencedPerilList as EndorsementControllerPatchEndorsementPerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerPatchEndorsementPerilsRefParams };
export { ReferencedUpdatePerilList as EndorsementControllerPatchEndorsementPerilsRefRequest };
export { ReferencedPolicyTerm as EndorsementControllerPatchEndorsementPolicyTermRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerPatchEndorsementPolicyTermRefParams };
export { ReferencedUpdatePolicyTerm as EndorsementControllerPatchEndorsementPolicyTermRefRequest };
export { ReferencedSubCoverageList as EndorsementControllerPatchEndorsementSubCoveragesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerPatchEndorsementSubCoveragesRefParams };
export { ReferencedUpdateSubCoverageList as EndorsementControllerPatchEndorsementSubCoveragesRefRequest };
export { NullableReferencedEndorsementTemplate as EndorsementControllerPatchEndorsementTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerPatchEndorsementTemplateRefParams };
export { NullableReferencedUpdateEndorsementTemplate as EndorsementControllerPatchEndorsementTemplateRefRequest };
export { ReferencedCoverageList as EndorsementControllerPostEndorsementCoveragesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerPostEndorsementCoveragesRefParams };
export { ReferencedPerilList as EndorsementControllerPostEndorsementPerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerPostEndorsementPerilsRefParams };
export { IncidentImpactControllerPostIncidentImpactPerilsRefRequest as EndorsementControllerPostEndorsementPerilsRefRequest };
export { ReferencedSubCoverageList as EndorsementControllerPostEndorsementSubCoveragesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EndorsementControllerPostEndorsementSubCoveragesRefParams };
export { Endorsement as EndorsementControllerUpdateEndorsementById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EndorsementControllerUpdateEndorsementByIdParams };
export { UpdateEndorsement as EndorsementControllerUpdateEndorsementByIdRequest };
export { CreateEndorsementTemplateAttributes as EndorsementTemplateAttributes };
export { BucketTypeList as EndorsementTemplateControllerGetEndorsementTemplateBucketTypes200 };
export { UserControllerGetUserAccountRolesParams as EndorsementTemplateControllerGetEndorsementTemplateBucketTypesParams };
export { ReferencedBucketTypeList as EndorsementTemplateControllerGetEndorsementTemplateBucketTypesRef200 };
export { EndorsementTemplate as EndorsementTemplateControllerGetEndorsementTemplateById200 };
export { AccountControllerGetCurrentAccountParams as EndorsementTemplateControllerGetEndorsementTemplateByIdParams };
export { CoverageTemplateList as EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplates200 };
export { UserControllerGetUserAccountRolesParams as EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplatesParams };
export { ReferencedCoverageTemplateList as EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplatesRef200 };
export { EndorsementTemplateList as EndorsementTemplateControllerGetEndorsementTemplateList200 };
export { UserControllerGetUserAccountRolesParams as EndorsementTemplateControllerGetEndorsementTemplateListParams };
export { PerilList as EndorsementTemplateControllerGetEndorsementTemplatePerils200 };
export { UserControllerGetUserAccountRolesParams as EndorsementTemplateControllerGetEndorsementTemplatePerilsParams };
export { ReferencedPerilList as EndorsementTemplateControllerGetEndorsementTemplatePerilsRef200 };
export { SubCoverageTemplateList as EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatess200 };
export { UserControllerGetUserAccountRolesParams as EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatessParams };
export { ReferencedSubCoverageTemplateList as EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatessRef200 };
export { CreateEntryAttributes as EntryAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerCreateEntryParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerDeleteEntryByIdParams };
export { Account as EntryControllerGetEntryAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerGetEntryAccountParams };
export { ReferencedAccount as EntryControllerGetEntryAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerGetEntryAccountRefParams };
export { BaseBucket as EntryControllerGetEntryBucket200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerGetEntryBucketParams };
export { ReferencedBaseBucket as EntryControllerGetEntryBucketRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerGetEntryBucketRefParams };
export { Entry as EntryControllerGetEntryById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerGetEntryByIdParams };
export { Currency as EntryControllerGetEntryCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerGetEntryCurrencyParams };
export { ReferencedCurrency as EntryControllerGetEntryCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerGetEntryCurrencyRefParams };
export { FundingSource as EntryControllerGetEntryFundingSource200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerGetEntryFundingSourceParams };
export { ReferencedFundingSource as EntryControllerGetEntryFundingSourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerGetEntryFundingSourceRefParams };
export { EntryList as EntryControllerGetEntryList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EntryControllerGetEntryListParams };
export { Project as EntryControllerGetEntryProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerGetEntryProjectParams };
export { ReferencedProject as EntryControllerGetEntryProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerGetEntryProjectRefParams };
export { EntrySource as EntryControllerGetEntrySource200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerGetEntrySourceParams };
export { ReferencedEntrySource as EntryControllerGetEntrySourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerGetEntrySourceRefParams };
export { NullableBaseSubBucket as EntryControllerGetEntrySubBucket200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerGetEntrySubBucketParams };
export { NullableReferencedBaseSubBucket as EntryControllerGetEntrySubBucketRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerGetEntrySubBucketRefParams };
export { ReferencedBaseBucket as EntryControllerPatchEntryBucketRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerPatchEntryBucketRefParams };
export { ReferencedUpdateBaseBucket as EntryControllerPatchEntryBucketRefRequest };
export { ReferencedEntrySource as EntryControllerPatchEntrySourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerPatchEntrySourceRefParams };
export { ReferencedUpdateEntrySource as EntryControllerPatchEntrySourceRefRequest };
export { NullableReferencedBaseSubBucket as EntryControllerPatchEntrySubBucketRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntryControllerPatchEntrySubBucketRefParams };
export { NullableReferencedUpdateBaseSubBucket as EntryControllerPatchEntrySubBucketRefRequest };
export { Entry as EntryControllerUpdateEntryById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntryControllerUpdateEntryByIdParams };
export { UpdateEntry as EntryControllerUpdateEntryByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerCreateEntrySourceParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerDeleteEntrySourceByIdParams };
export { Account as EntrySourceControllerGetEntrySourceAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerGetEntrySourceAccountParams };
export { ReferencedAccount as EntrySourceControllerGetEntrySourceAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerGetEntrySourceAccountRefParams };
export { ItemAppraisalList as EntrySourceControllerGetEntrySourceAppraisals200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EntrySourceControllerGetEntrySourceAppraisalsParams };
export { ReferencedItemAppraisalList as EntrySourceControllerGetEntrySourceAppraisalsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerGetEntrySourceAppraisalsRefParams };
export { EntrySource as EntrySourceControllerGetEntrySourceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerGetEntrySourceByIdParams };
export { Currency as EntrySourceControllerGetEntrySourceCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerGetEntrySourceCurrencyParams };
export { ReferencedCurrency as EntrySourceControllerGetEntrySourceCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerGetEntrySourceCurrencyRefParams };
export { EntryList as EntrySourceControllerGetEntrySourceEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EntrySourceControllerGetEntrySourceEntriesParams };
export { ReferencedEntryList as EntrySourceControllerGetEntrySourceEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerGetEntrySourceEntriesRefParams };
export { EntrySourceList as EntrySourceControllerGetEntrySourceList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EntrySourceControllerGetEntrySourceListParams };
export { EntrySourceMetadata as EntrySourceControllerGetEntrySourceMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerGetEntrySourceMetadataParams };
export { ReferencedEntrySourceMetadata as EntrySourceControllerGetEntrySourceMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerGetEntrySourceMetadataRefParams };
export { NullableProject as EntrySourceControllerGetEntrySourceProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerGetEntrySourceProjectParams };
export { NullableReferencedProject as EntrySourceControllerGetEntrySourceProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerGetEntrySourceProjectRefParams };
export { NullableItemAppraisal as EntrySourceControllerGetEntrySourceRelevantAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerGetEntrySourceRelevantAppraisalParams };
export { NullableReferencedItemAppraisal as EntrySourceControllerGetEntrySourceRelevantAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerGetEntrySourceRelevantAppraisalRefParams };
export { NullableItemAppraisal as EntrySourceControllerGetEntrySourceSelectedAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerGetEntrySourceSelectedAppraisalParams };
export { NullableReferencedItemAppraisal as EntrySourceControllerGetEntrySourceSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerGetEntrySourceSelectedAppraisalRefParams };
export { ReferencedAccount as EntrySourceControllerPatchEntrySourceAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerPatchEntrySourceAccountRefParams };
export { ReferencedUpdateAccount as EntrySourceControllerPatchEntrySourceAccountRefRequest };
export { ReferencedCurrency as EntrySourceControllerPatchEntrySourceCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerPatchEntrySourceCurrencyRefParams };
export { ReferencedUpdateCurrency as EntrySourceControllerPatchEntrySourceCurrencyRefRequest };
export { NullableReferencedProject as EntrySourceControllerPatchEntrySourceProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerPatchEntrySourceProjectRefParams };
export { NullableReferencedUpdateProject as EntrySourceControllerPatchEntrySourceProjectRefRequest };
export { NullableReferencedItemAppraisal as EntrySourceControllerPatchEntrySourceSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceControllerPatchEntrySourceSelectedAppraisalRefParams };
export { NullableReferencedUpdateItemAppraisal as EntrySourceControllerPatchEntrySourceSelectedAppraisalRefRequest };
export { EntrySource as EntrySourceControllerUpdateEntrySourceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceControllerUpdateEntrySourceByIdParams };
export { UpdateEntrySource as EntrySourceControllerUpdateEntrySourceByIdRequest };
export { CreateEntrySourceMediaAttributes as EntrySourceMediaAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMediaControllerCreateEntrySourceMediaParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMediaControllerDeleteEntrySourceMediaByIdParams };
export { EntrySourceMedia as EntrySourceMediaControllerGetEntrySourceMediaById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMediaControllerGetEntrySourceMediaByIdParams };
export { EntrySource as EntrySourceMediaControllerGetEntrySourceMediaEntrySource200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMediaControllerGetEntrySourceMediaEntrySourceParams };
export { ReferencedEntrySource as EntrySourceMediaControllerGetEntrySourceMediaEntrySourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMediaControllerGetEntrySourceMediaEntrySourceRefParams };
export { EntrySourceMediaList as EntrySourceMediaControllerGetEntrySourceMediaList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EntrySourceMediaControllerGetEntrySourceMediaListParams };
export { Media as EntrySourceMediaControllerGetEntrySourceMediaMedia200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMediaControllerGetEntrySourceMediaMediaParams };
export { ReferencedMedia as EntrySourceMediaControllerGetEntrySourceMediaMediaRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMediaControllerGetEntrySourceMediaMediaRefParams };
export { ReferencedEntrySource as EntrySourceMediaControllerPatchEntrySourceMediaEntrySourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMediaControllerPatchEntrySourceMediaEntrySourceRefParams };
export { ReferencedUpdateEntrySource as EntrySourceMediaControllerPatchEntrySourceMediaEntrySourceRefRequest };
export { ReferencedMedia as EntrySourceMediaControllerPatchEntrySourceMediaMediaRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMediaControllerPatchEntrySourceMediaMediaRefParams };
export { ReferencedUpdateMedia as EntrySourceMediaControllerPatchEntrySourceMediaMediaRefRequest };
export { EntrySourceMedia as EntrySourceMediaControllerUpdateEntrySourceMediaById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMediaControllerUpdateEntrySourceMediaByIdParams };
export { UpdateEntrySourceMedia as EntrySourceMediaControllerUpdateEntrySourceMediaByIdRequest };
export { CreateEntrySourceMetadataAttributes as EntrySourceMetadataAttributes };
export { Account as EntrySourceMetadataControllerGetEntrySourceMetadataAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMetadataControllerGetEntrySourceMetadataAccountParams };
export { ReferencedAccount as EntrySourceMetadataControllerGetEntrySourceMetadataAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMetadataControllerGetEntrySourceMetadataAccountRefParams };
export { EntrySourceMetadata as EntrySourceMetadataControllerGetEntrySourceMetadataById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMetadataControllerGetEntrySourceMetadataByIdParams };
export { Currency as EntrySourceMetadataControllerGetEntrySourceMetadataCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyParams };
export { ReferencedCurrency as EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyRefParams };
export { EntrySourceMetadataList as EntrySourceMetadataControllerGetEntrySourceMetadataList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EntrySourceMetadataControllerGetEntrySourceMetadataListParams };
export { EntrySource as EntrySourceMetadataControllerGetEntrySourceMetadataObject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMetadataControllerGetEntrySourceMetadataObjectParams };
export { ReferencedEntrySource as EntrySourceMetadataControllerGetEntrySourceMetadataObjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMetadataControllerGetEntrySourceMetadataObjectRefParams };
export { NullableProject as EntrySourceMetadataControllerGetEntrySourceMetadataProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EntrySourceMetadataControllerGetEntrySourceMetadataProjectParams };
export { NullableReferencedProject as EntrySourceMetadataControllerGetEntrySourceMetadataProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EntrySourceMetadataControllerGetEntrySourceMetadataProjectRefParams };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerCreateEstimateParams };
export { ReferencedAssetList as EstimateControllerDeleteEstimateAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerDeleteEstimateAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as EstimateControllerDeleteEstimateAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerDeleteEstimateByIdParams };
export { ReferencedProjectList as EstimateControllerDeleteEstimateProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerDeleteEstimateProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as EstimateControllerDeleteEstimateProjectsRefRequest };
export { ReferencedSpaceList as EstimateControllerDeleteEstimateSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerDeleteEstimateSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as EstimateControllerDeleteEstimateSpacesRefRequest };
export { Account as EstimateControllerGetEstimateAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerGetEstimateAccountParams };
export { ReferencedAccount as EstimateControllerGetEstimateAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateAccountRefParams };
export { AssetList as EstimateControllerGetEstimateAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateControllerGetEstimateAssetsParams };
export { ReferencedAssetList as EstimateControllerGetEstimateAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateAssetsRefParams };
export { Estimate as EstimateControllerGetEstimateById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerGetEstimateByIdParams };
export { ChangeOrderList as EstimateControllerGetEstimateChangeOrders200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateControllerGetEstimateChangeOrdersParams };
export { ReferencedChangeOrderList as EstimateControllerGetEstimateChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateChangeOrdersRefParams };
export { Currency as EstimateControllerGetEstimateCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerGetEstimateCurrencyParams };
export { ReferencedCurrency as EstimateControllerGetEstimateCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateCurrencyRefParams };
export { DocumentType as EstimateControllerGetEstimateDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerGetEstimateDocumentTypeParams };
export { ReferencedDocumentType as EstimateControllerGetEstimateDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateDocumentTypeRefParams };
export { NullableFile as EstimateControllerGetEstimateFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerGetEstimateFileParams };
export { NullableReferencedFile as EstimateControllerGetEstimateFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateFileRefParams };
export { EstimateLineList as EstimateControllerGetEstimateLines200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateControllerGetEstimateLinesParams };
export { ReferencedEstimateLineList as EstimateControllerGetEstimateLinesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateLinesRefParams };
export { EntrySourceList as EstimateControllerGetEstimateLineSubjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateControllerGetEstimateLineSubjectsParams };
export { ReferencedEntrySourceList as EstimateControllerGetEstimateLineSubjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateLineSubjectsRefParams };
export { EstimateList as EstimateControllerGetEstimateList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateControllerGetEstimateListParams };
export { ProjectList as EstimateControllerGetEstimateProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateControllerGetEstimateProjectsParams };
export { ReferencedProjectList as EstimateControllerGetEstimateProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateProjectsRefParams };
export { NullableService as EstimateControllerGetEstimateService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerGetEstimateServiceParams };
export { NullableReferencedService as EstimateControllerGetEstimateServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateServiceRefParams };
export { SpaceList as EstimateControllerGetEstimateSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateControllerGetEstimateSpacesParams };
export { ReferencedSpaceList as EstimateControllerGetEstimateSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateSpacesRefParams };
export { ItemizableFinancialDocumentStats as EstimateControllerGetEstimateStats200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerGetEstimateStatsParams };
export { ReferencedItemizableFinancialDocumentStats as EstimateControllerGetEstimateStatsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateStatsRefParams };
export { NullableAccountProvider as EstimateControllerGetEstimateVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerGetEstimateVendorParams };
export { NullableReferencedAccountProvider as EstimateControllerGetEstimateVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerGetEstimateVendorRefParams };
export { ReferencedAccount as EstimateControllerPatchEstimateAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPatchEstimateAccountRefParams };
export { ReferencedUpdateAccount as EstimateControllerPatchEstimateAccountRefRequest };
export { ReferencedAssetList as EstimateControllerPatchEstimateAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPatchEstimateAssetsRefParams };
export { ReferencedUpdateAssetList as EstimateControllerPatchEstimateAssetsRefRequest };
export { ReferencedCurrency as EstimateControllerPatchEstimateCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPatchEstimateCurrencyRefParams };
export { ReferencedUpdateCurrency as EstimateControllerPatchEstimateCurrencyRefRequest };
export { NullableReferencedFile as EstimateControllerPatchEstimateFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPatchEstimateFileRefParams };
export { NullableReferencedUpdateFile as EstimateControllerPatchEstimateFileRefRequest };
export { ReferencedProjectList as EstimateControllerPatchEstimateProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPatchEstimateProjectsRefParams };
export { ReferencedUpdateProjectList as EstimateControllerPatchEstimateProjectsRefRequest };
export { NullableReferencedService as EstimateControllerPatchEstimateServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPatchEstimateServiceRefParams };
export { NullableReferencedUpdateService as EstimateControllerPatchEstimateServiceRefRequest };
export { ReferencedSpaceList as EstimateControllerPatchEstimateSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPatchEstimateSpacesRefParams };
export { ReferencedUpdateSpaceList as EstimateControllerPatchEstimateSpacesRefRequest };
export { NullableReferencedAccountProvider as EstimateControllerPatchEstimateVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPatchEstimateVendorRefParams };
export { NullableReferencedUpdateAccountProvider as EstimateControllerPatchEstimateVendorRefRequest };
export { ReferencedAssetList as EstimateControllerPostEstimateAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPostEstimateAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as EstimateControllerPostEstimateAssetsRefRequest };
export { ReferencedProjectList as EstimateControllerPostEstimateProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPostEstimateProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as EstimateControllerPostEstimateProjectsRefRequest };
export { ReferencedSpaceList as EstimateControllerPostEstimateSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateControllerPostEstimateSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as EstimateControllerPostEstimateSpacesRefRequest };
export { Estimate as EstimateControllerUpdateEstimateById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateControllerUpdateEstimateByIdParams };
export { UpdateEstimate as EstimateControllerUpdateEstimateByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateLineControllerCreateEstimateLineParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerDeleteEstimateLineByIdParams };
export { ReferencedChangeOrderLineList as EstimateLineControllerDeleteEstimateLineChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerDeleteEstimateLineChangeOrdersRefParams };
export { EstimateLineControllerPostEstimateLineChangeOrdersRefRequest as EstimateLineControllerDeleteEstimateLineChangeOrdersRefRequest };
export { EstimateLine as EstimateLineControllerGetEstimateLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateLineControllerGetEstimateLineByIdParams };
export { ChangeOrderLineList as EstimateLineControllerGetEstimateLineChangeOrders200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateLineControllerGetEstimateLineChangeOrdersParams };
export { ReferencedChangeOrderLineList as EstimateLineControllerGetEstimateLineChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerGetEstimateLineChangeOrdersRefParams };
export { NullableEstimate as EstimateLineControllerGetEstimateLineEstimate200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateLineControllerGetEstimateLineEstimateParams };
export { NullableReferencedEstimate as EstimateLineControllerGetEstimateLineEstimateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerGetEstimateLineEstimateRefParams };
export { EstimateLineList as EstimateLineControllerGetEstimateLineList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as EstimateLineControllerGetEstimateLineListParams };
export { NullableService as EstimateLineControllerGetEstimateLineService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateLineControllerGetEstimateLineServiceParams };
export { NullableReferencedService as EstimateLineControllerGetEstimateLineServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerGetEstimateLineServiceRefParams };
export { EntrySource as EstimateLineControllerGetEstimateLineSubject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateLineControllerGetEstimateLineSubjectParams };
export { ReferencedEntrySource as EstimateLineControllerGetEstimateLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerGetEstimateLineSubjectRefParams };
export { NullableAccountProvider as EstimateLineControllerGetEstimateLineVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateLineControllerGetEstimateLineVendorParams };
export { NullableReferencedAccountProvider as EstimateLineControllerGetEstimateLineVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerGetEstimateLineVendorRefParams };
export { ReferencedChangeOrderLineList as EstimateLineControllerPatchEstimateLineChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerPatchEstimateLineChangeOrdersRefParams };
export { ReferencedUpdateChangeOrderLineList as EstimateLineControllerPatchEstimateLineChangeOrdersRefRequest };
export { NullableReferencedEstimate as EstimateLineControllerPatchEstimateLineEstimateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerPatchEstimateLineEstimateRefParams };
export { NullableReferencedUpdateEstimate as EstimateLineControllerPatchEstimateLineEstimateRefRequest };
export { NullableReferencedService as EstimateLineControllerPatchEstimateLineServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerPatchEstimateLineServiceRefParams };
export { NullableReferencedUpdateService as EstimateLineControllerPatchEstimateLineServiceRefRequest };
export { ReferencedEntrySource as EstimateLineControllerPatchEstimateLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerPatchEstimateLineSubjectRefParams };
export { ReferencedUpdateEntrySource as EstimateLineControllerPatchEstimateLineSubjectRefRequest };
export { NullableReferencedAccountProvider as EstimateLineControllerPatchEstimateLineVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerPatchEstimateLineVendorRefParams };
export { NullableReferencedUpdateAccountProvider as EstimateLineControllerPatchEstimateLineVendorRefRequest };
export { ReferencedChangeOrderLineList as EstimateLineControllerPostEstimateLineChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as EstimateLineControllerPostEstimateLineChangeOrdersRefParams };
export { EstimateLine as EstimateLineControllerUpdateEstimateLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as EstimateLineControllerUpdateEstimateLineByIdParams };
export { UpdateEstimateLine as EstimateLineControllerUpdateEstimateLineByIdRequest };
export { ReferencedAssetList as FileControllerDeleteFileAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerDeleteFileAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as FileControllerDeleteFileAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerDeleteFileByIdParams };
export { ReferencedProjectList as FileControllerDeleteFileProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerDeleteFileProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as FileControllerDeleteFileProjectsRefRequest };
export { Account as FileControllerGetFileAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FileControllerGetFileAccountParams };
export { ReferencedAccount as FileControllerGetFileAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerGetFileAccountRefParams };
export { User as FileControllerGetFileAddedBy200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FileControllerGetFileAddedByParams };
export { ReferencedUser as FileControllerGetFileAddedByRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerGetFileAddedByRefParams };
export { AssetList as FileControllerGetFileAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FileControllerGetFileAssetsParams };
export { ReferencedAssetList as FileControllerGetFileAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerGetFileAssetsRefParams };
export { File as FileControllerGetFileById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FileControllerGetFileByIdParams };
export { DocumentList as FileControllerGetFileDocuments200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FileControllerGetFileDocumentsParams };
export { ReferencedDocumentList as FileControllerGetFileDocumentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerGetFileDocumentsRefParams };
export { FileList as FileControllerGetFileList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FileControllerGetFileListParams };
export { MediaList as FileControllerGetFileMedia200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FileControllerGetFileMediaParams };
export { ReferencedMediaList as FileControllerGetFileMediaRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerGetFileMediaRefParams };
export { FileProcessList as FileControllerGetFileProcesses200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FileControllerGetFileProcessesParams };
export { ReferencedFileProcessList as FileControllerGetFileProcessesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerGetFileProcessesRefParams };
export { ProjectList as FileControllerGetFileProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FileControllerGetFileProjectsParams };
export { ReferencedProjectList as FileControllerGetFileProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerGetFileProjectsRefParams };
export { ReferencedAccount as FileControllerPatchFileAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerPatchFileAccountRefParams };
export { ReferencedUpdateAccount as FileControllerPatchFileAccountRefRequest };
export { ReferencedAssetList as FileControllerPatchFileAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerPatchFileAssetsRefParams };
export { ReferencedUpdateAssetList as FileControllerPatchFileAssetsRefRequest };
export { ReferencedProjectList as FileControllerPatchFileProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerPatchFileProjectsRefParams };
export { ReferencedUpdateProjectList as FileControllerPatchFileProjectsRefRequest };
export { ReferencedAssetList as FileControllerPostFileAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerPostFileAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as FileControllerPostFileAssetsRefRequest };
export { ReferencedProjectList as FileControllerPostFileProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileControllerPostFileProjectsRefParams };
export { File as FileControllerUpdateFileById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FileControllerUpdateFileByIdParams };
export { UpdateFile as FileControllerUpdateFileByIdRequest };
export { CreateFileProcessAttributes as FileProcessAttributes };
export { FileProcess as FileProcessControllerGetFileProcessById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FileProcessControllerGetFileProcessByIdParams };
export { File as FileProcessControllerGetFileProcessFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FileProcessControllerGetFileProcessFileParams };
export { ReferencedFile as FileProcessControllerGetFileProcessFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FileProcessControllerGetFileProcessFileRefParams };
export { FileProcessList as FileProcessControllerGetFileProcessList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FileProcessControllerGetFileProcessListParams };
export { AssetAppraisalAttributes as FinancialDocumentAttributes };
export { CreateFundingAttributes as FundingAttributes };
export { AccountControllerGetCurrentAccountParams as FundingControllerCreateFundingParams };
export { ReferencedAssetList as FundingControllerDeleteFundingAssetsRef200 };
export { PolicyControllerPostPolicyAssetsRefRequest as FundingControllerDeleteFundingAssetsRefRequest };
export { ReferencedProjectList as FundingControllerDeleteFundingProjectsRef200 };
export { FileControllerPostFileProjectsRefRequest as FundingControllerDeleteFundingProjectsRefRequest };
export { ReferencedSpaceList as FundingControllerDeleteFundingSpacesRef200 };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as FundingControllerDeleteFundingSpacesRefRequest };
export { Account as FundingControllerGetFundingAccount200 };
export { AccountControllerGetCurrentAccountParams as FundingControllerGetFundingAccountParams };
export { ReferencedAccount as FundingControllerGetFundingAccountRef200 };
export { BucketFundingList as FundingControllerGetFundingAllocations200 };
export { UserControllerGetUserAccountRolesParams as FundingControllerGetFundingAllocationsParams };
export { ReferencedBucketFundingList as FundingControllerGetFundingAllocationsRef200 };
export { AssetList as FundingControllerGetFundingAssets200 };
export { UserControllerGetUserAccountRolesParams as FundingControllerGetFundingAssetsParams };
export { ReferencedAssetList as FundingControllerGetFundingAssetsRef200 };
export { Funding as FundingControllerGetFundingById200 };
export { AccountControllerGetCurrentAccountParams as FundingControllerGetFundingByIdParams };
export { DocumentType as FundingControllerGetFundingDocumentType200 };
export { AccountControllerGetCurrentAccountParams as FundingControllerGetFundingDocumentTypeParams };
export { ReferencedDocumentType as FundingControllerGetFundingDocumentTypeRef200 };
export { NullableFile as FundingControllerGetFundingFile200 };
export { AccountControllerGetCurrentAccountParams as FundingControllerGetFundingFileParams };
export { NullableReferencedFile as FundingControllerGetFundingFileRef200 };
export { FundingList as FundingControllerGetFundingList200 };
export { UserControllerGetUserAccountRolesParams as FundingControllerGetFundingListParams };
export { ProjectList as FundingControllerGetFundingProjects200 };
export { UserControllerGetUserAccountRolesParams as FundingControllerGetFundingProjectsParams };
export { ReferencedProjectList as FundingControllerGetFundingProjectsRef200 };
export { FundingSource as FundingControllerGetFundingSource200 };
export { AccountControllerGetCurrentAccountParams as FundingControllerGetFundingSourceParams };
export { ReferencedFundingSource as FundingControllerGetFundingSourceRef200 };
export { SpaceList as FundingControllerGetFundingSpaces200 };
export { UserControllerGetUserAccountRolesParams as FundingControllerGetFundingSpacesParams };
export { ReferencedSpaceList as FundingControllerGetFundingSpacesRef200 };
export { ReferencedAccount as FundingControllerPatchFundingAccountRef200 };
export { ReferencedUpdateAccount as FundingControllerPatchFundingAccountRefRequest };
export { ReferencedAssetList as FundingControllerPatchFundingAssetsRef200 };
export { ReferencedUpdateAssetList as FundingControllerPatchFundingAssetsRefRequest };
export { NullableReferencedFile as FundingControllerPatchFundingFileRef200 };
export { NullableReferencedUpdateFile as FundingControllerPatchFundingFileRefRequest };
export { ReferencedProjectList as FundingControllerPatchFundingProjectsRef200 };
export { ReferencedUpdateProjectList as FundingControllerPatchFundingProjectsRefRequest };
export { ReferencedFundingSource as FundingControllerPatchFundingSourceRef200 };
export { ReferencedUpdateFundingSource as FundingControllerPatchFundingSourceRefRequest };
export { ReferencedSpaceList as FundingControllerPatchFundingSpacesRef200 };
export { ReferencedUpdateSpaceList as FundingControllerPatchFundingSpacesRefRequest };
export { ReferencedAssetList as FundingControllerPostFundingAssetsRef200 };
export { PolicyControllerPostPolicyAssetsRefRequest as FundingControllerPostFundingAssetsRefRequest };
export { ReferencedProjectList as FundingControllerPostFundingProjectsRef200 };
export { FileControllerPostFileProjectsRefRequest as FundingControllerPostFundingProjectsRefRequest };
export { ReferencedSpaceList as FundingControllerPostFundingSpacesRef200 };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as FundingControllerPostFundingSpacesRefRequest };
export { Funding as FundingControllerUpdateFundingById200 };
export { AccountControllerGetCurrentAccountParams as FundingControllerUpdateFundingByIdParams };
export { UpdateFunding as FundingControllerUpdateFundingByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FundingSourceControllerCreateFundingSourceParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerDeleteFundingSourceByIdParams };
export { ReferencedAccountProviderContactList as FundingSourceControllerDeleteFundingSourceContactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerDeleteFundingSourceContactsRefParams };
export { FundingSourceControllerPostFundingSourceContactsRefRequest as FundingSourceControllerDeleteFundingSourceContactsRefRequest };
export { Account as FundingSourceControllerGetFundingSourceAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FundingSourceControllerGetFundingSourceAccountParams };
export { ReferencedAccount as FundingSourceControllerGetFundingSourceAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerGetFundingSourceAccountRefParams };
export { BaseBucketList as FundingSourceControllerGetFundingSourceBuckets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FundingSourceControllerGetFundingSourceBucketsParams };
export { ReferencedBaseBucketList as FundingSourceControllerGetFundingSourceBucketsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerGetFundingSourceBucketsRefParams };
export { FundingSource as FundingSourceControllerGetFundingSourceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FundingSourceControllerGetFundingSourceByIdParams };
export { AccountProviderContactList as FundingSourceControllerGetFundingSourceContacts200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FundingSourceControllerGetFundingSourceContactsParams };
export { ReferencedAccountProviderContactList as FundingSourceControllerGetFundingSourceContactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerGetFundingSourceContactsRefParams };
export { Currency as FundingSourceControllerGetFundingSourceCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FundingSourceControllerGetFundingSourceCurrencyParams };
export { ReferencedCurrency as FundingSourceControllerGetFundingSourceCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerGetFundingSourceCurrencyRefParams };
export { FundingList as FundingSourceControllerGetFundingSourceFundings200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FundingSourceControllerGetFundingSourceFundingsParams };
export { ReferencedFundingList as FundingSourceControllerGetFundingSourceFundingsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerGetFundingSourceFundingsRefParams };
export { FundingSourceList as FundingSourceControllerGetFundingSourceList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as FundingSourceControllerGetFundingSourceListParams };
export { Project as FundingSourceControllerGetFundingSourceProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FundingSourceControllerGetFundingSourceProjectParams };
export { ReferencedProject as FundingSourceControllerGetFundingSourceProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerGetFundingSourceProjectRefParams };
export { ReferencedAccountProviderContactList as FundingSourceControllerPatchFundingSourceContactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerPatchFundingSourceContactsRefParams };
export { ReferencedUpdateAccountProviderContactList as FundingSourceControllerPatchFundingSourceContactsRefRequest };
export { ReferencedCurrency as FundingSourceControllerPatchFundingSourceCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerPatchFundingSourceCurrencyRefParams };
export { ReferencedUpdateCurrency as FundingSourceControllerPatchFundingSourceCurrencyRefRequest };
export { ReferencedProject as FundingSourceControllerPatchFundingSourceProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerPatchFundingSourceProjectRefParams };
export { ReferencedUpdateProject as FundingSourceControllerPatchFundingSourceProjectRefRequest };
export { ReferencedAccountProviderContactList as FundingSourceControllerPostFundingSourceContactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as FundingSourceControllerPostFundingSourceContactsRefParams };
export { FundingSource as FundingSourceControllerUpdateFundingSourceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as FundingSourceControllerUpdateFundingSourceByIdParams };
export { UpdateFundingSource as FundingSourceControllerUpdateFundingSourceByIdRequest };
export { HealthControllerInternalHealthCheck200 as HealthControllerExternalHealthCheck200 };
export { HealthControllerInternalHealthCheck200 as HealthControllerExternalHealthCheck503 };
export { HealthControllerInternalHealthCheck200 as HealthControllerInternalHealthCheck503 };
export { AccountProviderContactAttributes as IdentityAttributes };
export { AssetTypeAttributes as IncidentClassAttributes };
export { AssetTypeList as IncidentClassControllerGetIncidentClassAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as IncidentClassControllerGetIncidentClassAssetTypesParams };
export { ReferencedAssetTypeList as IncidentClassControllerGetIncidentClassAssetTypesRef200 };
export { IncidentClass as IncidentClassControllerGetIncidentClassById200 };
export { AccountControllerGetCurrentAccountParams as IncidentClassControllerGetIncidentClassByIdParams };
export { IncidentClassList as IncidentClassControllerGetIncidentClassList200 };
export { UserControllerGetUserAccountRolesParams as IncidentClassControllerGetIncidentClassListParams };
export { IncidentTypeList as IncidentClassControllerGetIncidentClassTypes200 };
export { UserControllerGetUserAccountRolesParams as IncidentClassControllerGetIncidentClassTypesParams };
export { ReferencedIncidentTypeList as IncidentClassControllerGetIncidentClassTypesRef200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentControllerCreateIncidentParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerDeleteIncidentByIdParams };
export { ReferencedProjectMediaList as IncidentControllerDeleteIncidentMediaAttachmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerDeleteIncidentMediaAttachmentsRefParams };
export { ProjectControllerPostProjectMediaAttachmentsRefRequest as IncidentControllerDeleteIncidentMediaAttachmentsRefRequest };
export { Account as IncidentControllerGetIncidentAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentControllerGetIncidentAccountParams };
export { ReferencedAccount as IncidentControllerGetIncidentAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerGetIncidentAccountRefParams };
export { Incident as IncidentControllerGetIncidentById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentControllerGetIncidentByIdParams };
export { NullableDisaster as IncidentControllerGetIncidentDisaster200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentControllerGetIncidentDisasterParams };
export { NullableReferencedDisaster as IncidentControllerGetIncidentDisasterRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerGetIncidentDisasterRefParams };
export { IncidentList as IncidentControllerGetIncidentList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentControllerGetIncidentListParams };
export { ProjectMediaList as IncidentControllerGetIncidentMediaAttachments200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentControllerGetIncidentMediaAttachmentsParams };
export { ReferencedProjectMediaList as IncidentControllerGetIncidentMediaAttachmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerGetIncidentMediaAttachmentsRefParams };
export { IncidentType as IncidentControllerGetIncidentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentControllerGetIncidentTypeParams };
export { ReferencedIncidentType as IncidentControllerGetIncidentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerGetIncidentTypeRefParams };
export { ReferencedAccount as IncidentControllerPatchIncidentAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerPatchIncidentAccountRefParams };
export { ReferencedUpdateAccount as IncidentControllerPatchIncidentAccountRefRequest };
export { NullableReferencedDisaster as IncidentControllerPatchIncidentDisasterRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerPatchIncidentDisasterRefParams };
export { NullableReferencedUpdateDisaster as IncidentControllerPatchIncidentDisasterRefRequest };
export { ReferencedProjectMediaList as IncidentControllerPatchIncidentMediaAttachmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerPatchIncidentMediaAttachmentsRefParams };
export { ReferencedUpdateProjectMediaList as IncidentControllerPatchIncidentMediaAttachmentsRefRequest };
export { ReferencedIncidentType as IncidentControllerPatchIncidentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerPatchIncidentTypeRefParams };
export { ReferencedUpdateIncidentType as IncidentControllerPatchIncidentTypeRefRequest };
export { ReferencedProjectMediaList as IncidentControllerPostIncidentMediaAttachmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentControllerPostIncidentMediaAttachmentsRefParams };
export { ProjectControllerPostProjectMediaAttachmentsRefRequest as IncidentControllerPostIncidentMediaAttachmentsRefRequest };
export { Incident as IncidentControllerUpdateIncidentById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentControllerUpdateIncidentByIdParams };
export { UpdateIncident as IncidentControllerUpdateIncidentByIdRequest };
export { CreateIncidentImpactAttributes as IncidentImpactAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentImpactControllerCreateIncidentImpactParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerDeleteIncidentImpactByIdParams };
export { ReferencedPerilList as IncidentImpactControllerDeleteIncidentImpactPerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerDeleteIncidentImpactPerilsRefParams };
export { IncidentImpactControllerPostIncidentImpactPerilsRefRequest as IncidentImpactControllerDeleteIncidentImpactPerilsRefRequest };
export { ReferencedSpaceList as IncidentImpactControllerDeleteIncidentImpactSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerDeleteIncidentImpactSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as IncidentImpactControllerDeleteIncidentImpactSpacesRefRequest };
export { Asset as IncidentImpactControllerGetIncidentImpactAsset200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentImpactControllerGetIncidentImpactAssetParams };
export { ReferencedAsset as IncidentImpactControllerGetIncidentImpactAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerGetIncidentImpactAssetRefParams };
export { IncidentImpact as IncidentImpactControllerGetIncidentImpactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentImpactControllerGetIncidentImpactByIdParams };
export { IncidentImpactList as IncidentImpactControllerGetIncidentImpactList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentImpactControllerGetIncidentImpactListParams };
export { PerilList as IncidentImpactControllerGetIncidentImpactPerils200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentImpactControllerGetIncidentImpactPerilsParams };
export { ReferencedPerilList as IncidentImpactControllerGetIncidentImpactPerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerGetIncidentImpactPerilsRefParams };
export { Project as IncidentImpactControllerGetIncidentImpactProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentImpactControllerGetIncidentImpactProjectParams };
export { ReferencedProject as IncidentImpactControllerGetIncidentImpactProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerGetIncidentImpactProjectRefParams };
export { SpaceList as IncidentImpactControllerGetIncidentImpactSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentImpactControllerGetIncidentImpactSpacesParams };
export { ReferencedSpaceList as IncidentImpactControllerGetIncidentImpactSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerGetIncidentImpactSpacesRefParams };
export { ReferencedAsset as IncidentImpactControllerPatchIncidentImpactAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerPatchIncidentImpactAssetRefParams };
export { ReferencedUpdateAsset as IncidentImpactControllerPatchIncidentImpactAssetRefRequest };
export { ReferencedPerilList as IncidentImpactControllerPatchIncidentImpactPerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerPatchIncidentImpactPerilsRefParams };
export { ReferencedUpdatePerilList as IncidentImpactControllerPatchIncidentImpactPerilsRefRequest };
export { ReferencedProject as IncidentImpactControllerPatchIncidentImpactProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerPatchIncidentImpactProjectRefParams };
export { ReferencedUpdateProject as IncidentImpactControllerPatchIncidentImpactProjectRefRequest };
export { ReferencedSpaceList as IncidentImpactControllerPatchIncidentImpactSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerPatchIncidentImpactSpacesRefParams };
export { ReferencedUpdateSpaceList as IncidentImpactControllerPatchIncidentImpactSpacesRefRequest };
export { ReferencedPerilList as IncidentImpactControllerPostIncidentImpactPerilsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerPostIncidentImpactPerilsRefParams };
export { ReferencedSpaceList as IncidentImpactControllerPostIncidentImpactSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentImpactControllerPostIncidentImpactSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as IncidentImpactControllerPostIncidentImpactSpacesRefRequest };
export { IncidentImpact as IncidentImpactControllerUpdateIncidentImpactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentImpactControllerUpdateIncidentImpactByIdParams };
export { UpdateIncidentImpact as IncidentImpactControllerUpdateIncidentImpactByIdRequest };
export { BlueprintAttributes as IncidentReportAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentReportControllerCreateIncidentReportParams };
export { ReferencedAssetList as IncidentReportControllerDeleteIncidentReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerDeleteIncidentReportAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as IncidentReportControllerDeleteIncidentReportAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerDeleteIncidentReportByIdParams };
export { ReferencedProjectList as IncidentReportControllerDeleteIncidentReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerDeleteIncidentReportProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as IncidentReportControllerDeleteIncidentReportProjectsRefRequest };
export { ReferencedSpaceList as IncidentReportControllerDeleteIncidentReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerDeleteIncidentReportSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as IncidentReportControllerDeleteIncidentReportSpacesRefRequest };
export { Account as IncidentReportControllerGetIncidentReportAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentReportControllerGetIncidentReportAccountParams };
export { ReferencedAccount as IncidentReportControllerGetIncidentReportAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerGetIncidentReportAccountRefParams };
export { AssetList as IncidentReportControllerGetIncidentReportAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentReportControllerGetIncidentReportAssetsParams };
export { ReferencedAssetList as IncidentReportControllerGetIncidentReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerGetIncidentReportAssetsRefParams };
export { IncidentReport as IncidentReportControllerGetIncidentReportById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentReportControllerGetIncidentReportByIdParams };
export { DocumentType as IncidentReportControllerGetIncidentReportDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentReportControllerGetIncidentReportDocumentTypeParams };
export { ReferencedDocumentType as IncidentReportControllerGetIncidentReportDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerGetIncidentReportDocumentTypeRefParams };
export { NullableFile as IncidentReportControllerGetIncidentReportFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentReportControllerGetIncidentReportFileParams };
export { NullableReferencedFile as IncidentReportControllerGetIncidentReportFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerGetIncidentReportFileRefParams };
export { IncidentReportList as IncidentReportControllerGetIncidentReportList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentReportControllerGetIncidentReportListParams };
export { ProjectList as IncidentReportControllerGetIncidentReportProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentReportControllerGetIncidentReportProjectsParams };
export { ReferencedProjectList as IncidentReportControllerGetIncidentReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerGetIncidentReportProjectsRefParams };
export { SpaceList as IncidentReportControllerGetIncidentReportSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as IncidentReportControllerGetIncidentReportSpacesParams };
export { ReferencedSpaceList as IncidentReportControllerGetIncidentReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerGetIncidentReportSpacesRefParams };
export { ReferencedAccount as IncidentReportControllerPatchIncidentReportAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerPatchIncidentReportAccountRefParams };
export { ReferencedUpdateAccount as IncidentReportControllerPatchIncidentReportAccountRefRequest };
export { ReferencedAssetList as IncidentReportControllerPatchIncidentReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerPatchIncidentReportAssetsRefParams };
export { ReferencedUpdateAssetList as IncidentReportControllerPatchIncidentReportAssetsRefRequest };
export { NullableReferencedFile as IncidentReportControllerPatchIncidentReportFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerPatchIncidentReportFileRefParams };
export { NullableReferencedUpdateFile as IncidentReportControllerPatchIncidentReportFileRefRequest };
export { ReferencedProjectList as IncidentReportControllerPatchIncidentReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerPatchIncidentReportProjectsRefParams };
export { ReferencedUpdateProjectList as IncidentReportControllerPatchIncidentReportProjectsRefRequest };
export { ReferencedSpaceList as IncidentReportControllerPatchIncidentReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerPatchIncidentReportSpacesRefParams };
export { ReferencedUpdateSpaceList as IncidentReportControllerPatchIncidentReportSpacesRefRequest };
export { ReferencedAssetList as IncidentReportControllerPostIncidentReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerPostIncidentReportAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as IncidentReportControllerPostIncidentReportAssetsRefRequest };
export { ReferencedProjectList as IncidentReportControllerPostIncidentReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerPostIncidentReportProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as IncidentReportControllerPostIncidentReportProjectsRefRequest };
export { ReferencedSpaceList as IncidentReportControllerPostIncidentReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as IncidentReportControllerPostIncidentReportSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as IncidentReportControllerPostIncidentReportSpacesRefRequest };
export { IncidentReport as IncidentReportControllerUpdateIncidentReportById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as IncidentReportControllerUpdateIncidentReportByIdParams };
export { UpdateIncidentReport as IncidentReportControllerUpdateIncidentReportByIdRequest };
export { BlueprintRelationships as IncidentReportRelationships };
export { BucketTypeAttributes as IncidentTypeAttributes };
export { AssetTypeList as IncidentTypeControllerGetIncidentTypeAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as IncidentTypeControllerGetIncidentTypeAssetTypesParams };
export { ReferencedAssetTypeList as IncidentTypeControllerGetIncidentTypeAssetTypesRef200 };
export { IncidentType as IncidentTypeControllerGetIncidentTypeById200 };
export { AccountControllerGetCurrentAccountParams as IncidentTypeControllerGetIncidentTypeByIdParams };
export { IncidentClassList as IncidentTypeControllerGetIncidentTypeClasses200 };
export { UserControllerGetUserAccountRolesParams as IncidentTypeControllerGetIncidentTypeClassesParams };
export { ReferencedIncidentClassList as IncidentTypeControllerGetIncidentTypeClassesRef200 };
export { IncidentTypeList as IncidentTypeControllerGetIncidentTypeList200 };
export { UserControllerGetUserAccountRolesParams as IncidentTypeControllerGetIncidentTypeListParams };
export { PerilList as IncidentTypeControllerGetIncidentTypePerils200 };
export { UserControllerGetUserAccountRolesParams as IncidentTypeControllerGetIncidentTypePerilsParams };
export { ReferencedPerilList as IncidentTypeControllerGetIncidentTypePerilsRef200 };
export { ChangeOrderAttributes as InvoiceAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerCreateInvoiceParams };
export { ReferencedAssetList as InvoiceControllerDeleteInvoiceAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerDeleteInvoiceAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as InvoiceControllerDeleteInvoiceAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerDeleteInvoiceByIdParams };
export { ReferencedProjectList as InvoiceControllerDeleteInvoiceProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerDeleteInvoiceProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as InvoiceControllerDeleteInvoiceProjectsRefRequest };
export { ReferencedSpaceList as InvoiceControllerDeleteInvoiceSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerDeleteInvoiceSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as InvoiceControllerDeleteInvoiceSpacesRefRequest };
export { Account as InvoiceControllerGetInvoiceAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerGetInvoiceAccountParams };
export { ReferencedAccount as InvoiceControllerGetInvoiceAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceAccountRefParams };
export { AssetList as InvoiceControllerGetInvoiceAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as InvoiceControllerGetInvoiceAssetsParams };
export { ReferencedAssetList as InvoiceControllerGetInvoiceAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceAssetsRefParams };
export { Invoice as InvoiceControllerGetInvoiceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerGetInvoiceByIdParams };
export { Currency as InvoiceControllerGetInvoiceCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerGetInvoiceCurrencyParams };
export { ReferencedCurrency as InvoiceControllerGetInvoiceCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceCurrencyRefParams };
export { DocumentType as InvoiceControllerGetInvoiceDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerGetInvoiceDocumentTypeParams };
export { ReferencedDocumentType as InvoiceControllerGetInvoiceDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceDocumentTypeRefParams };
export { NullableFile as InvoiceControllerGetInvoiceFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerGetInvoiceFileParams };
export { NullableReferencedFile as InvoiceControllerGetInvoiceFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceFileRefParams };
export { InvoiceLineList as InvoiceControllerGetInvoiceLines200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as InvoiceControllerGetInvoiceLinesParams };
export { ReferencedInvoiceLineList as InvoiceControllerGetInvoiceLinesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceLinesRefParams };
export { EntrySourceList as InvoiceControllerGetInvoiceLineSubjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as InvoiceControllerGetInvoiceLineSubjectsParams };
export { ReferencedEntrySourceList as InvoiceControllerGetInvoiceLineSubjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceLineSubjectsRefParams };
export { InvoiceList as InvoiceControllerGetInvoiceList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as InvoiceControllerGetInvoiceListParams };
export { ProjectList as InvoiceControllerGetInvoiceProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as InvoiceControllerGetInvoiceProjectsParams };
export { ReferencedProjectList as InvoiceControllerGetInvoiceProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceProjectsRefParams };
export { NullableService as InvoiceControllerGetInvoiceService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerGetInvoiceServiceParams };
export { NullableReferencedService as InvoiceControllerGetInvoiceServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceServiceRefParams };
export { SpaceList as InvoiceControllerGetInvoiceSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as InvoiceControllerGetInvoiceSpacesParams };
export { ReferencedSpaceList as InvoiceControllerGetInvoiceSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceSpacesRefParams };
export { ItemizableFinancialDocumentStats as InvoiceControllerGetInvoiceStats200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerGetInvoiceStatsParams };
export { ReferencedItemizableFinancialDocumentStats as InvoiceControllerGetInvoiceStatsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceStatsRefParams };
export { NullableAccountProvider as InvoiceControllerGetInvoiceVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerGetInvoiceVendorParams };
export { NullableReferencedAccountProvider as InvoiceControllerGetInvoiceVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerGetInvoiceVendorRefParams };
export { ReferencedAccount as InvoiceControllerPatchInvoiceAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPatchInvoiceAccountRefParams };
export { ReferencedUpdateAccount as InvoiceControllerPatchInvoiceAccountRefRequest };
export { ReferencedAssetList as InvoiceControllerPatchInvoiceAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPatchInvoiceAssetsRefParams };
export { ReferencedUpdateAssetList as InvoiceControllerPatchInvoiceAssetsRefRequest };
export { ReferencedCurrency as InvoiceControllerPatchInvoiceCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPatchInvoiceCurrencyRefParams };
export { ReferencedUpdateCurrency as InvoiceControllerPatchInvoiceCurrencyRefRequest };
export { NullableReferencedFile as InvoiceControllerPatchInvoiceFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPatchInvoiceFileRefParams };
export { NullableReferencedUpdateFile as InvoiceControllerPatchInvoiceFileRefRequest };
export { ReferencedProjectList as InvoiceControllerPatchInvoiceProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPatchInvoiceProjectsRefParams };
export { ReferencedUpdateProjectList as InvoiceControllerPatchInvoiceProjectsRefRequest };
export { NullableReferencedService as InvoiceControllerPatchInvoiceServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPatchInvoiceServiceRefParams };
export { NullableReferencedUpdateService as InvoiceControllerPatchInvoiceServiceRefRequest };
export { ReferencedSpaceList as InvoiceControllerPatchInvoiceSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPatchInvoiceSpacesRefParams };
export { ReferencedUpdateSpaceList as InvoiceControllerPatchInvoiceSpacesRefRequest };
export { NullableReferencedAccountProvider as InvoiceControllerPatchInvoiceVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPatchInvoiceVendorRefParams };
export { NullableReferencedUpdateAccountProvider as InvoiceControllerPatchInvoiceVendorRefRequest };
export { ReferencedAssetList as InvoiceControllerPostInvoiceAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPostInvoiceAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as InvoiceControllerPostInvoiceAssetsRefRequest };
export { ReferencedProjectList as InvoiceControllerPostInvoiceProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPostInvoiceProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as InvoiceControllerPostInvoiceProjectsRefRequest };
export { ReferencedSpaceList as InvoiceControllerPostInvoiceSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceControllerPostInvoiceSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as InvoiceControllerPostInvoiceSpacesRefRequest };
export { Invoice as InvoiceControllerUpdateInvoiceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceControllerUpdateInvoiceByIdParams };
export { UpdateInvoice as InvoiceControllerUpdateInvoiceByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceLineControllerCreateInvoiceLineParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerDeleteInvoiceLineByIdParams };
export { InvoiceLine as InvoiceLineControllerGetInvoiceLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceLineControllerGetInvoiceLineByIdParams };
export { NullableInvoice as InvoiceLineControllerGetInvoiceLineInvoice200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceLineControllerGetInvoiceLineInvoiceParams };
export { NullableReferencedInvoice as InvoiceLineControllerGetInvoiceLineInvoiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerGetInvoiceLineInvoiceRefParams };
export { InvoiceLineList as InvoiceLineControllerGetInvoiceLineList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as InvoiceLineControllerGetInvoiceLineListParams };
export { NullableService as InvoiceLineControllerGetInvoiceLineService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceLineControllerGetInvoiceLineServiceParams };
export { NullableReferencedService as InvoiceLineControllerGetInvoiceLineServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerGetInvoiceLineServiceRefParams };
export { EntrySource as InvoiceLineControllerGetInvoiceLineSubject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceLineControllerGetInvoiceLineSubjectParams };
export { ReferencedEntrySource as InvoiceLineControllerGetInvoiceLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerGetInvoiceLineSubjectRefParams };
export { NullableAccountProvider as InvoiceLineControllerGetInvoiceLineVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceLineControllerGetInvoiceLineVendorParams };
export { NullableReferencedAccountProvider as InvoiceLineControllerGetInvoiceLineVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerGetInvoiceLineVendorRefParams };
export { NullableReferencedInvoice as InvoiceLineControllerPatchInvoiceLineInvoiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerPatchInvoiceLineInvoiceRefParams };
export { NullableReferencedUpdateInvoice as InvoiceLineControllerPatchInvoiceLineInvoiceRefRequest };
export { NullableReferencedService as InvoiceLineControllerPatchInvoiceLineServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerPatchInvoiceLineServiceRefParams };
export { NullableReferencedUpdateService as InvoiceLineControllerPatchInvoiceLineServiceRefRequest };
export { ReferencedEntrySource as InvoiceLineControllerPatchInvoiceLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerPatchInvoiceLineSubjectRefParams };
export { ReferencedUpdateEntrySource as InvoiceLineControllerPatchInvoiceLineSubjectRefRequest };
export { NullableReferencedAccountProvider as InvoiceLineControllerPatchInvoiceLineVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as InvoiceLineControllerPatchInvoiceLineVendorRefParams };
export { NullableReferencedUpdateAccountProvider as InvoiceLineControllerPatchInvoiceLineVendorRefRequest };
export { InvoiceLine as InvoiceLineControllerUpdateInvoiceLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as InvoiceLineControllerUpdateInvoiceLineByIdParams };
export { UpdateInvoiceLine as InvoiceLineControllerUpdateInvoiceLineByIdRequest };
export { AppraisalLineAttributes as ItemAppraisalAttributes };
export { AssetTypeAttributes as ItemCategoryAttributes };
export { AssetTypeList as ItemCategoryControllerGetItemCategoryAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as ItemCategoryControllerGetItemCategoryAssetTypesParams };
export { ReferencedAssetTypeList as ItemCategoryControllerGetItemCategoryAssetTypesRef200 };
export { ItemCategory as ItemCategoryControllerGetItemCategoryById200 };
export { AccountControllerGetCurrentAccountParams as ItemCategoryControllerGetItemCategoryByIdParams };
export { ItemClassList as ItemCategoryControllerGetItemCategoryClasses200 };
export { UserControllerGetUserAccountRolesParams as ItemCategoryControllerGetItemCategoryClassesParams };
export { ReferencedItemClassList as ItemCategoryControllerGetItemCategoryClassesRef200 };
export { ItemCategoryList as ItemCategoryControllerGetItemCategoryList200 };
export { UserControllerGetUserAccountRolesParams as ItemCategoryControllerGetItemCategoryListParams };
export { AssetTypeAttributes as ItemClassAttributes };
export { AssetTypeList as ItemClassControllerGetItemClassAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as ItemClassControllerGetItemClassAssetTypesParams };
export { ReferencedAssetTypeList as ItemClassControllerGetItemClassAssetTypesRef200 };
export { ItemClass as ItemClassControllerGetItemClassById200 };
export { AccountControllerGetCurrentAccountParams as ItemClassControllerGetItemClassByIdParams };
export { ItemCategoryList as ItemClassControllerGetItemClassCategories200 };
export { UserControllerGetUserAccountRolesParams as ItemClassControllerGetItemClassCategoriesParams };
export { ReferencedItemCategoryList as ItemClassControllerGetItemClassCategoriesRef200 };
export { ItemClassList as ItemClassControllerGetItemClassList200 };
export { UserControllerGetUserAccountRolesParams as ItemClassControllerGetItemClassListParams };
export { ItemTypeList as ItemClassControllerGetItemClassTypes200 };
export { UserControllerGetUserAccountRolesParams as ItemClassControllerGetItemClassTypesParams };
export { ReferencedItemTypeList as ItemClassControllerGetItemClassTypesRef200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerCreateItemParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerDeleteItemByIdParams };
export { Account as ItemControllerGetItemAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemAccountParams };
export { ReferencedAccount as ItemControllerGetItemAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemAccountRefParams };
export { ItemAppraisalList as ItemControllerGetItemAppraisals200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemControllerGetItemAppraisalsParams };
export { ReferencedItemAppraisalList as ItemControllerGetItemAppraisalsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemAppraisalsRefParams };
export { NullableAsset as ItemControllerGetItemAsset200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemAssetParams };
export { NullableReferencedAsset as ItemControllerGetItemAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemAssetRefParams };
export { Item as ItemControllerGetItemById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemByIdParams };
export { ChangeOrderList as ItemControllerGetItemChangeOrders200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemControllerGetItemChangeOrdersParams };
export { ReferencedChangeOrderList as ItemControllerGetItemChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemChangeOrdersRefParams };
export { Currency as ItemControllerGetItemCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemCurrencyParams };
export { ReferencedCurrency as ItemControllerGetItemCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemCurrencyRefParams };
export { EntryList as ItemControllerGetItemEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemControllerGetItemEntriesParams };
export { ReferencedEntryList as ItemControllerGetItemEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemEntriesRefParams };
export { EstimateList as ItemControllerGetItemEstimates200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemControllerGetItemEstimatesParams };
export { ReferencedEstimateList as ItemControllerGetItemEstimatesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemEstimatesRefParams };
export { ItemImpactList as ItemControllerGetItemImpacts200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemControllerGetItemImpactsParams };
export { ReferencedItemImpactList as ItemControllerGetItemImpactsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemImpactsRefParams };
export { InvoiceList as ItemControllerGetItemInvoices200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemControllerGetItemInvoicesParams };
export { ReferencedInvoiceList as ItemControllerGetItemInvoicesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemInvoicesRefParams };
export { ItemList as ItemControllerGetItemList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemControllerGetItemListParams };
export { EntrySourceMetadata as ItemControllerGetItemMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemMetadataParams };
export { ReferencedEntrySourceMetadata as ItemControllerGetItemMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemMetadataRefParams };
export { PaymentList as ItemControllerGetItemPayments200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemControllerGetItemPaymentsParams };
export { ReferencedPaymentList as ItemControllerGetItemPaymentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemPaymentsRefParams };
export { NullableProject as ItemControllerGetItemProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemProjectParams };
export { NullableReferencedProject as ItemControllerGetItemProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemProjectRefParams };
export { NullableItemAppraisal as ItemControllerGetItemRelevantAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemRelevantAppraisalParams };
export { NullableReferencedItemAppraisal as ItemControllerGetItemRelevantAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemRelevantAppraisalRefParams };
export { NullableItemImpact as ItemControllerGetItemReplaces200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemReplacesParams };
export { NullableReferencedItemImpact as ItemControllerGetItemReplacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemReplacesRefParams };
export { NullableItemAppraisal as ItemControllerGetItemSelectedAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemSelectedAppraisalParams };
export { NullableReferencedItemAppraisal as ItemControllerGetItemSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemSelectedAppraisalRefParams };
export { NullableSpace as ItemControllerGetItemSpace200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemSpaceParams };
export { NullableReferencedSpace as ItemControllerGetItemSpaceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemSpaceRefParams };
export { NullableItemType as ItemControllerGetItemType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerGetItemTypeParams };
export { NullableReferencedItemType as ItemControllerGetItemTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerGetItemTypeRefParams };
export { ReferencedAccount as ItemControllerPatchItemAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerPatchItemAccountRefParams };
export { ReferencedUpdateAccount as ItemControllerPatchItemAccountRefRequest };
export { NullableReferencedAsset as ItemControllerPatchItemAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerPatchItemAssetRefParams };
export { NullableReferencedUpdateAsset as ItemControllerPatchItemAssetRefRequest };
export { ReferencedCurrency as ItemControllerPatchItemCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerPatchItemCurrencyRefParams };
export { ReferencedUpdateCurrency as ItemControllerPatchItemCurrencyRefRequest };
export { NullableReferencedProject as ItemControllerPatchItemProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerPatchItemProjectRefParams };
export { NullableReferencedUpdateProject as ItemControllerPatchItemProjectRefRequest };
export { NullableReferencedItemAppraisal as ItemControllerPatchItemSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerPatchItemSelectedAppraisalRefParams };
export { NullableReferencedUpdateItemAppraisal as ItemControllerPatchItemSelectedAppraisalRefRequest };
export { NullableReferencedSpace as ItemControllerPatchItemSpaceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerPatchItemSpaceRefParams };
export { NullableReferencedUpdateSpace as ItemControllerPatchItemSpaceRefRequest };
export { NullableReferencedItemType as ItemControllerPatchItemTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemControllerPatchItemTypeRefParams };
export { NullableReferencedUpdateItemType as ItemControllerPatchItemTypeRefRequest };
export { Item as ItemControllerUpdateItemById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemControllerUpdateItemByIdParams };
export { UpdateItem as ItemControllerUpdateItemByIdRequest };
export { CreateItemImpactAttributes as ItemImpactAttributes };
export { ChangeOrderLineAttributes as ItemImpactChangeOrderAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerCreateItemImpactParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerDeleteItemImpactByIdParams };
export { Account as ItemImpactControllerGetItemImpactAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactAccountParams };
export { ReferencedAccount as ItemImpactControllerGetItemImpactAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactAccountRefParams };
export { ItemAppraisalList as ItemImpactControllerGetItemImpactAppraisals200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemImpactControllerGetItemImpactAppraisalsParams };
export { ReferencedItemAppraisalList as ItemImpactControllerGetItemImpactAppraisalsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactAppraisalsRefParams };
export { ItemImpact as ItemImpactControllerGetItemImpactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactByIdParams };
export { ChangeOrderList as ItemImpactControllerGetItemImpactChangeOrders200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemImpactControllerGetItemImpactChangeOrdersParams };
export { ReferencedChangeOrderList as ItemImpactControllerGetItemImpactChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactChangeOrdersRefParams };
export { Currency as ItemImpactControllerGetItemImpactCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactCurrencyParams };
export { ReferencedCurrency as ItemImpactControllerGetItemImpactCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactCurrencyRefParams };
export { EntryList as ItemImpactControllerGetItemImpactEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemImpactControllerGetItemImpactEntriesParams };
export { ReferencedEntryList as ItemImpactControllerGetItemImpactEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactEntriesRefParams };
export { EstimateList as ItemImpactControllerGetItemImpactEstimates200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemImpactControllerGetItemImpactEstimatesParams };
export { ReferencedEstimateList as ItemImpactControllerGetItemImpactEstimatesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactEstimatesRefParams };
export { InvoiceList as ItemImpactControllerGetItemImpactInvoices200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemImpactControllerGetItemImpactInvoicesParams };
export { ReferencedInvoiceList as ItemImpactControllerGetItemImpactInvoicesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactInvoicesRefParams };
export { Item as ItemImpactControllerGetItemImpactItem200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactItemParams };
export { ReferencedItem as ItemImpactControllerGetItemImpactItemRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactItemRefParams };
export { NullableItemType as ItemImpactControllerGetItemImpactItemType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactItemTypeParams };
export { NullableReferencedItemType as ItemImpactControllerGetItemImpactItemTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactItemTypeRefParams };
export { ItemImpactList as ItemImpactControllerGetItemImpactList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemImpactControllerGetItemImpactListParams };
export { EntrySourceMetadata as ItemImpactControllerGetItemImpactMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactMetadataParams };
export { ReferencedEntrySourceMetadata as ItemImpactControllerGetItemImpactMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactMetadataRefParams };
export { PaymentList as ItemImpactControllerGetItemImpactPayments200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemImpactControllerGetItemImpactPaymentsParams };
export { ReferencedPaymentList as ItemImpactControllerGetItemImpactPaymentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactPaymentsRefParams };
export { NullableProject as ItemImpactControllerGetItemImpactProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactProjectParams };
export { NullableReferencedProject as ItemImpactControllerGetItemImpactProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactProjectRefParams };
export { NullableItemAppraisal as ItemImpactControllerGetItemImpactRelevantAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactRelevantAppraisalParams };
export { NullableReferencedItemAppraisal as ItemImpactControllerGetItemImpactRelevantAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactRelevantAppraisalRefParams };
export { NullableItem as ItemImpactControllerGetItemImpactReplacement200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactReplacementParams };
export { NullableReferencedItem as ItemImpactControllerGetItemImpactReplacementRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactReplacementRefParams };
export { NullableItemAppraisal as ItemImpactControllerGetItemImpactSelectedAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerGetItemImpactSelectedAppraisalParams };
export { NullableReferencedItemAppraisal as ItemImpactControllerGetItemImpactSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerGetItemImpactSelectedAppraisalRefParams };
export { ReferencedAccount as ItemImpactControllerPatchItemImpactAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerPatchItemImpactAccountRefParams };
export { ReferencedUpdateAccount as ItemImpactControllerPatchItemImpactAccountRefRequest };
export { ReferencedCurrency as ItemImpactControllerPatchItemImpactCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerPatchItemImpactCurrencyRefParams };
export { ReferencedUpdateCurrency as ItemImpactControllerPatchItemImpactCurrencyRefRequest };
export { ReferencedItem as ItemImpactControllerPatchItemImpactItemRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerPatchItemImpactItemRefParams };
export { ReferencedUpdateItem as ItemImpactControllerPatchItemImpactItemRefRequest };
export { NullableReferencedProject as ItemImpactControllerPatchItemImpactProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerPatchItemImpactProjectRefParams };
export { NullableReferencedUpdateProject as ItemImpactControllerPatchItemImpactProjectRefRequest };
export { NullableReferencedItem as ItemImpactControllerPatchItemImpactReplacementRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerPatchItemImpactReplacementRefParams };
export { NullableReferencedUpdateItem as ItemImpactControllerPatchItemImpactReplacementRefRequest };
export { NullableReferencedItemAppraisal as ItemImpactControllerPatchItemImpactSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemImpactControllerPatchItemImpactSelectedAppraisalRefParams };
export { NullableReferencedUpdateItemAppraisal as ItemImpactControllerPatchItemImpactSelectedAppraisalRefRequest };
export { ItemImpact as ItemImpactControllerUpdateItemImpactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemImpactControllerUpdateItemImpactByIdParams };
export { UpdateItemImpact as ItemImpactControllerUpdateItemImpactByIdRequest };
export { EstimateLineAttributes as ItemImpactEstimateAttributes };
export { InvoiceLineAttributes as ItemImpactInvoiceAttributes };
export { InvoiceLineAttributes as ItemImpactPaymentAttributes };
export { ChangeOrderAttributes as ItemizableFinancialDocumentAttributes };
export { CreateItemizableFinancialDocumentStatsAttributes as ItemizableFinancialDocumentStatsAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemMediaSuggestionControllerCreateItemMediaSuggestionParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerDeleteItemMediaSuggestionByIdParams };
export { ReferencedItemList as ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRefParams };
export { ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefRequest as ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRefRequest };
export { NullableAsset as ItemMediaSuggestionControllerGetItemMediaSuggestionAsset200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemMediaSuggestionControllerGetItemMediaSuggestionAssetParams };
export { NullableReferencedAsset as ItemMediaSuggestionControllerGetItemMediaSuggestionAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerGetItemMediaSuggestionAssetRefParams };
export { ItemMediaSuggestion as ItemMediaSuggestionControllerGetItemMediaSuggestionById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemMediaSuggestionControllerGetItemMediaSuggestionByIdParams };
export { ItemList as ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItems200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsParams };
export { ReferencedItemList as ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsRefParams };
export { NullableItem as ItemMediaSuggestionControllerGetItemMediaSuggestionItem200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemMediaSuggestionControllerGetItemMediaSuggestionItemParams };
export { NullableReferencedItem as ItemMediaSuggestionControllerGetItemMediaSuggestionItemRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerGetItemMediaSuggestionItemRefParams };
export { ItemMediaSuggestionList as ItemMediaSuggestionControllerGetItemMediaSuggestionList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemMediaSuggestionControllerGetItemMediaSuggestionListParams };
export { Media as ItemMediaSuggestionControllerGetItemMediaSuggestionMedia200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemMediaSuggestionControllerGetItemMediaSuggestionMediaParams };
export { ReferencedMedia as ItemMediaSuggestionControllerGetItemMediaSuggestionMediaRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerGetItemMediaSuggestionMediaRefParams };
export { NullableSpace as ItemMediaSuggestionControllerGetItemMediaSuggestionSpace200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceParams };
export { NullableReferencedSpace as ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceRefParams };
export { NullableItemType as ItemMediaSuggestionControllerGetItemMediaSuggestionType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemMediaSuggestionControllerGetItemMediaSuggestionTypeParams };
export { NullableReferencedItemType as ItemMediaSuggestionControllerGetItemMediaSuggestionTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerGetItemMediaSuggestionTypeRefParams };
export { NullableReferencedAsset as ItemMediaSuggestionControllerPatchItemMediaSuggestionAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerPatchItemMediaSuggestionAssetRefParams };
export { NullableReferencedUpdateAsset as ItemMediaSuggestionControllerPatchItemMediaSuggestionAssetRefRequest };
export { ReferencedItemList as ItemMediaSuggestionControllerPatchItemMediaSuggestionExistingItemsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerPatchItemMediaSuggestionExistingItemsRefParams };
export { ReferencedUpdateItemList as ItemMediaSuggestionControllerPatchItemMediaSuggestionExistingItemsRefRequest };
export { NullableReferencedItem as ItemMediaSuggestionControllerPatchItemMediaSuggestionItemRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerPatchItemMediaSuggestionItemRefParams };
export { NullableReferencedUpdateItem as ItemMediaSuggestionControllerPatchItemMediaSuggestionItemRefRequest };
export { ReferencedMedia as ItemMediaSuggestionControllerPatchItemMediaSuggestionMediaRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerPatchItemMediaSuggestionMediaRefParams };
export { ReferencedUpdateMedia as ItemMediaSuggestionControllerPatchItemMediaSuggestionMediaRefRequest };
export { NullableReferencedSpace as ItemMediaSuggestionControllerPatchItemMediaSuggestionSpaceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerPatchItemMediaSuggestionSpaceRefParams };
export { NullableReferencedUpdateSpace as ItemMediaSuggestionControllerPatchItemMediaSuggestionSpaceRefRequest };
export { NullableReferencedItemType as ItemMediaSuggestionControllerPatchItemMediaSuggestionTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerPatchItemMediaSuggestionTypeRefParams };
export { NullableReferencedUpdateItemType as ItemMediaSuggestionControllerPatchItemMediaSuggestionTypeRefRequest };
export { ReferencedItemList as ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRefParams };
export { ItemMediaSuggestion as ItemMediaSuggestionControllerUpdateItemMediaSuggestionById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemMediaSuggestionControllerUpdateItemMediaSuggestionByIdParams };
export { UpdateItemMediaSuggestion as ItemMediaSuggestionControllerUpdateItemMediaSuggestionByIdRequest };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemProductSuggestionControllerCreateItemProductSuggestionParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemProductSuggestionControllerDeleteItemProductSuggestionByIdParams };
export { ItemProductSuggestion as ItemProductSuggestionControllerGetItemProductSuggestionById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemProductSuggestionControllerGetItemProductSuggestionByIdParams };
export { Item as ItemProductSuggestionControllerGetItemProductSuggestionItem200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemProductSuggestionControllerGetItemProductSuggestionItemParams };
export { ReferencedItem as ItemProductSuggestionControllerGetItemProductSuggestionItemRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemProductSuggestionControllerGetItemProductSuggestionItemRefParams };
export { ItemProductSuggestionList as ItemProductSuggestionControllerGetItemProductSuggestionList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ItemProductSuggestionControllerGetItemProductSuggestionListParams };
export { ReferencedItem as ItemProductSuggestionControllerPatchItemProductSuggestionItemRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ItemProductSuggestionControllerPatchItemProductSuggestionItemRefParams };
export { ReferencedUpdateItem as ItemProductSuggestionControllerPatchItemProductSuggestionItemRefRequest };
export { ItemProductSuggestion as ItemProductSuggestionControllerUpdateItemProductSuggestionById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ItemProductSuggestionControllerUpdateItemProductSuggestionByIdParams };
export { UpdateItemProductSuggestion as ItemProductSuggestionControllerUpdateItemProductSuggestionByIdRequest };
export { AssetTypeAttributes as ItemTemplateAttributes };
export { AssetTypeList as ItemTemplateControllerGetItemTemplateAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as ItemTemplateControllerGetItemTemplateAssetTypesParams };
export { ReferencedAssetTypeList as ItemTemplateControllerGetItemTemplateAssetTypesRef200 };
export { ItemTemplate as ItemTemplateControllerGetItemTemplateById200 };
export { AccountControllerGetCurrentAccountParams as ItemTemplateControllerGetItemTemplateByIdParams };
export { ItemType as ItemTemplateControllerGetItemTemplateItemType200 };
export { AccountControllerGetCurrentAccountParams as ItemTemplateControllerGetItemTemplateItemTypeParams };
export { ReferencedItemType as ItemTemplateControllerGetItemTemplateItemTypeRef200 };
export { ItemTemplateList as ItemTemplateControllerGetItemTemplateList200 };
export { UserControllerGetUserAccountRolesParams as ItemTemplateControllerGetItemTemplateListParams };
export { CreateItemTypeAttributes as ItemTypeAttributes };
export { AssetTypeList as ItemTypeControllerGetItemTypeAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as ItemTypeControllerGetItemTypeAssetTypesParams };
export { ReferencedAssetTypeList as ItemTypeControllerGetItemTypeAssetTypesRef200 };
export { ItemType as ItemTypeControllerGetItemTypeById200 };
export { AccountControllerGetCurrentAccountParams as ItemTypeControllerGetItemTypeByIdParams };
export { ItemClassList as ItemTypeControllerGetItemTypeClasses200 };
export { UserControllerGetUserAccountRolesParams as ItemTypeControllerGetItemTypeClassesParams };
export { ReferencedItemClassList as ItemTypeControllerGetItemTypeClassesRef200 };
export { DepreciationModifierList as ItemTypeControllerGetItemTypeDepreciationModifiers200 };
export { UserControllerGetUserAccountRolesParams as ItemTypeControllerGetItemTypeDepreciationModifiersParams };
export { ReferencedDepreciationModifierList as ItemTypeControllerGetItemTypeDepreciationModifiersRef200 };
export { DepreciationOverrideList as ItemTypeControllerGetItemTypeDepreciationOverrides200 };
export { UserControllerGetUserAccountRolesParams as ItemTypeControllerGetItemTypeDepreciationOverridesParams };
export { ReferencedDepreciationOverrideList as ItemTypeControllerGetItemTypeDepreciationOverridesRef200 };
export { ItemTypeList as ItemTypeControllerGetItemTypeList200 };
export { UserControllerGetUserAccountRolesParams as ItemTypeControllerGetItemTypeListParams };
export { CreateMediaAttributes as MediaAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as MediaControllerCreateMediaParams };
export { ReferencedAssetList as MediaControllerDeleteMediaAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerDeleteMediaAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as MediaControllerDeleteMediaAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerDeleteMediaByIdParams };
export { ReferencedProjectMediaList as MediaControllerDeleteMediaProjectAssignmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerDeleteMediaProjectAssignmentsRefParams };
export { ProjectControllerPostProjectMediaAttachmentsRefRequest as MediaControllerDeleteMediaProjectAssignmentsRefRequest };
export { ReferencedSpaceList as MediaControllerDeleteMediaSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerDeleteMediaSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as MediaControllerDeleteMediaSpacesRefRequest };
export { Account as MediaControllerGetMediaAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as MediaControllerGetMediaAccountParams };
export { ReferencedAccount as MediaControllerGetMediaAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerGetMediaAccountRefParams };
export { AssetList as MediaControllerGetMediaAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as MediaControllerGetMediaAssetsParams };
export { ReferencedAssetList as MediaControllerGetMediaAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerGetMediaAssetsRefParams };
export { Media as MediaControllerGetMediaById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as MediaControllerGetMediaByIdParams };
export { EntrySourceMediaList as MediaControllerGetMediaEntrySourceAnnotations200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as MediaControllerGetMediaEntrySourceAnnotationsParams };
export { ReferencedEntrySourceMediaList as MediaControllerGetMediaEntrySourceAnnotationsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerGetMediaEntrySourceAnnotationsRefParams };
export { File as MediaControllerGetMediaFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as MediaControllerGetMediaFileParams };
export { ReferencedFile as MediaControllerGetMediaFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerGetMediaFileRefParams };
export { MediaList as MediaControllerGetMediaList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as MediaControllerGetMediaListParams };
export { ProjectMediaList as MediaControllerGetMediaProjectAssignments200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as MediaControllerGetMediaProjectAssignmentsParams };
export { ReferencedProjectMediaList as MediaControllerGetMediaProjectAssignmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerGetMediaProjectAssignmentsRefParams };
export { SpaceList as MediaControllerGetMediaSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as MediaControllerGetMediaSpacesParams };
export { ReferencedSpaceList as MediaControllerGetMediaSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerGetMediaSpacesRefParams };
export { ReferencedAccount as MediaControllerPatchMediaAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerPatchMediaAccountRefParams };
export { ReferencedUpdateAccount as MediaControllerPatchMediaAccountRefRequest };
export { ReferencedAssetList as MediaControllerPatchMediaAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerPatchMediaAssetsRefParams };
export { ReferencedUpdateAssetList as MediaControllerPatchMediaAssetsRefRequest };
export { ReferencedFile as MediaControllerPatchMediaFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerPatchMediaFileRefParams };
export { ReferencedUpdateFile as MediaControllerPatchMediaFileRefRequest };
export { ReferencedProjectMediaList as MediaControllerPatchMediaProjectAssignmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerPatchMediaProjectAssignmentsRefParams };
export { ReferencedUpdateProjectMediaList as MediaControllerPatchMediaProjectAssignmentsRefRequest };
export { ReferencedSpaceList as MediaControllerPatchMediaSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerPatchMediaSpacesRefParams };
export { ReferencedUpdateSpaceList as MediaControllerPatchMediaSpacesRefRequest };
export { ReferencedAssetList as MediaControllerPostMediaAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerPostMediaAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as MediaControllerPostMediaAssetsRefRequest };
export { ReferencedProjectMediaList as MediaControllerPostMediaProjectAssignmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerPostMediaProjectAssignmentsRefParams };
export { ProjectControllerPostProjectMediaAttachmentsRefRequest as MediaControllerPostMediaProjectAssignmentsRefRequest };
export { ReferencedSpaceList as MediaControllerPostMediaSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as MediaControllerPostMediaSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as MediaControllerPostMediaSpacesRefRequest };
export { Media as MediaControllerUpdateMediaById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as MediaControllerUpdateMediaByIdParams };
export { UpdateMedia as MediaControllerUpdateMediaByIdRequest };
export { BlueprintAttributes as ParamedicReportAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ParamedicReportControllerCreateParamedicReportParams };
export { ReferencedAssetList as ParamedicReportControllerDeleteParamedicReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerDeleteParamedicReportAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ParamedicReportControllerDeleteParamedicReportAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerDeleteParamedicReportByIdParams };
export { ReferencedProjectList as ParamedicReportControllerDeleteParamedicReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerDeleteParamedicReportProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ParamedicReportControllerDeleteParamedicReportProjectsRefRequest };
export { ReferencedSpaceList as ParamedicReportControllerDeleteParamedicReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerDeleteParamedicReportSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ParamedicReportControllerDeleteParamedicReportSpacesRefRequest };
export { Account as ParamedicReportControllerGetParamedicReportAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ParamedicReportControllerGetParamedicReportAccountParams };
export { ReferencedAccount as ParamedicReportControllerGetParamedicReportAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerGetParamedicReportAccountRefParams };
export { AssetList as ParamedicReportControllerGetParamedicReportAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ParamedicReportControllerGetParamedicReportAssetsParams };
export { ReferencedAssetList as ParamedicReportControllerGetParamedicReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerGetParamedicReportAssetsRefParams };
export { ParamedicReport as ParamedicReportControllerGetParamedicReportById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ParamedicReportControllerGetParamedicReportByIdParams };
export { DocumentType as ParamedicReportControllerGetParamedicReportDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ParamedicReportControllerGetParamedicReportDocumentTypeParams };
export { ReferencedDocumentType as ParamedicReportControllerGetParamedicReportDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerGetParamedicReportDocumentTypeRefParams };
export { NullableFile as ParamedicReportControllerGetParamedicReportFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ParamedicReportControllerGetParamedicReportFileParams };
export { NullableReferencedFile as ParamedicReportControllerGetParamedicReportFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerGetParamedicReportFileRefParams };
export { ParamedicReportList as ParamedicReportControllerGetParamedicReportList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ParamedicReportControllerGetParamedicReportListParams };
export { ProjectList as ParamedicReportControllerGetParamedicReportProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ParamedicReportControllerGetParamedicReportProjectsParams };
export { ReferencedProjectList as ParamedicReportControllerGetParamedicReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerGetParamedicReportProjectsRefParams };
export { SpaceList as ParamedicReportControllerGetParamedicReportSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ParamedicReportControllerGetParamedicReportSpacesParams };
export { ReferencedSpaceList as ParamedicReportControllerGetParamedicReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerGetParamedicReportSpacesRefParams };
export { ReferencedAccount as ParamedicReportControllerPatchParamedicReportAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerPatchParamedicReportAccountRefParams };
export { ReferencedUpdateAccount as ParamedicReportControllerPatchParamedicReportAccountRefRequest };
export { ReferencedAssetList as ParamedicReportControllerPatchParamedicReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerPatchParamedicReportAssetsRefParams };
export { ReferencedUpdateAssetList as ParamedicReportControllerPatchParamedicReportAssetsRefRequest };
export { NullableReferencedFile as ParamedicReportControllerPatchParamedicReportFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerPatchParamedicReportFileRefParams };
export { NullableReferencedUpdateFile as ParamedicReportControllerPatchParamedicReportFileRefRequest };
export { ReferencedProjectList as ParamedicReportControllerPatchParamedicReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerPatchParamedicReportProjectsRefParams };
export { ReferencedUpdateProjectList as ParamedicReportControllerPatchParamedicReportProjectsRefRequest };
export { ReferencedSpaceList as ParamedicReportControllerPatchParamedicReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerPatchParamedicReportSpacesRefParams };
export { ReferencedUpdateSpaceList as ParamedicReportControllerPatchParamedicReportSpacesRefRequest };
export { ReferencedAssetList as ParamedicReportControllerPostParamedicReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerPostParamedicReportAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ParamedicReportControllerPostParamedicReportAssetsRefRequest };
export { ReferencedProjectList as ParamedicReportControllerPostParamedicReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerPostParamedicReportProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ParamedicReportControllerPostParamedicReportProjectsRefRequest };
export { ReferencedSpaceList as ParamedicReportControllerPostParamedicReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ParamedicReportControllerPostParamedicReportSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ParamedicReportControllerPostParamedicReportSpacesRefRequest };
export { ParamedicReport as ParamedicReportControllerUpdateParamedicReportById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ParamedicReportControllerUpdateParamedicReportByIdParams };
export { UpdateParamedicReport as ParamedicReportControllerUpdateParamedicReportByIdRequest };
export { BlueprintRelationships as ParamedicReportRelationships };
export { ChangeOrderAttributes as PaymentAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerCreatePaymentParams };
export { ReferencedAssetList as PaymentControllerDeletePaymentAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerDeletePaymentAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PaymentControllerDeletePaymentAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerDeletePaymentByIdParams };
export { ReferencedProjectList as PaymentControllerDeletePaymentProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerDeletePaymentProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as PaymentControllerDeletePaymentProjectsRefRequest };
export { ReferencedSpaceList as PaymentControllerDeletePaymentSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerDeletePaymentSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as PaymentControllerDeletePaymentSpacesRefRequest };
export { Account as PaymentControllerGetPaymentAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerGetPaymentAccountParams };
export { ReferencedAccount as PaymentControllerGetPaymentAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentAccountRefParams };
export { AssetList as PaymentControllerGetPaymentAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PaymentControllerGetPaymentAssetsParams };
export { ReferencedAssetList as PaymentControllerGetPaymentAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentAssetsRefParams };
export { Payment as PaymentControllerGetPaymentById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerGetPaymentByIdParams };
export { Currency as PaymentControllerGetPaymentCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerGetPaymentCurrencyParams };
export { ReferencedCurrency as PaymentControllerGetPaymentCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentCurrencyRefParams };
export { DocumentType as PaymentControllerGetPaymentDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerGetPaymentDocumentTypeParams };
export { ReferencedDocumentType as PaymentControllerGetPaymentDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentDocumentTypeRefParams };
export { NullableFile as PaymentControllerGetPaymentFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerGetPaymentFileParams };
export { NullableReferencedFile as PaymentControllerGetPaymentFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentFileRefParams };
export { PaymentLineList as PaymentControllerGetPaymentLines200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PaymentControllerGetPaymentLinesParams };
export { ReferencedPaymentLineList as PaymentControllerGetPaymentLinesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentLinesRefParams };
export { EntrySourceList as PaymentControllerGetPaymentLineSubjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PaymentControllerGetPaymentLineSubjectsParams };
export { ReferencedEntrySourceList as PaymentControllerGetPaymentLineSubjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentLineSubjectsRefParams };
export { PaymentList as PaymentControllerGetPaymentList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PaymentControllerGetPaymentListParams };
export { ProjectList as PaymentControllerGetPaymentProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PaymentControllerGetPaymentProjectsParams };
export { ReferencedProjectList as PaymentControllerGetPaymentProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentProjectsRefParams };
export { NullableService as PaymentControllerGetPaymentService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerGetPaymentServiceParams };
export { NullableReferencedService as PaymentControllerGetPaymentServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentServiceRefParams };
export { SpaceList as PaymentControllerGetPaymentSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PaymentControllerGetPaymentSpacesParams };
export { ReferencedSpaceList as PaymentControllerGetPaymentSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentSpacesRefParams };
export { ItemizableFinancialDocumentStats as PaymentControllerGetPaymentStats200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerGetPaymentStatsParams };
export { ReferencedItemizableFinancialDocumentStats as PaymentControllerGetPaymentStatsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentStatsRefParams };
export { NullableAccountProvider as PaymentControllerGetPaymentVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerGetPaymentVendorParams };
export { NullableReferencedAccountProvider as PaymentControllerGetPaymentVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerGetPaymentVendorRefParams };
export { ReferencedAccount as PaymentControllerPatchPaymentAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPatchPaymentAccountRefParams };
export { ReferencedUpdateAccount as PaymentControllerPatchPaymentAccountRefRequest };
export { ReferencedAssetList as PaymentControllerPatchPaymentAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPatchPaymentAssetsRefParams };
export { ReferencedUpdateAssetList as PaymentControllerPatchPaymentAssetsRefRequest };
export { ReferencedCurrency as PaymentControllerPatchPaymentCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPatchPaymentCurrencyRefParams };
export { ReferencedUpdateCurrency as PaymentControllerPatchPaymentCurrencyRefRequest };
export { NullableReferencedFile as PaymentControllerPatchPaymentFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPatchPaymentFileRefParams };
export { NullableReferencedUpdateFile as PaymentControllerPatchPaymentFileRefRequest };
export { ReferencedProjectList as PaymentControllerPatchPaymentProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPatchPaymentProjectsRefParams };
export { ReferencedUpdateProjectList as PaymentControllerPatchPaymentProjectsRefRequest };
export { NullableReferencedService as PaymentControllerPatchPaymentServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPatchPaymentServiceRefParams };
export { NullableReferencedUpdateService as PaymentControllerPatchPaymentServiceRefRequest };
export { ReferencedSpaceList as PaymentControllerPatchPaymentSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPatchPaymentSpacesRefParams };
export { ReferencedUpdateSpaceList as PaymentControllerPatchPaymentSpacesRefRequest };
export { NullableReferencedAccountProvider as PaymentControllerPatchPaymentVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPatchPaymentVendorRefParams };
export { NullableReferencedUpdateAccountProvider as PaymentControllerPatchPaymentVendorRefRequest };
export { ReferencedAssetList as PaymentControllerPostPaymentAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPostPaymentAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PaymentControllerPostPaymentAssetsRefRequest };
export { ReferencedProjectList as PaymentControllerPostPaymentProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPostPaymentProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as PaymentControllerPostPaymentProjectsRefRequest };
export { ReferencedSpaceList as PaymentControllerPostPaymentSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentControllerPostPaymentSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as PaymentControllerPostPaymentSpacesRefRequest };
export { Payment as PaymentControllerUpdatePaymentById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentControllerUpdatePaymentByIdParams };
export { UpdatePayment as PaymentControllerUpdatePaymentByIdRequest };
export { InvoiceLineAttributes as PaymentLineAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentLineControllerCreatePaymentLineParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerDeletePaymentLineByIdParams };
export { PaymentLine as PaymentLineControllerGetPaymentLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentLineControllerGetPaymentLineByIdParams };
export { PaymentLineList as PaymentLineControllerGetPaymentLineList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PaymentLineControllerGetPaymentLineListParams };
export { NullablePayment as PaymentLineControllerGetPaymentLinePayment200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentLineControllerGetPaymentLinePaymentParams };
export { NullableReferencedPayment as PaymentLineControllerGetPaymentLinePaymentRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerGetPaymentLinePaymentRefParams };
export { NullableService as PaymentLineControllerGetPaymentLineService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentLineControllerGetPaymentLineServiceParams };
export { NullableReferencedService as PaymentLineControllerGetPaymentLineServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerGetPaymentLineServiceRefParams };
export { EntrySource as PaymentLineControllerGetPaymentLineSubject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentLineControllerGetPaymentLineSubjectParams };
export { ReferencedEntrySource as PaymentLineControllerGetPaymentLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerGetPaymentLineSubjectRefParams };
export { NullableAccountProvider as PaymentLineControllerGetPaymentLineVendor200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentLineControllerGetPaymentLineVendorParams };
export { NullableReferencedAccountProvider as PaymentLineControllerGetPaymentLineVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerGetPaymentLineVendorRefParams };
export { NullableReferencedPayment as PaymentLineControllerPatchPaymentLinePaymentRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerPatchPaymentLinePaymentRefParams };
export { NullableReferencedUpdatePayment as PaymentLineControllerPatchPaymentLinePaymentRefRequest };
export { NullableReferencedService as PaymentLineControllerPatchPaymentLineServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerPatchPaymentLineServiceRefParams };
export { NullableReferencedUpdateService as PaymentLineControllerPatchPaymentLineServiceRefRequest };
export { ReferencedEntrySource as PaymentLineControllerPatchPaymentLineSubjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerPatchPaymentLineSubjectRefParams };
export { ReferencedUpdateEntrySource as PaymentLineControllerPatchPaymentLineSubjectRefRequest };
export { NullableReferencedAccountProvider as PaymentLineControllerPatchPaymentLineVendorRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PaymentLineControllerPatchPaymentLineVendorRefParams };
export { NullableReferencedUpdateAccountProvider as PaymentLineControllerPatchPaymentLineVendorRefRequest };
export { PaymentLine as PaymentLineControllerUpdatePaymentLineById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PaymentLineControllerUpdatePaymentLineByIdParams };
export { UpdatePaymentLine as PaymentLineControllerUpdatePaymentLineByIdRequest };
export { AssetTypeAttributes as PerilAttributes };
export { AssetTypeList as PerilControllerGetPerilAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as PerilControllerGetPerilAssetTypesParams };
export { ReferencedAssetTypeList as PerilControllerGetPerilAssetTypesRef200 };
export { Peril as PerilControllerGetPerilById200 };
export { AccountControllerGetCurrentAccountParams as PerilControllerGetPerilByIdParams };
export { PerilList as PerilControllerGetPerilList200 };
export { UserControllerGetUserAccountRolesParams as PerilControllerGetPerilListParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermissionsControllerCheckDeletePermissionsParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermissionsControllerCheckUpsertPermissionsParams };
export { BlueprintAttributes as PermitAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PermitControllerCreatePermitParams };
export { ReferencedAssetList as PermitControllerDeletePermitAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerDeletePermitAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PermitControllerDeletePermitAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerDeletePermitByIdParams };
export { ReferencedProjectList as PermitControllerDeletePermitProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerDeletePermitProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as PermitControllerDeletePermitProjectsRefRequest };
export { ReferencedSpaceList as PermitControllerDeletePermitSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerDeletePermitSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as PermitControllerDeletePermitSpacesRefRequest };
export { Account as PermitControllerGetPermitAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PermitControllerGetPermitAccountParams };
export { ReferencedAccount as PermitControllerGetPermitAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerGetPermitAccountRefParams };
export { AssetList as PermitControllerGetPermitAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PermitControllerGetPermitAssetsParams };
export { ReferencedAssetList as PermitControllerGetPermitAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerGetPermitAssetsRefParams };
export { Permit as PermitControllerGetPermitById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PermitControllerGetPermitByIdParams };
export { DocumentType as PermitControllerGetPermitDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PermitControllerGetPermitDocumentTypeParams };
export { ReferencedDocumentType as PermitControllerGetPermitDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerGetPermitDocumentTypeRefParams };
export { NullableFile as PermitControllerGetPermitFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PermitControllerGetPermitFileParams };
export { NullableReferencedFile as PermitControllerGetPermitFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerGetPermitFileRefParams };
export { PermitList as PermitControllerGetPermitList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PermitControllerGetPermitListParams };
export { ProjectList as PermitControllerGetPermitProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PermitControllerGetPermitProjectsParams };
export { ReferencedProjectList as PermitControllerGetPermitProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerGetPermitProjectsRefParams };
export { SpaceList as PermitControllerGetPermitSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PermitControllerGetPermitSpacesParams };
export { ReferencedSpaceList as PermitControllerGetPermitSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerGetPermitSpacesRefParams };
export { ReferencedAccount as PermitControllerPatchPermitAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerPatchPermitAccountRefParams };
export { ReferencedUpdateAccount as PermitControllerPatchPermitAccountRefRequest };
export { ReferencedAssetList as PermitControllerPatchPermitAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerPatchPermitAssetsRefParams };
export { ReferencedUpdateAssetList as PermitControllerPatchPermitAssetsRefRequest };
export { NullableReferencedFile as PermitControllerPatchPermitFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerPatchPermitFileRefParams };
export { NullableReferencedUpdateFile as PermitControllerPatchPermitFileRefRequest };
export { ReferencedProjectList as PermitControllerPatchPermitProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerPatchPermitProjectsRefParams };
export { ReferencedUpdateProjectList as PermitControllerPatchPermitProjectsRefRequest };
export { ReferencedSpaceList as PermitControllerPatchPermitSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerPatchPermitSpacesRefParams };
export { ReferencedUpdateSpaceList as PermitControllerPatchPermitSpacesRefRequest };
export { ReferencedAssetList as PermitControllerPostPermitAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerPostPermitAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PermitControllerPostPermitAssetsRefRequest };
export { ReferencedProjectList as PermitControllerPostPermitProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerPostPermitProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as PermitControllerPostPermitProjectsRefRequest };
export { ReferencedSpaceList as PermitControllerPostPermitSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PermitControllerPostPermitSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as PermitControllerPostPermitSpacesRefRequest };
export { Permit as PermitControllerUpdatePermitById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PermitControllerUpdatePermitByIdParams };
export { UpdatePermit as PermitControllerUpdatePermitByIdRequest };
export { BlueprintRelationships as PermitRelationships };
export { AccountControllerGetCurrentAccountParams as PhoneNumberControllerCreatePhoneNumberParams };
export { PhoneNumber as PhoneNumberControllerGetPhoneNumberById200 };
export { AccountControllerGetCurrentAccountParams as PhoneNumberControllerGetPhoneNumberByIdParams };
export { Identity as PhoneNumberControllerGetPhoneNumberIdentity200 };
export { AccountControllerGetCurrentAccountParams as PhoneNumberControllerGetPhoneNumberIdentityParams };
export { ReferencedIdentity as PhoneNumberControllerGetPhoneNumberIdentityRef200 };
export { PhoneNumberList as PhoneNumberControllerGetPhoneNumberList200 };
export { UserControllerGetUserAccountRolesParams as PhoneNumberControllerGetPhoneNumberListParams };
export { ReferencedIdentity as PhoneNumberControllerPatchPhoneNumberIdentityRef200 };
export { ReferencedUpdateIdentity as PhoneNumberControllerPatchPhoneNumberIdentityRefRequest };
export { PhoneNumber as PhoneNumberControllerUpdatePhoneNumberById200 };
export { AccountControllerGetCurrentAccountParams as PhoneNumberControllerUpdatePhoneNumberByIdParams };
export { UpdatePhoneNumber as PhoneNumberControllerUpdatePhoneNumberByIdRequest };
export { EmailAddressRelationships as PhoneNumberRelationships };
export { BlueprintAttributes as PoliceReportAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PoliceReportControllerCreatePoliceReportParams };
export { ReferencedAssetList as PoliceReportControllerDeletePoliceReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerDeletePoliceReportAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PoliceReportControllerDeletePoliceReportAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerDeletePoliceReportByIdParams };
export { ReferencedProjectList as PoliceReportControllerDeletePoliceReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerDeletePoliceReportProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as PoliceReportControllerDeletePoliceReportProjectsRefRequest };
export { ReferencedSpaceList as PoliceReportControllerDeletePoliceReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerDeletePoliceReportSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as PoliceReportControllerDeletePoliceReportSpacesRefRequest };
export { Account as PoliceReportControllerGetPoliceReportAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PoliceReportControllerGetPoliceReportAccountParams };
export { ReferencedAccount as PoliceReportControllerGetPoliceReportAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerGetPoliceReportAccountRefParams };
export { AssetList as PoliceReportControllerGetPoliceReportAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PoliceReportControllerGetPoliceReportAssetsParams };
export { ReferencedAssetList as PoliceReportControllerGetPoliceReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerGetPoliceReportAssetsRefParams };
export { PoliceReport as PoliceReportControllerGetPoliceReportById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PoliceReportControllerGetPoliceReportByIdParams };
export { DocumentType as PoliceReportControllerGetPoliceReportDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PoliceReportControllerGetPoliceReportDocumentTypeParams };
export { ReferencedDocumentType as PoliceReportControllerGetPoliceReportDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerGetPoliceReportDocumentTypeRefParams };
export { NullableFile as PoliceReportControllerGetPoliceReportFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PoliceReportControllerGetPoliceReportFileParams };
export { NullableReferencedFile as PoliceReportControllerGetPoliceReportFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerGetPoliceReportFileRefParams };
export { PoliceReportList as PoliceReportControllerGetPoliceReportList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PoliceReportControllerGetPoliceReportListParams };
export { ProjectList as PoliceReportControllerGetPoliceReportProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PoliceReportControllerGetPoliceReportProjectsParams };
export { ReferencedProjectList as PoliceReportControllerGetPoliceReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerGetPoliceReportProjectsRefParams };
export { SpaceList as PoliceReportControllerGetPoliceReportSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PoliceReportControllerGetPoliceReportSpacesParams };
export { ReferencedSpaceList as PoliceReportControllerGetPoliceReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerGetPoliceReportSpacesRefParams };
export { ReferencedAccount as PoliceReportControllerPatchPoliceReportAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerPatchPoliceReportAccountRefParams };
export { ReferencedUpdateAccount as PoliceReportControllerPatchPoliceReportAccountRefRequest };
export { ReferencedAssetList as PoliceReportControllerPatchPoliceReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerPatchPoliceReportAssetsRefParams };
export { ReferencedUpdateAssetList as PoliceReportControllerPatchPoliceReportAssetsRefRequest };
export { NullableReferencedFile as PoliceReportControllerPatchPoliceReportFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerPatchPoliceReportFileRefParams };
export { NullableReferencedUpdateFile as PoliceReportControllerPatchPoliceReportFileRefRequest };
export { ReferencedProjectList as PoliceReportControllerPatchPoliceReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerPatchPoliceReportProjectsRefParams };
export { ReferencedUpdateProjectList as PoliceReportControllerPatchPoliceReportProjectsRefRequest };
export { ReferencedSpaceList as PoliceReportControllerPatchPoliceReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerPatchPoliceReportSpacesRefParams };
export { ReferencedUpdateSpaceList as PoliceReportControllerPatchPoliceReportSpacesRefRequest };
export { ReferencedAssetList as PoliceReportControllerPostPoliceReportAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerPostPoliceReportAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PoliceReportControllerPostPoliceReportAssetsRefRequest };
export { ReferencedProjectList as PoliceReportControllerPostPoliceReportProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerPostPoliceReportProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as PoliceReportControllerPostPoliceReportProjectsRefRequest };
export { ReferencedSpaceList as PoliceReportControllerPostPoliceReportSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PoliceReportControllerPostPoliceReportSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as PoliceReportControllerPostPoliceReportSpacesRefRequest };
export { PoliceReport as PoliceReportControllerUpdatePoliceReportById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PoliceReportControllerUpdatePoliceReportByIdParams };
export { UpdatePoliceReport as PoliceReportControllerUpdatePoliceReportByIdRequest };
export { BlueprintRelationships as PoliceReportRelationships };
export { CreatePolicyAttributes as PolicyAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyControllerCreatePolicyParams };
export { ReferencedAssetList as PolicyControllerDeletePolicyAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerDeletePolicyAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PolicyControllerDeletePolicyAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerDeletePolicyByIdParams };
export { Account as PolicyControllerGetPolicyAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyControllerGetPolicyAccountParams };
export { ReferencedAccount as PolicyControllerGetPolicyAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerGetPolicyAccountRefParams };
export { AssetList as PolicyControllerGetPolicyAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyControllerGetPolicyAssetsParams };
export { ReferencedAssetList as PolicyControllerGetPolicyAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerGetPolicyAssetsRefParams };
export { Policy as PolicyControllerGetPolicyById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyControllerGetPolicyByIdParams };
export { Currency as PolicyControllerGetPolicyCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyControllerGetPolicyCurrencyParams };
export { ReferencedCurrency as PolicyControllerGetPolicyCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerGetPolicyCurrencyRefParams };
export { PolicyList as PolicyControllerGetPolicyList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyControllerGetPolicyListParams };
export { Provider as PolicyControllerGetPolicyProvider200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyControllerGetPolicyProviderParams };
export { ReferencedProvider as PolicyControllerGetPolicyProviderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerGetPolicyProviderRefParams };
export { NullablePolicyTemplate as PolicyControllerGetPolicyTemplate200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyControllerGetPolicyTemplateParams };
export { NullableReferencedPolicyTemplate as PolicyControllerGetPolicyTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerGetPolicyTemplateRefParams };
export { PolicyTermList as PolicyControllerGetPolicyTerms200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyControllerGetPolicyTermsParams };
export { ReferencedPolicyTermList as PolicyControllerGetPolicyTermsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerGetPolicyTermsRefParams };
export { ReferencedAccount as PolicyControllerPatchPolicyAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerPatchPolicyAccountRefParams };
export { ReferencedUpdateAccount as PolicyControllerPatchPolicyAccountRefRequest };
export { ReferencedAssetList as PolicyControllerPatchPolicyAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerPatchPolicyAssetsRefParams };
export { ReferencedUpdateAssetList as PolicyControllerPatchPolicyAssetsRefRequest };
export { ReferencedCurrency as PolicyControllerPatchPolicyCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerPatchPolicyCurrencyRefParams };
export { ReferencedUpdateCurrency as PolicyControllerPatchPolicyCurrencyRefRequest };
export { ReferencedProvider as PolicyControllerPatchPolicyProviderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerPatchPolicyProviderRefParams };
export { ReferencedUpdateProvider as PolicyControllerPatchPolicyProviderRefRequest };
export { NullableReferencedPolicyTemplate as PolicyControllerPatchPolicyTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerPatchPolicyTemplateRefParams };
export { NullableReferencedUpdatePolicyTemplate as PolicyControllerPatchPolicyTemplateRefRequest };
export { ReferencedAssetList as PolicyControllerPostPolicyAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyControllerPostPolicyAssetsRefParams };
export { Policy as PolicyControllerUpdatePolicyById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyControllerUpdatePolicyByIdParams };
export { UpdatePolicy as PolicyControllerUpdatePolicyByIdRequest };
export { BlueprintAttributes as PolicyJacketAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyJacketControllerCreatePolicyJacketParams };
export { ReferencedAssetList as PolicyJacketControllerDeletePolicyJacketAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerDeletePolicyJacketAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PolicyJacketControllerDeletePolicyJacketAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerDeletePolicyJacketByIdParams };
export { ReferencedProjectList as PolicyJacketControllerDeletePolicyJacketProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerDeletePolicyJacketProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as PolicyJacketControllerDeletePolicyJacketProjectsRefRequest };
export { ReferencedSpaceList as PolicyJacketControllerDeletePolicyJacketSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerDeletePolicyJacketSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as PolicyJacketControllerDeletePolicyJacketSpacesRefRequest };
export { Account as PolicyJacketControllerGetPolicyJacketAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyJacketControllerGetPolicyJacketAccountParams };
export { ReferencedAccount as PolicyJacketControllerGetPolicyJacketAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerGetPolicyJacketAccountRefParams };
export { AssetList as PolicyJacketControllerGetPolicyJacketAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyJacketControllerGetPolicyJacketAssetsParams };
export { ReferencedAssetList as PolicyJacketControllerGetPolicyJacketAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerGetPolicyJacketAssetsRefParams };
export { PolicyJacket as PolicyJacketControllerGetPolicyJacketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyJacketControllerGetPolicyJacketByIdParams };
export { DocumentType as PolicyJacketControllerGetPolicyJacketDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyJacketControllerGetPolicyJacketDocumentTypeParams };
export { ReferencedDocumentType as PolicyJacketControllerGetPolicyJacketDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerGetPolicyJacketDocumentTypeRefParams };
export { NullableFile as PolicyJacketControllerGetPolicyJacketFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyJacketControllerGetPolicyJacketFileParams };
export { NullableReferencedFile as PolicyJacketControllerGetPolicyJacketFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerGetPolicyJacketFileRefParams };
export { PolicyJacketList as PolicyJacketControllerGetPolicyJacketList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyJacketControllerGetPolicyJacketListParams };
export { ProjectList as PolicyJacketControllerGetPolicyJacketProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyJacketControllerGetPolicyJacketProjectsParams };
export { ReferencedProjectList as PolicyJacketControllerGetPolicyJacketProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerGetPolicyJacketProjectsRefParams };
export { SpaceList as PolicyJacketControllerGetPolicyJacketSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyJacketControllerGetPolicyJacketSpacesParams };
export { ReferencedSpaceList as PolicyJacketControllerGetPolicyJacketSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerGetPolicyJacketSpacesRefParams };
export { ReferencedAccount as PolicyJacketControllerPatchPolicyJacketAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerPatchPolicyJacketAccountRefParams };
export { ReferencedUpdateAccount as PolicyJacketControllerPatchPolicyJacketAccountRefRequest };
export { ReferencedAssetList as PolicyJacketControllerPatchPolicyJacketAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerPatchPolicyJacketAssetsRefParams };
export { ReferencedUpdateAssetList as PolicyJacketControllerPatchPolicyJacketAssetsRefRequest };
export { NullableReferencedFile as PolicyJacketControllerPatchPolicyJacketFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerPatchPolicyJacketFileRefParams };
export { NullableReferencedUpdateFile as PolicyJacketControllerPatchPolicyJacketFileRefRequest };
export { ReferencedProjectList as PolicyJacketControllerPatchPolicyJacketProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerPatchPolicyJacketProjectsRefParams };
export { ReferencedUpdateProjectList as PolicyJacketControllerPatchPolicyJacketProjectsRefRequest };
export { ReferencedSpaceList as PolicyJacketControllerPatchPolicyJacketSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerPatchPolicyJacketSpacesRefParams };
export { ReferencedUpdateSpaceList as PolicyJacketControllerPatchPolicyJacketSpacesRefRequest };
export { ReferencedAssetList as PolicyJacketControllerPostPolicyJacketAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerPostPolicyJacketAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PolicyJacketControllerPostPolicyJacketAssetsRefRequest };
export { ReferencedProjectList as PolicyJacketControllerPostPolicyJacketProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerPostPolicyJacketProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as PolicyJacketControllerPostPolicyJacketProjectsRefRequest };
export { ReferencedSpaceList as PolicyJacketControllerPostPolicyJacketSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyJacketControllerPostPolicyJacketSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as PolicyJacketControllerPostPolicyJacketSpacesRefRequest };
export { PolicyJacket as PolicyJacketControllerUpdatePolicyJacketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyJacketControllerUpdatePolicyJacketByIdParams };
export { UpdatePolicyJacket as PolicyJacketControllerUpdatePolicyJacketByIdRequest };
export { BlueprintRelationships as PolicyJacketRelationships };
export { AssetTypeAttributes as PolicyTemplateAttributes };
export { AssetTypeList as PolicyTemplateControllerGetPolicyTemplateAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as PolicyTemplateControllerGetPolicyTemplateAssetTypesParams };
export { ReferencedAssetTypeList as PolicyTemplateControllerGetPolicyTemplateAssetTypesRef200 };
export { PolicyTemplate as PolicyTemplateControllerGetPolicyTemplateById200 };
export { AccountControllerGetCurrentAccountParams as PolicyTemplateControllerGetPolicyTemplateByIdParams };
export { CoverageGroupTemplateList as PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplates200 };
export { UserControllerGetUserAccountRolesParams as PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplatesParams };
export { ReferencedCoverageGroupTemplateList as PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplatesRef200 };
export { CoverageTemplateList as PolicyTemplateControllerGetPolicyTemplateCoverageTemplates200 };
export { UserControllerGetUserAccountRolesParams as PolicyTemplateControllerGetPolicyTemplateCoverageTemplatesParams };
export { ReferencedCoverageTemplateList as PolicyTemplateControllerGetPolicyTemplateCoverageTemplatesRef200 };
export { EndorsementTemplateList as PolicyTemplateControllerGetPolicyTemplateEndorsementTemplates200 };
export { UserControllerGetUserAccountRolesParams as PolicyTemplateControllerGetPolicyTemplateEndorsementTemplatesParams };
export { ReferencedEndorsementTemplateList as PolicyTemplateControllerGetPolicyTemplateEndorsementTemplatesRef200 };
export { PolicyTemplateList as PolicyTemplateControllerGetPolicyTemplateList200 };
export { UserControllerGetUserAccountRolesParams as PolicyTemplateControllerGetPolicyTemplateListParams };
export { PerilList as PolicyTemplateControllerGetPolicyTemplatePerils200 };
export { UserControllerGetUserAccountRolesParams as PolicyTemplateControllerGetPolicyTemplatePerilsParams };
export { ReferencedPerilList as PolicyTemplateControllerGetPolicyTemplatePerilsRef200 };
export { SubCoverageTemplateList as PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplates200 };
export { UserControllerGetUserAccountRolesParams as PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplatesParams };
export { ReferencedSubCoverageTemplateList as PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplatesRef200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyTermControllerCreatePolicyTermParams };
export { ReferencedAssetList as PolicyTermControllerDeletePolicyTermAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerDeletePolicyTermAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PolicyTermControllerDeletePolicyTermAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerDeletePolicyTermByIdParams };
export { AssetList as PolicyTermControllerGetPolicyTermAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyTermControllerGetPolicyTermAssetsParams };
export { ReferencedAssetList as PolicyTermControllerGetPolicyTermAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerGetPolicyTermAssetsRefParams };
export { BucketDefinitionList as PolicyTermControllerGetPolicyTermBucketDefinitions200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyTermControllerGetPolicyTermBucketDefinitionsParams };
export { ReferencedBucketDefinitionList as PolicyTermControllerGetPolicyTermBucketDefinitionsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerGetPolicyTermBucketDefinitionsRefParams };
export { PolicyTerm as PolicyTermControllerGetPolicyTermById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyTermControllerGetPolicyTermByIdParams };
export { Currency as PolicyTermControllerGetPolicyTermCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyTermControllerGetPolicyTermCurrencyParams };
export { ReferencedCurrency as PolicyTermControllerGetPolicyTermCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerGetPolicyTermCurrencyRefParams };
export { DeductibleList as PolicyTermControllerGetPolicyTermDeductibles200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyTermControllerGetPolicyTermDeductiblesParams };
export { ReferencedDeductibleList as PolicyTermControllerGetPolicyTermDeductiblesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerGetPolicyTermDeductiblesRefParams };
export { PolicyTermList as PolicyTermControllerGetPolicyTermList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as PolicyTermControllerGetPolicyTermListParams };
export { Policy as PolicyTermControllerGetPolicyTermPolicy200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyTermControllerGetPolicyTermPolicyParams };
export { ReferencedPolicy as PolicyTermControllerGetPolicyTermPolicyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerGetPolicyTermPolicyRefParams };
export { Provider as PolicyTermControllerGetPolicyTermProvider200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyTermControllerGetPolicyTermProviderParams };
export { ReferencedProvider as PolicyTermControllerGetPolicyTermProviderRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerGetPolicyTermProviderRefParams };
export { NullablePolicyTemplate as PolicyTermControllerGetPolicyTermTemplate200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyTermControllerGetPolicyTermTemplateParams };
export { NullableReferencedPolicyTemplate as PolicyTermControllerGetPolicyTermTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerGetPolicyTermTemplateRefParams };
export { ReferencedAssetList as PolicyTermControllerPatchPolicyTermAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerPatchPolicyTermAssetsRefParams };
export { ReferencedUpdateAssetList as PolicyTermControllerPatchPolicyTermAssetsRefRequest };
export { ReferencedCurrency as PolicyTermControllerPatchPolicyTermCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerPatchPolicyTermCurrencyRefParams };
export { ReferencedUpdateCurrency as PolicyTermControllerPatchPolicyTermCurrencyRefRequest };
export { ReferencedPolicy as PolicyTermControllerPatchPolicyTermPolicyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerPatchPolicyTermPolicyRefParams };
export { ReferencedUpdatePolicy as PolicyTermControllerPatchPolicyTermPolicyRefRequest };
export { NullableReferencedPolicyTemplate as PolicyTermControllerPatchPolicyTermTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerPatchPolicyTermTemplateRefParams };
export { NullableReferencedUpdatePolicyTemplate as PolicyTermControllerPatchPolicyTermTemplateRefRequest };
export { ReferencedAssetList as PolicyTermControllerPostPolicyTermAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as PolicyTermControllerPostPolicyTermAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as PolicyTermControllerPostPolicyTermAssetsRefRequest };
export { PolicyTerm as PolicyTermControllerUpdatePolicyTermById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as PolicyTermControllerUpdatePolicyTermByIdParams };
export { UpdatePolicyTerm as PolicyTermControllerUpdatePolicyTermByIdRequest };
export { BlueprintAttributes as ProductSpecAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProductSpecControllerCreateProductSpecParams };
export { ReferencedAssetList as ProductSpecControllerDeleteProductSpecAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerDeleteProductSpecAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ProductSpecControllerDeleteProductSpecAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerDeleteProductSpecByIdParams };
export { ReferencedProjectList as ProductSpecControllerDeleteProductSpecProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerDeleteProductSpecProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ProductSpecControllerDeleteProductSpecProjectsRefRequest };
export { ReferencedSpaceList as ProductSpecControllerDeleteProductSpecSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerDeleteProductSpecSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ProductSpecControllerDeleteProductSpecSpacesRefRequest };
export { Account as ProductSpecControllerGetProductSpecAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProductSpecControllerGetProductSpecAccountParams };
export { ReferencedAccount as ProductSpecControllerGetProductSpecAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerGetProductSpecAccountRefParams };
export { AssetList as ProductSpecControllerGetProductSpecAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProductSpecControllerGetProductSpecAssetsParams };
export { ReferencedAssetList as ProductSpecControllerGetProductSpecAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerGetProductSpecAssetsRefParams };
export { ProductSpec as ProductSpecControllerGetProductSpecById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProductSpecControllerGetProductSpecByIdParams };
export { DocumentType as ProductSpecControllerGetProductSpecDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProductSpecControllerGetProductSpecDocumentTypeParams };
export { ReferencedDocumentType as ProductSpecControllerGetProductSpecDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerGetProductSpecDocumentTypeRefParams };
export { NullableFile as ProductSpecControllerGetProductSpecFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProductSpecControllerGetProductSpecFileParams };
export { NullableReferencedFile as ProductSpecControllerGetProductSpecFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerGetProductSpecFileRefParams };
export { ProductSpecList as ProductSpecControllerGetProductSpecList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProductSpecControllerGetProductSpecListParams };
export { ProjectList as ProductSpecControllerGetProductSpecProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProductSpecControllerGetProductSpecProjectsParams };
export { ReferencedProjectList as ProductSpecControllerGetProductSpecProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerGetProductSpecProjectsRefParams };
export { SpaceList as ProductSpecControllerGetProductSpecSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProductSpecControllerGetProductSpecSpacesParams };
export { ReferencedSpaceList as ProductSpecControllerGetProductSpecSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerGetProductSpecSpacesRefParams };
export { ReferencedAccount as ProductSpecControllerPatchProductSpecAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerPatchProductSpecAccountRefParams };
export { ReferencedUpdateAccount as ProductSpecControllerPatchProductSpecAccountRefRequest };
export { ReferencedAssetList as ProductSpecControllerPatchProductSpecAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerPatchProductSpecAssetsRefParams };
export { ReferencedUpdateAssetList as ProductSpecControllerPatchProductSpecAssetsRefRequest };
export { NullableReferencedFile as ProductSpecControllerPatchProductSpecFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerPatchProductSpecFileRefParams };
export { NullableReferencedUpdateFile as ProductSpecControllerPatchProductSpecFileRefRequest };
export { ReferencedProjectList as ProductSpecControllerPatchProductSpecProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerPatchProductSpecProjectsRefParams };
export { ReferencedUpdateProjectList as ProductSpecControllerPatchProductSpecProjectsRefRequest };
export { ReferencedSpaceList as ProductSpecControllerPatchProductSpecSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerPatchProductSpecSpacesRefParams };
export { ReferencedUpdateSpaceList as ProductSpecControllerPatchProductSpecSpacesRefRequest };
export { ReferencedAssetList as ProductSpecControllerPostProductSpecAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerPostProductSpecAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ProductSpecControllerPostProductSpecAssetsRefRequest };
export { ReferencedProjectList as ProductSpecControllerPostProductSpecProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerPostProductSpecProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ProductSpecControllerPostProductSpecProjectsRefRequest };
export { ReferencedSpaceList as ProductSpecControllerPostProductSpecSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProductSpecControllerPostProductSpecSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ProductSpecControllerPostProductSpecSpacesRefRequest };
export { ProductSpec as ProductSpecControllerUpdateProductSpecById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProductSpecControllerUpdateProductSpecByIdParams };
export { UpdateProductSpec as ProductSpecControllerUpdateProductSpecByIdRequest };
export { BlueprintRelationships as ProductSpecRelationships };
export { User as ProfileControllerGetCurrentUser200 };
export { AccountControllerGetCurrentAccountParams as ProfileControllerGetCurrentUserParams };
export { AccountAttributes as ProjectAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectControllerCreateProjectParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectControllerDeleteProjectByIdParams };
export { ReferencedProjectMediaList as ProjectControllerDeleteProjectMediaAttachmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectControllerDeleteProjectMediaAttachmentsRefParams };
export { ProjectControllerPostProjectMediaAttachmentsRefRequest as ProjectControllerDeleteProjectMediaAttachmentsRefRequest };
export { Account as ProjectControllerGetProjectAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectControllerGetProjectAccountParams };
export { ReferencedAccount as ProjectControllerGetProjectAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectControllerGetProjectAccountRefParams };
export { Project as ProjectControllerGetProjectById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectControllerGetProjectByIdParams };
export { ProjectList as ProjectControllerGetProjectList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProjectControllerGetProjectListParams };
export { ProjectMediaList as ProjectControllerGetProjectMediaAttachments200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProjectControllerGetProjectMediaAttachmentsParams };
export { ReferencedProjectMediaList as ProjectControllerGetProjectMediaAttachmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectControllerGetProjectMediaAttachmentsRefParams };
export { ReferencedAccount as ProjectControllerPatchProjectAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectControllerPatchProjectAccountRefParams };
export { ReferencedUpdateAccount as ProjectControllerPatchProjectAccountRefRequest };
export { ReferencedProjectMediaList as ProjectControllerPatchProjectMediaAttachmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectControllerPatchProjectMediaAttachmentsRefParams };
export { ReferencedUpdateProjectMediaList as ProjectControllerPatchProjectMediaAttachmentsRefRequest };
export { ReferencedProjectMediaList as ProjectControllerPostProjectMediaAttachmentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectControllerPostProjectMediaAttachmentsRefParams };
export { Project as ProjectControllerUpdateProjectById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectControllerUpdateProjectByIdParams };
export { UpdateProject as ProjectControllerUpdateProjectByIdRequest };
export { CreateIncidentImpactAttributes as ProjectImpactAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectImpactControllerCreateProjectImpactParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerDeleteProjectImpactByIdParams };
export { ReferencedSpaceList as ProjectImpactControllerDeleteProjectImpactSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerDeleteProjectImpactSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ProjectImpactControllerDeleteProjectImpactSpacesRefRequest };
export { Asset as ProjectImpactControllerGetProjectImpactAsset200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectImpactControllerGetProjectImpactAssetParams };
export { ReferencedAsset as ProjectImpactControllerGetProjectImpactAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerGetProjectImpactAssetRefParams };
export { ProjectImpact as ProjectImpactControllerGetProjectImpactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectImpactControllerGetProjectImpactByIdParams };
export { ProjectImpactList as ProjectImpactControllerGetProjectImpactList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProjectImpactControllerGetProjectImpactListParams };
export { Project as ProjectImpactControllerGetProjectImpactProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectImpactControllerGetProjectImpactProjectParams };
export { ReferencedProject as ProjectImpactControllerGetProjectImpactProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerGetProjectImpactProjectRefParams };
export { SpaceList as ProjectImpactControllerGetProjectImpactSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProjectImpactControllerGetProjectImpactSpacesParams };
export { ReferencedSpaceList as ProjectImpactControllerGetProjectImpactSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerGetProjectImpactSpacesRefParams };
export { ReferencedAsset as ProjectImpactControllerPatchProjectImpactAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerPatchProjectImpactAssetRefParams };
export { ReferencedUpdateAsset as ProjectImpactControllerPatchProjectImpactAssetRefRequest };
export { ReferencedProject as ProjectImpactControllerPatchProjectImpactProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerPatchProjectImpactProjectRefParams };
export { ReferencedUpdateProject as ProjectImpactControllerPatchProjectImpactProjectRefRequest };
export { ReferencedSpaceList as ProjectImpactControllerPatchProjectImpactSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerPatchProjectImpactSpacesRefParams };
export { ReferencedUpdateSpaceList as ProjectImpactControllerPatchProjectImpactSpacesRefRequest };
export { ReferencedSpaceList as ProjectImpactControllerPostProjectImpactSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectImpactControllerPostProjectImpactSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ProjectImpactControllerPostProjectImpactSpacesRefRequest };
export { ProjectImpact as ProjectImpactControllerUpdateProjectImpactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectImpactControllerUpdateProjectImpactByIdParams };
export { UpdateProjectImpact as ProjectImpactControllerUpdateProjectImpactByIdRequest };
export { CreateProjectMediaAttributes as ProjectMediaAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectMediaControllerCreateProjectMediaParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectMediaControllerDeleteProjectMediaByIdParams };
export { ProjectMedia as ProjectMediaControllerGetProjectMediaById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectMediaControllerGetProjectMediaByIdParams };
export { ProjectMediaList as ProjectMediaControllerGetProjectMediaList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ProjectMediaControllerGetProjectMediaListParams };
export { Media as ProjectMediaControllerGetProjectMediaMedia200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectMediaControllerGetProjectMediaMediaParams };
export { ReferencedMedia as ProjectMediaControllerGetProjectMediaMediaRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectMediaControllerGetProjectMediaMediaRefParams };
export { Project as ProjectMediaControllerGetProjectMediaProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectMediaControllerGetProjectMediaProjectParams };
export { ReferencedProject as ProjectMediaControllerGetProjectMediaProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectMediaControllerGetProjectMediaProjectRefParams };
export { ReferencedMedia as ProjectMediaControllerPatchProjectMediaMediaRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectMediaControllerPatchProjectMediaMediaRefParams };
export { ReferencedUpdateMedia as ProjectMediaControllerPatchProjectMediaMediaRefRequest };
export { ReferencedProject as ProjectMediaControllerPatchProjectMediaProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ProjectMediaControllerPatchProjectMediaProjectRefParams };
export { ReferencedUpdateProject as ProjectMediaControllerPatchProjectMediaProjectRefRequest };
export { ProjectMedia as ProjectMediaControllerUpdateProjectMediaById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ProjectMediaControllerUpdateProjectMediaByIdParams };
export { UpdateProjectMedia as ProjectMediaControllerUpdateProjectMediaByIdRequest };
export { CreateProviderAttributes as ProviderAttributes };
export { Provider as ProviderControllerGetProviderById200 };
export { AccountControllerGetCurrentAccountParams as ProviderControllerGetProviderByIdParams };
export { ProviderList as ProviderControllerGetProviderList200 };
export { UserControllerGetUserAccountRolesParams as ProviderControllerGetProviderListParams };
export { BlueprintAttributes as RentRollAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as RentRollControllerCreateRentRollParams };
export { ReferencedAssetList as RentRollControllerDeleteRentRollAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerDeleteRentRollAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as RentRollControllerDeleteRentRollAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerDeleteRentRollByIdParams };
export { ReferencedProjectList as RentRollControllerDeleteRentRollProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerDeleteRentRollProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as RentRollControllerDeleteRentRollProjectsRefRequest };
export { ReferencedSpaceList as RentRollControllerDeleteRentRollSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerDeleteRentRollSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as RentRollControllerDeleteRentRollSpacesRefRequest };
export { Account as RentRollControllerGetRentRollAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as RentRollControllerGetRentRollAccountParams };
export { ReferencedAccount as RentRollControllerGetRentRollAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerGetRentRollAccountRefParams };
export { AssetList as RentRollControllerGetRentRollAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as RentRollControllerGetRentRollAssetsParams };
export { ReferencedAssetList as RentRollControllerGetRentRollAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerGetRentRollAssetsRefParams };
export { RentRoll as RentRollControllerGetRentRollById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as RentRollControllerGetRentRollByIdParams };
export { DocumentType as RentRollControllerGetRentRollDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as RentRollControllerGetRentRollDocumentTypeParams };
export { ReferencedDocumentType as RentRollControllerGetRentRollDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerGetRentRollDocumentTypeRefParams };
export { NullableFile as RentRollControllerGetRentRollFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as RentRollControllerGetRentRollFileParams };
export { NullableReferencedFile as RentRollControllerGetRentRollFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerGetRentRollFileRefParams };
export { RentRollList as RentRollControllerGetRentRollList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as RentRollControllerGetRentRollListParams };
export { ProjectList as RentRollControllerGetRentRollProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as RentRollControllerGetRentRollProjectsParams };
export { ReferencedProjectList as RentRollControllerGetRentRollProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerGetRentRollProjectsRefParams };
export { SpaceList as RentRollControllerGetRentRollSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as RentRollControllerGetRentRollSpacesParams };
export { ReferencedSpaceList as RentRollControllerGetRentRollSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerGetRentRollSpacesRefParams };
export { ReferencedAccount as RentRollControllerPatchRentRollAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerPatchRentRollAccountRefParams };
export { ReferencedUpdateAccount as RentRollControllerPatchRentRollAccountRefRequest };
export { ReferencedAssetList as RentRollControllerPatchRentRollAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerPatchRentRollAssetsRefParams };
export { ReferencedUpdateAssetList as RentRollControllerPatchRentRollAssetsRefRequest };
export { NullableReferencedFile as RentRollControllerPatchRentRollFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerPatchRentRollFileRefParams };
export { NullableReferencedUpdateFile as RentRollControllerPatchRentRollFileRefRequest };
export { ReferencedProjectList as RentRollControllerPatchRentRollProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerPatchRentRollProjectsRefParams };
export { ReferencedUpdateProjectList as RentRollControllerPatchRentRollProjectsRefRequest };
export { ReferencedSpaceList as RentRollControllerPatchRentRollSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerPatchRentRollSpacesRefParams };
export { ReferencedUpdateSpaceList as RentRollControllerPatchRentRollSpacesRefRequest };
export { ReferencedAssetList as RentRollControllerPostRentRollAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerPostRentRollAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as RentRollControllerPostRentRollAssetsRefRequest };
export { ReferencedProjectList as RentRollControllerPostRentRollProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerPostRentRollProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as RentRollControllerPostRentRollProjectsRefRequest };
export { ReferencedSpaceList as RentRollControllerPostRentRollSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as RentRollControllerPostRentRollSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as RentRollControllerPostRentRollSpacesRefRequest };
export { RentRoll as RentRollControllerUpdateRentRollById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as RentRollControllerUpdateRentRollByIdParams };
export { UpdateRentRoll as RentRollControllerUpdateRentRollByIdRequest };
export { BlueprintRelationships as RentRollRelationships };
export { BlueprintAttributes as ScopeOfLossAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ScopeOfLossControllerCreateScopeOfLossParams };
export { ReferencedAssetList as ScopeOfLossControllerDeleteScopeOfLossAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerDeleteScopeOfLossAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ScopeOfLossControllerDeleteScopeOfLossAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerDeleteScopeOfLossByIdParams };
export { ReferencedProjectList as ScopeOfLossControllerDeleteScopeOfLossProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerDeleteScopeOfLossProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ScopeOfLossControllerDeleteScopeOfLossProjectsRefRequest };
export { ReferencedSpaceList as ScopeOfLossControllerDeleteScopeOfLossSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerDeleteScopeOfLossSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ScopeOfLossControllerDeleteScopeOfLossSpacesRefRequest };
export { Account as ScopeOfLossControllerGetScopeOfLossAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ScopeOfLossControllerGetScopeOfLossAccountParams };
export { ReferencedAccount as ScopeOfLossControllerGetScopeOfLossAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerGetScopeOfLossAccountRefParams };
export { AssetList as ScopeOfLossControllerGetScopeOfLossAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ScopeOfLossControllerGetScopeOfLossAssetsParams };
export { ReferencedAssetList as ScopeOfLossControllerGetScopeOfLossAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerGetScopeOfLossAssetsRefParams };
export { ScopeOfLoss as ScopeOfLossControllerGetScopeOfLossById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ScopeOfLossControllerGetScopeOfLossByIdParams };
export { DocumentType as ScopeOfLossControllerGetScopeOfLossDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ScopeOfLossControllerGetScopeOfLossDocumentTypeParams };
export { ReferencedDocumentType as ScopeOfLossControllerGetScopeOfLossDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerGetScopeOfLossDocumentTypeRefParams };
export { NullableFile as ScopeOfLossControllerGetScopeOfLossFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ScopeOfLossControllerGetScopeOfLossFileParams };
export { NullableReferencedFile as ScopeOfLossControllerGetScopeOfLossFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerGetScopeOfLossFileRefParams };
export { ScopeOfLossList as ScopeOfLossControllerGetScopeOfLossList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ScopeOfLossControllerGetScopeOfLossListParams };
export { ProjectList as ScopeOfLossControllerGetScopeOfLossProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ScopeOfLossControllerGetScopeOfLossProjectsParams };
export { ReferencedProjectList as ScopeOfLossControllerGetScopeOfLossProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerGetScopeOfLossProjectsRefParams };
export { SpaceList as ScopeOfLossControllerGetScopeOfLossSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ScopeOfLossControllerGetScopeOfLossSpacesParams };
export { ReferencedSpaceList as ScopeOfLossControllerGetScopeOfLossSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerGetScopeOfLossSpacesRefParams };
export { ReferencedAccount as ScopeOfLossControllerPatchScopeOfLossAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerPatchScopeOfLossAccountRefParams };
export { ReferencedUpdateAccount as ScopeOfLossControllerPatchScopeOfLossAccountRefRequest };
export { ReferencedAssetList as ScopeOfLossControllerPatchScopeOfLossAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerPatchScopeOfLossAssetsRefParams };
export { ReferencedUpdateAssetList as ScopeOfLossControllerPatchScopeOfLossAssetsRefRequest };
export { NullableReferencedFile as ScopeOfLossControllerPatchScopeOfLossFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerPatchScopeOfLossFileRefParams };
export { NullableReferencedUpdateFile as ScopeOfLossControllerPatchScopeOfLossFileRefRequest };
export { ReferencedProjectList as ScopeOfLossControllerPatchScopeOfLossProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerPatchScopeOfLossProjectsRefParams };
export { ReferencedUpdateProjectList as ScopeOfLossControllerPatchScopeOfLossProjectsRefRequest };
export { ReferencedSpaceList as ScopeOfLossControllerPatchScopeOfLossSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerPatchScopeOfLossSpacesRefParams };
export { ReferencedUpdateSpaceList as ScopeOfLossControllerPatchScopeOfLossSpacesRefRequest };
export { ReferencedAssetList as ScopeOfLossControllerPostScopeOfLossAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerPostScopeOfLossAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as ScopeOfLossControllerPostScopeOfLossAssetsRefRequest };
export { ReferencedProjectList as ScopeOfLossControllerPostScopeOfLossProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerPostScopeOfLossProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as ScopeOfLossControllerPostScopeOfLossProjectsRefRequest };
export { ReferencedSpaceList as ScopeOfLossControllerPostScopeOfLossSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ScopeOfLossControllerPostScopeOfLossSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as ScopeOfLossControllerPostScopeOfLossSpacesRefRequest };
export { ScopeOfLoss as ScopeOfLossControllerUpdateScopeOfLossById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ScopeOfLossControllerUpdateScopeOfLossByIdParams };
export { UpdateScopeOfLoss as ScopeOfLossControllerUpdateScopeOfLossByIdRequest };
export { BlueprintRelationships as ScopeOfLossRelationships };
export { AssetTypeAttributes as ServiceCategoryAttributes };
export { AssetTypeList as ServiceCategoryControllerGetServiceCategoryAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as ServiceCategoryControllerGetServiceCategoryAssetTypesParams };
export { ReferencedAssetTypeList as ServiceCategoryControllerGetServiceCategoryAssetTypesRef200 };
export { ServiceCategory as ServiceCategoryControllerGetServiceCategoryById200 };
export { AccountControllerGetCurrentAccountParams as ServiceCategoryControllerGetServiceCategoryByIdParams };
export { ServiceClassList as ServiceCategoryControllerGetServiceCategoryClasses200 };
export { UserControllerGetUserAccountRolesParams as ServiceCategoryControllerGetServiceCategoryClassesParams };
export { ReferencedServiceClassList as ServiceCategoryControllerGetServiceCategoryClassesRef200 };
export { ServiceCategoryList as ServiceCategoryControllerGetServiceCategoryList200 };
export { UserControllerGetUserAccountRolesParams as ServiceCategoryControllerGetServiceCategoryListParams };
export { AssetTypeAttributes as ServiceClassAttributes };
export { AssetTypeList as ServiceClassControllerGetServiceClassAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as ServiceClassControllerGetServiceClassAssetTypesParams };
export { ReferencedAssetTypeList as ServiceClassControllerGetServiceClassAssetTypesRef200 };
export { ServiceClass as ServiceClassControllerGetServiceClassById200 };
export { AccountControllerGetCurrentAccountParams as ServiceClassControllerGetServiceClassByIdParams };
export { ServiceCategoryList as ServiceClassControllerGetServiceClassCategories200 };
export { UserControllerGetUserAccountRolesParams as ServiceClassControllerGetServiceClassCategoriesParams };
export { ReferencedServiceCategoryList as ServiceClassControllerGetServiceClassCategoriesRef200 };
export { ServiceClassList as ServiceClassControllerGetServiceClassList200 };
export { UserControllerGetUserAccountRolesParams as ServiceClassControllerGetServiceClassListParams };
export { ServiceTypeList as ServiceClassControllerGetServiceClassTypes200 };
export { UserControllerGetUserAccountRolesParams as ServiceClassControllerGetServiceClassTypesParams };
export { ReferencedServiceTypeList as ServiceClassControllerGetServiceClassTypesRef200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerCreateServiceParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerDeleteServiceByIdParams };
export { Account as ServiceControllerGetServiceAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerGetServiceAccountParams };
export { ReferencedAccount as ServiceControllerGetServiceAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceAccountRefParams };
export { ItemAppraisalList as ServiceControllerGetServiceAppraisals200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServiceAppraisalsParams };
export { ReferencedItemAppraisalList as ServiceControllerGetServiceAppraisalsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceAppraisalsRefParams };
export { Service as ServiceControllerGetServiceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerGetServiceByIdParams };
export { ChangeOrderList as ServiceControllerGetServiceChangeOrders200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServiceChangeOrdersParams };
export { ReferencedChangeOrderList as ServiceControllerGetServiceChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceChangeOrdersRefParams };
export { Currency as ServiceControllerGetServiceCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerGetServiceCurrencyParams };
export { ReferencedCurrency as ServiceControllerGetServiceCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceCurrencyRefParams };
export { EntryList as ServiceControllerGetServiceEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServiceEntriesParams };
export { ReferencedEntryList as ServiceControllerGetServiceEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceEntriesRefParams };
export { EstimateLineList as ServiceControllerGetServiceEstimatedLineItems200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServiceEstimatedLineItemsParams };
export { ReferencedEstimateLineList as ServiceControllerGetServiceEstimatedLineItemsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceEstimatedLineItemsRefParams };
export { EstimateList as ServiceControllerGetServiceEstimates200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServiceEstimatesParams };
export { ReferencedEstimateList as ServiceControllerGetServiceEstimatesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceEstimatesRefParams };
export { InvoiceLineList as ServiceControllerGetServiceInvoicedLineItems200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServiceInvoicedLineItemsParams };
export { ReferencedInvoiceLineList as ServiceControllerGetServiceInvoicedLineItemsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceInvoicedLineItemsRefParams };
export { InvoiceList as ServiceControllerGetServiceInvoices200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServiceInvoicesParams };
export { ReferencedInvoiceList as ServiceControllerGetServiceInvoicesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceInvoicesRefParams };
export { ServiceList as ServiceControllerGetServiceList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServiceListParams };
export { EntrySourceMetadata as ServiceControllerGetServiceMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerGetServiceMetadataParams };
export { ReferencedEntrySourceMetadata as ServiceControllerGetServiceMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceMetadataRefParams };
export { PaymentLineList as ServiceControllerGetServicePaidLineItems200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServicePaidLineItemsParams };
export { ReferencedPaymentLineList as ServiceControllerGetServicePaidLineItemsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServicePaidLineItemsRefParams };
export { PaymentList as ServiceControllerGetServicePayments200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceControllerGetServicePaymentsParams };
export { ReferencedPaymentList as ServiceControllerGetServicePaymentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServicePaymentsRefParams };
export { NullableProject as ServiceControllerGetServiceProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerGetServiceProjectParams };
export { NullableReferencedProject as ServiceControllerGetServiceProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceProjectRefParams };
export { NullableItemAppraisal as ServiceControllerGetServiceRelevantAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerGetServiceRelevantAppraisalParams };
export { NullableReferencedItemAppraisal as ServiceControllerGetServiceRelevantAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceRelevantAppraisalRefParams };
export { NullableItemAppraisal as ServiceControllerGetServiceSelectedAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerGetServiceSelectedAppraisalParams };
export { NullableReferencedItemAppraisal as ServiceControllerGetServiceSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceSelectedAppraisalRefParams };
export { NullableServiceType as ServiceControllerGetServiceType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerGetServiceTypeParams };
export { NullableReferencedServiceType as ServiceControllerGetServiceTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerGetServiceTypeRefParams };
export { ReferencedAccount as ServiceControllerPatchServiceAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerPatchServiceAccountRefParams };
export { ReferencedUpdateAccount as ServiceControllerPatchServiceAccountRefRequest };
export { ReferencedCurrency as ServiceControllerPatchServiceCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerPatchServiceCurrencyRefParams };
export { ReferencedUpdateCurrency as ServiceControllerPatchServiceCurrencyRefRequest };
export { NullableReferencedProject as ServiceControllerPatchServiceProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerPatchServiceProjectRefParams };
export { NullableReferencedUpdateProject as ServiceControllerPatchServiceProjectRefRequest };
export { NullableReferencedItemAppraisal as ServiceControllerPatchServiceSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerPatchServiceSelectedAppraisalRefParams };
export { NullableReferencedUpdateItemAppraisal as ServiceControllerPatchServiceSelectedAppraisalRefRequest };
export { NullableReferencedServiceType as ServiceControllerPatchServiceTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceControllerPatchServiceTypeRefParams };
export { NullableReferencedUpdateServiceType as ServiceControllerPatchServiceTypeRefRequest };
export { Service as ServiceControllerUpdateServiceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceControllerUpdateServiceByIdParams };
export { UpdateService as ServiceControllerUpdateServiceByIdRequest };
export { ChangeOrderLineAttributes as ServiceTaskChangeOrderAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerCreateServiceTaskParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerDeleteServiceTaskByIdParams };
export { Account as ServiceTaskControllerGetServiceTaskAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerGetServiceTaskAccountParams };
export { ReferencedAccount as ServiceTaskControllerGetServiceTaskAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskAccountRefParams };
export { ItemAppraisalList as ServiceTaskControllerGetServiceTaskAppraisals200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceTaskControllerGetServiceTaskAppraisalsParams };
export { ReferencedItemAppraisalList as ServiceTaskControllerGetServiceTaskAppraisalsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskAppraisalsRefParams };
export { ServiceTask as ServiceTaskControllerGetServiceTaskById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerGetServiceTaskByIdParams };
export { ChangeOrderList as ServiceTaskControllerGetServiceTaskChangeOrders200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceTaskControllerGetServiceTaskChangeOrdersParams };
export { ReferencedChangeOrderList as ServiceTaskControllerGetServiceTaskChangeOrdersRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskChangeOrdersRefParams };
export { Currency as ServiceTaskControllerGetServiceTaskCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerGetServiceTaskCurrencyParams };
export { ReferencedCurrency as ServiceTaskControllerGetServiceTaskCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskCurrencyRefParams };
export { EntryList as ServiceTaskControllerGetServiceTaskEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceTaskControllerGetServiceTaskEntriesParams };
export { ReferencedEntryList as ServiceTaskControllerGetServiceTaskEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskEntriesRefParams };
export { EstimateList as ServiceTaskControllerGetServiceTaskEstimates200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceTaskControllerGetServiceTaskEstimatesParams };
export { ReferencedEstimateList as ServiceTaskControllerGetServiceTaskEstimatesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskEstimatesRefParams };
export { InvoiceList as ServiceTaskControllerGetServiceTaskInvoices200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceTaskControllerGetServiceTaskInvoicesParams };
export { ReferencedInvoiceList as ServiceTaskControllerGetServiceTaskInvoicesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskInvoicesRefParams };
export { ServiceTaskList as ServiceTaskControllerGetServiceTaskList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceTaskControllerGetServiceTaskListParams };
export { EntrySourceMetadata as ServiceTaskControllerGetServiceTaskMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerGetServiceTaskMetadataParams };
export { ReferencedEntrySourceMetadata as ServiceTaskControllerGetServiceTaskMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskMetadataRefParams };
export { PaymentList as ServiceTaskControllerGetServiceTaskPayments200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ServiceTaskControllerGetServiceTaskPaymentsParams };
export { ReferencedPaymentList as ServiceTaskControllerGetServiceTaskPaymentsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskPaymentsRefParams };
export { NullableProject as ServiceTaskControllerGetServiceTaskProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerGetServiceTaskProjectParams };
export { NullableReferencedProject as ServiceTaskControllerGetServiceTaskProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskProjectRefParams };
export { NullableItemAppraisal as ServiceTaskControllerGetServiceTaskRelevantAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerGetServiceTaskRelevantAppraisalParams };
export { NullableReferencedItemAppraisal as ServiceTaskControllerGetServiceTaskRelevantAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskRelevantAppraisalRefParams };
export { NullableItemAppraisal as ServiceTaskControllerGetServiceTaskSelectedAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerGetServiceTaskSelectedAppraisalParams };
export { NullableReferencedItemAppraisal as ServiceTaskControllerGetServiceTaskSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskSelectedAppraisalRefParams };
export { Service as ServiceTaskControllerGetServiceTaskService200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerGetServiceTaskServiceParams };
export { ReferencedService as ServiceTaskControllerGetServiceTaskServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerGetServiceTaskServiceRefParams };
export { ReferencedAccount as ServiceTaskControllerPatchServiceTaskAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerPatchServiceTaskAccountRefParams };
export { ReferencedUpdateAccount as ServiceTaskControllerPatchServiceTaskAccountRefRequest };
export { ReferencedCurrency as ServiceTaskControllerPatchServiceTaskCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerPatchServiceTaskCurrencyRefParams };
export { ReferencedUpdateCurrency as ServiceTaskControllerPatchServiceTaskCurrencyRefRequest };
export { NullableReferencedProject as ServiceTaskControllerPatchServiceTaskProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerPatchServiceTaskProjectRefParams };
export { NullableReferencedUpdateProject as ServiceTaskControllerPatchServiceTaskProjectRefRequest };
export { NullableReferencedItemAppraisal as ServiceTaskControllerPatchServiceTaskSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerPatchServiceTaskSelectedAppraisalRefParams };
export { NullableReferencedUpdateItemAppraisal as ServiceTaskControllerPatchServiceTaskSelectedAppraisalRefRequest };
export { ReferencedService as ServiceTaskControllerPatchServiceTaskServiceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ServiceTaskControllerPatchServiceTaskServiceRefParams };
export { ReferencedUpdateService as ServiceTaskControllerPatchServiceTaskServiceRefRequest };
export { ServiceTask as ServiceTaskControllerUpdateServiceTaskById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ServiceTaskControllerUpdateServiceTaskByIdParams };
export { UpdateServiceTask as ServiceTaskControllerUpdateServiceTaskByIdRequest };
export { EstimateLineAttributes as ServiceTaskEstimateAttributes };
export { InvoiceLineAttributes as ServiceTaskInvoiceAttributes };
export { InvoiceLineAttributes as ServiceTaskPaymentAttributes };
export { AssetTypeAttributes as ServiceTypeAttributes };
export { AssetTypeList as ServiceTypeControllerGetServiceTypeAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as ServiceTypeControllerGetServiceTypeAssetTypesParams };
export { ReferencedAssetTypeList as ServiceTypeControllerGetServiceTypeAssetTypesRef200 };
export { ServiceType as ServiceTypeControllerGetServiceTypeById200 };
export { AccountControllerGetCurrentAccountParams as ServiceTypeControllerGetServiceTypeByIdParams };
export { ServiceTypeList as ServiceTypeControllerGetServiceTypeList200 };
export { UserControllerGetUserAccountRolesParams as ServiceTypeControllerGetServiceTypeListParams };
export { PerilRelationships as ServiceTypeRelationships };
export { CreateSpaceAttributes as SpaceAttributes };
export { CreateSpaceCategoryAttributes as SpaceCategoryAttributes };
export { AssetTypeList as SpaceCategoryControllerGetSpaceCategoryAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceCategoryControllerGetSpaceCategoryAssetTypesParams };
export { ReferencedAssetTypeList as SpaceCategoryControllerGetSpaceCategoryAssetTypesRef200 };
export { SpaceCategory as SpaceCategoryControllerGetSpaceCategoryById200 };
export { AccountControllerGetCurrentAccountParams as SpaceCategoryControllerGetSpaceCategoryByIdParams };
export { SpaceClassList as SpaceCategoryControllerGetSpaceCategoryClasses200 };
export { UserControllerGetUserAccountRolesParams as SpaceCategoryControllerGetSpaceCategoryClassesParams };
export { ReferencedSpaceClassList as SpaceCategoryControllerGetSpaceCategoryClassesRef200 };
export { SpaceGroupTypeList as SpaceCategoryControllerGetSpaceCategoryGroupTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceCategoryControllerGetSpaceCategoryGroupTypesParams };
export { ReferencedSpaceGroupTypeList as SpaceCategoryControllerGetSpaceCategoryGroupTypesRef200 };
export { SpaceCategoryList as SpaceCategoryControllerGetSpaceCategoryList200 };
export { UserControllerGetUserAccountRolesParams as SpaceCategoryControllerGetSpaceCategoryListParams };
export { CreateSpaceCategoryAttributes as SpaceClassAttributes };
export { AssetTypeList as SpaceClassControllerGetSpaceClassAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceClassControllerGetSpaceClassAssetTypesParams };
export { ReferencedAssetTypeList as SpaceClassControllerGetSpaceClassAssetTypesRef200 };
export { SpaceClass as SpaceClassControllerGetSpaceClassById200 };
export { AccountControllerGetCurrentAccountParams as SpaceClassControllerGetSpaceClassByIdParams };
export { SpaceCategoryList as SpaceClassControllerGetSpaceClassCategories200 };
export { UserControllerGetUserAccountRolesParams as SpaceClassControllerGetSpaceClassCategoriesParams };
export { ReferencedSpaceCategoryList as SpaceClassControllerGetSpaceClassCategoriesRef200 };
export { SpaceGroupTypeList as SpaceClassControllerGetSpaceClassGroupTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceClassControllerGetSpaceClassGroupTypesParams };
export { ReferencedSpaceGroupTypeList as SpaceClassControllerGetSpaceClassGroupTypesRef200 };
export { SpaceClassList as SpaceClassControllerGetSpaceClassList200 };
export { UserControllerGetUserAccountRolesParams as SpaceClassControllerGetSpaceClassListParams };
export { SpaceTypeList as SpaceClassControllerGetSpaceClassTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceClassControllerGetSpaceClassTypesParams };
export { ReferencedSpaceTypeList as SpaceClassControllerGetSpaceClassTypesRef200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceControllerCreateSpaceParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceControllerDeleteSpaceByIdParams };
export { Asset as SpaceControllerGetSpaceAsset200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceControllerGetSpaceAssetParams };
export { ReferencedAsset as SpaceControllerGetSpaceAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceControllerGetSpaceAssetRefParams };
export { Space as SpaceControllerGetSpaceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceControllerGetSpaceByIdParams };
export { SpaceGroup as SpaceControllerGetSpaceGroup200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceControllerGetSpaceGroupParams };
export { ReferencedSpaceGroup as SpaceControllerGetSpaceGroupRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceControllerGetSpaceGroupRefParams };
export { SpaceList as SpaceControllerGetSpaceList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as SpaceControllerGetSpaceListParams };
export { SpaceType as SpaceControllerGetSpaceType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceControllerGetSpaceTypeParams };
export { ReferencedSpaceType as SpaceControllerGetSpaceTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceControllerGetSpaceTypeRefParams };
export { ReferencedAsset as SpaceControllerPatchSpaceAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceControllerPatchSpaceAssetRefParams };
export { ReferencedUpdateAsset as SpaceControllerPatchSpaceAssetRefRequest };
export { ReferencedSpaceGroup as SpaceControllerPatchSpaceGroupRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceControllerPatchSpaceGroupRefParams };
export { ReferencedUpdateSpaceGroup as SpaceControllerPatchSpaceGroupRefRequest };
export { ReferencedSpaceType as SpaceControllerPatchSpaceTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceControllerPatchSpaceTypeRefParams };
export { ReferencedUpdateSpaceType as SpaceControllerPatchSpaceTypeRefRequest };
export { Space as SpaceControllerUpdateSpaceById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceControllerUpdateSpaceByIdParams };
export { UpdateSpace as SpaceControllerUpdateSpaceByIdRequest };
export { AccountAttributes as SpaceGroupAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceGroupControllerCreateSpaceGroupParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerDeleteSpaceGroupByIdParams };
export { ReferencedSpaceList as SpaceGroupControllerDeleteSpaceGroupSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerDeleteSpaceGroupSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as SpaceGroupControllerDeleteSpaceGroupSpacesRefRequest };
export { Asset as SpaceGroupControllerGetSpaceGroupAsset200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceGroupControllerGetSpaceGroupAssetParams };
export { ReferencedAsset as SpaceGroupControllerGetSpaceGroupAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerGetSpaceGroupAssetRefParams };
export { SpaceGroup as SpaceGroupControllerGetSpaceGroupById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceGroupControllerGetSpaceGroupByIdParams };
export { SpaceGroupList as SpaceGroupControllerGetSpaceGroupList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as SpaceGroupControllerGetSpaceGroupListParams };
export { SpaceList as SpaceGroupControllerGetSpaceGroupSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as SpaceGroupControllerGetSpaceGroupSpacesParams };
export { ReferencedSpaceList as SpaceGroupControllerGetSpaceGroupSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerGetSpaceGroupSpacesRefParams };
export { SpaceType as SpaceGroupControllerGetSpaceGroupType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceGroupControllerGetSpaceGroupTypeParams };
export { ReferencedSpaceType as SpaceGroupControllerGetSpaceGroupTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerGetSpaceGroupTypeRefParams };
export { ReferencedAsset as SpaceGroupControllerPatchSpaceGroupAssetRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerPatchSpaceGroupAssetRefParams };
export { ReferencedUpdateAsset as SpaceGroupControllerPatchSpaceGroupAssetRefRequest };
export { ReferencedSpaceList as SpaceGroupControllerPatchSpaceGroupSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerPatchSpaceGroupSpacesRefParams };
export { ReferencedUpdateSpaceList as SpaceGroupControllerPatchSpaceGroupSpacesRefRequest };
export { ReferencedSpaceType as SpaceGroupControllerPatchSpaceGroupTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerPatchSpaceGroupTypeRefParams };
export { ReferencedUpdateSpaceType as SpaceGroupControllerPatchSpaceGroupTypeRefRequest };
export { ReferencedSpaceList as SpaceGroupControllerPostSpaceGroupSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SpaceGroupControllerPostSpaceGroupSpacesRefParams };
export { SpaceGroup as SpaceGroupControllerUpdateSpaceGroupById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SpaceGroupControllerUpdateSpaceGroupByIdParams };
export { UpdateSpaceGroup as SpaceGroupControllerUpdateSpaceGroupByIdRequest };
export { AssetTypeAttributes as SpaceGroupTypeAttributes };
export { AssetTypeList as SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypesParams };
export { ReferencedAssetTypeList as SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypesRef200 };
export { BucketTypeList as SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypesParams };
export { ReferencedBucketTypeList as SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypesRef200 };
export { SpaceGroupType as SpaceGroupTypeControllerGetSpaceGroupTypeById200 };
export { AccountControllerGetCurrentAccountParams as SpaceGroupTypeControllerGetSpaceGroupTypeByIdParams };
export { SpaceGroupTypeList as SpaceGroupTypeControllerGetSpaceGroupTypeList200 };
export { UserControllerGetUserAccountRolesParams as SpaceGroupTypeControllerGetSpaceGroupTypeListParams };
export { CreateSpaceCategoryAttributes as SpaceTypeAttributes };
export { AssetTypeList as SpaceTypeControllerGetSpaceTypeAssetTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceTypeControllerGetSpaceTypeAssetTypesParams };
export { ReferencedAssetTypeList as SpaceTypeControllerGetSpaceTypeAssetTypesRef200 };
export { SpaceType as SpaceTypeControllerGetSpaceTypeById200 };
export { AccountControllerGetCurrentAccountParams as SpaceTypeControllerGetSpaceTypeByIdParams };
export { SpaceClassList as SpaceTypeControllerGetSpaceTypeClasses200 };
export { UserControllerGetUserAccountRolesParams as SpaceTypeControllerGetSpaceTypeClassesParams };
export { ReferencedSpaceClassList as SpaceTypeControllerGetSpaceTypeClassesRef200 };
export { SpaceGroupTypeList as SpaceTypeControllerGetSpaceTypeGroupTypes200 };
export { UserControllerGetUserAccountRolesParams as SpaceTypeControllerGetSpaceTypeGroupTypesParams };
export { ReferencedSpaceGroupTypeList as SpaceTypeControllerGetSpaceTypeGroupTypesRef200 };
export { SpaceTypeList as SpaceTypeControllerGetSpaceTypeList200 };
export { UserControllerGetUserAccountRolesParams as SpaceTypeControllerGetSpaceTypeListParams };
export { AssetAttributeTypeItemTemplateAttributes as SpaceTypeItemTemplateAttributes };
export { SpaceTypeItemTemplate as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateById200 };
export { AccountControllerGetCurrentAccountParams as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateByIdParams };
export { ItemTemplate as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplate200 };
export { AccountControllerGetCurrentAccountParams as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplateParams };
export { ReferencedItemTemplate as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplateRef200 };
export { SpaceTypeItemTemplateList as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateList200 };
export { UserControllerGetUserAccountRolesParams as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateListParams };
export { SpaceType as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceType200 };
export { AccountControllerGetCurrentAccountParams as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceTypeParams };
export { ReferencedSpaceType as SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceTypeRef200 };
export { SpaceCategoryRelationships as SpaceTypeRelationships };
export { CreateSubBucketAttributes as SubBucketAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerCreateSubBucketParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerDeleteSubBucketByIdParams };
export { Account as SubBucketControllerGetSubBucketAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerGetSubBucketAccountParams };
export { ReferencedAccount as SubBucketControllerGetSubBucketAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerGetSubBucketAccountRefParams };
export { SubBucket as SubBucketControllerGetSubBucketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerGetSubBucketByIdParams };
export { SubBucketDefinition as SubBucketControllerGetSubBucketDefinition200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerGetSubBucketDefinitionParams };
export { ReferencedSubBucketDefinition as SubBucketControllerGetSubBucketDefinitionRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerGetSubBucketDefinitionRefParams };
export { EntryList as SubBucketControllerGetSubBucketEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as SubBucketControllerGetSubBucketEntriesParams };
export { ReferencedEntryList as SubBucketControllerGetSubBucketEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerGetSubBucketEntriesRefParams };
export { FundingSource as SubBucketControllerGetSubBucketFundingSource200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerGetSubBucketFundingSourceParams };
export { ReferencedFundingSource as SubBucketControllerGetSubBucketFundingSourceRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerGetSubBucketFundingSourceRefParams };
export { SubBucketList as SubBucketControllerGetSubBucketList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as SubBucketControllerGetSubBucketListParams };
export { BaseSubBucketMetadata as SubBucketControllerGetSubBucketMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerGetSubBucketMetadataParams };
export { ReferencedBaseSubBucketMetadata as SubBucketControllerGetSubBucketMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerGetSubBucketMetadataRefParams };
export { BaseBucket as SubBucketControllerGetSubBucketParent200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerGetSubBucketParentParams };
export { ReferencedBaseBucket as SubBucketControllerGetSubBucketParentRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerGetSubBucketParentRefParams };
export { Project as SubBucketControllerGetSubBucketProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerGetSubBucketProjectParams };
export { ReferencedProject as SubBucketControllerGetSubBucketProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerGetSubBucketProjectRefParams };
export { ReferencedSubBucketDefinition as SubBucketControllerPatchSubBucketDefinitionRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerPatchSubBucketDefinitionRefParams };
export { ReferencedUpdateSubBucketDefinition as SubBucketControllerPatchSubBucketDefinitionRefRequest };
export { ReferencedBaseBucket as SubBucketControllerPatchSubBucketParentRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubBucketControllerPatchSubBucketParentRefParams };
export { ReferencedUpdateBaseBucket as SubBucketControllerPatchSubBucketParentRefRequest };
export { SubBucket as SubBucketControllerUpdateSubBucketById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubBucketControllerUpdateSubBucketByIdParams };
export { UpdateSubBucket as SubBucketControllerUpdateSubBucketByIdRequest };
export { AccountControllerGetCurrentAccountParams as SubBucketDefinitionControllerCreateSubBucketDefinitionParams };
export { SubBucketList as SubBucketDefinitionControllerGetSubBucketDefinitionBuckets200 };
export { UserControllerGetUserAccountRolesParams as SubBucketDefinitionControllerGetSubBucketDefinitionBucketsParams };
export { ReferencedSubBucketList as SubBucketDefinitionControllerGetSubBucketDefinitionBucketsRef200 };
export { SubBucketDefinition as SubBucketDefinitionControllerGetSubBucketDefinitionById200 };
export { AccountControllerGetCurrentAccountParams as SubBucketDefinitionControllerGetSubBucketDefinitionByIdParams };
export { SubBucketDefinitionList as SubBucketDefinitionControllerGetSubBucketDefinitionList200 };
export { UserControllerGetUserAccountRolesParams as SubBucketDefinitionControllerGetSubBucketDefinitionListParams };
export { BucketDefinition as SubBucketDefinitionControllerGetSubBucketDefinitionParent200 };
export { AccountControllerGetCurrentAccountParams as SubBucketDefinitionControllerGetSubBucketDefinitionParentParams };
export { ReferencedBucketDefinition as SubBucketDefinitionControllerGetSubBucketDefinitionParentRef200 };
export { ReferencedBucketDefinition as SubBucketDefinitionControllerPatchSubBucketDefinitionParentRef200 };
export { ReferencedUpdateBucketDefinition as SubBucketDefinitionControllerPatchSubBucketDefinitionParentRefRequest };
export { SubBucketDefinition as SubBucketDefinitionControllerUpdateSubBucketDefinitionById200 };
export { AccountControllerGetCurrentAccountParams as SubBucketDefinitionControllerUpdateSubBucketDefinitionByIdParams };
export { UpdateSubBucketDefinition as SubBucketDefinitionControllerUpdateSubBucketDefinitionByIdRequest };
export { SubBucketDefinitionAttributes as SubCoverageAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubCoverageControllerCreateSubCoverageParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerDeleteSubCoverageByIdParams };
export { ReferencedEndorsementList as SubCoverageControllerDeleteSubCoverageEndorsementsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerDeleteSubCoverageEndorsementsRefParams };
export { SubCoverageControllerPostSubCoverageEndorsementsRefRequest as SubCoverageControllerDeleteSubCoverageEndorsementsRefRequest };
export { SubBucketList as SubCoverageControllerGetSubCoverageBuckets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as SubCoverageControllerGetSubCoverageBucketsParams };
export { ReferencedSubBucketList as SubCoverageControllerGetSubCoverageBucketsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerGetSubCoverageBucketsRefParams };
export { SubCoverage as SubCoverageControllerGetSubCoverageById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubCoverageControllerGetSubCoverageByIdParams };
export { EndorsementList as SubCoverageControllerGetSubCoverageEndorsements200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as SubCoverageControllerGetSubCoverageEndorsementsParams };
export { ReferencedEndorsementList as SubCoverageControllerGetSubCoverageEndorsementsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerGetSubCoverageEndorsementsRefParams };
export { SubCoverageList as SubCoverageControllerGetSubCoverageList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as SubCoverageControllerGetSubCoverageListParams };
export { Coverage as SubCoverageControllerGetSubCoverageParent200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubCoverageControllerGetSubCoverageParentParams };
export { ReferencedCoverage as SubCoverageControllerGetSubCoverageParentRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerGetSubCoverageParentRefParams };
export { NullableSubCoverageTemplate as SubCoverageControllerGetSubCoverageTemplate200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubCoverageControllerGetSubCoverageTemplateParams };
export { NullableReferencedSubCoverageTemplate as SubCoverageControllerGetSubCoverageTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerGetSubCoverageTemplateRefParams };
export { ReferencedEndorsementList as SubCoverageControllerPatchSubCoverageEndorsementsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerPatchSubCoverageEndorsementsRefParams };
export { ReferencedUpdateEndorsementList as SubCoverageControllerPatchSubCoverageEndorsementsRefRequest };
export { ReferencedCoverage as SubCoverageControllerPatchSubCoverageParentRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerPatchSubCoverageParentRefParams };
export { ReferencedUpdateCoverage as SubCoverageControllerPatchSubCoverageParentRefRequest };
export { NullableReferencedSubCoverageTemplate as SubCoverageControllerPatchSubCoverageTemplateRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerPatchSubCoverageTemplateRefParams };
export { NullableReferencedUpdateSubCoverageTemplate as SubCoverageControllerPatchSubCoverageTemplateRefRequest };
export { ReferencedEndorsementList as SubCoverageControllerPostSubCoverageEndorsementsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as SubCoverageControllerPostSubCoverageEndorsementsRefParams };
export { SubCoverage as SubCoverageControllerUpdateSubCoverageById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as SubCoverageControllerUpdateSubCoverageByIdParams };
export { UpdateSubCoverage as SubCoverageControllerUpdateSubCoverageByIdRequest };
export { AssetTypeAttributes as SubCoverageTemplateAttributes };
export { SubCoverageTemplate as SubCoverageTemplateControllerGetSubCoverageTemplateById200 };
export { AccountControllerGetCurrentAccountParams as SubCoverageTemplateControllerGetSubCoverageTemplateByIdParams };
export { CoverageTemplate as SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplate200 };
export { AccountControllerGetCurrentAccountParams as SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplateParams };
export { ReferencedCoverageTemplate as SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplateRef200 };
export { EndorsementTemplateList as SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplates200 };
export { UserControllerGetUserAccountRolesParams as SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplatesParams };
export { ReferencedEndorsementTemplateList as SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplatesRef200 };
export { SubCoverageTemplateList as SubCoverageTemplateControllerGetSubCoverageTemplateList200 };
export { UserControllerGetUserAccountRolesParams as SubCoverageTemplateControllerGetSubCoverageTemplateListParams };
export { AssetTypeAttributes as SubmissionTrackTemplateAttributes };
export { BucketTypeList as SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypes200 };
export { UserControllerGetUserAccountRolesParams as SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypesParams };
export { ReferencedBucketTypeList as SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypesRef200 };
export { SubmissionTrackTemplate as SubmissionTrackTemplateControllerGetSubmissionTrackTemplateById200 };
export { AccountControllerGetCurrentAccountParams as SubmissionTrackTemplateControllerGetSubmissionTrackTemplateByIdParams };
export { SubmissionTrackTemplateList as SubmissionTrackTemplateControllerGetSubmissionTrackTemplateList200 };
export { UserControllerGetUserAccountRolesParams as SubmissionTrackTemplateControllerGetSubmissionTrackTemplateListParams };
export { PolicyTemplate as SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplate200 };
export { AccountControllerGetCurrentAccountParams as SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplateParams };
export { ReferencedPolicyTemplate as SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplateRef200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyControllerCreateThirdPartyParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyControllerDeleteThirdPartyByIdParams };
export { ThirdParty as ThirdPartyControllerGetThirdPartyById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyControllerGetThirdPartyByIdParams };
export { ThirdPartyList as ThirdPartyControllerGetThirdPartyList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ThirdPartyControllerGetThirdPartyListParams };
export { Project as ThirdPartyControllerGetThirdPartyProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyControllerGetThirdPartyProjectParams };
export { ReferencedProject as ThirdPartyControllerGetThirdPartyProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyControllerGetThirdPartyProjectRefParams };
export { ReferencedProject as ThirdPartyControllerPatchThirdPartyProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyControllerPatchThirdPartyProjectRefParams };
export { ReferencedUpdateProject as ThirdPartyControllerPatchThirdPartyProjectRefRequest };
export { ThirdParty as ThirdPartyControllerUpdateThirdPartyById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyControllerUpdateThirdPartyByIdParams };
export { UpdateThirdParty as ThirdPartyControllerUpdateThirdPartyByIdRequest };
export { AddressAttributes as ThirdPartyDwellingAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyDwellingControllerCreateThirdPartyDwellingParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyDwellingControllerDeleteThirdPartyDwellingByIdParams };
export { ThirdPartyDwelling as ThirdPartyDwellingControllerGetThirdPartyDwellingById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyDwellingControllerGetThirdPartyDwellingByIdParams };
export { Country as ThirdPartyDwellingControllerGetThirdPartyDwellingCountry200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyDwellingControllerGetThirdPartyDwellingCountryParams };
export { ReferencedCountry as ThirdPartyDwellingControllerGetThirdPartyDwellingCountryRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyDwellingControllerGetThirdPartyDwellingCountryRefParams };
export { ThirdPartyDwellingList as ThirdPartyDwellingControllerGetThirdPartyDwellingList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ThirdPartyDwellingControllerGetThirdPartyDwellingListParams };
export { Project as ThirdPartyDwellingControllerGetThirdPartyDwellingProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyDwellingControllerGetThirdPartyDwellingProjectParams };
export { ReferencedProject as ThirdPartyDwellingControllerGetThirdPartyDwellingProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyDwellingControllerGetThirdPartyDwellingProjectRefParams };
export { ReferencedCountry as ThirdPartyDwellingControllerPatchThirdPartyDwellingCountryRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyDwellingControllerPatchThirdPartyDwellingCountryRefParams };
export { ReferencedUpdateCountry as ThirdPartyDwellingControllerPatchThirdPartyDwellingCountryRefRequest };
export { ReferencedProject as ThirdPartyDwellingControllerPatchThirdPartyDwellingProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyDwellingControllerPatchThirdPartyDwellingProjectRefParams };
export { ReferencedUpdateProject as ThirdPartyDwellingControllerPatchThirdPartyDwellingProjectRefRequest };
export { ThirdPartyDwelling as ThirdPartyDwellingControllerUpdateThirdPartyDwellingById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyDwellingControllerUpdateThirdPartyDwellingByIdParams };
export { UpdateThirdPartyDwelling as ThirdPartyDwellingControllerUpdateThirdPartyDwellingByIdRequest };
export { EntrySourceAttributes as ThirdPartyImpactAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerCreateThirdPartyImpactParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerDeleteThirdPartyImpactByIdParams };
export { Account as ThirdPartyImpactControllerGetThirdPartyImpactAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerGetThirdPartyImpactAccountParams };
export { ReferencedAccount as ThirdPartyImpactControllerGetThirdPartyImpactAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactAccountRefParams };
export { ItemAppraisalList as ThirdPartyImpactControllerGetThirdPartyImpactAppraisals200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsParams };
export { ReferencedItemAppraisalList as ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsRefParams };
export { ThirdPartyImpact as ThirdPartyImpactControllerGetThirdPartyImpactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerGetThirdPartyImpactByIdParams };
export { Currency as ThirdPartyImpactControllerGetThirdPartyImpactCurrency200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerGetThirdPartyImpactCurrencyParams };
export { ReferencedCurrency as ThirdPartyImpactControllerGetThirdPartyImpactCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactCurrencyRefParams };
export { EntryList as ThirdPartyImpactControllerGetThirdPartyImpactEntries200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ThirdPartyImpactControllerGetThirdPartyImpactEntriesParams };
export { ReferencedEntryList as ThirdPartyImpactControllerGetThirdPartyImpactEntriesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactEntriesRefParams };
export { ThirdPartyImpactList as ThirdPartyImpactControllerGetThirdPartyImpactList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ThirdPartyImpactControllerGetThirdPartyImpactListParams };
export { EntrySourceMetadata as ThirdPartyImpactControllerGetThirdPartyImpactMetadata200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerGetThirdPartyImpactMetadataParams };
export { ReferencedEntrySourceMetadata as ThirdPartyImpactControllerGetThirdPartyImpactMetadataRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactMetadataRefParams };
export { NullableProject as ThirdPartyImpactControllerGetThirdPartyImpactProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerGetThirdPartyImpactProjectParams };
export { NullableReferencedProject as ThirdPartyImpactControllerGetThirdPartyImpactProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactProjectRefParams };
export { NullableItemAppraisal as ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalParams };
export { NullableReferencedItemAppraisal as ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalRefParams };
export { NullableItemAppraisal as ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisal200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalParams };
export { NullableReferencedItemAppraisal as ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalRefParams };
export { ThirdParty as ThirdPartyImpactControllerGetThirdPartyImpactThirdParty200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyParams };
export { ReferencedThirdParty as ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyRefParams };
export { ReferencedAccount as ThirdPartyImpactControllerPatchThirdPartyImpactAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerPatchThirdPartyImpactAccountRefParams };
export { ReferencedUpdateAccount as ThirdPartyImpactControllerPatchThirdPartyImpactAccountRefRequest };
export { ReferencedCurrency as ThirdPartyImpactControllerPatchThirdPartyImpactCurrencyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerPatchThirdPartyImpactCurrencyRefParams };
export { ReferencedUpdateCurrency as ThirdPartyImpactControllerPatchThirdPartyImpactCurrencyRefRequest };
export { NullableReferencedProject as ThirdPartyImpactControllerPatchThirdPartyImpactProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerPatchThirdPartyImpactProjectRefParams };
export { NullableReferencedUpdateProject as ThirdPartyImpactControllerPatchThirdPartyImpactProjectRefRequest };
export { NullableReferencedItemAppraisal as ThirdPartyImpactControllerPatchThirdPartyImpactSelectedAppraisalRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerPatchThirdPartyImpactSelectedAppraisalRefParams };
export { NullableReferencedUpdateItemAppraisal as ThirdPartyImpactControllerPatchThirdPartyImpactSelectedAppraisalRefRequest };
export { ReferencedThirdParty as ThirdPartyImpactControllerPatchThirdPartyImpactThirdPartyRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyImpactControllerPatchThirdPartyImpactThirdPartyRefParams };
export { ReferencedUpdateThirdParty as ThirdPartyImpactControllerPatchThirdPartyImpactThirdPartyRefRequest };
export { ThirdPartyImpact as ThirdPartyImpactControllerUpdateThirdPartyImpactById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyImpactControllerUpdateThirdPartyImpactByIdParams };
export { UpdateThirdPartyImpact as ThirdPartyImpactControllerUpdateThirdPartyImpactByIdRequest };
export { AccountAttributes as ThirdPartyIndividualAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyIndividualControllerCreateThirdPartyIndividualParams };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyIndividualControllerDeleteThirdPartyIndividualByIdParams };
export { ThirdPartyIndividual as ThirdPartyIndividualControllerGetThirdPartyIndividualById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyIndividualControllerGetThirdPartyIndividualByIdParams };
export { ThirdPartyIndividualList as ThirdPartyIndividualControllerGetThirdPartyIndividualList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as ThirdPartyIndividualControllerGetThirdPartyIndividualListParams };
export { Project as ThirdPartyIndividualControllerGetThirdPartyIndividualProject200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyIndividualControllerGetThirdPartyIndividualProjectParams };
export { ReferencedProject as ThirdPartyIndividualControllerGetThirdPartyIndividualProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyIndividualControllerGetThirdPartyIndividualProjectRefParams };
export { ReferencedProject as ThirdPartyIndividualControllerPatchThirdPartyIndividualProjectRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as ThirdPartyIndividualControllerPatchThirdPartyIndividualProjectRefParams };
export { ReferencedUpdateProject as ThirdPartyIndividualControllerPatchThirdPartyIndividualProjectRefRequest };
export { ThirdPartyIndividual as ThirdPartyIndividualControllerUpdateThirdPartyIndividualById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as ThirdPartyIndividualControllerUpdateThirdPartyIndividualByIdParams };
export { UpdateThirdPartyIndividual as ThirdPartyIndividualControllerUpdateThirdPartyIndividualByIdRequest };
export { ThirdPartyIndividualRelationships as ThirdPartyRelationships };
export { AccountAttributes as UpdateAccountAttributes };
export { AccountInviteAttributes as UpdateAccountInviteAttributes };
export { AccountProviderAttributes as UpdateAccountProviderAttributes };
export { AccountProviderContactAttributes as UpdateAccountProviderContactAttributes };
export { AddressAttributes as UpdateAddressAttributes };
export { AppraisalAttributes as UpdateAppraisalAttributes };
export { AppraisalLineAttributes as UpdateAppraisalLineAttributes };
export { AssetAppraisalAttributes as UpdateAssetAppraisalAttributes };
export { AssetAttributeClassAttributes as UpdateAssetAttributeClassAttributes };
export { CreateAssetAttributeClassRelationships as UpdateAssetAttributeClassRelationships };
export { AssetAttributes as UpdateAssetAttributes };
export { AssetAttributeTypeAttributes as UpdateAssetAttributeTypeAttributes };
export { AssetAttributeTypeItemTemplateAttributes as UpdateAssetAttributeTypeItemTemplateAttributes };
export { CreateAssetAttributeTypeItemTemplateRelationships as UpdateAssetAttributeTypeItemTemplateRelationships };
export { CreateAssetAttributeTypeRelationships as UpdateAssetAttributeTypeRelationships };
export { AssetTypeAttributes as UpdateAssetTypeAttributes };
export { AuthProfileAttributes as UpdateAuthProfileAttributes };
export { BaseBucketAttributes as UpdateBaseBucketAttributes };
export { BaseBucketMetadataAttributes as UpdateBaseBucketMetadataAttributes };
export { CreateBaseBucketMetadataRelationships as UpdateBaseBucketMetadataRelationships };
export { BaseSubBucketAttributes as UpdateBaseSubBucketAttributes };
export { BaseBucketMetadataAttributes as UpdateBaseSubBucketMetadataAttributes };
export { CreateBaseBucketMetadataRelationships as UpdateBaseSubBucketMetadataRelationships };
export { BlueprintAttributes as UpdateBlueprintAttributes };
export { BucketAttributes as UpdateBucketAttributes };
export { AssetTypeAttributes as UpdateBucketClassAttributes };
export { CreateBucketClassRelationships as UpdateBucketClassRelationships };
export { BucketDefinitionAttributes as UpdateBucketDefinitionAttributes };
export { BucketFundingAttributes as UpdateBucketFundingAttributes };
export { BucketTypeAttributes as UpdateBucketTypeAttributes };
export { CreateBucketTypeRelationships as UpdateBucketTypeRelationships };
export { ChangeOrderAttributes as UpdateChangeOrderAttributes };
export { ChangeOrderLineAttributes as UpdateChangeOrderLineAttributes };
export { ClaimAttributes as UpdateClaimAttributes };
export { ClaimDeductibleAttributes as UpdateClaimDeductibleAttributes };
export { ClaimTargetAttributes as UpdateClaimTargetAttributes };
export { BlueprintAttributes as UpdateContractAttributes };
export { UpdateBlueprintRelationships as UpdateContractRelationships };
export { CountryAttributes as UpdateCountryAttributes };
export { BucketDefinitionAttributes as UpdateCoverageAttributes };
export { AssetTypeAttributes as UpdateCoverageGroupTemplateAttributes };
export { CreateCoverageGroupTemplateRelationships as UpdateCoverageGroupTemplateRelationships };
export { AssetTypeAttributes as UpdateCoverageTemplateAttributes };
export { CreateCoverageTemplateRelationships as UpdateCoverageTemplateRelationships };
export { CreateCurrencyAttributes as UpdateCurrencyAttributes };
export { BlueprintAttributes as UpdateDeclarationsPageAttributes };
export { UpdateBlueprintRelationships as UpdateDeclarationsPageRelationships };
export { DeductibleAttributes as UpdateDeductibleAttributes };
export { BlueprintAttributes as UpdateDeedAttributes };
export { UpdateBlueprintRelationships as UpdateDeedRelationships };
export { BlueprintAttributes as UpdateDeliveryPaperworkAttributes };
export { UpdateBlueprintRelationships as UpdateDeliveryPaperworkRelationships };
export { CreateDepreciationModifierAttributes as UpdateDepreciationModifierAttributes };
export { CreateDepreciationModifierRelationships as UpdateDepreciationModifierRelationships };
export { CreateDepreciationOverrideAttributes as UpdateDepreciationOverrideAttributes };
export { CreateDepreciationModifierRelationships as UpdateDepreciationOverrideRelationships };
export { CreateDepreciationScheduleAttributes as UpdateDepreciationScheduleAttributes };
export { CreateDepreciationScheduleRelationships as UpdateDepreciationScheduleRelationships };
export { AssetTypeAttributes as UpdateDisasterAttributes };
export { CreateDisasterRelationships as UpdateDisasterRelationships };
export { BlueprintAttributes as UpdateDocumentAttributes };
export { AssetTypeAttributes as UpdateDocumentClassAttributes };
export { CreateDocumentClassRelationships as UpdateDocumentClassRelationships };
export { UpdateBlueprintRelationships as UpdateDocumentRelationships };
export { CreateDocumentTypeAttributes as UpdateDocumentTypeAttributes };
export { CreateDocumentTypeRelationships as UpdateDocumentTypeRelationships };
export { AssetAttributes as UpdateDwellingAttributes };
export { EmailAddressAttributes as UpdateEmailAddressAttributes };
export { EndorsementAttributes as UpdateEndorsementAttributes };
export { CreateEndorsementTemplateAttributes as UpdateEndorsementTemplateAttributes };
export { CreateEndorsementTemplateRelationships as UpdateEndorsementTemplateRelationships };
export { CreateEntryAttributes as UpdateEntryAttributes };
export { EntrySourceAttributes as UpdateEntrySourceAttributes };
export { CreateEntrySourceMediaAttributes as UpdateEntrySourceMediaAttributes };
export { CreateEntrySourceMetadataAttributes as UpdateEntrySourceMetadataAttributes };
export { CreateEntrySourceMetadataRelationships as UpdateEntrySourceMetadataRelationships };
export { EstimateAttributes as UpdateEstimateAttributes };
export { EstimateLineAttributes as UpdateEstimateLineAttributes };
export { CreateFileProcessAttributes as UpdateFileProcessAttributes };
export { CreateFileProcessRelationships as UpdateFileProcessRelationships };
export { AssetAppraisalAttributes as UpdateFinancialDocumentAttributes };
export { CreateFundingAttributes as UpdateFundingAttributes };
export { FundingSourceAttributes as UpdateFundingSourceAttributes };
export { AccountProviderContactAttributes as UpdateIdentityAttributes };
export { IncidentAttributes as UpdateIncidentAttributes };
export { AssetTypeAttributes as UpdateIncidentClassAttributes };
export { CreateIncidentClassRelationships as UpdateIncidentClassRelationships };
export { CreateIncidentImpactAttributes as UpdateIncidentImpactAttributes };
export { BlueprintAttributes as UpdateIncidentReportAttributes };
export { UpdateBlueprintRelationships as UpdateIncidentReportRelationships };
export { BucketTypeAttributes as UpdateIncidentTypeAttributes };
export { CreateIncidentTypeRelationships as UpdateIncidentTypeRelationships };
export { ChangeOrderAttributes as UpdateInvoiceAttributes };
export { InvoiceLineAttributes as UpdateInvoiceLineAttributes };
export { AppraisalLineAttributes as UpdateItemAppraisalAttributes };
export { ItemAttributes as UpdateItemAttributes };
export { AssetTypeAttributes as UpdateItemCategoryAttributes };
export { CreateItemCategoryRelationships as UpdateItemCategoryRelationships };
export { ItemChangeOrderAttributes as UpdateItemChangeOrderAttributes };
export { AssetTypeAttributes as UpdateItemClassAttributes };
export { CreateItemClassRelationships as UpdateItemClassRelationships };
export { ItemEstimateAttributes as UpdateItemEstimateAttributes };
export { CreateItemImpactAttributes as UpdateItemImpactAttributes };
export { ChangeOrderLineAttributes as UpdateItemImpactChangeOrderAttributes };
export { EstimateLineAttributes as UpdateItemImpactEstimateAttributes };
export { InvoiceLineAttributes as UpdateItemImpactInvoiceAttributes };
export { InvoiceLineAttributes as UpdateItemImpactPaymentAttributes };
export { ItemInvoiceAttributes as UpdateItemInvoiceAttributes };
export { ChangeOrderAttributes as UpdateItemizableFinancialDocumentAttributes };
export { CreateItemizableFinancialDocumentStatsAttributes as UpdateItemizableFinancialDocumentStatsAttributes };
export { CreateItemizableFinancialDocumentStatsRelationships as UpdateItemizableFinancialDocumentStatsRelationships };
export { ItemMediaSuggestionAttributes as UpdateItemMediaSuggestionAttributes };
export { ItemPaymentAttributes as UpdateItemPaymentAttributes };
export { ItemProductSuggestionAttributes as UpdateItemProductSuggestionAttributes };
export { AssetTypeAttributes as UpdateItemTemplateAttributes };
export { CreateItemTemplateRelationships as UpdateItemTemplateRelationships };
export { CreateItemTypeAttributes as UpdateItemTypeAttributes };
export { CreateItemTypeRelationships as UpdateItemTypeRelationships };
export { CreateMediaAttributes as UpdateMediaAttributes };
export { BlueprintAttributes as UpdateParamedicReportAttributes };
export { UpdateBlueprintRelationships as UpdateParamedicReportRelationships };
export { ChangeOrderAttributes as UpdatePaymentAttributes };
export { InvoiceLineAttributes as UpdatePaymentLineAttributes };
export { AssetTypeAttributes as UpdatePerilAttributes };
export { CreatePerilRelationships as UpdatePerilRelationships };
export { BlueprintAttributes as UpdatePermitAttributes };
export { UpdateBlueprintRelationships as UpdatePermitRelationships };
export { PhoneNumberAttributes as UpdatePhoneNumberAttributes };
export { UpdateEmailAddressRelationships as UpdatePhoneNumberRelationships };
export { BlueprintAttributes as UpdatePoliceReportAttributes };
export { UpdateBlueprintRelationships as UpdatePoliceReportRelationships };
export { CreatePolicyAttributes as UpdatePolicyAttributes };
export { BlueprintAttributes as UpdatePolicyJacketAttributes };
export { UpdateBlueprintRelationships as UpdatePolicyJacketRelationships };
export { AssetTypeAttributes as UpdatePolicyTemplateAttributes };
export { CreatePolicyTemplateRelationships as UpdatePolicyTemplateRelationships };
export { PolicyTermAttributes as UpdatePolicyTermAttributes };
export { BlueprintAttributes as UpdateProductSpecAttributes };
export { UpdateBlueprintRelationships as UpdateProductSpecRelationships };
export { AccountAttributes as UpdateProjectAttributes };
export { CreateIncidentImpactAttributes as UpdateProjectImpactAttributes };
export { CreateProjectMediaAttributes as UpdateProjectMediaAttributes };
export { CreateProviderAttributes as UpdateProviderAttributes };
export { BlueprintAttributes as UpdateRentRollAttributes };
export { UpdateBlueprintRelationships as UpdateRentRollRelationships };
export { BlueprintAttributes as UpdateScopeOfLossAttributes };
export { UpdateBlueprintRelationships as UpdateScopeOfLossRelationships };
export { ServiceAttributes as UpdateServiceAttributes };
export { AssetTypeAttributes as UpdateServiceCategoryAttributes };
export { CreateServiceCategoryRelationships as UpdateServiceCategoryRelationships };
export { AssetTypeAttributes as UpdateServiceClassAttributes };
export { CreateServiceClassRelationships as UpdateServiceClassRelationships };
export { ServiceTaskAttributes as UpdateServiceTaskAttributes };
export { ChangeOrderLineAttributes as UpdateServiceTaskChangeOrderAttributes };
export { EstimateLineAttributes as UpdateServiceTaskEstimateAttributes };
export { InvoiceLineAttributes as UpdateServiceTaskInvoiceAttributes };
export { InvoiceLineAttributes as UpdateServiceTaskPaymentAttributes };
export { AssetTypeAttributes as UpdateServiceTypeAttributes };
export { CreatePerilRelationships as UpdateServiceTypeRelationships };
export { CreateSpaceAttributes as UpdateSpaceAttributes };
export { CreateSpaceCategoryAttributes as UpdateSpaceCategoryAttributes };
export { CreateSpaceCategoryRelationships as UpdateSpaceCategoryRelationships };
export { CreateSpaceCategoryAttributes as UpdateSpaceClassAttributes };
export { CreateSpaceClassRelationships as UpdateSpaceClassRelationships };
export { AccountAttributes as UpdateSpaceGroupAttributes };
export { AssetTypeAttributes as UpdateSpaceGroupTypeAttributes };
export { CreateSpaceGroupTypeRelationships as UpdateSpaceGroupTypeRelationships };
export { CreateSpaceCategoryAttributes as UpdateSpaceTypeAttributes };
export { AssetAttributeTypeItemTemplateAttributes as UpdateSpaceTypeItemTemplateAttributes };
export { CreateSpaceTypeItemTemplateRelationships as UpdateSpaceTypeItemTemplateRelationships };
export { CreateSpaceCategoryRelationships as UpdateSpaceTypeRelationships };
export { CreateSubBucketAttributes as UpdateSubBucketAttributes };
export { SubBucketDefinitionAttributes as UpdateSubBucketDefinitionAttributes };
export { SubBucketDefinitionAttributes as UpdateSubCoverageAttributes };
export { AssetTypeAttributes as UpdateSubCoverageTemplateAttributes };
export { CreateSubCoverageTemplateRelationships as UpdateSubCoverageTemplateRelationships };
export { AssetTypeAttributes as UpdateSubmissionTrackTemplateAttributes };
export { CreateSubmissionTrackTemplateRelationships as UpdateSubmissionTrackTemplateRelationships };
export { AddressAttributes as UpdateThirdPartyDwellingAttributes };
export { EntrySourceAttributes as UpdateThirdPartyImpactAttributes };
export { AccountAttributes as UpdateThirdPartyIndividualAttributes };
export { UpdateThirdPartyIndividualRelationships as UpdateThirdPartyRelationships };
export { CreateUserAttributes as UpdateUserAttributes };
export { BlueprintAttributes as UpdateUserManualAttributes };
export { UpdateBlueprintRelationships as UpdateUserManualRelationships };
export { BlueprintAttributes as UpdateWarrantyAttributes };
export { UpdateBlueprintRelationships as UpdateWarrantyRelationships };
export { UploadFilesResponseDto as UploadsControllerInitializeFileIds200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UploadsControllerInitializeFileIdsParams };
export { UploadFilesDto as UploadsControllerInitializeFileIdsRequest };
export { TransloaditAssemblyOptionsResponseDto as UploadsControllerStartUpload200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UploadsControllerStartUploadParams };
export { TransloaditAssemblyOptionsDto as UploadsControllerStartUploadRequest };
export { UpdateUserAccountRoleAttributes as UserAccountRoleAttributes };
export { Account as UserAccountRoleControllerGetUserAccountRoleAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserAccountRoleControllerGetUserAccountRoleAccountParams };
export { ReferencedAccount as UserAccountRoleControllerGetUserAccountRoleAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserAccountRoleControllerGetUserAccountRoleAccountRefParams };
export { UserAccountRole as UserAccountRoleControllerGetUserAccountRoleById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserAccountRoleControllerGetUserAccountRoleByIdParams };
export { UserAccountRoleList as UserAccountRoleControllerGetUserAccountRoleList200 };
export { User as UserAccountRoleControllerGetUserAccountRoleUser200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserAccountRoleControllerGetUserAccountRoleUserParams };
export { ReferencedUser as UserAccountRoleControllerGetUserAccountRoleUserRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserAccountRoleControllerGetUserAccountRoleUserRefParams };
export { ReferencedAccount as UserAccountRoleControllerPatchUserAccountRoleAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserAccountRoleControllerPatchUserAccountRoleAccountRefParams };
export { ReferencedUpdateAccount as UserAccountRoleControllerPatchUserAccountRoleAccountRefRequest };
export { ReferencedUser as UserAccountRoleControllerPatchUserAccountRoleUserRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserAccountRoleControllerPatchUserAccountRoleUserRefParams };
export { ReferencedUpdateUser as UserAccountRoleControllerPatchUserAccountRoleUserRefRequest };
export { UserAccountRole as UserAccountRoleControllerUpdateUserAccountRoleById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserAccountRoleControllerUpdateUserAccountRoleByIdParams };
export { UpdateUserAccountRole as UserAccountRoleControllerUpdateUserAccountRoleByIdRequest };
export { CreateUserAttributes as UserAttributes };
export { UserAccountRoleList as UserControllerGetUserAccountRoles200 };
export { ReferencedUserAccountRoleList as UserControllerGetUserAccountRolesRef200 };
export { User as UserControllerGetUserById200 };
export { AccountControllerGetCurrentAccountParams as UserControllerGetUserByIdParams };
export { NullableAccount as UserControllerGetUserDefaultAccount200 };
export { AccountControllerGetCurrentAccountParams as UserControllerGetUserDefaultAccountParams };
export { NullableReferencedAccount as UserControllerGetUserDefaultAccountRef200 };
export { NullableEmailAddress as UserControllerGetUserPrimaryEmailAddress200 };
export { AccountControllerGetCurrentAccountParams as UserControllerGetUserPrimaryEmailAddressParams };
export { NullableReferencedEmailAddress as UserControllerGetUserPrimaryEmailAddressRef200 };
export { NullablePhoneNumber as UserControllerGetUserPrimaryPhoneNumber200 };
export { AccountControllerGetCurrentAccountParams as UserControllerGetUserPrimaryPhoneNumberParams };
export { NullableReferencedPhoneNumber as UserControllerGetUserPrimaryPhoneNumberRef200 };
export { NullableReferencedAccount as UserControllerPatchUserDefaultAccountRef200 };
export { NullableReferencedUpdateAccount as UserControllerPatchUserDefaultAccountRefRequest };
export { NullableReferencedEmailAddress as UserControllerPatchUserPrimaryEmailAddressRef200 };
export { NullableReferencedUpdateEmailAddress as UserControllerPatchUserPrimaryEmailAddressRefRequest };
export { NullableReferencedPhoneNumber as UserControllerPatchUserPrimaryPhoneNumberRef200 };
export { NullableReferencedUpdatePhoneNumber as UserControllerPatchUserPrimaryPhoneNumberRefRequest };
export { User as UserControllerUpdateUserById200 };
export { AccountControllerGetCurrentAccountParams as UserControllerUpdateUserByIdParams };
export { UpdateUser as UserControllerUpdateUserByIdRequest };
export { BlueprintAttributes as UserManualAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserManualControllerCreateUserManualParams };
export { ReferencedAssetList as UserManualControllerDeleteUserManualAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerDeleteUserManualAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as UserManualControllerDeleteUserManualAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerDeleteUserManualByIdParams };
export { ReferencedProjectList as UserManualControllerDeleteUserManualProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerDeleteUserManualProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as UserManualControllerDeleteUserManualProjectsRefRequest };
export { ReferencedSpaceList as UserManualControllerDeleteUserManualSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerDeleteUserManualSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as UserManualControllerDeleteUserManualSpacesRefRequest };
export { Account as UserManualControllerGetUserManualAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserManualControllerGetUserManualAccountParams };
export { ReferencedAccount as UserManualControllerGetUserManualAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerGetUserManualAccountRefParams };
export { AssetList as UserManualControllerGetUserManualAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as UserManualControllerGetUserManualAssetsParams };
export { ReferencedAssetList as UserManualControllerGetUserManualAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerGetUserManualAssetsRefParams };
export { UserManual as UserManualControllerGetUserManualById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserManualControllerGetUserManualByIdParams };
export { DocumentType as UserManualControllerGetUserManualDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserManualControllerGetUserManualDocumentTypeParams };
export { ReferencedDocumentType as UserManualControllerGetUserManualDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerGetUserManualDocumentTypeRefParams };
export { NullableFile as UserManualControllerGetUserManualFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserManualControllerGetUserManualFileParams };
export { NullableReferencedFile as UserManualControllerGetUserManualFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerGetUserManualFileRefParams };
export { UserManualList as UserManualControllerGetUserManualList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as UserManualControllerGetUserManualListParams };
export { ProjectList as UserManualControllerGetUserManualProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as UserManualControllerGetUserManualProjectsParams };
export { ReferencedProjectList as UserManualControllerGetUserManualProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerGetUserManualProjectsRefParams };
export { SpaceList as UserManualControllerGetUserManualSpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as UserManualControllerGetUserManualSpacesParams };
export { ReferencedSpaceList as UserManualControllerGetUserManualSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerGetUserManualSpacesRefParams };
export { ReferencedAccount as UserManualControllerPatchUserManualAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerPatchUserManualAccountRefParams };
export { ReferencedUpdateAccount as UserManualControllerPatchUserManualAccountRefRequest };
export { ReferencedAssetList as UserManualControllerPatchUserManualAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerPatchUserManualAssetsRefParams };
export { ReferencedUpdateAssetList as UserManualControllerPatchUserManualAssetsRefRequest };
export { NullableReferencedFile as UserManualControllerPatchUserManualFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerPatchUserManualFileRefParams };
export { NullableReferencedUpdateFile as UserManualControllerPatchUserManualFileRefRequest };
export { ReferencedProjectList as UserManualControllerPatchUserManualProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerPatchUserManualProjectsRefParams };
export { ReferencedUpdateProjectList as UserManualControllerPatchUserManualProjectsRefRequest };
export { ReferencedSpaceList as UserManualControllerPatchUserManualSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerPatchUserManualSpacesRefParams };
export { ReferencedUpdateSpaceList as UserManualControllerPatchUserManualSpacesRefRequest };
export { ReferencedAssetList as UserManualControllerPostUserManualAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerPostUserManualAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as UserManualControllerPostUserManualAssetsRefRequest };
export { ReferencedProjectList as UserManualControllerPostUserManualProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerPostUserManualProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as UserManualControllerPostUserManualProjectsRefRequest };
export { ReferencedSpaceList as UserManualControllerPostUserManualSpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as UserManualControllerPostUserManualSpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as UserManualControllerPostUserManualSpacesRefRequest };
export { UserManual as UserManualControllerUpdateUserManualById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as UserManualControllerUpdateUserManualByIdParams };
export { UpdateUserManual as UserManualControllerUpdateUserManualByIdRequest };
export { BlueprintRelationships as UserManualRelationships };
export { BlueprintAttributes as WarrantyAttributes };
export { UserAccountRoleControllerCreateUserAccountRoleParams as WarrantyControllerCreateWarrantyParams };
export { ReferencedAssetList as WarrantyControllerDeleteWarrantyAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerDeleteWarrantyAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as WarrantyControllerDeleteWarrantyAssetsRefRequest };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerDeleteWarrantyByIdParams };
export { ReferencedProjectList as WarrantyControllerDeleteWarrantyProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerDeleteWarrantyProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as WarrantyControllerDeleteWarrantyProjectsRefRequest };
export { ReferencedSpaceList as WarrantyControllerDeleteWarrantySpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerDeleteWarrantySpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as WarrantyControllerDeleteWarrantySpacesRefRequest };
export { Account as WarrantyControllerGetWarrantyAccount200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as WarrantyControllerGetWarrantyAccountParams };
export { ReferencedAccount as WarrantyControllerGetWarrantyAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerGetWarrantyAccountRefParams };
export { AssetList as WarrantyControllerGetWarrantyAssets200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as WarrantyControllerGetWarrantyAssetsParams };
export { ReferencedAssetList as WarrantyControllerGetWarrantyAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerGetWarrantyAssetsRefParams };
export { Warranty as WarrantyControllerGetWarrantyById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as WarrantyControllerGetWarrantyByIdParams };
export { DocumentType as WarrantyControllerGetWarrantyDocumentType200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as WarrantyControllerGetWarrantyDocumentTypeParams };
export { ReferencedDocumentType as WarrantyControllerGetWarrantyDocumentTypeRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerGetWarrantyDocumentTypeRefParams };
export { NullableFile as WarrantyControllerGetWarrantyFile200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as WarrantyControllerGetWarrantyFileParams };
export { NullableReferencedFile as WarrantyControllerGetWarrantyFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerGetWarrantyFileRefParams };
export { WarrantyList as WarrantyControllerGetWarrantyList200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as WarrantyControllerGetWarrantyListParams };
export { ProjectList as WarrantyControllerGetWarrantyProjects200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as WarrantyControllerGetWarrantyProjectsParams };
export { ReferencedProjectList as WarrantyControllerGetWarrantyProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerGetWarrantyProjectsRefParams };
export { SpaceList as WarrantyControllerGetWarrantySpaces200 };
export { UserAccountRoleControllerGetUserAccountRoleListParams as WarrantyControllerGetWarrantySpacesParams };
export { ReferencedSpaceList as WarrantyControllerGetWarrantySpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerGetWarrantySpacesRefParams };
export { ReferencedAccount as WarrantyControllerPatchWarrantyAccountRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerPatchWarrantyAccountRefParams };
export { ReferencedUpdateAccount as WarrantyControllerPatchWarrantyAccountRefRequest };
export { ReferencedAssetList as WarrantyControllerPatchWarrantyAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerPatchWarrantyAssetsRefParams };
export { ReferencedUpdateAssetList as WarrantyControllerPatchWarrantyAssetsRefRequest };
export { NullableReferencedFile as WarrantyControllerPatchWarrantyFileRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerPatchWarrantyFileRefParams };
export { NullableReferencedUpdateFile as WarrantyControllerPatchWarrantyFileRefRequest };
export { ReferencedProjectList as WarrantyControllerPatchWarrantyProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerPatchWarrantyProjectsRefParams };
export { ReferencedUpdateProjectList as WarrantyControllerPatchWarrantyProjectsRefRequest };
export { ReferencedSpaceList as WarrantyControllerPatchWarrantySpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerPatchWarrantySpacesRefParams };
export { ReferencedUpdateSpaceList as WarrantyControllerPatchWarrantySpacesRefRequest };
export { ReferencedAssetList as WarrantyControllerPostWarrantyAssetsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerPostWarrantyAssetsRefParams };
export { PolicyControllerPostPolicyAssetsRefRequest as WarrantyControllerPostWarrantyAssetsRefRequest };
export { ReferencedProjectList as WarrantyControllerPostWarrantyProjectsRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerPostWarrantyProjectsRefParams };
export { FileControllerPostFileProjectsRefRequest as WarrantyControllerPostWarrantyProjectsRefRequest };
export { ReferencedSpaceList as WarrantyControllerPostWarrantySpacesRef200 };
export { UserAccountRoleControllerDeleteUserAccountRoleByIdParams as WarrantyControllerPostWarrantySpacesRefParams };
export { SpaceGroupControllerPostSpaceGroupSpacesRefRequest as WarrantyControllerPostWarrantySpacesRefRequest };
export { Warranty as WarrantyControllerUpdateWarrantyById200 };
export { UserAccountRoleControllerCreateUserAccountRoleParams as WarrantyControllerUpdateWarrantyByIdParams };
export { UpdateWarranty as WarrantyControllerUpdateWarrantyByIdRequest };
export { BlueprintRelationships as WarrantyRelationships };
export const make = (httpClient, options = {}) => {
    const unexpectedStatus = (response) => Effect.flatMap(Effect.orElseSucceed(response.json, () => "Unexpected status code"), (description) => Effect.fail(new HttpClientError.ResponseError({
        request: response.request,
        response,
        reason: "StatusCode",
        description: typeof description === "string" ? description : JSON.stringify(description),
    })));
    const withResponse = options.transformClient
        ? (f) => (request) => Effect.flatMap(Effect.flatMap(options.transformClient(httpClient), (client) => client.execute(request)), f)
        : (f) => (request) => Effect.flatMap(httpClient.execute(request), f);
    const decodeSuccess = (schema) => (response) => HttpClientResponse.schemaBodyJson(schema)(response);
    const decodeError = (tag, schema) => (response) => Effect.flatMap(HttpClientResponse.schemaBodyJson(schema)(response), (cause) => Effect.fail(ClientError(tag, cause, response)));
    return {
        httpClient,
        "AccountControllerGetCurrentAccount": (options) => HttpClientRequest.get(`/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ProfileControllerGetCurrentUser": (options) => HttpClientRequest.get(`/profile`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(User),
            orElse: unexpectedStatus
        }))),
        "HealthControllerInternalHealthCheck": () => HttpClientRequest.get(`/health/internal`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(HealthControllerInternalHealthCheck200),
            "503": decodeError("HealthControllerInternalHealthCheck200", HealthControllerInternalHealthCheck200),
            orElse: unexpectedStatus
        }))),
        "HealthControllerExternalHealthCheck": () => HttpClientRequest.get(`/health`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(HealthControllerInternalHealthCheck200),
            "503": decodeError("HealthControllerInternalHealthCheck200", HealthControllerInternalHealthCheck200),
            orElse: unexpectedStatus
        }))),
        "TestControllerTest": () => HttpClientRequest.get(`/test`).pipe(withResponse(HttpClientResponse.matchStatus({
            "200": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "TestControllerTestManyById": () => HttpClientRequest.get(`/test/test`).pipe(withResponse(HttpClientResponse.matchStatus({
            "200": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserById": (id, options) => HttpClientRequest.get(`/users/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(User),
            orElse: unexpectedStatus
        }))),
        "UserControllerUpdateUserById": (id, options) => HttpClientRequest.patch(`/users/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(User),
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserPrimaryEmailAddress": (id, options) => HttpClientRequest.get(`/users/${id}/primaryEmailAddress`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableEmailAddress),
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserPrimaryEmailAddressRef": (id) => HttpClientRequest.get(`/users/${id}/relationships/primaryEmailAddress`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedEmailAddress),
            orElse: unexpectedStatus
        }))),
        "UserControllerPatchUserPrimaryEmailAddressRef": (id, options) => HttpClientRequest.patch(`/users/${id}/relationships/primaryEmailAddress`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedEmailAddress),
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserPrimaryPhoneNumber": (id, options) => HttpClientRequest.get(`/users/${id}/primaryPhoneNumber`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullablePhoneNumber),
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserPrimaryPhoneNumberRef": (id) => HttpClientRequest.get(`/users/${id}/relationships/primaryPhoneNumber`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPhoneNumber),
            orElse: unexpectedStatus
        }))),
        "UserControllerPatchUserPrimaryPhoneNumberRef": (id, options) => HttpClientRequest.patch(`/users/${id}/relationships/primaryPhoneNumber`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPhoneNumber),
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserDefaultAccount": (id, options) => HttpClientRequest.get(`/users/${id}/defaultAccount`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccount),
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserDefaultAccountRef": (id) => HttpClientRequest.get(`/users/${id}/relationships/defaultAccount`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "UserControllerPatchUserDefaultAccountRef": (id, options) => HttpClientRequest.patch(`/users/${id}/relationships/defaultAccount`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserAccountRoles": (id, options) => HttpClientRequest.get(`/users/${id}/accountRoles`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserAccountRoleList),
            orElse: unexpectedStatus
        }))),
        "UserControllerGetUserAccountRolesRef": (id) => HttpClientRequest.get(`/users/${id}/relationships/accountRoles`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedUserAccountRoleList),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerGetUserAccountRoleList": (options) => HttpClientRequest.get(`/userAccountRoles`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserAccountRoleList),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerCreateUserAccountRole": (options) => HttpClientRequest.post(`/userAccountRoles`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserAccountRoleControllerCreateUserAccountRole201),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerGetUserAccountRoleById": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserAccountRole),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerDeleteUserAccountRoleById": (id, options) => HttpClientRequest.del(`/userAccountRoles/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerUpdateUserAccountRoleById": (id, options) => HttpClientRequest.patch(`/userAccountRoles/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserAccountRole),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerGetUserAccountRoleUser": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}/user`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(User),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerGetUserAccountRoleUserRef": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}/relationships/user`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedUser),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerPatchUserAccountRoleUserRef": (id, options) => HttpClientRequest.patch(`/userAccountRoles/${id}/relationships/user`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedUser),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerGetUserAccountRoleAccount": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerGetUserAccountRoleAccountRef": (id, options) => HttpClientRequest.get(`/userAccountRoles/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "UserAccountRoleControllerPatchUserAccountRoleAccountRef": (id, options) => HttpClientRequest.patch(`/userAccountRoles/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyControllerGetThirdPartyList": (options) => HttpClientRequest.get(`/thirdParties`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyList),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyControllerCreateThirdParty": (options) => HttpClientRequest.post(`/thirdParties`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyControllerCreateThirdParty201),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyControllerGetThirdPartyById": (id, options) => HttpClientRequest.get(`/thirdParties/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdParty),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyControllerDeleteThirdPartyById": (id, options) => HttpClientRequest.del(`/thirdParties/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ThirdPartyControllerUpdateThirdPartyById": (id, options) => HttpClientRequest.patch(`/thirdParties/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdParty),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyControllerGetThirdPartyProject": (id, options) => HttpClientRequest.get(`/thirdParties/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyControllerGetThirdPartyProjectRef": (id, options) => HttpClientRequest.get(`/thirdParties/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyControllerPatchThirdPartyProjectRef": (id, options) => HttpClientRequest.patch(`/thirdParties/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyIndividualControllerGetThirdPartyIndividualList": (options) => HttpClientRequest.get(`/thirdPartyIndividuals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyIndividualList),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyIndividualControllerCreateThirdPartyIndividual": (options) => HttpClientRequest.post(`/thirdPartyIndividuals`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyIndividualControllerCreateThirdPartyIndividual201),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyIndividualControllerGetThirdPartyIndividualById": (id, options) => HttpClientRequest.get(`/thirdPartyIndividuals/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyIndividual),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyIndividualControllerDeleteThirdPartyIndividualById": (id, options) => HttpClientRequest.del(`/thirdPartyIndividuals/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ThirdPartyIndividualControllerUpdateThirdPartyIndividualById": (id, options) => HttpClientRequest.patch(`/thirdPartyIndividuals/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyIndividual),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyIndividualControllerGetThirdPartyIndividualProject": (id, options) => HttpClientRequest.get(`/thirdPartyIndividuals/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyIndividualControllerGetThirdPartyIndividualProjectRef": (id, options) => HttpClientRequest.get(`/thirdPartyIndividuals/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyIndividualControllerPatchThirdPartyIndividualProjectRef": (id, options) => HttpClientRequest.patch(`/thirdPartyIndividuals/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactList": (options) => HttpClientRequest.get(`/thirdPartyImpacts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyImpactList),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerCreateThirdPartyImpact": (options) => HttpClientRequest.post(`/thirdPartyImpacts`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyImpactControllerCreateThirdPartyImpact201),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactById": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyImpact),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerDeleteThirdPartyImpactById": (id, options) => HttpClientRequest.del(`/thirdPartyImpacts/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerUpdateThirdPartyImpactById": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyImpact),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactMetadata": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactMetadataRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactProject": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactProjectRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerPatchThirdPartyImpactProjectRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactAccount": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactAccountRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerPatchThirdPartyImpactAccountRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactCurrency": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactCurrencyRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerPatchThirdPartyImpactCurrencyRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactEntries": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactEntriesRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactAppraisals": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactAppraisalsRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/appraisals`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisal": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/selectedAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerPatchThirdPartyImpactSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisal": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relevantAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/relevantAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactThirdParty": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/thirdParty`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdParty),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerGetThirdPartyImpactThirdPartyRef": (id, options) => HttpClientRequest.get(`/thirdPartyImpacts/${id}/relationships/thirdParty`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedThirdParty),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyImpactControllerPatchThirdPartyImpactThirdPartyRef": (id, options) => HttpClientRequest.patch(`/thirdPartyImpacts/${id}/relationships/thirdParty`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedThirdParty),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerGetThirdPartyDwellingList": (options) => HttpClientRequest.get(`/thirdPartyDwellings`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyDwellingList),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerCreateThirdPartyDwelling": (options) => HttpClientRequest.post(`/thirdPartyDwellings`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyDwellingControllerCreateThirdPartyDwelling201),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerGetThirdPartyDwellingById": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyDwelling),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerDeleteThirdPartyDwellingById": (id, options) => HttpClientRequest.del(`/thirdPartyDwellings/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerUpdateThirdPartyDwellingById": (id, options) => HttpClientRequest.patch(`/thirdPartyDwellings/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ThirdPartyDwelling),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerGetThirdPartyDwellingProject": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerGetThirdPartyDwellingProjectRef": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerPatchThirdPartyDwellingProjectRef": (id, options) => HttpClientRequest.patch(`/thirdPartyDwellings/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerGetThirdPartyDwellingCountry": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}/country`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Country),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerGetThirdPartyDwellingCountryRef": (id, options) => HttpClientRequest.get(`/thirdPartyDwellings/${id}/relationships/country`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCountry),
            orElse: unexpectedStatus
        }))),
        "ThirdPartyDwellingControllerPatchThirdPartyDwellingCountryRef": (id, options) => HttpClientRequest.patch(`/thirdPartyDwellings/${id}/relationships/country`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCountry),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageList": (options) => HttpClientRequest.get(`/subCoverages`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverageList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerCreateSubCoverage": (options) => HttpClientRequest.post(`/subCoverages`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverageControllerCreateSubCoverage201),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageById": (id, options) => HttpClientRequest.get(`/subCoverages/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverage),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerDeleteSubCoverageById": (id, options) => HttpClientRequest.del(`/subCoverages/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerUpdateSubCoverageById": (id, options) => HttpClientRequest.patch(`/subCoverages/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverage),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageParent": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/parent`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Coverage),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageParentRef": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/relationships/parent`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverage),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerPatchSubCoverageParentRef": (id, options) => HttpClientRequest.patch(`/subCoverages/${id}/relationships/parent`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverage),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageBuckets": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageBucketsRef": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/relationships/buckets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubBucketList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageTemplate": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/template`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableSubCoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageTemplateRef": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedSubCoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerPatchSubCoverageTemplateRef": (id, options) => HttpClientRequest.patch(`/subCoverages/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedSubCoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageEndorsements": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/endorsements`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerGetSubCoverageEndorsementsRef": (id, options) => HttpClientRequest.get(`/subCoverages/${id}/relationships/endorsements`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEndorsementList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerPostSubCoverageEndorsementsRef": (id, options) => HttpClientRequest.post(`/subCoverages/${id}/relationships/endorsements`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEndorsementList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerDeleteSubCoverageEndorsementsRef": (id, options) => HttpClientRequest.del(`/subCoverages/${id}/relationships/endorsements`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEndorsementList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageControllerPatchSubCoverageEndorsementsRef": (id, options) => HttpClientRequest.patch(`/subCoverages/${id}/relationships/endorsements`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEndorsementList),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketList": (options) => HttpClientRequest.get(`/subBuckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketList),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerCreateSubBucket": (options) => HttpClientRequest.post(`/subBuckets`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketControllerCreateSubBucket201),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketById": (id, options) => HttpClientRequest.get(`/subBuckets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucket),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerDeleteSubBucketById": (id, options) => HttpClientRequest.del(`/subBuckets/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerUpdateSubBucketById": (id, options) => HttpClientRequest.patch(`/subBuckets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucket),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketParent": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/parent`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucket),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketParentRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/parent`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerPatchSubBucketParentRef": (id, options) => HttpClientRequest.patch(`/subBuckets/${id}/relationships/parent`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketMetadata": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketMetadataRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseSubBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketFundingSource": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/fundingSource`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketFundingSourceRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/fundingSource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketProject": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketProjectRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketAccount": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketAccountRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketEntries": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketEntriesRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketDefinition": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/definition`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerGetSubBucketDefinitionRef": (id, options) => HttpClientRequest.get(`/subBuckets/${id}/relationships/definition`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "SubBucketControllerPatchSubBucketDefinitionRef": (id, options) => HttpClientRequest.patch(`/subBuckets/${id}/relationships/definition`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerGetSubBucketDefinitionList": (options) => HttpClientRequest.get(`/subBucketDefinitions`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerCreateSubBucketDefinition": (options) => HttpClientRequest.post(`/subBucketDefinitions`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketDefinitionControllerCreateSubBucketDefinition201),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerGetSubBucketDefinitionById": (id, options) => HttpClientRequest.get(`/subBucketDefinitions/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerDeleteSubBucketDefinitionById": (id) => HttpClientRequest.del(`/subBucketDefinitions/${id}`).pipe(withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerUpdateSubBucketDefinitionById": (id, options) => HttpClientRequest.patch(`/subBucketDefinitions/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerGetSubBucketDefinitionParent": (id, options) => HttpClientRequest.get(`/subBucketDefinitions/${id}/parent`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketDefinition),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerGetSubBucketDefinitionParentRef": (id) => HttpClientRequest.get(`/subBucketDefinitions/${id}/relationships/parent`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerPatchSubBucketDefinitionParentRef": (id, options) => HttpClientRequest.patch(`/subBucketDefinitions/${id}/relationships/parent`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerGetSubBucketDefinitionBuckets": (id, options) => HttpClientRequest.get(`/subBucketDefinitions/${id}/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketList),
            orElse: unexpectedStatus
        }))),
        "SubBucketDefinitionControllerGetSubBucketDefinitionBucketsRef": (id) => HttpClientRequest.get(`/subBucketDefinitions/${id}/relationships/buckets`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubBucketList),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerGetSpaceList": (options) => HttpClientRequest.get(`/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerCreateSpace": (options) => HttpClientRequest.post(`/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceControllerCreateSpace201),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerGetSpaceById": (id, options) => HttpClientRequest.get(`/spaces/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Space),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerDeleteSpaceById": (id, options) => HttpClientRequest.del(`/spaces/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "SpaceControllerUpdateSpaceById": (id, options) => HttpClientRequest.patch(`/spaces/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Space),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerGetSpaceType": (id, options) => HttpClientRequest.get(`/spaces/${id}/type`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerGetSpaceTypeRef": (id, options) => HttpClientRequest.get(`/spaces/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerPatchSpaceTypeRef": (id, options) => HttpClientRequest.patch(`/spaces/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerGetSpaceGroup": (id, options) => HttpClientRequest.get(`/spaces/${id}/group`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroup),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerGetSpaceGroupRef": (id, options) => HttpClientRequest.get(`/spaces/${id}/relationships/group`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceGroup),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerPatchSpaceGroupRef": (id, options) => HttpClientRequest.patch(`/spaces/${id}/relationships/group`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceGroup),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerGetSpaceAsset": (id, options) => HttpClientRequest.get(`/spaces/${id}/asset`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Asset),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerGetSpaceAssetRef": (id, options) => HttpClientRequest.get(`/spaces/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "SpaceControllerPatchSpaceAssetRef": (id, options) => HttpClientRequest.patch(`/spaces/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerGetSpaceGroupList": (options) => HttpClientRequest.get(`/spaceGroups`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroupList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerCreateSpaceGroup": (options) => HttpClientRequest.post(`/spaceGroups`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroupControllerCreateSpaceGroup201),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerGetSpaceGroupById": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroup),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerDeleteSpaceGroupById": (id, options) => HttpClientRequest.del(`/spaceGroups/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerUpdateSpaceGroupById": (id, options) => HttpClientRequest.patch(`/spaceGroups/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroup),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerGetSpaceGroupType": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/type`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerGetSpaceGroupTypeRef": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerPatchSpaceGroupTypeRef": (id, options) => HttpClientRequest.patch(`/spaceGroups/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerGetSpaceGroupAsset": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/asset`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Asset),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerGetSpaceGroupAssetRef": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerPatchSpaceGroupAssetRef": (id, options) => HttpClientRequest.patch(`/spaceGroups/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerGetSpaceGroupSpaces": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerGetSpaceGroupSpacesRef": (id, options) => HttpClientRequest.get(`/spaceGroups/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerPostSpaceGroupSpacesRef": (id, options) => HttpClientRequest.post(`/spaceGroups/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerDeleteSpaceGroupSpacesRef": (id, options) => HttpClientRequest.del(`/spaceGroups/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupControllerPatchSpaceGroupSpacesRef": (id, options) => HttpClientRequest.patch(`/spaceGroups/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceList": (options) => HttpClientRequest.get(`/services`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerCreateService": (options) => HttpClientRequest.post(`/services`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceControllerCreateService201),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceById": (id, options) => HttpClientRequest.get(`/services/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Service),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerDeleteServiceById": (id, options) => HttpClientRequest.del(`/services/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ServiceControllerUpdateServiceById": (id, options) => HttpClientRequest.patch(`/services/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Service),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceMetadata": (id, options) => HttpClientRequest.get(`/services/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceMetadataRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceProject": (id, options) => HttpClientRequest.get(`/services/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableProject),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceProjectRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerPatchServiceProjectRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceAccount": (id, options) => HttpClientRequest.get(`/services/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceAccountRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerPatchServiceAccountRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceCurrency": (id, options) => HttpClientRequest.get(`/services/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceCurrencyRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerPatchServiceCurrencyRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceEntries": (id, options) => HttpClientRequest.get(`/services/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceEntriesRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceAppraisals": (id, options) => HttpClientRequest.get(`/services/${id}/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceAppraisalsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/appraisals`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceSelectedAppraisal": (id, options) => HttpClientRequest.get(`/services/${id}/selectedAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerPatchServiceSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceRelevantAppraisal": (id, options) => HttpClientRequest.get(`/services/${id}/relevantAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/relevantAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceType": (id, options) => HttpClientRequest.get(`/services/${id}/type`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableServiceType),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceTypeRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedServiceType),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerPatchServiceTypeRef": (id, options) => HttpClientRequest.patch(`/services/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedServiceType),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServicePayments": (id, options) => HttpClientRequest.get(`/services/${id}/payments`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServicePaymentsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/payments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPaymentList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceInvoices": (id, options) => HttpClientRequest.get(`/services/${id}/invoices`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceInvoicesRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/invoices`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedInvoiceList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceEstimates": (id, options) => HttpClientRequest.get(`/services/${id}/estimates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceEstimatesRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/estimates`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimateList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceChangeOrders": (id, options) => HttpClientRequest.get(`/services/${id}/changeOrders`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceChangeOrdersRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServicePaidLineItems": (id, options) => HttpClientRequest.get(`/services/${id}/paidLineItems`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentLineList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServicePaidLineItemsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/paidLineItems`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPaymentLineList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceInvoicedLineItems": (id, options) => HttpClientRequest.get(`/services/${id}/invoicedLineItems`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceLineList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceInvoicedLineItemsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/invoicedLineItems`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedInvoiceLineList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceEstimatedLineItems": (id, options) => HttpClientRequest.get(`/services/${id}/estimatedLineItems`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateLineList),
            orElse: unexpectedStatus
        }))),
        "ServiceControllerGetServiceEstimatedLineItemsRef": (id, options) => HttpClientRequest.get(`/services/${id}/relationships/estimatedLineItems`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimateLineList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskList": (options) => HttpClientRequest.get(`/serviceTasks`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceTaskList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerCreateServiceTask": (options) => HttpClientRequest.post(`/serviceTasks`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceTaskControllerCreateServiceTask201),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskById": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceTask),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerDeleteServiceTaskById": (id, options) => HttpClientRequest.del(`/serviceTasks/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerUpdateServiceTaskById": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceTask),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskMetadata": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskMetadataRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskProject": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableProject),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskProjectRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerPatchServiceTaskProjectRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskAccount": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskAccountRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerPatchServiceTaskAccountRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskCurrency": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskCurrencyRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerPatchServiceTaskCurrencyRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskEntries": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskEntriesRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskAppraisals": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskAppraisalsRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/appraisals`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskSelectedAppraisal": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/selectedAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerPatchServiceTaskSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskRelevantAppraisal": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relevantAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/relevantAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskService": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Service),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskServiceRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedService),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerPatchServiceTaskServiceRef": (id, options) => HttpClientRequest.patch(`/serviceTasks/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedService),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskPayments": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/payments`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskPaymentsRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/payments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPaymentList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskInvoices": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/invoices`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskInvoicesRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/invoices`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedInvoiceList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskEstimates": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/estimates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskEstimatesRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/estimates`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimateList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskChangeOrders": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/changeOrders`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ServiceTaskControllerGetServiceTaskChangeOrdersRef": (id, options) => HttpClientRequest.get(`/serviceTasks/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerGetProjectList": (options) => HttpClientRequest.get(`/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerCreateProject": (options) => HttpClientRequest.post(`/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectControllerCreateProject201),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerGetProjectById": (id, options) => HttpClientRequest.get(`/projects/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerDeleteProjectById": (id, options) => HttpClientRequest.del(`/projects/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ProjectControllerUpdateProjectById": (id, options) => HttpClientRequest.patch(`/projects/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerGetProjectAccount": (id, options) => HttpClientRequest.get(`/projects/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerGetProjectAccountRef": (id, options) => HttpClientRequest.get(`/projects/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerPatchProjectAccountRef": (id, options) => HttpClientRequest.patch(`/projects/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerGetProjectMediaAttachments": (id, options) => HttpClientRequest.get(`/projects/${id}/mediaAttachments`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerGetProjectMediaAttachmentsRef": (id, options) => HttpClientRequest.get(`/projects/${id}/relationships/mediaAttachments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerPostProjectMediaAttachmentsRef": (id, options) => HttpClientRequest.post(`/projects/${id}/relationships/mediaAttachments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerDeleteProjectMediaAttachmentsRef": (id, options) => HttpClientRequest.del(`/projects/${id}/relationships/mediaAttachments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "ProjectControllerPatchProjectMediaAttachmentsRef": (id, options) => HttpClientRequest.patch(`/projects/${id}/relationships/mediaAttachments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerGetProjectMediaList": (options) => HttpClientRequest.get(`/projectMedia`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerCreateProjectMedia": (options) => HttpClientRequest.post(`/projectMedia`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectMediaControllerCreateProjectMedia201),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerGetProjectMediaById": (id, options) => HttpClientRequest.get(`/projectMedia/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectMedia),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerDeleteProjectMediaById": (id, options) => HttpClientRequest.del(`/projectMedia/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerUpdateProjectMediaById": (id, options) => HttpClientRequest.patch(`/projectMedia/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectMedia),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerGetProjectMediaMedia": (id, options) => HttpClientRequest.get(`/projectMedia/${id}/media`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Media),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerGetProjectMediaMediaRef": (id, options) => HttpClientRequest.get(`/projectMedia/${id}/relationships/media`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedMedia),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerPatchProjectMediaMediaRef": (id, options) => HttpClientRequest.patch(`/projectMedia/${id}/relationships/media`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedMedia),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerGetProjectMediaProject": (id, options) => HttpClientRequest.get(`/projectMedia/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerGetProjectMediaProjectRef": (id, options) => HttpClientRequest.get(`/projectMedia/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ProjectMediaControllerPatchProjectMediaProjectRef": (id, options) => HttpClientRequest.patch(`/projectMedia/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerGetProjectImpactList": (options) => HttpClientRequest.get(`/projectImpacts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectImpactList),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerCreateProjectImpact": (options) => HttpClientRequest.post(`/projectImpacts`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectImpactControllerCreateProjectImpact201),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerGetProjectImpactById": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectImpact),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerDeleteProjectImpactById": (id, options) => HttpClientRequest.del(`/projectImpacts/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerUpdateProjectImpactById": (id, options) => HttpClientRequest.patch(`/projectImpacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectImpact),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerGetProjectImpactAsset": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/asset`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Asset),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerGetProjectImpactAssetRef": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerPatchProjectImpactAssetRef": (id, options) => HttpClientRequest.patch(`/projectImpacts/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerGetProjectImpactProject": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerGetProjectImpactProjectRef": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerPatchProjectImpactProjectRef": (id, options) => HttpClientRequest.patch(`/projectImpacts/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerGetProjectImpactSpaces": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerGetProjectImpactSpacesRef": (id, options) => HttpClientRequest.get(`/projectImpacts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerPostProjectImpactSpacesRef": (id, options) => HttpClientRequest.post(`/projectImpacts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerDeleteProjectImpactSpacesRef": (id, options) => HttpClientRequest.del(`/projectImpacts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ProjectImpactControllerPatchProjectImpactSpacesRef": (id, options) => HttpClientRequest.patch(`/projectImpacts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyList": (options) => HttpClientRequest.get(`/policies`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyList),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerCreatePolicy": (options) => HttpClientRequest.post(`/policies`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyControllerCreatePolicy201),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyById": (id, options) => HttpClientRequest.get(`/policies/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Policy),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerDeletePolicyById": (id, options) => HttpClientRequest.del(`/policies/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PolicyControllerUpdatePolicyById": (id, options) => HttpClientRequest.patch(`/policies/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Policy),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyProvider": (id, options) => HttpClientRequest.get(`/policies/${id}/provider`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Provider),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyProviderRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/provider`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProvider),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerPatchPolicyProviderRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/provider`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProvider),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyTemplate": (id, options) => HttpClientRequest.get(`/policies/${id}/template`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullablePolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyTemplateRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerPatchPolicyTemplateRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyCurrency": (id, options) => HttpClientRequest.get(`/policies/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyCurrencyRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerPatchPolicyCurrencyRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyAssets": (id, options) => HttpClientRequest.get(`/policies/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyAssetsRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerPostPolicyAssetsRef": (id, options) => HttpClientRequest.post(`/policies/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerDeletePolicyAssetsRef": (id, options) => HttpClientRequest.del(`/policies/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerPatchPolicyAssetsRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyAccount": (id, options) => HttpClientRequest.get(`/policies/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyAccountRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerPatchPolicyAccountRef": (id, options) => HttpClientRequest.patch(`/policies/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyTerms": (id, options) => HttpClientRequest.get(`/policies/${id}/terms`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTermList),
            orElse: unexpectedStatus
        }))),
        "PolicyControllerGetPolicyTermsRef": (id, options) => HttpClientRequest.get(`/policies/${id}/relationships/terms`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicyTermList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermList": (options) => HttpClientRequest.get(`/policyTerms`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTermList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerCreatePolicyTerm": (options) => HttpClientRequest.post(`/policyTerms`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTermControllerCreatePolicyTerm201),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermById": (id, options) => HttpClientRequest.get(`/policyTerms/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTerm),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerDeletePolicyTermById": (id, options) => HttpClientRequest.del(`/policyTerms/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerUpdatePolicyTermById": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTerm),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermProvider": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/provider`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Provider),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermProviderRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/provider`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProvider),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermCurrency": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermCurrencyRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerPatchPolicyTermCurrencyRef": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermDeductibles": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/deductibles`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeductibleList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermDeductiblesRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/deductibles`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDeductibleList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermBucketDefinitions": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/bucketDefinitions`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermBucketDefinitionsRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/bucketDefinitions`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermPolicy": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/policy`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Policy),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermPolicyRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/policy`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicy),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerPatchPolicyTermPolicyRef": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}/relationships/policy`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicy),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermAssets": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermAssetsRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerPostPolicyTermAssetsRef": (id, options) => HttpClientRequest.post(`/policyTerms/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerDeletePolicyTermAssetsRef": (id, options) => HttpClientRequest.del(`/policyTerms/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerPatchPolicyTermAssetsRef": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermTemplate": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/template`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullablePolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerGetPolicyTermTemplateRef": (id, options) => HttpClientRequest.get(`/policyTerms/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "PolicyTermControllerPatchPolicyTermTemplateRef": (id, options) => HttpClientRequest.patch(`/policyTerms/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "PhoneNumberControllerGetPhoneNumberList": (options) => HttpClientRequest.get(`/phoneNumbers`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PhoneNumberList),
            orElse: unexpectedStatus
        }))),
        "PhoneNumberControllerCreatePhoneNumber": (options) => HttpClientRequest.post(`/phoneNumbers`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PhoneNumberControllerCreatePhoneNumber201),
            orElse: unexpectedStatus
        }))),
        "PhoneNumberControllerGetPhoneNumberById": (id, options) => HttpClientRequest.get(`/phoneNumbers/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PhoneNumber),
            orElse: unexpectedStatus
        }))),
        "PhoneNumberControllerDeletePhoneNumberById": (id) => HttpClientRequest.del(`/phoneNumbers/${id}`).pipe(withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PhoneNumberControllerUpdatePhoneNumberById": (id, options) => HttpClientRequest.patch(`/phoneNumbers/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PhoneNumber),
            orElse: unexpectedStatus
        }))),
        "PhoneNumberControllerGetPhoneNumberIdentity": (id, options) => HttpClientRequest.get(`/phoneNumbers/${id}/identity`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Identity),
            orElse: unexpectedStatus
        }))),
        "PhoneNumberControllerGetPhoneNumberIdentityRef": (id) => HttpClientRequest.get(`/phoneNumbers/${id}/relationships/identity`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIdentity),
            orElse: unexpectedStatus
        }))),
        "PhoneNumberControllerPatchPhoneNumberIdentityRef": (id, options) => HttpClientRequest.patch(`/phoneNumbers/${id}/relationships/identity`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIdentity),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaList": (options) => HttpClientRequest.get(`/media`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(MediaList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerCreateMedia": (options) => HttpClientRequest.post(`/media`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(MediaControllerCreateMedia201),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaById": (id, options) => HttpClientRequest.get(`/media/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Media),
            orElse: unexpectedStatus
        }))),
        "MediaControllerDeleteMediaById": (id, options) => HttpClientRequest.del(`/media/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "MediaControllerUpdateMediaById": (id, options) => HttpClientRequest.patch(`/media/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Media),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaAccount": (id, options) => HttpClientRequest.get(`/media/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaAccountRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "MediaControllerPatchMediaAccountRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaFile": (id, options) => HttpClientRequest.get(`/media/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(File),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaFileRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFile),
            orElse: unexpectedStatus
        }))),
        "MediaControllerPatchMediaFileRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFile),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaAssets": (id, options) => HttpClientRequest.get(`/media/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaAssetsRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerPostMediaAssetsRef": (id, options) => HttpClientRequest.post(`/media/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerDeleteMediaAssetsRef": (id, options) => HttpClientRequest.del(`/media/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerPatchMediaAssetsRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaSpaces": (id, options) => HttpClientRequest.get(`/media/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaSpacesRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerPostMediaSpacesRef": (id, options) => HttpClientRequest.post(`/media/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerDeleteMediaSpacesRef": (id, options) => HttpClientRequest.del(`/media/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerPatchMediaSpacesRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaProjectAssignments": (id, options) => HttpClientRequest.get(`/media/${id}/projectAssignments`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaProjectAssignmentsRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/projectAssignments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerPostMediaProjectAssignmentsRef": (id, options) => HttpClientRequest.post(`/media/${id}/relationships/projectAssignments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerDeleteMediaProjectAssignmentsRef": (id, options) => HttpClientRequest.del(`/media/${id}/relationships/projectAssignments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerPatchMediaProjectAssignmentsRef": (id, options) => HttpClientRequest.patch(`/media/${id}/relationships/projectAssignments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaEntrySourceAnnotations": (id, options) => HttpClientRequest.get(`/media/${id}/entrySourceAnnotations`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMediaList),
            orElse: unexpectedStatus
        }))),
        "MediaControllerGetMediaEntrySourceAnnotationsRef": (id, options) => HttpClientRequest.get(`/media/${id}/relationships/entrySourceAnnotations`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceMediaList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemList": (options) => HttpClientRequest.get(`/items`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerCreateItem": (options) => HttpClientRequest.post(`/items`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemControllerCreateItem201),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemById": (id, options) => HttpClientRequest.get(`/items/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Item),
            orElse: unexpectedStatus
        }))),
        "ItemControllerDeleteItemById": (id, options) => HttpClientRequest.del(`/items/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ItemControllerUpdateItemById": (id, options) => HttpClientRequest.patch(`/items/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Item),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemMetadata": (id, options) => HttpClientRequest.get(`/items/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemMetadataRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemProject": (id, options) => HttpClientRequest.get(`/items/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableProject),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemProjectRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ItemControllerPatchItemProjectRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemAccount": (id, options) => HttpClientRequest.get(`/items/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemAccountRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ItemControllerPatchItemAccountRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemCurrency": (id, options) => HttpClientRequest.get(`/items/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemCurrencyRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ItemControllerPatchItemCurrencyRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemEntries": (id, options) => HttpClientRequest.get(`/items/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemEntriesRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemAppraisals": (id, options) => HttpClientRequest.get(`/items/${id}/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemAppraisalsRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/appraisals`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemSelectedAppraisal": (id, options) => HttpClientRequest.get(`/items/${id}/selectedAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemControllerPatchItemSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemRelevantAppraisal": (id, options) => HttpClientRequest.get(`/items/${id}/relevantAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/relevantAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemType": (id, options) => HttpClientRequest.get(`/items/${id}/type`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemType),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemTypeRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemType),
            orElse: unexpectedStatus
        }))),
        "ItemControllerPatchItemTypeRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemType),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemAsset": (id, options) => HttpClientRequest.get(`/items/${id}/asset`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAsset),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemAssetRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "ItemControllerPatchItemAssetRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemSpace": (id, options) => HttpClientRequest.get(`/items/${id}/space`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableSpace),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemSpaceRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/space`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedSpace),
            orElse: unexpectedStatus
        }))),
        "ItemControllerPatchItemSpaceRef": (id, options) => HttpClientRequest.patch(`/items/${id}/relationships/space`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedSpace),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemReplaces": (id, options) => HttpClientRequest.get(`/items/${id}/replaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemImpact),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemReplacesRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/replaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemImpact),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemPayments": (id, options) => HttpClientRequest.get(`/items/${id}/payments`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemPaymentsRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/payments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPaymentList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemInvoices": (id, options) => HttpClientRequest.get(`/items/${id}/invoices`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemInvoicesRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/invoices`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedInvoiceList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemEstimates": (id, options) => HttpClientRequest.get(`/items/${id}/estimates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemEstimatesRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/estimates`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimateList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemChangeOrders": (id, options) => HttpClientRequest.get(`/items/${id}/changeOrders`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemChangeOrdersRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemImpacts": (id, options) => HttpClientRequest.get(`/items/${id}/impacts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemImpactList),
            orElse: unexpectedStatus
        }))),
        "ItemControllerGetItemImpactsRef": (id, options) => HttpClientRequest.get(`/items/${id}/relationships/impacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemImpactList),
            orElse: unexpectedStatus
        }))),
        "ItemProductSuggestionControllerGetItemProductSuggestionList": (options) => HttpClientRequest.get(`/itemProductSuggestions`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemProductSuggestionList),
            orElse: unexpectedStatus
        }))),
        "ItemProductSuggestionControllerCreateItemProductSuggestion": (options) => HttpClientRequest.post(`/itemProductSuggestions`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemProductSuggestionControllerCreateItemProductSuggestion201),
            orElse: unexpectedStatus
        }))),
        "ItemProductSuggestionControllerGetItemProductSuggestionById": (id, options) => HttpClientRequest.get(`/itemProductSuggestions/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemProductSuggestion),
            orElse: unexpectedStatus
        }))),
        "ItemProductSuggestionControllerDeleteItemProductSuggestionById": (id, options) => HttpClientRequest.del(`/itemProductSuggestions/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ItemProductSuggestionControllerUpdateItemProductSuggestionById": (id, options) => HttpClientRequest.patch(`/itemProductSuggestions/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemProductSuggestion),
            orElse: unexpectedStatus
        }))),
        "ItemProductSuggestionControllerGetItemProductSuggestionItem": (id, options) => HttpClientRequest.get(`/itemProductSuggestions/${id}/item`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Item),
            orElse: unexpectedStatus
        }))),
        "ItemProductSuggestionControllerGetItemProductSuggestionItemRef": (id, options) => HttpClientRequest.get(`/itemProductSuggestions/${id}/relationships/item`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItem),
            orElse: unexpectedStatus
        }))),
        "ItemProductSuggestionControllerPatchItemProductSuggestionItemRef": (id, options) => HttpClientRequest.patch(`/itemProductSuggestions/${id}/relationships/item`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItem),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionList": (options) => HttpClientRequest.get(`/itemMediaSuggestions`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemMediaSuggestionList),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerCreateItemMediaSuggestion": (options) => HttpClientRequest.post(`/itemMediaSuggestions`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemMediaSuggestionControllerCreateItemMediaSuggestion201),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionById": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemMediaSuggestion),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerDeleteItemMediaSuggestionById": (id, options) => HttpClientRequest.del(`/itemMediaSuggestions/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerUpdateItemMediaSuggestionById": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemMediaSuggestion),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionMedia": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/media`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Media),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionMediaRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/media`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedMedia),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerPatchItemMediaSuggestionMediaRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/media`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedMedia),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionItem": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/item`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItem),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionItemRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/item`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItem),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerPatchItemMediaSuggestionItemRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/item`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItem),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItems": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/existing_items`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemList),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionExistingItemsRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/existing_items`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemList),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerPostItemMediaSuggestionExistingItemsRef": (id, options) => HttpClientRequest.post(`/itemMediaSuggestions/${id}/relationships/existing_items`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemList),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerDeleteItemMediaSuggestionExistingItemsRef": (id, options) => HttpClientRequest.del(`/itemMediaSuggestions/${id}/relationships/existing_items`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemList),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerPatchItemMediaSuggestionExistingItemsRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/existing_items`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemList),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionType": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/type`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemType),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionTypeRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemType),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerPatchItemMediaSuggestionTypeRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemType),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionAsset": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/asset`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAsset),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionAssetRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerPatchItemMediaSuggestionAssetRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionSpace": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/space`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableSpace),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerGetItemMediaSuggestionSpaceRef": (id, options) => HttpClientRequest.get(`/itemMediaSuggestions/${id}/relationships/space`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedSpace),
            orElse: unexpectedStatus
        }))),
        "ItemMediaSuggestionControllerPatchItemMediaSuggestionSpaceRef": (id, options) => HttpClientRequest.patch(`/itemMediaSuggestions/${id}/relationships/space`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedSpace),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactList": (options) => HttpClientRequest.get(`/itemImpacts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemImpactList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerCreateItemImpact": (options) => HttpClientRequest.post(`/itemImpacts`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemImpactControllerCreateItemImpact201),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactById": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemImpact),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerDeleteItemImpactById": (id, options) => HttpClientRequest.del(`/itemImpacts/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerUpdateItemImpactById": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemImpact),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactMetadata": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactMetadataRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactProject": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableProject),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactProjectRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerPatchItemImpactProjectRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactAccount": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactAccountRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerPatchItemImpactAccountRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactCurrency": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactCurrencyRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerPatchItemImpactCurrencyRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactEntries": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactEntriesRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactAppraisals": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactAppraisalsRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/appraisals`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactSelectedAppraisal": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/selectedAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerPatchItemImpactSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactRelevantAppraisal": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relevantAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/relevantAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactItem": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/item`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Item),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactItemRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/item`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItem),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerPatchItemImpactItemRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/item`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItem),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactReplacement": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/replacement`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItem),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactReplacementRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/replacement`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItem),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerPatchItemImpactReplacementRef": (id, options) => HttpClientRequest.patch(`/itemImpacts/${id}/relationships/replacement`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItem),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactPayments": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/payments`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactPaymentsRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/payments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPaymentList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactInvoices": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/invoices`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactInvoicesRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/invoices`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedInvoiceList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactEstimates": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/estimates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactEstimatesRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/estimates`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimateList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactChangeOrders": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/changeOrders`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactChangeOrdersRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactItemType": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/itemType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemType),
            orElse: unexpectedStatus
        }))),
        "ItemImpactControllerGetItemImpactItemTypeRef": (id, options) => HttpClientRequest.get(`/itemImpacts/${id}/relationships/itemType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemType),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentList": (options) => HttpClientRequest.get(`/incidents`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentList),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerCreateIncident": (options) => HttpClientRequest.post(`/incidents`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentControllerCreateIncident201),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentById": (id, options) => HttpClientRequest.get(`/incidents/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Incident),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerDeleteIncidentById": (id, options) => HttpClientRequest.del(`/incidents/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "IncidentControllerUpdateIncidentById": (id, options) => HttpClientRequest.patch(`/incidents/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Incident),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentAccount": (id, options) => HttpClientRequest.get(`/incidents/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentAccountRef": (id, options) => HttpClientRequest.get(`/incidents/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerPatchIncidentAccountRef": (id, options) => HttpClientRequest.patch(`/incidents/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentMediaAttachments": (id, options) => HttpClientRequest.get(`/incidents/${id}/mediaAttachments`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentMediaAttachmentsRef": (id, options) => HttpClientRequest.get(`/incidents/${id}/relationships/mediaAttachments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerPostIncidentMediaAttachmentsRef": (id, options) => HttpClientRequest.post(`/incidents/${id}/relationships/mediaAttachments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerDeleteIncidentMediaAttachmentsRef": (id, options) => HttpClientRequest.del(`/incidents/${id}/relationships/mediaAttachments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerPatchIncidentMediaAttachmentsRef": (id, options) => HttpClientRequest.patch(`/incidents/${id}/relationships/mediaAttachments`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectMediaList),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentType": (id, options) => HttpClientRequest.get(`/incidents/${id}/type`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentType),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentTypeRef": (id, options) => HttpClientRequest.get(`/incidents/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIncidentType),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerPatchIncidentTypeRef": (id, options) => HttpClientRequest.patch(`/incidents/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIncidentType),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentDisaster": (id, options) => HttpClientRequest.get(`/incidents/${id}/disaster`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableDisaster),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerGetIncidentDisasterRef": (id, options) => HttpClientRequest.get(`/incidents/${id}/relationships/disaster`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedDisaster),
            orElse: unexpectedStatus
        }))),
        "IncidentControllerPatchIncidentDisasterRef": (id, options) => HttpClientRequest.patch(`/incidents/${id}/relationships/disaster`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedDisaster),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactList": (options) => HttpClientRequest.get(`/incidentImpacts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentImpactList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerCreateIncidentImpact": (options) => HttpClientRequest.post(`/incidentImpacts`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentImpactControllerCreateIncidentImpact201),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactById": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentImpact),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerDeleteIncidentImpactById": (id, options) => HttpClientRequest.del(`/incidentImpacts/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerUpdateIncidentImpactById": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentImpact),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactAsset": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/asset`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Asset),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactAssetRef": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerPatchIncidentImpactAssetRef": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactProject": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactProjectRef": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerPatchIncidentImpactProjectRef": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactSpaces": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactSpacesRef": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerPostIncidentImpactSpacesRef": (id, options) => HttpClientRequest.post(`/incidentImpacts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerDeleteIncidentImpactSpacesRef": (id, options) => HttpClientRequest.del(`/incidentImpacts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerPatchIncidentImpactSpacesRef": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactPerils": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/perils`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PerilList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerGetIncidentImpactPerilsRef": (id, options) => HttpClientRequest.get(`/incidentImpacts/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerPostIncidentImpactPerilsRef": (id, options) => HttpClientRequest.post(`/incidentImpacts/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerDeleteIncidentImpactPerilsRef": (id, options) => HttpClientRequest.del(`/incidentImpacts/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "IncidentImpactControllerPatchIncidentImpactPerilsRef": (id, options) => HttpClientRequest.patch(`/incidentImpacts/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceList": (options) => HttpClientRequest.get(`/fundingSources`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSourceList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerCreateFundingSource": (options) => HttpClientRequest.post(`/fundingSources`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSourceControllerCreateFundingSource201),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceById": (id, options) => HttpClientRequest.get(`/fundingSources/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerDeleteFundingSourceById": (id, options) => HttpClientRequest.del(`/fundingSources/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerUpdateFundingSourceById": (id, options) => HttpClientRequest.patch(`/fundingSources/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceProject": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceProjectRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerPatchFundingSourceProjectRef": (id, options) => HttpClientRequest.patch(`/fundingSources/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceAccount": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceAccountRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceBuckets": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucketList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceBucketsRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/buckets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucketList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceFundings": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/fundings`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceFundingsRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/fundings`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceContacts": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/contacts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceContactsRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/contacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerPostFundingSourceContactsRef": (id, options) => HttpClientRequest.post(`/fundingSources/${id}/relationships/contacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerDeleteFundingSourceContactsRef": (id, options) => HttpClientRequest.del(`/fundingSources/${id}/relationships/contacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerPatchFundingSourceContactsRef": (id, options) => HttpClientRequest.patch(`/fundingSources/${id}/relationships/contacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceCurrency": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerGetFundingSourceCurrencyRef": (id, options) => HttpClientRequest.get(`/fundingSources/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "FundingSourceControllerPatchFundingSourceCurrencyRef": (id, options) => HttpClientRequest.patch(`/fundingSources/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileList": (options) => HttpClientRequest.get(`/files`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FileList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileById": (id, options) => HttpClientRequest.get(`/files/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(File),
            orElse: unexpectedStatus
        }))),
        "FileControllerDeleteFileById": (id, options) => HttpClientRequest.del(`/files/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "FileControllerUpdateFileById": (id, options) => HttpClientRequest.patch(`/files/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(File),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileAccount": (id, options) => HttpClientRequest.get(`/files/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileAccountRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "FileControllerPatchFileAccountRef": (id, options) => HttpClientRequest.patch(`/files/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileProjects": (id, options) => HttpClientRequest.get(`/files/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileProjectsRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FileControllerPostFileProjectsRef": (id, options) => HttpClientRequest.post(`/files/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FileControllerDeleteFileProjectsRef": (id, options) => HttpClientRequest.del(`/files/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FileControllerPatchFileProjectsRef": (id, options) => HttpClientRequest.patch(`/files/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileAssets": (id, options) => HttpClientRequest.get(`/files/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileAssetsRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "FileControllerPostFileAssetsRef": (id, options) => HttpClientRequest.post(`/files/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "FileControllerDeleteFileAssetsRef": (id, options) => HttpClientRequest.del(`/files/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "FileControllerPatchFileAssetsRef": (id, options) => HttpClientRequest.patch(`/files/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileProcesses": (id, options) => HttpClientRequest.get(`/files/${id}/processes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FileProcessList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileProcessesRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/processes`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFileProcessList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileMedia": (id, options) => HttpClientRequest.get(`/files/${id}/media`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(MediaList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileMediaRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/media`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedMediaList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileDocuments": (id, options) => HttpClientRequest.get(`/files/${id}/documents`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileDocumentsRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/documents`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentList),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileAddedBy": (id, options) => HttpClientRequest.get(`/files/${id}/addedBy`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(User),
            orElse: unexpectedStatus
        }))),
        "FileControllerGetFileAddedByRef": (id, options) => HttpClientRequest.get(`/files/${id}/relationships/addedBy`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedUser),
            orElse: unexpectedStatus
        }))),
        "FileProcessControllerGetFileProcessList": (options) => HttpClientRequest.get(`/fileProcesses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FileProcessList),
            orElse: unexpectedStatus
        }))),
        "FileProcessControllerGetFileProcessById": (id, options) => HttpClientRequest.get(`/fileProcesses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FileProcess),
            orElse: unexpectedStatus
        }))),
        "FileProcessControllerGetFileProcessFile": (id, options) => HttpClientRequest.get(`/fileProcesses/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(File),
            orElse: unexpectedStatus
        }))),
        "FileProcessControllerGetFileProcessFileRef": (id, options) => HttpClientRequest.get(`/fileProcesses/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFile),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryList": (options) => HttpClientRequest.get(`/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "EntryControllerCreateEntry": (options) => HttpClientRequest.post(`/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryControllerCreateEntry201),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryById": (id, options) => HttpClientRequest.get(`/entries/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Entry),
            orElse: unexpectedStatus
        }))),
        "EntryControllerDeleteEntryById": (id, options) => HttpClientRequest.del(`/entries/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "EntryControllerUpdateEntryById": (id, options) => HttpClientRequest.patch(`/entries/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Entry),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntrySource": (id, options) => HttpClientRequest.get(`/entries/${id}/source`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntrySourceRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/source`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "EntryControllerPatchEntrySourceRef": (id, options) => HttpClientRequest.patch(`/entries/${id}/relationships/source`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryBucket": (id, options) => HttpClientRequest.get(`/entries/${id}/bucket`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucket),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryBucketRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/bucket`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "EntryControllerPatchEntryBucketRef": (id, options) => HttpClientRequest.patch(`/entries/${id}/relationships/bucket`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntrySubBucket": (id, options) => HttpClientRequest.get(`/entries/${id}/subBucket`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableBaseSubBucket),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntrySubBucketRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/subBucket`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBaseSubBucket),
            orElse: unexpectedStatus
        }))),
        "EntryControllerPatchEntrySubBucketRef": (id, options) => HttpClientRequest.patch(`/entries/${id}/relationships/subBucket`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBaseSubBucket),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryFundingSource": (id, options) => HttpClientRequest.get(`/entries/${id}/fundingSource`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryFundingSourceRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/fundingSource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryProject": (id, options) => HttpClientRequest.get(`/entries/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryProjectRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryAccount": (id, options) => HttpClientRequest.get(`/entries/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryAccountRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryCurrency": (id, options) => HttpClientRequest.get(`/entries/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "EntryControllerGetEntryCurrencyRef": (id, options) => HttpClientRequest.get(`/entries/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceList": (options) => HttpClientRequest.get(`/entrySources`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceList),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerCreateEntrySource": (options) => HttpClientRequest.post(`/entrySources`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceControllerCreateEntrySource201),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceById": (id, options) => HttpClientRequest.get(`/entrySources/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerDeleteEntrySourceById": (id, options) => HttpClientRequest.del(`/entrySources/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerUpdateEntrySourceById": (id, options) => HttpClientRequest.patch(`/entrySources/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceMetadata": (id, options) => HttpClientRequest.get(`/entrySources/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceMetadataRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceProject": (id, options) => HttpClientRequest.get(`/entrySources/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableProject),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceProjectRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerPatchEntrySourceProjectRef": (id, options) => HttpClientRequest.patch(`/entrySources/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceAccount": (id, options) => HttpClientRequest.get(`/entrySources/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceAccountRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerPatchEntrySourceAccountRef": (id, options) => HttpClientRequest.patch(`/entrySources/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceCurrency": (id, options) => HttpClientRequest.get(`/entrySources/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceCurrencyRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerPatchEntrySourceCurrencyRef": (id, options) => HttpClientRequest.patch(`/entrySources/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceEntries": (id, options) => HttpClientRequest.get(`/entrySources/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceEntriesRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceAppraisals": (id, options) => HttpClientRequest.get(`/entrySources/${id}/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceAppraisalsRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/appraisals`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemAppraisalList),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceSelectedAppraisal": (id, options) => HttpClientRequest.get(`/entrySources/${id}/selectedAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerPatchEntrySourceSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/entrySources/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceRelevantAppraisal": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relevantAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "EntrySourceControllerGetEntrySourceRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/entrySources/${id}/relationships/relevantAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedItemAppraisal),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataList": (options) => HttpClientRequest.get(`/entrySourceMetadatas`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMetadataList),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataById": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMetadata),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataObject": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/object`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataObjectRef": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/relationships/object`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataAccount": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataAccountRef": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataProject": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableProject),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataProjectRef": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProject),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataCurrency": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMetadataControllerGetEntrySourceMetadataCurrencyRef": (id, options) => HttpClientRequest.get(`/entrySourceMetadatas/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerGetEntrySourceMediaList": (options) => HttpClientRequest.get(`/entrySourceMedia`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMediaList),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerCreateEntrySourceMedia": (options) => HttpClientRequest.post(`/entrySourceMedia`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMediaControllerCreateEntrySourceMedia201),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerGetEntrySourceMediaById": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMedia),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerDeleteEntrySourceMediaById": (id, options) => HttpClientRequest.del(`/entrySourceMedia/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerUpdateEntrySourceMediaById": (id, options) => HttpClientRequest.patch(`/entrySourceMedia/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceMedia),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerGetEntrySourceMediaEntrySource": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}/entrySource`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerGetEntrySourceMediaEntrySourceRef": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}/relationships/entrySource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerPatchEntrySourceMediaEntrySourceRef": (id, options) => HttpClientRequest.patch(`/entrySourceMedia/${id}/relationships/entrySource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerGetEntrySourceMediaMedia": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}/media`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Media),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerGetEntrySourceMediaMediaRef": (id, options) => HttpClientRequest.get(`/entrySourceMedia/${id}/relationships/media`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedMedia),
            orElse: unexpectedStatus
        }))),
        "EntrySourceMediaControllerPatchEntrySourceMediaMediaRef": (id, options) => HttpClientRequest.patch(`/entrySourceMedia/${id}/relationships/media`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedMedia),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementList": (options) => HttpClientRequest.get(`/endorsements`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerCreateEndorsement": (options) => HttpClientRequest.post(`/endorsements`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementControllerCreateEndorsement201),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementById": (id, options) => HttpClientRequest.get(`/endorsements/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Endorsement),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerDeleteEndorsementById": (id, options) => HttpClientRequest.del(`/endorsements/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerUpdateEndorsementById": (id, options) => HttpClientRequest.patch(`/endorsements/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Endorsement),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementPolicyTerm": (id, options) => HttpClientRequest.get(`/endorsements/${id}/policyTerm`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTerm),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementPolicyTermRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/policyTerm`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicyTerm),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerPatchEndorsementPolicyTermRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/policyTerm`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicyTerm),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementTemplate": (id, options) => HttpClientRequest.get(`/endorsements/${id}/template`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableEndorsementTemplate),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementTemplateRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedEndorsementTemplate),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerPatchEndorsementTemplateRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedEndorsementTemplate),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementCoverages": (id, options) => HttpClientRequest.get(`/endorsements/${id}/coverages`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementCoveragesRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/coverages`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerPostEndorsementCoveragesRef": (id, options) => HttpClientRequest.post(`/endorsements/${id}/relationships/coverages`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerDeleteEndorsementCoveragesRef": (id, options) => HttpClientRequest.del(`/endorsements/${id}/relationships/coverages`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerPatchEndorsementCoveragesRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/coverages`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementSubCoverages": (id, options) => HttpClientRequest.get(`/endorsements/${id}/subCoverages`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementSubCoveragesRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/subCoverages`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerPostEndorsementSubCoveragesRef": (id, options) => HttpClientRequest.post(`/endorsements/${id}/relationships/subCoverages`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerDeleteEndorsementSubCoveragesRef": (id, options) => HttpClientRequest.del(`/endorsements/${id}/relationships/subCoverages`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerPatchEndorsementSubCoveragesRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/subCoverages`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubCoverageList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementPerils": (id, options) => HttpClientRequest.get(`/endorsements/${id}/perils`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PerilList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerGetEndorsementPerilsRef": (id, options) => HttpClientRequest.get(`/endorsements/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerPostEndorsementPerilsRef": (id, options) => HttpClientRequest.post(`/endorsements/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerDeleteEndorsementPerilsRef": (id, options) => HttpClientRequest.del(`/endorsements/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "EndorsementControllerPatchEndorsementPerilsRef": (id, options) => HttpClientRequest.patch(`/endorsements/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "EmailAddressControllerGetEmailAddressList": (options) => HttpClientRequest.get(`/emailAddresses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EmailAddressList),
            orElse: unexpectedStatus
        }))),
        "EmailAddressControllerCreateEmailAddress": (options) => HttpClientRequest.post(`/emailAddresses`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EmailAddressControllerCreateEmailAddress201),
            orElse: unexpectedStatus
        }))),
        "EmailAddressControllerGetEmailAddressById": (id, options) => HttpClientRequest.get(`/emailAddresses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EmailAddress),
            orElse: unexpectedStatus
        }))),
        "EmailAddressControllerDeleteEmailAddressById": (id) => HttpClientRequest.del(`/emailAddresses/${id}`).pipe(withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "EmailAddressControllerUpdateEmailAddressById": (id, options) => HttpClientRequest.patch(`/emailAddresses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EmailAddress),
            orElse: unexpectedStatus
        }))),
        "EmailAddressControllerGetEmailAddressIdentity": (id, options) => HttpClientRequest.get(`/emailAddresses/${id}/identity`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Identity),
            orElse: unexpectedStatus
        }))),
        "EmailAddressControllerGetEmailAddressIdentityRef": (id) => HttpClientRequest.get(`/emailAddresses/${id}/relationships/identity`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIdentity),
            orElse: unexpectedStatus
        }))),
        "EmailAddressControllerPatchEmailAddressIdentityRef": (id, options) => HttpClientRequest.patch(`/emailAddresses/${id}/relationships/identity`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIdentity),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingList": (options) => HttpClientRequest.get(`/dwellings`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DwellingList),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerCreateDwelling": (options) => HttpClientRequest.post(`/dwellings`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DwellingControllerCreateDwelling201),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingById": (id, options) => HttpClientRequest.get(`/dwellings/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Dwelling),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerDeleteDwellingById": (id, options) => HttpClientRequest.del(`/dwellings/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "DwellingControllerUpdateDwellingById": (id, options) => HttpClientRequest.patch(`/dwellings/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Dwelling),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingAssetType": (id, options) => HttpClientRequest.get(`/dwellings/${id}/assetType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetType),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingAssetTypeRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/assetType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetType),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerPatchDwellingAssetTypeRef": (id, options) => HttpClientRequest.patch(`/dwellings/${id}/relationships/assetType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetType),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingAccount": (id, options) => HttpClientRequest.get(`/dwellings/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingAccountRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerPatchDwellingAccountRef": (id, options) => HttpClientRequest.patch(`/dwellings/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingAppraisals": (id, options) => HttpClientRequest.get(`/dwellings/${id}/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAppraisalList),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingAppraisalsRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/appraisals`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetAppraisalList),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingSelectedAppraisal": (id, options) => HttpClientRequest.get(`/dwellings/${id}/selectedAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerPatchDwellingSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/dwellings/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingRelevantAppraisal": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relevantAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/relevantAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingAddress": (id, options) => HttpClientRequest.get(`/dwellings/${id}/address`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Address),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerGetDwellingAddressRef": (id, options) => HttpClientRequest.get(`/dwellings/${id}/relationships/address`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAddress),
            orElse: unexpectedStatus
        }))),
        "DwellingControllerPatchDwellingAddressRef": (id, options) => HttpClientRequest.patch(`/dwellings/${id}/relationships/address`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAddress),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerGetDeductibleList": (options) => HttpClientRequest.get(`/deductibles`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeductibleList),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerCreateDeductible": (options) => HttpClientRequest.post(`/deductibles`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeductibleControllerCreateDeductible201),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerGetDeductibleById": (id, options) => HttpClientRequest.get(`/deductibles/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Deductible),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerDeleteDeductibleById": (id) => HttpClientRequest.del(`/deductibles/${id}`).pipe(withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerUpdateDeductibleById": (id, options) => HttpClientRequest.patch(`/deductibles/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Deductible),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerGetDeductibleClaimTarget": (id, options) => HttpClientRequest.get(`/deductibles/${id}/claimTarget`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimTarget),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerGetDeductibleClaimTargetRef": (id) => HttpClientRequest.get(`/deductibles/${id}/relationships/claimTarget`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimTarget),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerPatchDeductibleClaimTargetRef": (id, options) => HttpClientRequest.patch(`/deductibles/${id}/relationships/claimTarget`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimTarget),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerGetDeductibleBucketDefinitions": (id, options) => HttpClientRequest.get(`/deductibles/${id}/bucketDefinitions`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerGetDeductibleBucketDefinitionsRef": (id) => HttpClientRequest.get(`/deductibles/${id}/relationships/bucketDefinitions`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerGetDeductibleClaimDeductibles": (id, options) => HttpClientRequest.get(`/deductibles/${id}/claimDeductibles`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimDeductibleList),
            orElse: unexpectedStatus
        }))),
        "DeductibleControllerGetDeductibleClaimDeductiblesRef": (id) => HttpClientRequest.get(`/deductibles/${id}/relationships/claimDeductibles`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimDeductibleList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageList": (options) => HttpClientRequest.get(`/coverages`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerCreateCoverage": (options) => HttpClientRequest.post(`/coverages`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageControllerCreateCoverage201),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageById": (id, options) => HttpClientRequest.get(`/coverages/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Coverage),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerDeleteCoverageById": (id, options) => HttpClientRequest.del(`/coverages/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "CoverageControllerUpdateCoverageById": (id, options) => HttpClientRequest.patch(`/coverages/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Coverage),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageBasis": (id, options) => HttpClientRequest.get(`/coverages/${id}/basis`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTerm),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageBasisRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/basis`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicyTerm),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPatchCoverageBasisRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/basis`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicyTerm),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageBucketType": (id, options) => HttpClientRequest.get(`/coverages/${id}/bucketType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableBucketType),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageBucketTypeRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/bucketType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPatchCoverageBucketTypeRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/bucketType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageDeductible": (id, options) => HttpClientRequest.get(`/coverages/${id}/deductible`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableDeductible),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageDeductibleRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/deductible`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedDeductible),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPatchCoverageDeductibleRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/deductible`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedDeductible),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageSubBucketDefinitions": (id, options) => HttpClientRequest.get(`/coverages/${id}/subBucketDefinitions`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageSubBucketDefinitionsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/subBucketDefinitions`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubBucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageBuckets": (id, options) => HttpClientRequest.get(`/coverages/${id}/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageBucketsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/buckets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageAssets": (id, options) => HttpClientRequest.get(`/coverages/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageAssetsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPostCoverageAssetsRef": (id, options) => HttpClientRequest.post(`/coverages/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerDeleteCoverageAssetsRef": (id, options) => HttpClientRequest.del(`/coverages/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPatchCoverageAssetsRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageTemplate": (id, options) => HttpClientRequest.get(`/coverages/${id}/template`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableCoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageTemplateRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedCoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPatchCoverageTemplateRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedCoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageGroup": (id, options) => HttpClientRequest.get(`/coverages/${id}/group`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableCoverageGroup),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageGroupRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/group`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedCoverageGroup),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPatchCoverageGroupRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/group`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedCoverageGroup),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoveragePerils": (id, options) => HttpClientRequest.get(`/coverages/${id}/perils`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PerilList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoveragePerilsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPostCoveragePerilsRef": (id, options) => HttpClientRequest.post(`/coverages/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerDeleteCoveragePerilsRef": (id, options) => HttpClientRequest.del(`/coverages/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerPatchCoveragePerilsRef": (id, options) => HttpClientRequest.patch(`/coverages/${id}/relationships/perils`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageEndorsements": (id, options) => HttpClientRequest.get(`/coverages/${id}/endorsements`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementList),
            orElse: unexpectedStatus
        }))),
        "CoverageControllerGetCoverageEndorsementsRef": (id, options) => HttpClientRequest.get(`/coverages/${id}/relationships/endorsements`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEndorsementList),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerGetCoverageGroupList": (options) => HttpClientRequest.get(`/coverageGroups`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageGroupList),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerCreateCoverageGroup": (options) => HttpClientRequest.post(`/coverageGroups`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageGroupControllerCreateCoverageGroup201),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerGetCoverageGroupById": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageGroup),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerDeleteCoverageGroupById": (id, options) => HttpClientRequest.del(`/coverageGroups/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerUpdateCoverageGroupById": (id, options) => HttpClientRequest.patch(`/coverageGroups/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageGroup),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerGetCoverageGroupPolicyTerm": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}/policyTerm`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTerm),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerGetCoverageGroupPolicyTermRef": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}/relationships/policyTerm`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicyTerm),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerPatchCoverageGroupPolicyTermRef": (id, options) => HttpClientRequest.patch(`/coverageGroups/${id}/relationships/policyTerm`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicyTerm),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerGetCoverageGroupTemplate": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}/template`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableCoverageGroupTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerGetCoverageGroupTemplateRef": (id, options) => HttpClientRequest.get(`/coverageGroups/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedCoverageGroupTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupControllerPatchCoverageGroupTemplateRef": (id, options) => HttpClientRequest.patch(`/coverageGroups/${id}/relationships/template`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedCoverageGroupTemplate),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimList": (options) => HttpClientRequest.get(`/claims`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerCreateClaim": (options) => HttpClientRequest.post(`/claims`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimControllerCreateClaim201),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimById": (id, options) => HttpClientRequest.get(`/claims/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Claim),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerDeleteClaimById": (id, options) => HttpClientRequest.del(`/claims/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ClaimControllerUpdateClaimById": (id, options) => HttpClientRequest.patch(`/claims/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Claim),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimProject": (id, options) => HttpClientRequest.get(`/claims/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimProjectRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerPatchClaimProjectRef": (id, options) => HttpClientRequest.patch(`/claims/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimAccount": (id, options) => HttpClientRequest.get(`/claims/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimAccountRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimBuckets": (id, options) => HttpClientRequest.get(`/claims/${id}/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucketList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimBucketsRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/buckets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucketList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimFundings": (id, options) => HttpClientRequest.get(`/claims/${id}/fundings`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimFundingsRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/fundings`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimContacts": (id, options) => HttpClientRequest.get(`/claims/${id}/contacts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimContactsRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/contacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerPostClaimContactsRef": (id, options) => HttpClientRequest.post(`/claims/${id}/relationships/contacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerDeleteClaimContactsRef": (id, options) => HttpClientRequest.del(`/claims/${id}/relationships/contacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerPatchClaimContactsRef": (id, options) => HttpClientRequest.patch(`/claims/${id}/relationships/contacts`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimCurrency": (id, options) => HttpClientRequest.get(`/claims/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimCurrencyRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerPatchClaimCurrencyRef": (id, options) => HttpClientRequest.patch(`/claims/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimTarget": (id, options) => HttpClientRequest.get(`/claims/${id}/target`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimTarget),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimTargetRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/target`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimTarget),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerPatchClaimTargetRef": (id, options) => HttpClientRequest.patch(`/claims/${id}/relationships/target`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimTarget),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimProvider": (id, options) => HttpClientRequest.get(`/claims/${id}/provider`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Provider),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimProviderRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/provider`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProvider),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimDeductibles": (id, options) => HttpClientRequest.get(`/claims/${id}/deductibles`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeductibleList),
            orElse: unexpectedStatus
        }))),
        "ClaimControllerGetClaimDeductiblesRef": (id, options) => HttpClientRequest.get(`/claims/${id}/relationships/deductibles`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDeductibleList),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleList": (options) => HttpClientRequest.get(`/claimDeductibles`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimDeductibleList),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerCreateClaimDeductible": (options) => HttpClientRequest.post(`/claimDeductibles`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimDeductibleControllerCreateClaimDeductible201),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleById": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimDeductible),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerDeleteClaimDeductibleById": (id, options) => HttpClientRequest.del(`/claimDeductibles/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerUpdateClaimDeductibleById": (id, options) => HttpClientRequest.patch(`/claimDeductibles/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimDeductible),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleContext": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/context`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Deductible),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleContextRef": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/relationships/context`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDeductible),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerPatchClaimDeductibleContextRef": (id, options) => HttpClientRequest.patch(`/claimDeductibles/${id}/relationships/context`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDeductible),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleClaim": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/claim`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Claim),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleClaimRef": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/relationships/claim`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaim),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerPatchClaimDeductibleClaimRef": (id, options) => HttpClientRequest.patch(`/claimDeductibles/${id}/relationships/claim`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaim),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleTarget": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/target`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimTarget),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleTargetRef": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/relationships/target`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimTarget),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleBuckets": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketList),
            orElse: unexpectedStatus
        }))),
        "ClaimDeductibleControllerGetClaimDeductibleBucketsRef": (id, options) => HttpClientRequest.get(`/claimDeductibles/${id}/relationships/buckets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketList),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketList": (options) => HttpClientRequest.get(`/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketList),
            orElse: unexpectedStatus
        }))),
        "BucketControllerCreateBucket": (options) => HttpClientRequest.post(`/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketControllerCreateBucket201),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketById": (id, options) => HttpClientRequest.get(`/buckets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Bucket),
            orElse: unexpectedStatus
        }))),
        "BucketControllerDeleteBucketById": (id, options) => HttpClientRequest.del(`/buckets/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "BucketControllerUpdateBucketById": (id, options) => HttpClientRequest.patch(`/buckets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Bucket),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketType": (id, options) => HttpClientRequest.get(`/buckets/${id}/type`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableBucketType),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketTypeRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "BucketControllerPatchBucketTypeRef": (id, options) => HttpClientRequest.patch(`/buckets/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketFundingSource": (id, options) => HttpClientRequest.get(`/buckets/${id}/fundingSource`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketFundingSourceRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/fundingSource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "BucketControllerPatchBucketFundingSourceRef": (id, options) => HttpClientRequest.patch(`/buckets/${id}/relationships/fundingSource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketMetadata": (id, options) => HttpClientRequest.get(`/buckets/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketMetadataRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketProject": (id, options) => HttpClientRequest.get(`/buckets/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketProjectRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketAccount": (id, options) => HttpClientRequest.get(`/buckets/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketAccountRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketEntries": (id, options) => HttpClientRequest.get(`/buckets/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketEntriesRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketSubBuckets": (id, options) => HttpClientRequest.get(`/buckets/${id}/subBuckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucketList),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketSubBucketsRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/subBuckets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseSubBucketList),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketFundings": (id, options) => HttpClientRequest.get(`/buckets/${id}/fundings`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketFundingList),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketFundingsRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/fundings`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketFundingList),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketDefinition": (id, options) => HttpClientRequest.get(`/buckets/${id}/definition`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketDefinition),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketDefinitionRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/definition`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "BucketControllerPatchBucketDefinitionRef": (id, options) => HttpClientRequest.patch(`/buckets/${id}/relationships/definition`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketDefinition),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketDeductible": (id, options) => HttpClientRequest.get(`/buckets/${id}/deductible`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Deductible),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketDeductibleRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/deductible`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDeductible),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketClaimDeductible": (id, options) => HttpClientRequest.get(`/buckets/${id}/claimDeductible`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimDeductible),
            orElse: unexpectedStatus
        }))),
        "BucketControllerGetBucketClaimDeductibleRef": (id, options) => HttpClientRequest.get(`/buckets/${id}/relationships/claimDeductible`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimDeductible),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingList": (options) => HttpClientRequest.get(`/bucketFundings`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketFundingList),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerCreateBucketFunding": (options) => HttpClientRequest.post(`/bucketFundings`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketFundingControllerCreateBucketFunding201),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingById": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketFunding),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerDeleteBucketFundingById": (id, options) => HttpClientRequest.del(`/bucketFundings/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerUpdateBucketFundingById": (id, options) => HttpClientRequest.patch(`/bucketFundings/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketFunding),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingFunding": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/funding`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Funding),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingFundingRef": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/relationships/funding`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFunding),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerPatchBucketFundingFundingRef": (id, options) => HttpClientRequest.patch(`/bucketFundings/${id}/relationships/funding`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFunding),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingBucket": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/bucket`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucket),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingBucketRef": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/relationships/bucket`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerPatchBucketFundingBucketRef": (id, options) => HttpClientRequest.patch(`/bucketFundings/${id}/relationships/bucket`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingFundingSource": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/fundingSource`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingFundingSourceRef": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/relationships/fundingSource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingCurrency": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "BucketFundingControllerGetBucketFundingCurrencyRef": (id, options) => HttpClientRequest.get(`/bucketFundings/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionList": (options) => HttpClientRequest.get(`/bucketDefinitions`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerCreateBucketDefinition": (options) => HttpClientRequest.post(`/bucketDefinitions`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketDefinitionControllerCreateBucketDefinition201),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionById": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketDefinition),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerDeleteBucketDefinitionById": (id) => HttpClientRequest.del(`/bucketDefinitions/${id}`).pipe(withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerUpdateBucketDefinitionById": (id, options) => HttpClientRequest.patch(`/bucketDefinitions/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketDefinition),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionBasis": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/basis`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ClaimTarget),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionBasisRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/basis`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimTarget),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerPatchBucketDefinitionBasisRef": (id, options) => HttpClientRequest.patch(`/bucketDefinitions/${id}/relationships/basis`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedClaimTarget),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionBucketType": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/bucketType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableBucketType),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionBucketTypeRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/bucketType`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerPatchBucketDefinitionBucketTypeRef": (id, options) => HttpClientRequest.patch(`/bucketDefinitions/${id}/relationships/bucketType`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionDeductible": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/deductible`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableDeductible),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionDeductibleRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/deductible`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedDeductible),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerPatchBucketDefinitionDeductibleRef": (id, options) => HttpClientRequest.patch(`/bucketDefinitions/${id}/relationships/deductible`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedDeductible),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitions": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/subBucketDefinitions`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubBucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionSubBucketDefinitionsRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/subBucketDefinitions`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubBucketDefinitionList),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionBuckets": (id, options) => HttpClientRequest.get(`/bucketDefinitions/${id}/buckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketList),
            orElse: unexpectedStatus
        }))),
        "BucketDefinitionControllerGetBucketDefinitionBucketsRef": (id) => HttpClientRequest.get(`/bucketDefinitions/${id}/relationships/buckets`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketList),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketList": (options) => HttpClientRequest.get(`/baseSubBuckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucketList),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerCreateBaseSubBucket": (options) => HttpClientRequest.post(`/baseSubBuckets`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucketControllerCreateBaseSubBucket201),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketById": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucket),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerDeleteBaseSubBucketById": (id, options) => HttpClientRequest.del(`/baseSubBuckets/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerUpdateBaseSubBucketById": (id, options) => HttpClientRequest.patch(`/baseSubBuckets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucket),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketParent": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/parent`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucket),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketParentRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/parent`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerPatchBaseSubBucketParentRef": (id, options) => HttpClientRequest.patch(`/baseSubBuckets/${id}/relationships/parent`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketMetadata": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketMetadataRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseSubBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketFundingSource": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/fundingSource`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketFundingSourceRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/fundingSource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketProject": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketProjectRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketAccount": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketAccountRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketEntries": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketControllerGetBaseSubBucketEntriesRef": (id, options) => HttpClientRequest.get(`/baseSubBuckets/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataList": (options) => HttpClientRequest.get(`/baseSubBucketMetadatas`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucketMetadataList),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataById": (id, options) => HttpClientRequest.get(`/baseSubBucketMetadatas/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObject": (id, options) => HttpClientRequest.get(`/baseSubBucketMetadatas/${id}/object`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucket),
            orElse: unexpectedStatus
        }))),
        "BaseSubBucketMetadataControllerGetBaseSubBucketMetadataObjectRef": (id, options) => HttpClientRequest.get(`/baseSubBucketMetadatas/${id}/relationships/object`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketList": (options) => HttpClientRequest.get(`/baseBuckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucketList),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerCreateBaseBucket": (options) => HttpClientRequest.post(`/baseBuckets`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucketControllerCreateBaseBucket201),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketById": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucket),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerDeleteBaseBucketById": (id, options) => HttpClientRequest.del(`/baseBuckets/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerUpdateBaseBucketById": (id, options) => HttpClientRequest.patch(`/baseBuckets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucket),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketType": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/type`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableBucketType),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketTypeRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerPatchBaseBucketTypeRef": (id, options) => HttpClientRequest.patch(`/baseBuckets/${id}/relationships/type`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketFundingSource": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/fundingSource`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketFundingSourceRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/fundingSource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerPatchBaseBucketFundingSourceRef": (id, options) => HttpClientRequest.patch(`/baseBuckets/${id}/relationships/fundingSource`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketMetadata": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/metadata`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketMetadataRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/metadata`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketProject": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/project`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Project),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketProjectRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/project`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProject),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketAccount": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketAccountRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketEntries": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/entries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntryList),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketEntriesRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/entries`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntryList),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketSubBuckets": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/subBuckets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseSubBucketList),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketSubBucketsRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/subBuckets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseSubBucketList),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketFundings": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/fundings`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketFundingList),
            orElse: unexpectedStatus
        }))),
        "BaseBucketControllerGetBaseBucketFundingsRef": (id, options) => HttpClientRequest.get(`/baseBuckets/${id}/relationships/fundings`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketFundingList),
            orElse: unexpectedStatus
        }))),
        "BaseBucketMetadataControllerGetBaseBucketMetadataList": (options) => HttpClientRequest.get(`/baseBucketMetadatas`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucketMetadataList),
            orElse: unexpectedStatus
        }))),
        "BaseBucketMetadataControllerGetBaseBucketMetadataById": (id, options) => HttpClientRequest.get(`/baseBucketMetadatas/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucketMetadata),
            orElse: unexpectedStatus
        }))),
        "BaseBucketMetadataControllerGetBaseBucketMetadataObject": (id, options) => HttpClientRequest.get(`/baseBucketMetadatas/${id}/object`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseBucket),
            orElse: unexpectedStatus
        }))),
        "BaseBucketMetadataControllerGetBaseBucketMetadataObjectRef": (id, options) => HttpClientRequest.get(`/baseBucketMetadatas/${id}/relationships/object`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseBucket),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetList": (options) => HttpClientRequest.get(`/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "AssetControllerCreateAsset": (options) => HttpClientRequest.post(`/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetControllerCreateAsset201),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetById": (id, options) => HttpClientRequest.get(`/assets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Asset),
            orElse: unexpectedStatus
        }))),
        "AssetControllerDeleteAssetById": (id, options) => HttpClientRequest.del(`/assets/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "AssetControllerUpdateAssetById": (id, options) => HttpClientRequest.patch(`/assets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Asset),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetAssetType": (id, options) => HttpClientRequest.get(`/assets/${id}/assetType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetType),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetAssetTypeRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/assetType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetType),
            orElse: unexpectedStatus
        }))),
        "AssetControllerPatchAssetAssetTypeRef": (id, options) => HttpClientRequest.patch(`/assets/${id}/relationships/assetType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetType),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetAccount": (id, options) => HttpClientRequest.get(`/assets/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetAccountRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AssetControllerPatchAssetAccountRef": (id, options) => HttpClientRequest.patch(`/assets/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetAppraisals": (id, options) => HttpClientRequest.get(`/assets/${id}/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAppraisalList),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetAppraisalsRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/appraisals`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetAppraisalList),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetSelectedAppraisal": (id, options) => HttpClientRequest.get(`/assets/${id}/selectedAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetSelectedAppraisalRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "AssetControllerPatchAssetSelectedAppraisalRef": (id, options) => HttpClientRequest.patch(`/assets/${id}/relationships/selectedAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetRelevantAppraisal": (id, options) => HttpClientRequest.get(`/assets/${id}/relevantAppraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "AssetControllerGetAssetRelevantAppraisalRef": (id, options) => HttpClientRequest.get(`/assets/${id}/relationships/relevantAppraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "AddressControllerGetAddressList": (options) => HttpClientRequest.get(`/addresses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AddressList),
            orElse: unexpectedStatus
        }))),
        "AddressControllerCreateAddress": (options) => HttpClientRequest.post(`/addresses`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AddressControllerCreateAddress201),
            orElse: unexpectedStatus
        }))),
        "AddressControllerGetAddressById": (id, options) => HttpClientRequest.get(`/addresses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Address),
            orElse: unexpectedStatus
        }))),
        "AddressControllerDeleteAddressById": (id, options) => HttpClientRequest.del(`/addresses/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "AddressControllerUpdateAddressById": (id, options) => HttpClientRequest.patch(`/addresses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Address),
            orElse: unexpectedStatus
        }))),
        "AddressControllerGetAddressAccount": (id, options) => HttpClientRequest.get(`/addresses/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "AddressControllerGetAddressAccountRef": (id, options) => HttpClientRequest.get(`/addresses/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AddressControllerPatchAddressAccountRef": (id, options) => HttpClientRequest.patch(`/addresses/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AddressControllerGetAddressCountry": (id, options) => HttpClientRequest.get(`/addresses/${id}/country`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Country),
            orElse: unexpectedStatus
        }))),
        "AddressControllerGetAddressCountryRef": (id, options) => HttpClientRequest.get(`/addresses/${id}/relationships/country`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCountry),
            orElse: unexpectedStatus
        }))),
        "AddressControllerPatchAddressCountryRef": (id, options) => HttpClientRequest.patch(`/addresses/${id}/relationships/country`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCountry),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountById": (id, options) => HttpClientRequest.get(`/accounts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "AccountControllerUpdateAccountById": (id, options) => HttpClientRequest.patch(`/accounts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountOwner": (id, options) => HttpClientRequest.get(`/accounts/${id}/owner`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(User),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountOwnerRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/owner`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedUser),
            orElse: unexpectedStatus
        }))),
        "AccountControllerPatchAccountOwnerRef": (id, options) => HttpClientRequest.patch(`/accounts/${id}/relationships/owner`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedUser),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountProjects": (id, options) => HttpClientRequest.get(`/accounts/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountProjectsRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/projects`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountAssets": (id, options) => HttpClientRequest.get(`/accounts/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountAssetsRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/assets`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountUserRoles": (id, options) => HttpClientRequest.get(`/accounts/${id}/userRoles`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserAccountRoleList),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountUserRolesRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/userRoles`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedUserAccountRoleList),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountDefaultCurrency": (id, options) => HttpClientRequest.get(`/accounts/${id}/defaultCurrency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "AccountControllerGetAccountDefaultCurrencyRef": (id) => HttpClientRequest.get(`/accounts/${id}/relationships/defaultCurrency`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "AccountControllerPatchAccountDefaultCurrencyRef": (id, options) => HttpClientRequest.patch(`/accounts/${id}/relationships/defaultCurrency`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerGetAccountProviderList": (options) => HttpClientRequest.get(`/accountProviders`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProviderList),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerCreateAccountProvider": (options) => HttpClientRequest.post(`/accountProviders`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProviderControllerCreateAccountProvider201),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerGetAccountProviderById": (id, options) => HttpClientRequest.get(`/accountProviders/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProvider),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerDeleteAccountProviderById": (id, options) => HttpClientRequest.del(`/accountProviders/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerUpdateAccountProviderById": (id, options) => HttpClientRequest.patch(`/accountProviders/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProvider),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerGetAccountProviderAccount": (id, options) => HttpClientRequest.get(`/accountProviders/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerGetAccountProviderAccountRef": (id, options) => HttpClientRequest.get(`/accountProviders/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerPatchAccountProviderAccountRef": (id, options) => HttpClientRequest.patch(`/accountProviders/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerGetAccountProviderProvider": (id, options) => HttpClientRequest.get(`/accountProviders/${id}/provider`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableProvider),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerGetAccountProviderProviderRef": (id, options) => HttpClientRequest.get(`/accountProviders/${id}/relationships/provider`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProvider),
            orElse: unexpectedStatus
        }))),
        "AccountProviderControllerPatchAccountProviderProviderRef": (id, options) => HttpClientRequest.patch(`/accountProviders/${id}/relationships/provider`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedProvider),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactList": (options) => HttpClientRequest.get(`/accountProviderContacts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProviderContactList),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerCreateAccountProviderContact": (options) => HttpClientRequest.post(`/accountProviderContacts`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProviderContactControllerCreateAccountProviderContact201),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactById": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProviderContact),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerDeleteAccountProviderContactById": (id, options) => HttpClientRequest.del(`/accountProviderContacts/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerUpdateAccountProviderContactById": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProviderContact),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddress": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/primaryEmailAddress`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableEmailAddress),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactPrimaryEmailAddressRef": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/relationships/primaryEmailAddress`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedEmailAddress),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerPatchAccountProviderContactPrimaryEmailAddressRef": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}/relationships/primaryEmailAddress`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedEmailAddress),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumber": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/primaryPhoneNumber`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullablePhoneNumber),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactPrimaryPhoneNumberRef": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/relationships/primaryPhoneNumber`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPhoneNumber),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerPatchAccountProviderContactPrimaryPhoneNumberRef": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}/relationships/primaryPhoneNumber`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPhoneNumber),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactProvider": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/provider`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProvider),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactProviderRef": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/relationships/provider`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerPatchAccountProviderContactProviderRef": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}/relationships/provider`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactUser": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/user`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableUser),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerGetAccountProviderContactUserRef": (id, options) => HttpClientRequest.get(`/accountProviderContacts/${id}/relationships/user`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedUser),
            orElse: unexpectedStatus
        }))),
        "AccountProviderContactControllerPatchAccountProviderContactUserRef": (id, options) => HttpClientRequest.patch(`/accountProviderContacts/${id}/relationships/user`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedUser),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerGetAccountInviteList": (options) => HttpClientRequest.get(`/accountInvites`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountInviteList),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerCreateAccountInvite": (options) => HttpClientRequest.post(`/accountInvites`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountInviteControllerCreateAccountInvite201),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerGetAccountInviteById": (id, options) => HttpClientRequest.get(`/accountInvites/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountInvite),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerDeleteAccountInviteById": (id, options) => HttpClientRequest.del(`/accountInvites/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerUpdateAccountInviteById": (id, options) => HttpClientRequest.patch(`/accountInvites/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountInvite),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerGetAccountInviteAccount": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerGetAccountInviteAccountRef": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerPatchAccountInviteAccountRef": (id, options) => HttpClientRequest.patch(`/accountInvites/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerGetAccountInviteInvitedBy": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/invitedBy`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(User),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerGetAccountInviteInvitedByRef": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/relationships/invitedBy`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedUser),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerGetAccountInviteAcceptedBy": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/acceptedBy`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableUser),
            orElse: unexpectedStatus
        }))),
        "AccountInviteControllerGetAccountInviteAcceptedByRef": (id, options) => HttpClientRequest.get(`/accountInvites/${id}/relationships/acceptedBy`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedUser),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeControllerGetSpaceTypeList": (options) => HttpClientRequest.get(`/spaceTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeControllerGetSpaceTypeById": (id, options) => HttpClientRequest.get(`/spaceTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeControllerGetSpaceTypeClasses": (id, options) => HttpClientRequest.get(`/spaceTypes/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceClassList),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeControllerGetSpaceTypeClassesRef": (id) => HttpClientRequest.get(`/spaceTypes/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceClassList),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeControllerGetSpaceTypeAssetTypes": (id, options) => HttpClientRequest.get(`/spaceTypes/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeControllerGetSpaceTypeAssetTypesRef": (id) => HttpClientRequest.get(`/spaceTypes/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeControllerGetSpaceTypeGroupTypes": (id, options) => HttpClientRequest.get(`/spaceTypes/${id}/groupTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroupTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeControllerGetSpaceTypeGroupTypesRef": (id) => HttpClientRequest.get(`/spaceTypes/${id}/relationships/groupTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceGroupTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupTypeControllerGetSpaceGroupTypeList": (options) => HttpClientRequest.get(`/spaceGroupTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroupTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupTypeControllerGetSpaceGroupTypeById": (id, options) => HttpClientRequest.get(`/spaceGroupTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroupType),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypes": (id, options) => HttpClientRequest.get(`/spaceGroupTypes/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupTypeControllerGetSpaceGroupTypeAssetTypesRef": (id) => HttpClientRequest.get(`/spaceGroupTypes/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypes": (id, options) => HttpClientRequest.get(`/spaceGroupTypes/${id}/bucketTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceGroupTypeControllerGetSpaceGroupTypeBucketTypesRef": (id) => HttpClientRequest.get(`/spaceGroupTypes/${id}/relationships/bucketTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassList": (options) => HttpClientRequest.get(`/spaceClasses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceClassList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassById": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceClass),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassCategories": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}/categories`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceCategoryList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassCategoriesRef": (id) => HttpClientRequest.get(`/spaceClasses/${id}/relationships/categories`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceCategoryList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassTypes": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}/types`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassTypesRef": (id) => HttpClientRequest.get(`/spaceClasses/${id}/relationships/types`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassAssetTypes": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassAssetTypesRef": (id) => HttpClientRequest.get(`/spaceClasses/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassGroupTypes": (id, options) => HttpClientRequest.get(`/spaceClasses/${id}/groupTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroupTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceClassControllerGetSpaceClassGroupTypesRef": (id) => HttpClientRequest.get(`/spaceClasses/${id}/relationships/groupTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceGroupTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceCategoryControllerGetSpaceCategoryList": (options) => HttpClientRequest.get(`/spaceCategories`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceCategoryList),
            orElse: unexpectedStatus
        }))),
        "SpaceCategoryControllerGetSpaceCategoryById": (id, options) => HttpClientRequest.get(`/spaceCategories/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceCategory),
            orElse: unexpectedStatus
        }))),
        "SpaceCategoryControllerGetSpaceCategoryClasses": (id, options) => HttpClientRequest.get(`/spaceCategories/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceClassList),
            orElse: unexpectedStatus
        }))),
        "SpaceCategoryControllerGetSpaceCategoryClassesRef": (id) => HttpClientRequest.get(`/spaceCategories/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceClassList),
            orElse: unexpectedStatus
        }))),
        "SpaceCategoryControllerGetSpaceCategoryAssetTypes": (id, options) => HttpClientRequest.get(`/spaceCategories/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceCategoryControllerGetSpaceCategoryAssetTypesRef": (id) => HttpClientRequest.get(`/spaceCategories/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceCategoryControllerGetSpaceCategoryGroupTypes": (id, options) => HttpClientRequest.get(`/spaceCategories/${id}/groupTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceGroupTypeList),
            orElse: unexpectedStatus
        }))),
        "SpaceCategoryControllerGetSpaceCategoryGroupTypesRef": (id) => HttpClientRequest.get(`/spaceCategories/${id}/relationships/groupTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceGroupTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceTypeControllerGetServiceTypeList": (options) => HttpClientRequest.get(`/serviceTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceTypeControllerGetServiceTypeById": (id, options) => HttpClientRequest.get(`/serviceTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceType),
            orElse: unexpectedStatus
        }))),
        "ServiceTypeControllerGetServiceTypeAssetTypes": (id, options) => HttpClientRequest.get(`/serviceTypes/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceTypeControllerGetServiceTypeAssetTypesRef": (id) => HttpClientRequest.get(`/serviceTypes/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceClassControllerGetServiceClassList": (options) => HttpClientRequest.get(`/serviceClasses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceClassList),
            orElse: unexpectedStatus
        }))),
        "ServiceClassControllerGetServiceClassById": (id, options) => HttpClientRequest.get(`/serviceClasses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceClass),
            orElse: unexpectedStatus
        }))),
        "ServiceClassControllerGetServiceClassCategories": (id, options) => HttpClientRequest.get(`/serviceClasses/${id}/categories`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceCategoryList),
            orElse: unexpectedStatus
        }))),
        "ServiceClassControllerGetServiceClassCategoriesRef": (id) => HttpClientRequest.get(`/serviceClasses/${id}/relationships/categories`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedServiceCategoryList),
            orElse: unexpectedStatus
        }))),
        "ServiceClassControllerGetServiceClassTypes": (id, options) => HttpClientRequest.get(`/serviceClasses/${id}/types`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceClassControllerGetServiceClassTypesRef": (id) => HttpClientRequest.get(`/serviceClasses/${id}/relationships/types`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedServiceTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceClassControllerGetServiceClassAssetTypes": (id, options) => HttpClientRequest.get(`/serviceClasses/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceClassControllerGetServiceClassAssetTypesRef": (id) => HttpClientRequest.get(`/serviceClasses/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceCategoryControllerGetServiceCategoryList": (options) => HttpClientRequest.get(`/serviceCategories`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceCategoryList),
            orElse: unexpectedStatus
        }))),
        "ServiceCategoryControllerGetServiceCategoryById": (id, options) => HttpClientRequest.get(`/serviceCategories/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceCategory),
            orElse: unexpectedStatus
        }))),
        "ServiceCategoryControllerGetServiceCategoryClasses": (id, options) => HttpClientRequest.get(`/serviceCategories/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ServiceClassList),
            orElse: unexpectedStatus
        }))),
        "ServiceCategoryControllerGetServiceCategoryClassesRef": (id) => HttpClientRequest.get(`/serviceCategories/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedServiceClassList),
            orElse: unexpectedStatus
        }))),
        "ServiceCategoryControllerGetServiceCategoryAssetTypes": (id, options) => HttpClientRequest.get(`/serviceCategories/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ServiceCategoryControllerGetServiceCategoryAssetTypesRef": (id) => HttpClientRequest.get(`/serviceCategories/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeList": (options) => HttpClientRequest.get(`/itemTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeById": (id, options) => HttpClientRequest.get(`/itemTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemType),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeDepreciationModifiers": (id, options) => HttpClientRequest.get(`/itemTypes/${id}/depreciationModifiers`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DepreciationModifierList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeDepreciationModifiersRef": (id) => HttpClientRequest.get(`/itemTypes/${id}/relationships/depreciationModifiers`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDepreciationModifierList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeDepreciationOverrides": (id, options) => HttpClientRequest.get(`/itemTypes/${id}/depreciationOverrides`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DepreciationOverrideList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeDepreciationOverridesRef": (id) => HttpClientRequest.get(`/itemTypes/${id}/relationships/depreciationOverrides`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDepreciationOverrideList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeClasses": (id, options) => HttpClientRequest.get(`/itemTypes/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemClassList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeClassesRef": (id) => HttpClientRequest.get(`/itemTypes/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemClassList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeAssetTypes": (id, options) => HttpClientRequest.get(`/itemTypes/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemTypeControllerGetItemTypeAssetTypesRef": (id) => HttpClientRequest.get(`/itemTypes/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemClassControllerGetItemClassList": (options) => HttpClientRequest.get(`/itemClasses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemClassList),
            orElse: unexpectedStatus
        }))),
        "ItemClassControllerGetItemClassById": (id, options) => HttpClientRequest.get(`/itemClasses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemClass),
            orElse: unexpectedStatus
        }))),
        "ItemClassControllerGetItemClassCategories": (id, options) => HttpClientRequest.get(`/itemClasses/${id}/categories`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemCategoryList),
            orElse: unexpectedStatus
        }))),
        "ItemClassControllerGetItemClassCategoriesRef": (id) => HttpClientRequest.get(`/itemClasses/${id}/relationships/categories`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemCategoryList),
            orElse: unexpectedStatus
        }))),
        "ItemClassControllerGetItemClassTypes": (id, options) => HttpClientRequest.get(`/itemClasses/${id}/types`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemClassControllerGetItemClassTypesRef": (id) => HttpClientRequest.get(`/itemClasses/${id}/relationships/types`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemClassControllerGetItemClassAssetTypes": (id, options) => HttpClientRequest.get(`/itemClasses/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemClassControllerGetItemClassAssetTypesRef": (id) => HttpClientRequest.get(`/itemClasses/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemCategoryControllerGetItemCategoryList": (options) => HttpClientRequest.get(`/itemCategories`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemCategoryList),
            orElse: unexpectedStatus
        }))),
        "ItemCategoryControllerGetItemCategoryById": (id, options) => HttpClientRequest.get(`/itemCategories/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemCategory),
            orElse: unexpectedStatus
        }))),
        "ItemCategoryControllerGetItemCategoryClasses": (id, options) => HttpClientRequest.get(`/itemCategories/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemClassList),
            orElse: unexpectedStatus
        }))),
        "ItemCategoryControllerGetItemCategoryClassesRef": (id) => HttpClientRequest.get(`/itemCategories/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemClassList),
            orElse: unexpectedStatus
        }))),
        "ItemCategoryControllerGetItemCategoryAssetTypes": (id, options) => HttpClientRequest.get(`/itemCategories/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemCategoryControllerGetItemCategoryAssetTypesRef": (id) => HttpClientRequest.get(`/itemCategories/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "IncidentTypeControllerGetIncidentTypeList": (options) => HttpClientRequest.get(`/incidentTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentTypeList),
            orElse: unexpectedStatus
        }))),
        "IncidentTypeControllerGetIncidentTypeById": (id, options) => HttpClientRequest.get(`/incidentTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentType),
            orElse: unexpectedStatus
        }))),
        "IncidentTypeControllerGetIncidentTypeClasses": (id, options) => HttpClientRequest.get(`/incidentTypes/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentClassList),
            orElse: unexpectedStatus
        }))),
        "IncidentTypeControllerGetIncidentTypeClassesRef": (id) => HttpClientRequest.get(`/incidentTypes/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIncidentClassList),
            orElse: unexpectedStatus
        }))),
        "IncidentTypeControllerGetIncidentTypeAssetTypes": (id, options) => HttpClientRequest.get(`/incidentTypes/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "IncidentTypeControllerGetIncidentTypeAssetTypesRef": (id) => HttpClientRequest.get(`/incidentTypes/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "IncidentTypeControllerGetIncidentTypePerils": (id, options) => HttpClientRequest.get(`/incidentTypes/${id}/perils`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PerilList),
            orElse: unexpectedStatus
        }))),
        "IncidentTypeControllerGetIncidentTypePerilsRef": (id) => HttpClientRequest.get(`/incidentTypes/${id}/relationships/perils`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "IncidentClassControllerGetIncidentClassList": (options) => HttpClientRequest.get(`/incidentClasses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentClassList),
            orElse: unexpectedStatus
        }))),
        "IncidentClassControllerGetIncidentClassById": (id, options) => HttpClientRequest.get(`/incidentClasses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentClass),
            orElse: unexpectedStatus
        }))),
        "IncidentClassControllerGetIncidentClassTypes": (id, options) => HttpClientRequest.get(`/incidentClasses/${id}/types`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentTypeList),
            orElse: unexpectedStatus
        }))),
        "IncidentClassControllerGetIncidentClassTypesRef": (id) => HttpClientRequest.get(`/incidentClasses/${id}/relationships/types`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIncidentTypeList),
            orElse: unexpectedStatus
        }))),
        "IncidentClassControllerGetIncidentClassAssetTypes": (id, options) => HttpClientRequest.get(`/incidentClasses/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "IncidentClassControllerGetIncidentClassAssetTypesRef": (id) => HttpClientRequest.get(`/incidentClasses/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "DocumentTypeControllerGetDocumentTypeList": (options) => HttpClientRequest.get(`/documentTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentTypeList),
            orElse: unexpectedStatus
        }))),
        "DocumentTypeControllerGetDocumentTypeById": (id, options) => HttpClientRequest.get(`/documentTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "DocumentTypeControllerGetDocumentTypeClasses": (id, options) => HttpClientRequest.get(`/documentTypes/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentClassList),
            orElse: unexpectedStatus
        }))),
        "DocumentTypeControllerGetDocumentTypeClassesRef": (id) => HttpClientRequest.get(`/documentTypes/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentClassList),
            orElse: unexpectedStatus
        }))),
        "DocumentTypeControllerGetDocumentTypeAssetTypes": (id, options) => HttpClientRequest.get(`/documentTypes/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "DocumentTypeControllerGetDocumentTypeAssetTypesRef": (id) => HttpClientRequest.get(`/documentTypes/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "DocumentClassControllerGetDocumentClassList": (options) => HttpClientRequest.get(`/documentClasses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentClassList),
            orElse: unexpectedStatus
        }))),
        "DocumentClassControllerGetDocumentClassById": (id, options) => HttpClientRequest.get(`/documentClasses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentClass),
            orElse: unexpectedStatus
        }))),
        "DocumentClassControllerGetDocumentClassTypes": (id, options) => HttpClientRequest.get(`/documentClasses/${id}/types`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentTypeList),
            orElse: unexpectedStatus
        }))),
        "DocumentClassControllerGetDocumentClassTypesRef": (id) => HttpClientRequest.get(`/documentClasses/${id}/relationships/types`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentTypeList),
            orElse: unexpectedStatus
        }))),
        "DocumentClassControllerGetDocumentClassAssetTypes": (id, options) => HttpClientRequest.get(`/documentClasses/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "DocumentClassControllerGetDocumentClassAssetTypesRef": (id) => HttpClientRequest.get(`/documentClasses/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "BucketTypeControllerGetBucketTypeList": (options) => HttpClientRequest.get(`/bucketTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketTypeList),
            orElse: unexpectedStatus
        }))),
        "BucketTypeControllerGetBucketTypeById": (id, options) => HttpClientRequest.get(`/bucketTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketType),
            orElse: unexpectedStatus
        }))),
        "BucketTypeControllerGetBucketTypeClasses": (id, options) => HttpClientRequest.get(`/bucketTypes/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketClassList),
            orElse: unexpectedStatus
        }))),
        "BucketTypeControllerGetBucketTypeClassesRef": (id) => HttpClientRequest.get(`/bucketTypes/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketClassList),
            orElse: unexpectedStatus
        }))),
        "BucketTypeControllerGetBucketTypeAssetTypes": (id, options) => HttpClientRequest.get(`/bucketTypes/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "BucketTypeControllerGetBucketTypeAssetTypesRef": (id) => HttpClientRequest.get(`/bucketTypes/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "BucketClassControllerGetBucketClassList": (options) => HttpClientRequest.get(`/bucketClasses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketClassList),
            orElse: unexpectedStatus
        }))),
        "BucketClassControllerGetBucketClassById": (id, options) => HttpClientRequest.get(`/bucketClasses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketClass),
            orElse: unexpectedStatus
        }))),
        "BucketClassControllerGetBucketClassTypes": (id, options) => HttpClientRequest.get(`/bucketClasses/${id}/types`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketTypeList),
            orElse: unexpectedStatus
        }))),
        "BucketClassControllerGetBucketClassTypesRef": (id) => HttpClientRequest.get(`/bucketClasses/${id}/relationships/types`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketTypeList),
            orElse: unexpectedStatus
        }))),
        "BucketClassControllerGetBucketClassAssetTypes": (id, options) => HttpClientRequest.get(`/bucketClasses/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "BucketClassControllerGetBucketClassAssetTypesRef": (id) => HttpClientRequest.get(`/bucketClasses/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "AssetTypeControllerGetAssetTypeList": (options) => HttpClientRequest.get(`/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "AssetTypeControllerGetAssetTypeById": (id, options) => HttpClientRequest.get(`/assetTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetType),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeControllerGetAssetAttributeTypeList": (options) => HttpClientRequest.get(`/assetAttributeTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeTypeList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeControllerGetAssetAttributeTypeById": (id, options) => HttpClientRequest.get(`/assetAttributeTypes/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeType),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeControllerGetAssetAttributeTypeClasses": (id, options) => HttpClientRequest.get(`/assetAttributeTypes/${id}/classes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeClassList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeControllerGetAssetAttributeTypeClassesRef": (id) => HttpClientRequest.get(`/assetAttributeTypes/${id}/relationships/classes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetAttributeClassList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypes": (id, options) => HttpClientRequest.get(`/assetAttributeTypes/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeControllerGetAssetAttributeTypeAssetTypesRef": (id) => HttpClientRequest.get(`/assetAttributeTypes/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeClassControllerGetAssetAttributeClassList": (options) => HttpClientRequest.get(`/assetAttributeClasses`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeClassList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeClassControllerGetAssetAttributeClassById": (id, options) => HttpClientRequest.get(`/assetAttributeClasses/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeClass),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeClassControllerGetAssetAttributeClassTypes": (id, options) => HttpClientRequest.get(`/assetAttributeClasses/${id}/types`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeTypeList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeClassControllerGetAssetAttributeClassTypesRef": (id) => HttpClientRequest.get(`/assetAttributeClasses/${id}/relationships/types`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetAttributeTypeList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeClassControllerGetAssetAttributeClassAssetTypes": (id, options) => HttpClientRequest.get(`/assetAttributeClasses/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeClassControllerGetAssetAttributeClassAssetTypesRef": (id) => HttpClientRequest.get(`/assetAttributeClasses/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateList": (options) => HttpClientRequest.get(`/submissionTrackTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubmissionTrackTemplateList),
            orElse: unexpectedStatus
        }))),
        "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateById": (id, options) => HttpClientRequest.get(`/submissionTrackTemplates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubmissionTrackTemplate),
            orElse: unexpectedStatus
        }))),
        "SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplate": (id, options) => HttpClientRequest.get(`/submissionTrackTemplates/${id}/policyTemplate`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "SubmissionTrackTemplateControllerGetSubmissionTrackTemplatePolicyTemplateRef": (id) => HttpClientRequest.get(`/submissionTrackTemplates/${id}/relationships/policyTemplate`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypes": (id, options) => HttpClientRequest.get(`/submissionTrackTemplates/${id}/bucketTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketTypeList),
            orElse: unexpectedStatus
        }))),
        "SubmissionTrackTemplateControllerGetSubmissionTrackTemplateBucketTypesRef": (id) => HttpClientRequest.get(`/submissionTrackTemplates/${id}/relationships/bucketTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketTypeList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageTemplateControllerGetSubCoverageTemplateList": (options) => HttpClientRequest.get(`/subCoverageTemplate`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageTemplateControllerGetSubCoverageTemplateById": (id, options) => HttpClientRequest.get(`/subCoverageTemplate/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplate": (id, options) => HttpClientRequest.get(`/subCoverageTemplate/${id}/coverageTemplate`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "SubCoverageTemplateControllerGetSubCoverageTemplateCoverageTemplateRef": (id) => HttpClientRequest.get(`/subCoverageTemplate/${id}/relationships/coverageTemplate`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplates": (id, options) => HttpClientRequest.get(`/subCoverageTemplate/${id}/endorsementTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementTemplateList),
            orElse: unexpectedStatus
        }))),
        "SubCoverageTemplateControllerGetSubCoverageTemplateEndorsementTemplatesRef": (id) => HttpClientRequest.get(`/subCoverageTemplate/${id}/relationships/endorsementTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEndorsementTemplateList),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateList": (options) => HttpClientRequest.get(`/spaceTypeItemTemplate`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceTypeItemTemplateList),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateById": (id, options) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceTypeItemTemplate),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceType": (id, options) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}/spaceType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateSpaceTypeRef": (id) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}/relationships/spaceType`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceType),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplate": (id, options) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}/itemTemplate`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemTemplate),
            orElse: unexpectedStatus
        }))),
        "SpaceTypeItemTemplateControllerGetSpaceTypeItemTemplateItemTemplateRef": (id) => HttpClientRequest.get(`/spaceTypeItemTemplate/${id}/relationships/itemTemplate`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemTemplate),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateList": (options) => HttpClientRequest.get(`/policyTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateById": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyTemplate),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateAssetTypes": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateAssetTypesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplates": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/coverageGroupTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageGroupTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateCoverageGroupTemplatesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/coverageGroupTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageGroupTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateCoverageTemplates": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/coverageTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateCoverageTemplatesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/coverageTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplates": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/subCoverageTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateSubCoverageTemplatesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/subCoverageTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateEndorsementTemplates": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/endorsementTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplateEndorsementTemplatesRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/endorsementTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEndorsementTemplateList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplatePerils": (id, options) => HttpClientRequest.get(`/policyTemplates/${id}/perils`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PerilList),
            orElse: unexpectedStatus
        }))),
        "PolicyTemplateControllerGetPolicyTemplatePerilsRef": (id) => HttpClientRequest.get(`/policyTemplates/${id}/relationships/perils`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "ItemTemplateControllerGetItemTemplateList": (options) => HttpClientRequest.get(`/itemTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemTemplateList),
            orElse: unexpectedStatus
        }))),
        "ItemTemplateControllerGetItemTemplateById": (id, options) => HttpClientRequest.get(`/itemTemplates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemTemplate),
            orElse: unexpectedStatus
        }))),
        "ItemTemplateControllerGetItemTemplateItemType": (id, options) => HttpClientRequest.get(`/itemTemplates/${id}/itemType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemType),
            orElse: unexpectedStatus
        }))),
        "ItemTemplateControllerGetItemTemplateItemTypeRef": (id) => HttpClientRequest.get(`/itemTemplates/${id}/relationships/itemType`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemType),
            orElse: unexpectedStatus
        }))),
        "ItemTemplateControllerGetItemTemplateAssetTypes": (id, options) => HttpClientRequest.get(`/itemTemplates/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "ItemTemplateControllerGetItemTemplateAssetTypesRef": (id) => HttpClientRequest.get(`/itemTemplates/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplateList": (options) => HttpClientRequest.get(`/endorsementTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementTemplateList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplateById": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementTemplate),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplatePerils": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}/perils`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PerilList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplatePerilsRef": (id) => HttpClientRequest.get(`/endorsementTemplates/${id}/relationships/perils`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplates": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}/coverageTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplateCoverageTemplatesRef": (id) => HttpClientRequest.get(`/endorsementTemplates/${id}/relationships/coverageTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatess": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}/subCoverageTemplatess`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplateSubCoverageTemplatessRef": (id) => HttpClientRequest.get(`/endorsementTemplates/${id}/relationships/subCoverageTemplatess`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplateBucketTypes": (id, options) => HttpClientRequest.get(`/endorsementTemplates/${id}/bucketTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketTypeList),
            orElse: unexpectedStatus
        }))),
        "EndorsementTemplateControllerGetEndorsementTemplateBucketTypesRef": (id) => HttpClientRequest.get(`/endorsementTemplates/${id}/relationships/bucketTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketTypeList),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateList": (options) => HttpClientRequest.get(`/coverageTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateById": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateGroup": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/group`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableCoverageGroupTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateGroupRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/group`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedCoverageGroupTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplatePerils": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/perils`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PerilList),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplatePerilsRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/perils`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPerilList),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateBucketType": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/bucketType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketType),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateBucketTypeRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/bucketType`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketType),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplates": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/subCoverageTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SubCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateSubCoverageTemplatesRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/subCoverageTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSubCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateEndorsementTemplates": (id, options) => HttpClientRequest.get(`/coverageTemplates/${id}/endorsementTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EndorsementTemplateList),
            orElse: unexpectedStatus
        }))),
        "CoverageTemplateControllerGetCoverageTemplateEndorsementTemplatesRef": (id) => HttpClientRequest.get(`/coverageTemplates/${id}/relationships/endorsementTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEndorsementTemplateList),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupTemplateControllerGetCoverageGroupTemplateList": (options) => HttpClientRequest.get(`/coverageGroupTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageGroupTemplateList),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupTemplateControllerGetCoverageGroupTemplateById": (id, options) => HttpClientRequest.get(`/coverageGroupTemplates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageGroupTemplate),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplates": (id, options) => HttpClientRequest.get(`/coverageGroupTemplates/${id}/coverageTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "CoverageGroupTemplateControllerGetCoverageGroupTemplateCoverageTemplatesRef": (id) => HttpClientRequest.get(`/coverageGroupTemplates/${id}/relationships/coverageTemplates`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCoverageTemplateList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateList": (options) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeTypeItemTemplateList),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateById": (id, options) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeTypeItemTemplate),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeType": (id, options) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}/assetAttributeType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAttributeType),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateAssetAttributeTypeRef": (id) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}/relationships/assetAttributeType`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetAttributeType),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplate": (id, options) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}/itemTemplate`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemTemplate),
            orElse: unexpectedStatus
        }))),
        "AssetAttributeTypeItemTemplateControllerGetAssetAttributeTypeItemTemplateItemTemplateRef": (id) => HttpClientRequest.get(`/assetAttributeTypeItemTemplates/${id}/relationships/itemTemplate`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemTemplate),
            orElse: unexpectedStatus
        }))),
        "ProviderControllerGetProviderList": (options) => HttpClientRequest.get(`/providers`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProviderList),
            orElse: unexpectedStatus
        }))),
        "ProviderControllerGetProviderById": (id, options) => HttpClientRequest.get(`/providers/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Provider),
            orElse: unexpectedStatus
        }))),
        "PerilControllerGetPerilList": (options) => HttpClientRequest.get(`/perils`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PerilList),
            orElse: unexpectedStatus
        }))),
        "PerilControllerGetPerilById": (id, options) => HttpClientRequest.get(`/perils/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Peril),
            orElse: unexpectedStatus
        }))),
        "PerilControllerGetPerilAssetTypes": (id, options) => HttpClientRequest.get(`/perils/${id}/assetTypes`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetTypeList),
            orElse: unexpectedStatus
        }))),
        "PerilControllerGetPerilAssetTypesRef": (id) => HttpClientRequest.get(`/perils/${id}/relationships/assetTypes`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetTypeList),
            orElse: unexpectedStatus
        }))),
        "DisasterControllerGetDisasterList": (options) => HttpClientRequest.get(`/disasters`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DisasterList),
            orElse: unexpectedStatus
        }))),
        "DisasterControllerGetDisasterById": (id, options) => HttpClientRequest.get(`/disasters/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Disaster),
            orElse: unexpectedStatus
        }))),
        "DisasterControllerGetDisasterIncidentType": (id, options) => HttpClientRequest.get(`/disasters/${id}/incidentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentType),
            orElse: unexpectedStatus
        }))),
        "DisasterControllerGetDisasterIncidentTypeRef": (id) => HttpClientRequest.get(`/disasters/${id}/relationships/incidentType`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedIncidentType),
            orElse: unexpectedStatus
        }))),
        "CurrencyControllerGetCurrencyList": (options) => HttpClientRequest.get(`/currencies`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CurrencyList),
            orElse: unexpectedStatus
        }))),
        "CurrencyControllerGetCurrencyById": (id, options) => HttpClientRequest.get(`/currencies/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "CountryControllerGetCountryList": (options) => HttpClientRequest.get(`/countries`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(CountryList),
            orElse: unexpectedStatus
        }))),
        "CountryControllerGetCountryById": (id, options) => HttpClientRequest.get(`/countries/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Country),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyList": (options) => HttpClientRequest.get(`/warranties`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(WarrantyList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerCreateWarranty": (options) => HttpClientRequest.post(`/warranties`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(WarrantyControllerCreateWarranty201),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyById": (id, options) => HttpClientRequest.get(`/warranties/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Warranty),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerDeleteWarrantyById": (id, options) => HttpClientRequest.del(`/warranties/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerUpdateWarrantyById": (id, options) => HttpClientRequest.patch(`/warranties/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Warranty),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyDocumentType": (id, options) => HttpClientRequest.get(`/warranties/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyDocumentTypeRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyAccount": (id, options) => HttpClientRequest.get(`/warranties/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyAccountRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerPatchWarrantyAccountRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyFile": (id, options) => HttpClientRequest.get(`/warranties/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyFileRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerPatchWarrantyFileRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyAssets": (id, options) => HttpClientRequest.get(`/warranties/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyAssetsRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerPostWarrantyAssetsRef": (id, options) => HttpClientRequest.post(`/warranties/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerDeleteWarrantyAssetsRef": (id, options) => HttpClientRequest.del(`/warranties/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerPatchWarrantyAssetsRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantySpaces": (id, options) => HttpClientRequest.get(`/warranties/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantySpacesRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerPostWarrantySpacesRef": (id, options) => HttpClientRequest.post(`/warranties/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerDeleteWarrantySpacesRef": (id, options) => HttpClientRequest.del(`/warranties/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerPatchWarrantySpacesRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyProjects": (id, options) => HttpClientRequest.get(`/warranties/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerGetWarrantyProjectsRef": (id, options) => HttpClientRequest.get(`/warranties/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerPostWarrantyProjectsRef": (id, options) => HttpClientRequest.post(`/warranties/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerDeleteWarrantyProjectsRef": (id, options) => HttpClientRequest.del(`/warranties/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "WarrantyControllerPatchWarrantyProjectsRef": (id, options) => HttpClientRequest.patch(`/warranties/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualList": (options) => HttpClientRequest.get(`/userManuals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserManualList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerCreateUserManual": (options) => HttpClientRequest.post(`/userManuals`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserManualControllerCreateUserManual201),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualById": (id, options) => HttpClientRequest.get(`/userManuals/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserManual),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerDeleteUserManualById": (id, options) => HttpClientRequest.del(`/userManuals/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "UserManualControllerUpdateUserManualById": (id, options) => HttpClientRequest.patch(`/userManuals/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UserManual),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualDocumentType": (id, options) => HttpClientRequest.get(`/userManuals/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualDocumentTypeRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualAccount": (id, options) => HttpClientRequest.get(`/userManuals/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualAccountRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerPatchUserManualAccountRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualFile": (id, options) => HttpClientRequest.get(`/userManuals/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualFileRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerPatchUserManualFileRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualAssets": (id, options) => HttpClientRequest.get(`/userManuals/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualAssetsRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerPostUserManualAssetsRef": (id, options) => HttpClientRequest.post(`/userManuals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerDeleteUserManualAssetsRef": (id, options) => HttpClientRequest.del(`/userManuals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerPatchUserManualAssetsRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualSpaces": (id, options) => HttpClientRequest.get(`/userManuals/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualSpacesRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerPostUserManualSpacesRef": (id, options) => HttpClientRequest.post(`/userManuals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerDeleteUserManualSpacesRef": (id, options) => HttpClientRequest.del(`/userManuals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerPatchUserManualSpacesRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualProjects": (id, options) => HttpClientRequest.get(`/userManuals/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerGetUserManualProjectsRef": (id, options) => HttpClientRequest.get(`/userManuals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerPostUserManualProjectsRef": (id, options) => HttpClientRequest.post(`/userManuals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerDeleteUserManualProjectsRef": (id, options) => HttpClientRequest.del(`/userManuals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "UserManualControllerPatchUserManualProjectsRef": (id, options) => HttpClientRequest.patch(`/userManuals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossList": (options) => HttpClientRequest.get(`/scopesOfLoss`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ScopeOfLossList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerCreateScopeOfLoss": (options) => HttpClientRequest.post(`/scopesOfLoss`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ScopeOfLossControllerCreateScopeOfLoss201),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossById": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ScopeOfLoss),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerDeleteScopeOfLossById": (id, options) => HttpClientRequest.del(`/scopesOfLoss/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerUpdateScopeOfLossById": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ScopeOfLoss),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossDocumentType": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossDocumentTypeRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossAccount": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossAccountRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerPatchScopeOfLossAccountRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossFile": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossFileRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerPatchScopeOfLossFileRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossAssets": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossAssetsRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerPostScopeOfLossAssetsRef": (id, options) => HttpClientRequest.post(`/scopesOfLoss/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerDeleteScopeOfLossAssetsRef": (id, options) => HttpClientRequest.del(`/scopesOfLoss/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerPatchScopeOfLossAssetsRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossSpaces": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossSpacesRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerPostScopeOfLossSpacesRef": (id, options) => HttpClientRequest.post(`/scopesOfLoss/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerDeleteScopeOfLossSpacesRef": (id, options) => HttpClientRequest.del(`/scopesOfLoss/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerPatchScopeOfLossSpacesRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossProjects": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerGetScopeOfLossProjectsRef": (id, options) => HttpClientRequest.get(`/scopesOfLoss/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerPostScopeOfLossProjectsRef": (id, options) => HttpClientRequest.post(`/scopesOfLoss/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerDeleteScopeOfLossProjectsRef": (id, options) => HttpClientRequest.del(`/scopesOfLoss/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ScopeOfLossControllerPatchScopeOfLossProjectsRef": (id, options) => HttpClientRequest.patch(`/scopesOfLoss/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollList": (options) => HttpClientRequest.get(`/rentRolls`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(RentRollList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerCreateRentRoll": (options) => HttpClientRequest.post(`/rentRolls`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(RentRollControllerCreateRentRoll201),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollById": (id, options) => HttpClientRequest.get(`/rentRolls/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(RentRoll),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerDeleteRentRollById": (id, options) => HttpClientRequest.del(`/rentRolls/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "RentRollControllerUpdateRentRollById": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(RentRoll),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollDocumentType": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollDocumentTypeRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollAccount": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollAccountRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerPatchRentRollAccountRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollFile": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollFileRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerPatchRentRollFileRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollAssets": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollAssetsRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerPostRentRollAssetsRef": (id, options) => HttpClientRequest.post(`/rentRolls/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerDeleteRentRollAssetsRef": (id, options) => HttpClientRequest.del(`/rentRolls/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerPatchRentRollAssetsRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollSpaces": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollSpacesRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerPostRentRollSpacesRef": (id, options) => HttpClientRequest.post(`/rentRolls/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerDeleteRentRollSpacesRef": (id, options) => HttpClientRequest.del(`/rentRolls/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerPatchRentRollSpacesRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollProjects": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerGetRentRollProjectsRef": (id, options) => HttpClientRequest.get(`/rentRolls/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerPostRentRollProjectsRef": (id, options) => HttpClientRequest.post(`/rentRolls/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerDeleteRentRollProjectsRef": (id, options) => HttpClientRequest.del(`/rentRolls/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "RentRollControllerPatchRentRollProjectsRef": (id, options) => HttpClientRequest.patch(`/rentRolls/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecList": (options) => HttpClientRequest.get(`/productSpecs`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProductSpecList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerCreateProductSpec": (options) => HttpClientRequest.post(`/productSpecs`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProductSpecControllerCreateProductSpec201),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecById": (id, options) => HttpClientRequest.get(`/productSpecs/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProductSpec),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerDeleteProductSpecById": (id, options) => HttpClientRequest.del(`/productSpecs/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerUpdateProductSpecById": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProductSpec),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecDocumentType": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecDocumentTypeRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecAccount": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecAccountRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerPatchProductSpecAccountRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecFile": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecFileRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerPatchProductSpecFileRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecAssets": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecAssetsRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerPostProductSpecAssetsRef": (id, options) => HttpClientRequest.post(`/productSpecs/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerDeleteProductSpecAssetsRef": (id, options) => HttpClientRequest.del(`/productSpecs/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerPatchProductSpecAssetsRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecSpaces": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecSpacesRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerPostProductSpecSpacesRef": (id, options) => HttpClientRequest.post(`/productSpecs/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerDeleteProductSpecSpacesRef": (id, options) => HttpClientRequest.del(`/productSpecs/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerPatchProductSpecSpacesRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecProjects": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerGetProductSpecProjectsRef": (id, options) => HttpClientRequest.get(`/productSpecs/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerPostProductSpecProjectsRef": (id, options) => HttpClientRequest.post(`/productSpecs/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerDeleteProductSpecProjectsRef": (id, options) => HttpClientRequest.del(`/productSpecs/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ProductSpecControllerPatchProductSpecProjectsRef": (id, options) => HttpClientRequest.patch(`/productSpecs/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketList": (options) => HttpClientRequest.get(`/policyJackets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyJacketList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerCreatePolicyJacket": (options) => HttpClientRequest.post(`/policyJackets`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyJacketControllerCreatePolicyJacket201),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketById": (id, options) => HttpClientRequest.get(`/policyJackets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyJacket),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerDeletePolicyJacketById": (id, options) => HttpClientRequest.del(`/policyJackets/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerUpdatePolicyJacketById": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PolicyJacket),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketDocumentType": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketDocumentTypeRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketAccount": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketAccountRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerPatchPolicyJacketAccountRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketFile": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketFileRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerPatchPolicyJacketFileRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketAssets": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketAssetsRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerPostPolicyJacketAssetsRef": (id, options) => HttpClientRequest.post(`/policyJackets/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerDeletePolicyJacketAssetsRef": (id, options) => HttpClientRequest.del(`/policyJackets/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerPatchPolicyJacketAssetsRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketSpaces": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketSpacesRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerPostPolicyJacketSpacesRef": (id, options) => HttpClientRequest.post(`/policyJackets/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerDeletePolicyJacketSpacesRef": (id, options) => HttpClientRequest.del(`/policyJackets/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerPatchPolicyJacketSpacesRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketProjects": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerGetPolicyJacketProjectsRef": (id, options) => HttpClientRequest.get(`/policyJackets/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerPostPolicyJacketProjectsRef": (id, options) => HttpClientRequest.post(`/policyJackets/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerDeletePolicyJacketProjectsRef": (id, options) => HttpClientRequest.del(`/policyJackets/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PolicyJacketControllerPatchPolicyJacketProjectsRef": (id, options) => HttpClientRequest.patch(`/policyJackets/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportList": (options) => HttpClientRequest.get(`/policeReports`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PoliceReportList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerCreatePoliceReport": (options) => HttpClientRequest.post(`/policeReports`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PoliceReportControllerCreatePoliceReport201),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportById": (id, options) => HttpClientRequest.get(`/policeReports/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PoliceReport),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerDeletePoliceReportById": (id, options) => HttpClientRequest.del(`/policeReports/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerUpdatePoliceReportById": (id, options) => HttpClientRequest.patch(`/policeReports/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PoliceReport),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportDocumentType": (id, options) => HttpClientRequest.get(`/policeReports/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportDocumentTypeRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportAccount": (id, options) => HttpClientRequest.get(`/policeReports/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportAccountRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerPatchPoliceReportAccountRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportFile": (id, options) => HttpClientRequest.get(`/policeReports/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportFileRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerPatchPoliceReportFileRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportAssets": (id, options) => HttpClientRequest.get(`/policeReports/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportAssetsRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerPostPoliceReportAssetsRef": (id, options) => HttpClientRequest.post(`/policeReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerDeletePoliceReportAssetsRef": (id, options) => HttpClientRequest.del(`/policeReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerPatchPoliceReportAssetsRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportSpaces": (id, options) => HttpClientRequest.get(`/policeReports/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportSpacesRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerPostPoliceReportSpacesRef": (id, options) => HttpClientRequest.post(`/policeReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerDeletePoliceReportSpacesRef": (id, options) => HttpClientRequest.del(`/policeReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerPatchPoliceReportSpacesRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportProjects": (id, options) => HttpClientRequest.get(`/policeReports/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerGetPoliceReportProjectsRef": (id, options) => HttpClientRequest.get(`/policeReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerPostPoliceReportProjectsRef": (id, options) => HttpClientRequest.post(`/policeReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerDeletePoliceReportProjectsRef": (id, options) => HttpClientRequest.del(`/policeReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PoliceReportControllerPatchPoliceReportProjectsRef": (id, options) => HttpClientRequest.patch(`/policeReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitList": (options) => HttpClientRequest.get(`/permits`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PermitList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerCreatePermit": (options) => HttpClientRequest.post(`/permits`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PermitControllerCreatePermit201),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitById": (id, options) => HttpClientRequest.get(`/permits/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Permit),
            orElse: unexpectedStatus
        }))),
        "PermitControllerDeletePermitById": (id, options) => HttpClientRequest.del(`/permits/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PermitControllerUpdatePermitById": (id, options) => HttpClientRequest.patch(`/permits/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Permit),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitDocumentType": (id, options) => HttpClientRequest.get(`/permits/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitDocumentTypeRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitAccount": (id, options) => HttpClientRequest.get(`/permits/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitAccountRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PermitControllerPatchPermitAccountRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitFile": (id, options) => HttpClientRequest.get(`/permits/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitFileRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "PermitControllerPatchPermitFileRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitAssets": (id, options) => HttpClientRequest.get(`/permits/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitAssetsRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerPostPermitAssetsRef": (id, options) => HttpClientRequest.post(`/permits/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerDeletePermitAssetsRef": (id, options) => HttpClientRequest.del(`/permits/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerPatchPermitAssetsRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitSpaces": (id, options) => HttpClientRequest.get(`/permits/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitSpacesRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerPostPermitSpacesRef": (id, options) => HttpClientRequest.post(`/permits/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerDeletePermitSpacesRef": (id, options) => HttpClientRequest.del(`/permits/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerPatchPermitSpacesRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitProjects": (id, options) => HttpClientRequest.get(`/permits/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerGetPermitProjectsRef": (id, options) => HttpClientRequest.get(`/permits/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerPostPermitProjectsRef": (id, options) => HttpClientRequest.post(`/permits/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerDeletePermitProjectsRef": (id, options) => HttpClientRequest.del(`/permits/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PermitControllerPatchPermitProjectsRef": (id, options) => HttpClientRequest.patch(`/permits/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentList": (options) => HttpClientRequest.get(`/payments`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerCreatePayment": (options) => HttpClientRequest.post(`/payments`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentControllerCreatePayment201),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentById": (id, options) => HttpClientRequest.get(`/payments/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Payment),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerDeletePaymentById": (id, options) => HttpClientRequest.del(`/payments/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PaymentControllerUpdatePaymentById": (id, options) => HttpClientRequest.patch(`/payments/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Payment),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentDocumentType": (id, options) => HttpClientRequest.get(`/payments/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentDocumentTypeRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentAccount": (id, options) => HttpClientRequest.get(`/payments/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentAccountRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPatchPaymentAccountRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentFile": (id, options) => HttpClientRequest.get(`/payments/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentFileRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPatchPaymentFileRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentAssets": (id, options) => HttpClientRequest.get(`/payments/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentAssetsRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPostPaymentAssetsRef": (id, options) => HttpClientRequest.post(`/payments/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerDeletePaymentAssetsRef": (id, options) => HttpClientRequest.del(`/payments/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPatchPaymentAssetsRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentSpaces": (id, options) => HttpClientRequest.get(`/payments/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentSpacesRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPostPaymentSpacesRef": (id, options) => HttpClientRequest.post(`/payments/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerDeletePaymentSpacesRef": (id, options) => HttpClientRequest.del(`/payments/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPatchPaymentSpacesRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentProjects": (id, options) => HttpClientRequest.get(`/payments/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentProjectsRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPostPaymentProjectsRef": (id, options) => HttpClientRequest.post(`/payments/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerDeletePaymentProjectsRef": (id, options) => HttpClientRequest.del(`/payments/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPatchPaymentProjectsRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentCurrency": (id, options) => HttpClientRequest.get(`/payments/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentCurrencyRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPatchPaymentCurrencyRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentStats": (id, options) => HttpClientRequest.get(`/payments/${id}/stats`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemizableFinancialDocumentStats),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentStatsRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/stats`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemizableFinancialDocumentStats),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentVendor": (id, options) => HttpClientRequest.get(`/payments/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccountProvider),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentVendorRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPatchPaymentVendorRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentService": (id, options) => HttpClientRequest.get(`/payments/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableService),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentServiceRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerPatchPaymentServiceRef": (id, options) => HttpClientRequest.patch(`/payments/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentLines": (id, options) => HttpClientRequest.get(`/payments/${id}/lines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentLineList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentLinesRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/lines`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedPaymentLineList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentLineSubjects": (id, options) => HttpClientRequest.get(`/payments/${id}/lineSubjects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceList),
            orElse: unexpectedStatus
        }))),
        "PaymentControllerGetPaymentLineSubjectsRef": (id, options) => HttpClientRequest.get(`/payments/${id}/relationships/lineSubjects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportList": (options) => HttpClientRequest.get(`/paramedicReports`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ParamedicReportList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerCreateParamedicReport": (options) => HttpClientRequest.post(`/paramedicReports`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ParamedicReportControllerCreateParamedicReport201),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportById": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ParamedicReport),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerDeleteParamedicReportById": (id, options) => HttpClientRequest.del(`/paramedicReports/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerUpdateParamedicReportById": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ParamedicReport),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportDocumentType": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportDocumentTypeRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportAccount": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportAccountRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerPatchParamedicReportAccountRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportFile": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportFileRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerPatchParamedicReportFileRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportAssets": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportAssetsRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerPostParamedicReportAssetsRef": (id, options) => HttpClientRequest.post(`/paramedicReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerDeleteParamedicReportAssetsRef": (id, options) => HttpClientRequest.del(`/paramedicReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerPatchParamedicReportAssetsRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportSpaces": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportSpacesRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerPostParamedicReportSpacesRef": (id, options) => HttpClientRequest.post(`/paramedicReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerDeleteParamedicReportSpacesRef": (id, options) => HttpClientRequest.del(`/paramedicReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerPatchParamedicReportSpacesRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportProjects": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerGetParamedicReportProjectsRef": (id, options) => HttpClientRequest.get(`/paramedicReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerPostParamedicReportProjectsRef": (id, options) => HttpClientRequest.post(`/paramedicReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerDeleteParamedicReportProjectsRef": (id, options) => HttpClientRequest.del(`/paramedicReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ParamedicReportControllerPatchParamedicReportProjectsRef": (id, options) => HttpClientRequest.patch(`/paramedicReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceList": (options) => HttpClientRequest.get(`/invoices`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerCreateInvoice": (options) => HttpClientRequest.post(`/invoices`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceControllerCreateInvoice201),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceById": (id, options) => HttpClientRequest.get(`/invoices/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Invoice),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerDeleteInvoiceById": (id, options) => HttpClientRequest.del(`/invoices/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerUpdateInvoiceById": (id, options) => HttpClientRequest.patch(`/invoices/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Invoice),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceDocumentType": (id, options) => HttpClientRequest.get(`/invoices/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceDocumentTypeRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceAccount": (id, options) => HttpClientRequest.get(`/invoices/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceAccountRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPatchInvoiceAccountRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceFile": (id, options) => HttpClientRequest.get(`/invoices/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceFileRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPatchInvoiceFileRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceAssets": (id, options) => HttpClientRequest.get(`/invoices/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceAssetsRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPostInvoiceAssetsRef": (id, options) => HttpClientRequest.post(`/invoices/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerDeleteInvoiceAssetsRef": (id, options) => HttpClientRequest.del(`/invoices/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPatchInvoiceAssetsRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceSpaces": (id, options) => HttpClientRequest.get(`/invoices/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceSpacesRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPostInvoiceSpacesRef": (id, options) => HttpClientRequest.post(`/invoices/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerDeleteInvoiceSpacesRef": (id, options) => HttpClientRequest.del(`/invoices/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPatchInvoiceSpacesRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceProjects": (id, options) => HttpClientRequest.get(`/invoices/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceProjectsRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPostInvoiceProjectsRef": (id, options) => HttpClientRequest.post(`/invoices/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerDeleteInvoiceProjectsRef": (id, options) => HttpClientRequest.del(`/invoices/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPatchInvoiceProjectsRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceCurrency": (id, options) => HttpClientRequest.get(`/invoices/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceCurrencyRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPatchInvoiceCurrencyRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceStats": (id, options) => HttpClientRequest.get(`/invoices/${id}/stats`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemizableFinancialDocumentStats),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceStatsRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/stats`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemizableFinancialDocumentStats),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceVendor": (id, options) => HttpClientRequest.get(`/invoices/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccountProvider),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceVendorRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPatchInvoiceVendorRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceService": (id, options) => HttpClientRequest.get(`/invoices/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableService),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceServiceRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerPatchInvoiceServiceRef": (id, options) => HttpClientRequest.patch(`/invoices/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceLines": (id, options) => HttpClientRequest.get(`/invoices/${id}/lines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceLineList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceLinesRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/lines`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedInvoiceLineList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceLineSubjects": (id, options) => HttpClientRequest.get(`/invoices/${id}/lineSubjects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceList),
            orElse: unexpectedStatus
        }))),
        "InvoiceControllerGetInvoiceLineSubjectsRef": (id, options) => HttpClientRequest.get(`/invoices/${id}/relationships/lineSubjects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportList": (options) => HttpClientRequest.get(`/incidentReports`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentReportList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerCreateIncidentReport": (options) => HttpClientRequest.post(`/incidentReports`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentReportControllerCreateIncidentReport201),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportById": (id, options) => HttpClientRequest.get(`/incidentReports/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentReport),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerDeleteIncidentReportById": (id, options) => HttpClientRequest.del(`/incidentReports/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerUpdateIncidentReportById": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(IncidentReport),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportDocumentType": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportDocumentTypeRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportAccount": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportAccountRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerPatchIncidentReportAccountRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportFile": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportFileRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerPatchIncidentReportFileRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportAssets": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportAssetsRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerPostIncidentReportAssetsRef": (id, options) => HttpClientRequest.post(`/incidentReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerDeleteIncidentReportAssetsRef": (id, options) => HttpClientRequest.del(`/incidentReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerPatchIncidentReportAssetsRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportSpaces": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportSpacesRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerPostIncidentReportSpacesRef": (id, options) => HttpClientRequest.post(`/incidentReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerDeleteIncidentReportSpacesRef": (id, options) => HttpClientRequest.del(`/incidentReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerPatchIncidentReportSpacesRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportProjects": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerGetIncidentReportProjectsRef": (id, options) => HttpClientRequest.get(`/incidentReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerPostIncidentReportProjectsRef": (id, options) => HttpClientRequest.post(`/incidentReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerDeleteIncidentReportProjectsRef": (id, options) => HttpClientRequest.del(`/incidentReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "IncidentReportControllerPatchIncidentReportProjectsRef": (id, options) => HttpClientRequest.patch(`/incidentReports/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingList": (options) => HttpClientRequest.get(`/fundings`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerCreateFunding": (options) => HttpClientRequest.post(`/fundings`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingControllerCreateFunding201),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingById": (id, options) => HttpClientRequest.get(`/fundings/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Funding),
            orElse: unexpectedStatus
        }))),
        "FundingControllerDeleteFundingById": (id) => HttpClientRequest.del(`/fundings/${id}`).pipe(withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "FundingControllerUpdateFundingById": (id, options) => HttpClientRequest.patch(`/fundings/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Funding),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingDocumentType": (id, options) => HttpClientRequest.get(`/fundings/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingDocumentTypeRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/documentType`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingAccount": (id, options) => HttpClientRequest.get(`/fundings/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingAccountRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/account`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPatchFundingAccountRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/account`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingFile": (id, options) => HttpClientRequest.get(`/fundings/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingFileRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/file`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPatchFundingFileRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/file`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingAssets": (id, options) => HttpClientRequest.get(`/fundings/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingAssetsRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/assets`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPostFundingAssetsRef": (id, options) => HttpClientRequest.post(`/fundings/${id}/relationships/assets`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerDeleteFundingAssetsRef": (id, options) => HttpClientRequest.del(`/fundings/${id}/relationships/assets`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPatchFundingAssetsRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/assets`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingSpaces": (id, options) => HttpClientRequest.get(`/fundings/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingSpacesRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/spaces`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPostFundingSpacesRef": (id, options) => HttpClientRequest.post(`/fundings/${id}/relationships/spaces`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerDeleteFundingSpacesRef": (id, options) => HttpClientRequest.del(`/fundings/${id}/relationships/spaces`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPatchFundingSpacesRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/spaces`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingProjects": (id, options) => HttpClientRequest.get(`/fundings/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingProjectsRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/projects`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPostFundingProjectsRef": (id, options) => HttpClientRequest.post(`/fundings/${id}/relationships/projects`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerDeleteFundingProjectsRef": (id, options) => HttpClientRequest.del(`/fundings/${id}/relationships/projects`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPatchFundingProjectsRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/projects`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingSource": (id, options) => HttpClientRequest.get(`/fundings/${id}/source`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FundingSource),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingSourceRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/source`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "FundingControllerPatchFundingSourceRef": (id, options) => HttpClientRequest.patch(`/fundings/${id}/relationships/source`).pipe(HttpClientRequest.bodyUnsafeJson(options), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedFundingSource),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingAllocations": (id, options) => HttpClientRequest.get(`/fundings/${id}/allocations`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BucketFundingList),
            orElse: unexpectedStatus
        }))),
        "FundingControllerGetFundingAllocationsRef": (id) => HttpClientRequest.get(`/fundings/${id}/relationships/allocations`).pipe(withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBucketFundingList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateList": (options) => HttpClientRequest.get(`/estimates`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerCreateEstimate": (options) => HttpClientRequest.post(`/estimates`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateControllerCreateEstimate201),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateById": (id, options) => HttpClientRequest.get(`/estimates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Estimate),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerDeleteEstimateById": (id, options) => HttpClientRequest.del(`/estimates/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "EstimateControllerUpdateEstimateById": (id, options) => HttpClientRequest.patch(`/estimates/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Estimate),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateDocumentType": (id, options) => HttpClientRequest.get(`/estimates/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateDocumentTypeRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateAccount": (id, options) => HttpClientRequest.get(`/estimates/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateAccountRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPatchEstimateAccountRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateFile": (id, options) => HttpClientRequest.get(`/estimates/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateFileRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPatchEstimateFileRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateAssets": (id, options) => HttpClientRequest.get(`/estimates/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateAssetsRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPostEstimateAssetsRef": (id, options) => HttpClientRequest.post(`/estimates/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerDeleteEstimateAssetsRef": (id, options) => HttpClientRequest.del(`/estimates/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPatchEstimateAssetsRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateSpaces": (id, options) => HttpClientRequest.get(`/estimates/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateSpacesRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPostEstimateSpacesRef": (id, options) => HttpClientRequest.post(`/estimates/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerDeleteEstimateSpacesRef": (id, options) => HttpClientRequest.del(`/estimates/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPatchEstimateSpacesRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateProjects": (id, options) => HttpClientRequest.get(`/estimates/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateProjectsRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPostEstimateProjectsRef": (id, options) => HttpClientRequest.post(`/estimates/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerDeleteEstimateProjectsRef": (id, options) => HttpClientRequest.del(`/estimates/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPatchEstimateProjectsRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateCurrency": (id, options) => HttpClientRequest.get(`/estimates/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateCurrencyRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPatchEstimateCurrencyRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateStats": (id, options) => HttpClientRequest.get(`/estimates/${id}/stats`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemizableFinancialDocumentStats),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateStatsRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/stats`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemizableFinancialDocumentStats),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateVendor": (id, options) => HttpClientRequest.get(`/estimates/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccountProvider),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateVendorRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPatchEstimateVendorRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateService": (id, options) => HttpClientRequest.get(`/estimates/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableService),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateServiceRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerPatchEstimateServiceRef": (id, options) => HttpClientRequest.patch(`/estimates/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateLines": (id, options) => HttpClientRequest.get(`/estimates/${id}/lines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateLineList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateLinesRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/lines`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimateLineList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateLineSubjects": (id, options) => HttpClientRequest.get(`/estimates/${id}/lineSubjects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateLineSubjectsRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/lineSubjects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateChangeOrders": (id, options) => HttpClientRequest.get(`/estimates/${id}/changeOrders`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "EstimateControllerGetEstimateChangeOrdersRef": (id, options) => HttpClientRequest.get(`/estimates/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentList": (options) => HttpClientRequest.get(`/documents`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerCreateDocument": (options) => HttpClientRequest.post(`/documents`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentControllerCreateDocument201),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentById": (id, options) => HttpClientRequest.get(`/documents/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Document),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerDeleteDocumentById": (id, options) => HttpClientRequest.del(`/documents/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "DocumentControllerUpdateDocumentById": (id, options) => HttpClientRequest.patch(`/documents/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Document),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentDocumentType": (id, options) => HttpClientRequest.get(`/documents/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentDocumentTypeRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentAccount": (id, options) => HttpClientRequest.get(`/documents/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentAccountRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerPatchDocumentAccountRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentFile": (id, options) => HttpClientRequest.get(`/documents/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentFileRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerPatchDocumentFileRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentAssets": (id, options) => HttpClientRequest.get(`/documents/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentAssetsRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerPostDocumentAssetsRef": (id, options) => HttpClientRequest.post(`/documents/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerDeleteDocumentAssetsRef": (id, options) => HttpClientRequest.del(`/documents/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerPatchDocumentAssetsRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentSpaces": (id, options) => HttpClientRequest.get(`/documents/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentSpacesRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerPostDocumentSpacesRef": (id, options) => HttpClientRequest.post(`/documents/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerDeleteDocumentSpacesRef": (id, options) => HttpClientRequest.del(`/documents/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerPatchDocumentSpacesRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentProjects": (id, options) => HttpClientRequest.get(`/documents/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerGetDocumentProjectsRef": (id, options) => HttpClientRequest.get(`/documents/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerPostDocumentProjectsRef": (id, options) => HttpClientRequest.post(`/documents/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerDeleteDocumentProjectsRef": (id, options) => HttpClientRequest.del(`/documents/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DocumentControllerPatchDocumentProjectsRef": (id, options) => HttpClientRequest.patch(`/documents/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkList": (options) => HttpClientRequest.get(`/deliveryPaperworks`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeliveryPaperworkList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerCreateDeliveryPaperwork": (options) => HttpClientRequest.post(`/deliveryPaperworks`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeliveryPaperworkControllerCreateDeliveryPaperwork201),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkById": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeliveryPaperwork),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerDeleteDeliveryPaperworkById": (id, options) => HttpClientRequest.del(`/deliveryPaperworks/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerUpdateDeliveryPaperworkById": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeliveryPaperwork),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkDocumentType": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkDocumentTypeRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkAccount": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkAccountRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerPatchDeliveryPaperworkAccountRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkFile": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkFileRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerPatchDeliveryPaperworkFileRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkAssets": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkAssetsRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerPostDeliveryPaperworkAssetsRef": (id, options) => HttpClientRequest.post(`/deliveryPaperworks/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerDeleteDeliveryPaperworkAssetsRef": (id, options) => HttpClientRequest.del(`/deliveryPaperworks/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerPatchDeliveryPaperworkAssetsRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkSpaces": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkSpacesRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerPostDeliveryPaperworkSpacesRef": (id, options) => HttpClientRequest.post(`/deliveryPaperworks/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerDeleteDeliveryPaperworkSpacesRef": (id, options) => HttpClientRequest.del(`/deliveryPaperworks/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerPatchDeliveryPaperworkSpacesRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkProjects": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerGetDeliveryPaperworkProjectsRef": (id, options) => HttpClientRequest.get(`/deliveryPaperworks/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerPostDeliveryPaperworkProjectsRef": (id, options) => HttpClientRequest.post(`/deliveryPaperworks/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerDeleteDeliveryPaperworkProjectsRef": (id, options) => HttpClientRequest.del(`/deliveryPaperworks/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeliveryPaperworkControllerPatchDeliveryPaperworkProjectsRef": (id, options) => HttpClientRequest.patch(`/deliveryPaperworks/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedList": (options) => HttpClientRequest.get(`/deeds`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeedList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerCreateDeed": (options) => HttpClientRequest.post(`/deeds`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeedControllerCreateDeed201),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedById": (id, options) => HttpClientRequest.get(`/deeds/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Deed),
            orElse: unexpectedStatus
        }))),
        "DeedControllerDeleteDeedById": (id, options) => HttpClientRequest.del(`/deeds/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "DeedControllerUpdateDeedById": (id, options) => HttpClientRequest.patch(`/deeds/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Deed),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedDocumentType": (id, options) => HttpClientRequest.get(`/deeds/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedDocumentTypeRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedAccount": (id, options) => HttpClientRequest.get(`/deeds/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedAccountRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DeedControllerPatchDeedAccountRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedFile": (id, options) => HttpClientRequest.get(`/deeds/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedFileRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "DeedControllerPatchDeedFileRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedAssets": (id, options) => HttpClientRequest.get(`/deeds/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedAssetsRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerPostDeedAssetsRef": (id, options) => HttpClientRequest.post(`/deeds/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerDeleteDeedAssetsRef": (id, options) => HttpClientRequest.del(`/deeds/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerPatchDeedAssetsRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedSpaces": (id, options) => HttpClientRequest.get(`/deeds/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedSpacesRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerPostDeedSpacesRef": (id, options) => HttpClientRequest.post(`/deeds/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerDeleteDeedSpacesRef": (id, options) => HttpClientRequest.del(`/deeds/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerPatchDeedSpacesRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedProjects": (id, options) => HttpClientRequest.get(`/deeds/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerGetDeedProjectsRef": (id, options) => HttpClientRequest.get(`/deeds/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerPostDeedProjectsRef": (id, options) => HttpClientRequest.post(`/deeds/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerDeleteDeedProjectsRef": (id, options) => HttpClientRequest.del(`/deeds/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeedControllerPatchDeedProjectsRef": (id, options) => HttpClientRequest.patch(`/deeds/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageList": (options) => HttpClientRequest.get(`/declarationsPages`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeclarationsPageList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerCreateDeclarationsPage": (options) => HttpClientRequest.post(`/declarationsPages`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeclarationsPageControllerCreateDeclarationsPage201),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageById": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeclarationsPage),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerDeleteDeclarationsPageById": (id, options) => HttpClientRequest.del(`/declarationsPages/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerUpdateDeclarationsPageById": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DeclarationsPage),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageDocumentType": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageDocumentTypeRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageAccount": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageAccountRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerPatchDeclarationsPageAccountRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageFile": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageFileRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerPatchDeclarationsPageFileRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageAssets": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageAssetsRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerPostDeclarationsPageAssetsRef": (id, options) => HttpClientRequest.post(`/declarationsPages/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerDeleteDeclarationsPageAssetsRef": (id, options) => HttpClientRequest.del(`/declarationsPages/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerPatchDeclarationsPageAssetsRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageSpaces": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageSpacesRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerPostDeclarationsPageSpacesRef": (id, options) => HttpClientRequest.post(`/declarationsPages/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerDeleteDeclarationsPageSpacesRef": (id, options) => HttpClientRequest.del(`/declarationsPages/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerPatchDeclarationsPageSpacesRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageProjects": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerGetDeclarationsPageProjectsRef": (id, options) => HttpClientRequest.get(`/declarationsPages/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerPostDeclarationsPageProjectsRef": (id, options) => HttpClientRequest.post(`/declarationsPages/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerDeleteDeclarationsPageProjectsRef": (id, options) => HttpClientRequest.del(`/declarationsPages/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "DeclarationsPageControllerPatchDeclarationsPageProjectsRef": (id, options) => HttpClientRequest.patch(`/declarationsPages/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractList": (options) => HttpClientRequest.get(`/contracts`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ContractList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerCreateContract": (options) => HttpClientRequest.post(`/contracts`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ContractControllerCreateContract201),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractById": (id, options) => HttpClientRequest.get(`/contracts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Contract),
            orElse: unexpectedStatus
        }))),
        "ContractControllerDeleteContractById": (id, options) => HttpClientRequest.del(`/contracts/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ContractControllerUpdateContractById": (id, options) => HttpClientRequest.patch(`/contracts/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Contract),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractDocumentType": (id, options) => HttpClientRequest.get(`/contracts/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractDocumentTypeRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractAccount": (id, options) => HttpClientRequest.get(`/contracts/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractAccountRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ContractControllerPatchContractAccountRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractFile": (id, options) => HttpClientRequest.get(`/contracts/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractFileRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ContractControllerPatchContractFileRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractAssets": (id, options) => HttpClientRequest.get(`/contracts/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractAssetsRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerPostContractAssetsRef": (id, options) => HttpClientRequest.post(`/contracts/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerDeleteContractAssetsRef": (id, options) => HttpClientRequest.del(`/contracts/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerPatchContractAssetsRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractSpaces": (id, options) => HttpClientRequest.get(`/contracts/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractSpacesRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerPostContractSpacesRef": (id, options) => HttpClientRequest.post(`/contracts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerDeleteContractSpacesRef": (id, options) => HttpClientRequest.del(`/contracts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerPatchContractSpacesRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractProjects": (id, options) => HttpClientRequest.get(`/contracts/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerGetContractProjectsRef": (id, options) => HttpClientRequest.get(`/contracts/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerPostContractProjectsRef": (id, options) => HttpClientRequest.post(`/contracts/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerDeleteContractProjectsRef": (id, options) => HttpClientRequest.del(`/contracts/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ContractControllerPatchContractProjectsRef": (id, options) => HttpClientRequest.patch(`/contracts/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderList": (options) => HttpClientRequest.get(`/changeOrders`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerCreateChangeOrder": (options) => HttpClientRequest.post(`/changeOrders`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderControllerCreateChangeOrder201),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderById": (id, options) => HttpClientRequest.get(`/changeOrders/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrder),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerDeleteChangeOrderById": (id, options) => HttpClientRequest.del(`/changeOrders/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerUpdateChangeOrderById": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrder),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderDocumentType": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderDocumentTypeRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderAccount": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderAccountRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPatchChangeOrderAccountRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderFile": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderFileRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPatchChangeOrderFileRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderAssets": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderAssetsRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPostChangeOrderAssetsRef": (id, options) => HttpClientRequest.post(`/changeOrders/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerDeleteChangeOrderAssetsRef": (id, options) => HttpClientRequest.del(`/changeOrders/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPatchChangeOrderAssetsRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderSpaces": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderSpacesRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPostChangeOrderSpacesRef": (id, options) => HttpClientRequest.post(`/changeOrders/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerDeleteChangeOrderSpacesRef": (id, options) => HttpClientRequest.del(`/changeOrders/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPatchChangeOrderSpacesRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderProjects": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderProjectsRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPostChangeOrderProjectsRef": (id, options) => HttpClientRequest.post(`/changeOrders/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerDeleteChangeOrderProjectsRef": (id, options) => HttpClientRequest.del(`/changeOrders/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPatchChangeOrderProjectsRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderCurrency": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderCurrencyRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPatchChangeOrderCurrencyRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderStats": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/stats`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ItemizableFinancialDocumentStats),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderStatsRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/stats`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedItemizableFinancialDocumentStats),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderEstimate": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/estimate`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Estimate),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderEstimateRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/estimate`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimate),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerPatchChangeOrderEstimateRef": (id, options) => HttpClientRequest.patch(`/changeOrders/${id}/relationships/estimate`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimate),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderVendor": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProvider),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderVendorRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderService": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Service),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderServiceRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedService),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderLines": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/lines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderLineList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderLinesRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/lines`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderLineList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderLineSubjects": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/lineSubjects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySourceList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderControllerGetChangeOrderLineSubjectsRef": (id, options) => HttpClientRequest.get(`/changeOrders/${id}/relationships/lineSubjects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySourceList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintList": (options) => HttpClientRequest.get(`/blueprints`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BlueprintList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerCreateBlueprint": (options) => HttpClientRequest.post(`/blueprints`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BlueprintControllerCreateBlueprint201),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintById": (id, options) => HttpClientRequest.get(`/blueprints/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Blueprint),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerDeleteBlueprintById": (id, options) => HttpClientRequest.del(`/blueprints/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerUpdateBlueprintById": (id, options) => HttpClientRequest.patch(`/blueprints/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Blueprint),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintDocumentType": (id, options) => HttpClientRequest.get(`/blueprints/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintDocumentTypeRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintAccount": (id, options) => HttpClientRequest.get(`/blueprints/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintAccountRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerPatchBlueprintAccountRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintFile": (id, options) => HttpClientRequest.get(`/blueprints/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintFileRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerPatchBlueprintFileRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintAssets": (id, options) => HttpClientRequest.get(`/blueprints/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintAssetsRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerPostBlueprintAssetsRef": (id, options) => HttpClientRequest.post(`/blueprints/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerDeleteBlueprintAssetsRef": (id, options) => HttpClientRequest.del(`/blueprints/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerPatchBlueprintAssetsRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintSpaces": (id, options) => HttpClientRequest.get(`/blueprints/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintSpacesRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerPostBlueprintSpacesRef": (id, options) => HttpClientRequest.post(`/blueprints/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerDeleteBlueprintSpacesRef": (id, options) => HttpClientRequest.del(`/blueprints/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerPatchBlueprintSpacesRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintProjects": (id, options) => HttpClientRequest.get(`/blueprints/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerGetBlueprintProjectsRef": (id, options) => HttpClientRequest.get(`/blueprints/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerPostBlueprintProjectsRef": (id, options) => HttpClientRequest.post(`/blueprints/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerDeleteBlueprintProjectsRef": (id, options) => HttpClientRequest.del(`/blueprints/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "BlueprintControllerPatchBlueprintProjectsRef": (id, options) => HttpClientRequest.patch(`/blueprints/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalList": (options) => HttpClientRequest.get(`/assetAppraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAppraisalList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerCreateAssetAppraisal": (options) => HttpClientRequest.post(`/assetAppraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAppraisalControllerCreateAssetAppraisal201),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalById": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerDeleteAssetAppraisalById": (id, options) => HttpClientRequest.del(`/assetAppraisals/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerUpdateAssetAppraisalById": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetAppraisal),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalDocumentType": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalDocumentTypeRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalAccount": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalAccountRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPatchAssetAppraisalAccountRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalFile": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalFileRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPatchAssetAppraisalFileRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalAssets": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalAssetsRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPostAssetAppraisalAssetsRef": (id, options) => HttpClientRequest.post(`/assetAppraisals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerDeleteAssetAppraisalAssetsRef": (id, options) => HttpClientRequest.del(`/assetAppraisals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPatchAssetAppraisalAssetsRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalSpaces": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalSpacesRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPostAssetAppraisalSpacesRef": (id, options) => HttpClientRequest.post(`/assetAppraisals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerDeleteAssetAppraisalSpacesRef": (id, options) => HttpClientRequest.del(`/assetAppraisals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPatchAssetAppraisalSpacesRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalProjects": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalProjectsRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPostAssetAppraisalProjectsRef": (id, options) => HttpClientRequest.post(`/assetAppraisals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerDeleteAssetAppraisalProjectsRef": (id, options) => HttpClientRequest.del(`/assetAppraisals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPatchAssetAppraisalProjectsRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalCurrency": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalCurrencyRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPatchAssetAppraisalCurrencyRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalVendor": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccountProvider),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalVendorRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPatchAssetAppraisalVendorRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalAsset": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/asset`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Asset),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerGetAssetAppraisalAssetRef": (id, options) => HttpClientRequest.get(`/assetAppraisals/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "AssetAppraisalControllerPatchAssetAppraisalAssetRef": (id, options) => HttpClientRequest.patch(`/assetAppraisals/${id}/relationships/asset`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAsset),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalList": (options) => HttpClientRequest.get(`/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AppraisalList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerCreateAppraisal": (options) => HttpClientRequest.post(`/appraisals`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AppraisalControllerCreateAppraisal201),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalById": (id, options) => HttpClientRequest.get(`/appraisals/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Appraisal),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerDeleteAppraisalById": (id, options) => HttpClientRequest.del(`/appraisals/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerUpdateAppraisalById": (id, options) => HttpClientRequest.patch(`/appraisals/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Appraisal),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalDocumentType": (id, options) => HttpClientRequest.get(`/appraisals/${id}/documentType`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(DocumentType),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalDocumentTypeRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/documentType`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedDocumentType),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalAccount": (id, options) => HttpClientRequest.get(`/appraisals/${id}/account`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Account),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalAccountRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPatchAppraisalAccountRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/account`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccount),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalFile": (id, options) => HttpClientRequest.get(`/appraisals/${id}/file`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableFile),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalFileRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPatchAppraisalFileRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/file`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedFile),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalAssets": (id, options) => HttpClientRequest.get(`/appraisals/${id}/assets`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AssetList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalAssetsRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPostAppraisalAssetsRef": (id, options) => HttpClientRequest.post(`/appraisals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerDeleteAppraisalAssetsRef": (id, options) => HttpClientRequest.del(`/appraisals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPatchAppraisalAssetsRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/assets`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAssetList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalSpaces": (id, options) => HttpClientRequest.get(`/appraisals/${id}/spaces`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(SpaceList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalSpacesRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPostAppraisalSpacesRef": (id, options) => HttpClientRequest.post(`/appraisals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerDeleteAppraisalSpacesRef": (id, options) => HttpClientRequest.del(`/appraisals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPatchAppraisalSpacesRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/spaces`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedSpaceList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalProjects": (id, options) => HttpClientRequest.get(`/appraisals/${id}/projects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ProjectList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalProjectsRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPostAppraisalProjectsRef": (id, options) => HttpClientRequest.post(`/appraisals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerDeleteAppraisalProjectsRef": (id, options) => HttpClientRequest.del(`/appraisals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPatchAppraisalProjectsRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/projects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedProjectList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalCurrency": (id, options) => HttpClientRequest.get(`/appraisals/${id}/currency`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Currency),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalCurrencyRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPatchAppraisalCurrencyRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/currency`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedCurrency),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalVendor": (id, options) => HttpClientRequest.get(`/appraisals/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccountProvider),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalVendorRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerPatchAppraisalVendorRef": (id, options) => HttpClientRequest.patch(`/appraisals/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalLines": (id, options) => HttpClientRequest.get(`/appraisals/${id}/lines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AppraisalLineList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalLinesRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/lines`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAppraisalLineList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalSubjects": (id, options) => HttpClientRequest.get(`/appraisals/${id}/subjects`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(BaseEntityList),
            orElse: unexpectedStatus
        }))),
        "AppraisalControllerGetAppraisalSubjectsRef": (id, options) => HttpClientRequest.get(`/appraisals/${id}/relationships/subjects`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedBaseEntityList),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLineList": (options) => HttpClientRequest.get(`/paymentLines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentLineList),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerCreatePaymentLine": (options) => HttpClientRequest.post(`/paymentLines`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentLineControllerCreatePaymentLine201),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLineById": (id, options) => HttpClientRequest.get(`/paymentLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentLine),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerDeletePaymentLineById": (id, options) => HttpClientRequest.del(`/paymentLines/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerUpdatePaymentLineById": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(PaymentLine),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLinePayment": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/payment`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullablePayment),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLinePaymentRef": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/relationships/payment`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPayment),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerPatchPaymentLinePaymentRef": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}/relationships/payment`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedPayment),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLineSubject": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/subject`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLineSubjectRef": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerPatchPaymentLineSubjectRef": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLineService": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableService),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLineServiceRef": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerPatchPaymentLineServiceRef": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLineVendor": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccountProvider),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerGetPaymentLineVendorRef": (id, options) => HttpClientRequest.get(`/paymentLines/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "PaymentLineControllerPatchPaymentLineVendorRef": (id, options) => HttpClientRequest.patch(`/paymentLines/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineList": (options) => HttpClientRequest.get(`/invoiceLines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceLineList),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerCreateInvoiceLine": (options) => HttpClientRequest.post(`/invoiceLines`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceLineControllerCreateInvoiceLine201),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineById": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceLine),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerDeleteInvoiceLineById": (id, options) => HttpClientRequest.del(`/invoiceLines/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerUpdateInvoiceLineById": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(InvoiceLine),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineInvoice": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/invoice`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableInvoice),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineInvoiceRef": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/relationships/invoice`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedInvoice),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerPatchInvoiceLineInvoiceRef": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}/relationships/invoice`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedInvoice),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineSubject": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/subject`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineSubjectRef": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerPatchInvoiceLineSubjectRef": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineService": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableService),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineServiceRef": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerPatchInvoiceLineServiceRef": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineVendor": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccountProvider),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerGetInvoiceLineVendorRef": (id, options) => HttpClientRequest.get(`/invoiceLines/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "InvoiceLineControllerPatchInvoiceLineVendorRef": (id, options) => HttpClientRequest.patch(`/invoiceLines/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineList": (options) => HttpClientRequest.get(`/estimateLines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateLineList),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerCreateEstimateLine": (options) => HttpClientRequest.post(`/estimateLines`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateLineControllerCreateEstimateLine201),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineById": (id, options) => HttpClientRequest.get(`/estimateLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateLine),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerDeleteEstimateLineById": (id, options) => HttpClientRequest.del(`/estimateLines/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerUpdateEstimateLineById": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateLine),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineEstimate": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/estimate`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableEstimate),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineEstimateRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/estimate`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedEstimate),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerPatchEstimateLineEstimateRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/estimate`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedEstimate),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineSubject": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/subject`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineSubjectRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerPatchEstimateLineSubjectRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineChangeOrders": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/changeOrders`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderLineList),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineChangeOrdersRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderLineList),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerPostEstimateLineChangeOrdersRef": (id, options) => HttpClientRequest.post(`/estimateLines/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderLineList),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerDeleteEstimateLineChangeOrdersRef": (id, options) => HttpClientRequest.del(`/estimateLines/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderLineList),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerPatchEstimateLineChangeOrdersRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/changeOrders`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrderLineList),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineService": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableService),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineServiceRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerPatchEstimateLineServiceRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedService),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineVendor": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableAccountProvider),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerGetEstimateLineVendorRef": (id, options) => HttpClientRequest.get(`/estimateLines/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "EstimateLineControllerPatchEstimateLineVendorRef": (id, options) => HttpClientRequest.patch(`/estimateLines/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(NullableReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineList": (options) => HttpClientRequest.get(`/changeOrderLines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderLineList),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerCreateChangeOrderLine": (options) => HttpClientRequest.post(`/changeOrderLines`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderLineControllerCreateChangeOrderLine201),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineById": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderLine),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerDeleteChangeOrderLineById": (id, options) => HttpClientRequest.del(`/changeOrderLines/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerUpdateChangeOrderLineById": (id, options) => HttpClientRequest.patch(`/changeOrderLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrderLine),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineEstimateLine": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/estimateLine`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EstimateLine),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineEstimateLineRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/estimateLine`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimateLine),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerPatchChangeOrderLineEstimateLineRef": (id, options) => HttpClientRequest.patch(`/changeOrderLines/${id}/relationships/estimateLine`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEstimateLine),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineChangeOrder": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/changeOrder`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ChangeOrder),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineChangeOrderRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/changeOrder`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrder),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerPatchChangeOrderLineChangeOrderRef": (id, options) => HttpClientRequest.patch(`/changeOrderLines/${id}/relationships/changeOrder`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedChangeOrder),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineVendor": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/vendor`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AccountProvider),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineVendorRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/vendor`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAccountProvider),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineService": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/service`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Service),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineServiceRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/service`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedService),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineSubject": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/subject`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "ChangeOrderLineControllerGetChangeOrderLineSubjectRef": (id, options) => HttpClientRequest.get(`/changeOrderLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerGetAppraisalLineList": (options) => HttpClientRequest.get(`/appraisalLines`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"], "filter": options?.["filter"], "sort": options?.["sort"], "page[offset]": options?.["page[offset]"], "page[limit]": options?.["page[limit]"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AppraisalLineList),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerCreateAppraisalLine": (options) => HttpClientRequest.post(`/appraisalLines`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AppraisalLineControllerCreateAppraisalLine201),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerGetAppraisalLineById": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AppraisalLine),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerDeleteAppraisalLineById": (id, options) => HttpClientRequest.del(`/appraisalLines/${id}`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerUpdateAppraisalLineById": (id, options) => HttpClientRequest.patch(`/appraisalLines/${id}`).pipe(HttpClientRequest.setUrlParams({ "include": options.params?.["include"], "typeDepthLimit": options.params?.["typeDepthLimit"], "fields": options.params?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(AppraisalLine),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerGetAppraisalLineAppraisal": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}/appraisal`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(Appraisal),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerGetAppraisalLineAppraisalRef": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}/relationships/appraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAppraisal),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerPatchAppraisalLineAppraisalRef": (id, options) => HttpClientRequest.patch(`/appraisalLines/${id}/relationships/appraisal`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedAppraisal),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerGetAppraisalLineSubject": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}/subject`).pipe(HttpClientRequest.setUrlParams({ "include": options?.["include"], "typeDepthLimit": options?.["typeDepthLimit"], "fields": options?.["fields"] }), HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(EntrySource),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerGetAppraisalLineSubjectRef": (id, options) => HttpClientRequest.get(`/appraisalLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options?.["X-Account-Id"] ?? undefined }), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "AppraisalLineControllerPatchAppraisalLineSubjectRef": (id, options) => HttpClientRequest.patch(`/appraisalLines/${id}/relationships/subject`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(ReferencedEntrySource),
            orElse: unexpectedStatus
        }))),
        "PermissionsControllerCheckUpsertPermissions": (options) => HttpClientRequest.post(`/permissions/upsert`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "PermissionsControllerCheckDeletePermissions": (options) => HttpClientRequest.post(`/permissions/delete`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "204": () => Effect.void,
            orElse: unexpectedStatus
        }))),
        "UploadsControllerStartUpload": (options) => HttpClientRequest.post(`/uploads`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(TransloaditAssemblyOptionsResponseDto),
            orElse: unexpectedStatus
        }))),
        "UploadsControllerInitializeFileIds": (options) => HttpClientRequest.post(`/uploads/files`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(UploadFilesResponseDto),
            orElse: unexpectedStatus
        }))),
        "CdnControllerSetCdnCookies": (options) => HttpClientRequest.post(`/cdn/access`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FilesCdnAccessResponseDto),
            orElse: unexpectedStatus
        }))),
        "CdnControllerGetSignedUrls": (options) => HttpClientRequest.post(`/cdn/urls`).pipe(HttpClientRequest.setHeaders({ "X-Account-Id": options.params?.["X-Account-Id"] ?? undefined }), HttpClientRequest.bodyUnsafeJson(options.payload), withResponse(HttpClientResponse.matchStatus({
            "2xx": decodeSuccess(FilesCdnSignedUrlsResponseDto),
            orElse: unexpectedStatus
        })))
    };
};
class ClientErrorImpl extends Data.Error {
}
export const ClientError = (tag, cause, response) => new ClientErrorImpl({
    _tag: tag,
    cause,
    response,
    request: response.request,
});
